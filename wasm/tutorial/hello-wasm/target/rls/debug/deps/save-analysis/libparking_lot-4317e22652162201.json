{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4","program":"/usr/local/rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","parking_lot","/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"owning_ref\"","-C","metadata=4317e22652162201","-C","extra-filename=-4317e22652162201","--out-dir","/workspaces/rust-playground/wasm/tutorial/hello-wasm/target/rls/debug/deps","-L","dependency=/workspaces/rust-playground/wasm/tutorial/hello-wasm/target/rls/debug/deps","--extern","lock_api=/workspaces/rust-playground/wasm/tutorial/hello-wasm/target/rls/debug/deps/liblock_api-99e1408191295748.rmeta","--extern","parking_lot_core=/workspaces/rust-playground/wasm/tutorial/hello-wasm/target/rls/debug/deps/libparking_lot_core-19d45ec15f4ce047.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/usr/local/rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/workspaces/rust-playground/wasm/tutorial/hello-wasm/target/rls/debug/deps/libparking_lot-4317e22652162201.rmeta"},"prelude":{"crate_id":{"name":"parking_lot","disambiguator":[11381686548515238847,0]},"crate_root":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src","external_crates":[{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12872056181829019095,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[8373705112501149482,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16909867051943430517,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11260902004430380252,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[10608756751411298727,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4369074810188542311,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12333111663820923515,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12748886438148098175,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6627577059144635863,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15896330838049133250,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[2582212836281766037,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[4723863376138925013,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[2482912266844122781,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16993901708144586312,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[15622067442351408235,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[12927959315880918009,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[1763799641200411356,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[2454364557606196642,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[10980657607002924382,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":20,"id":{"name":"lock_api","disambiguator":[13066671693769442501,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":21,"id":{"name":"scopeguard","disambiguator":[12282018462781743967,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":22,"id":{"name":"owning_ref","disambiguator":[16203619859139640513,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":23,"id":{"name":"stable_deref_trait","disambiguator":[3990214667989801576,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":24,"id":{"name":"parking_lot_core","disambiguator":[5291589480086352718,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":25,"id":{"name":"rand","disambiguator":[15599462762932638983,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":26,"id":{"name":"rand_core","disambiguator":[7704623116252447415,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":27,"id":{"name":"rand_core","disambiguator":[17194361922767804827,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":28,"id":{"name":"libc","disambiguator":[2000753584118294429,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":29,"id":{"name":"smallvec","disambiguator":[4169847879180515156,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","num":30,"id":{"name":"maybe_uninit","disambiguator":[7906545196224725377,0]}}],"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":333,"byte_end":1469,"line_start":8,"line_end":44,"column_start":1,"column_end":3}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":64},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":1041,"byte_end":1048,"line_start":35,"line_end":35,"column_start":19,"column_end":26},"alias_span":null,"name":"Condvar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":595},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":1050,"byte_end":1067,"line_start":35,"line_end":35,"column_start":28,"column_end":45},"alias_span":null,"name":"WaitTimeoutResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":114},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":1086,"byte_end":1102,"line_start":36,"line_end":36,"column_start":17,"column_end":33},"alias_span":null,"name":"MappedMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":109},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":1104,"byte_end":1109,"line_start":36,"line_end":36,"column_start":35,"column_end":40},"alias_span":null,"name":"Mutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":111},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":1111,"byte_end":1121,"line_start":36,"line_end":36,"column_start":42,"column_end":52},"alias_span":null,"name":"MutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":161},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":1139,"byte_end":1143,"line_start":37,"line_end":37,"column_start":16,"column_end":20},"alias_span":null,"name":"Once","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":610},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":1145,"byte_end":1154,"line_start":37,"line_end":37,"column_start":22,"column_end":31},"alias_span":null,"name":"OnceState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":164},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":1156,"byte_end":1165,"line_start":37,"line_end":37,"column_start":33,"column_end":42},"alias_span":null,"name":"ONCE_INIT","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":246},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":1187,"byte_end":1195,"line_start":38,"line_end":38,"column_start":20,"column_end":28},"alias_span":null,"name":"RawMutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":373},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":1217,"byte_end":1226,"line_start":39,"line_end":39,"column_start":21,"column_end":30},"alias_span":null,"name":"RawRwLock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":486},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":1246,"byte_end":1271,"line_start":40,"line_end":40,"column_start":19,"column_end":44},"alias_span":null,"name":"MappedReentrantMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":475},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":1273,"byte_end":1284,"line_start":40,"line_end":40,"column_start":46,"column_end":57},"alias_span":null,"name":"RawThreadId","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":476},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":1273,"byte_end":1284,"line_start":40,"line_end":40,"column_start":46,"column_end":57},"alias_span":null,"name":"RawThreadId","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":481},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":1286,"byte_end":1300,"line_start":40,"line_end":40,"column_start":59,"column_end":73},"alias_span":null,"name":"ReentrantMutex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":483},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":1302,"byte_end":1321,"line_start":40,"line_end":40,"column_start":75,"column_end":94},"alias_span":null,"name":"ReentrantMutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":504},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":1346,"byte_end":1367,"line_start":42,"line_end":42,"column_start":5,"column_end":26},"alias_span":null,"name":"MappedRwLockReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":507},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":1369,"byte_end":1391,"line_start":42,"line_end":42,"column_start":28,"column_end":50},"alias_span":null,"name":"MappedRwLockWriteGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":496},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":1393,"byte_end":1399,"line_start":42,"line_end":42,"column_start":52,"column_end":58},"alias_span":null,"name":"RwLock","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":498},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":1401,"byte_end":1416,"line_start":42,"line_end":42,"column_start":60,"column_end":75},"alias_span":null,"name":"RwLockReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":510},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":1422,"byte_end":1447,"line_start":43,"line_end":43,"column_start":5,"column_end":30},"alias_span":null,"name":"RwLockUpgradableReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":501},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":1449,"byte_end":1465,"line_start":43,"line_end":43,"column_start":32,"column_end":48},"alias_span":null,"name":"RwLockWriteGuard","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":333,"byte_end":1469,"line_start":8,"line_end":44,"column_start":1,"column_end":3},"name":"","qualname":"::","value":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":89},{"krate":0,"index":102},{"krate":0,"index":117},{"krate":0,"index":189},{"krate":0,"index":272},{"krate":0,"index":464},{"krate":0,"index":489},{"krate":0,"index":513},{"krate":0,"index":522},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":534},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":544},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":551},{"krate":0,"index":554},{"krate":0,"index":557},{"krate":0,"index":560},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":570},{"krate":0,"index":573},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":580},{"krate":0,"index":583},{"krate":0,"index":586},{"krate":0,"index":589},{"krate":0,"index":592}],"decl_id":null,"docs":" This library provides implementations of `Mutex`, `RwLock`, `Condvar` and\n `Once` that are smaller, faster and more flexible than those in the Rust\n standard library. It also provides a `ReentrantMutex` type.\n","sig":null,"attributes":[{"value":"/ This library provides implementations of `Mutex`, `RwLock`, `Condvar` and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":333,"byte_end":410,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/ `Once` that are smaller, faster and more flexible than those in the Rust","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":411,"byte_end":487,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ standard library. It also provides a `ReentrantMutex` type.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":488,"byte_end":551,"line_start":10,"line_end":10,"column_start":1,"column_end":64}},{"value":"warn(missing_docs)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/lib.rs","byte_start":553,"byte_end":575,"line_start":12,"line_end":12,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":595},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":2291,"byte_end":2308,"line_start":20,"line_end":20,"column_start":12,"column_end":29},"name":"WaitTimeoutResult","qualname":"::condvar::WaitTimeoutResult","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type indicating whether a timed wait on a condition variable returned\n due to a time out or not.\n","sig":null,"attributes":[{"value":"/ A type indicating whether a timed wait on a condition variable returned","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":2129,"byte_end":2204,"line_start":17,"line_end":17,"column_start":1,"column_end":76}},{"value":"/ due to a time out or not.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":2205,"byte_end":2234,"line_start":18,"line_end":18,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":2429,"byte_end":2438,"line_start":25,"line_end":25,"column_start":12,"column_end":21},"name":"timed_out","qualname":"<WaitTimeoutResult>::timed_out","value":"pub fn timed_out(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the wait was known to have timed out.\n","sig":null,"attributes":[{"value":"/ Returns whether the wait was known to have timed out.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":2346,"byte_end":2403,"line_start":23,"line_end":23,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":2408,"byte_end":2417,"line_start":24,"line_end":24,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":64},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4589,"byte_end":4596,"line_start":83,"line_end":83,"column_start":12,"column_end":19},"name":"Condvar","qualname":"::condvar::Condvar","value":"Condvar {  }","parent":null,"children":[{"krate":0,"index":65}],"decl_id":null,"docs":" A Condition Variable","sig":null,"attributes":[{"value":"/ A Condition Variable","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":2480,"byte_end":2504,"line_start":30,"line_end":30,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":2505,"byte_end":2508,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Condition variables represent the ability to block a thread such that it","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":2509,"byte_end":2585,"line_start":32,"line_end":32,"column_start":1,"column_end":77}},{"value":"/ consumes no CPU time while waiting for an event to occur. Condition","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":2586,"byte_end":2657,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/ variables are typically associated with a boolean predicate (a condition)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":2658,"byte_end":2735,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ and a mutex. The predicate is always verified inside of the mutex before","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":2736,"byte_end":2812,"line_start":35,"line_end":35,"column_start":1,"column_end":77}},{"value":"/ determining that thread must block.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":2813,"byte_end":2852,"line_start":36,"line_end":36,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":2853,"byte_end":2856,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Note that this module places one additional restriction over the system","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":2857,"byte_end":2932,"line_start":38,"line_end":38,"column_start":1,"column_end":76}},{"value":"/ condition variables: each condvar can be used with only one mutex at a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":2933,"byte_end":3007,"line_start":39,"line_end":39,"column_start":1,"column_end":75}},{"value":"/ time. Any attempt to use multiple mutexes on the same condition variable","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":3008,"byte_end":3084,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/ simultaneously will result in a runtime panic. However it is possible to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":3085,"byte_end":3161,"line_start":41,"line_end":41,"column_start":1,"column_end":77}},{"value":"/ switch to a different mutex if there are no threads currently waiting on","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":3162,"byte_end":3238,"line_start":42,"line_end":42,"column_start":1,"column_end":77}},{"value":"/ the condition variable.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":3239,"byte_end":3266,"line_start":43,"line_end":43,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":3267,"byte_end":3270,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `Condvar`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":3271,"byte_end":3324,"line_start":45,"line_end":45,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":3325,"byte_end":3328,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ - No spurious wakeups: A wait will only return a non-timeout result if it","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":3329,"byte_end":3406,"line_start":47,"line_end":47,"column_start":1,"column_end":78}},{"value":"/   was woken up by `notify_one` or `notify_all`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":3407,"byte_end":3458,"line_start":48,"line_end":48,"column_start":1,"column_end":52}},{"value":"/ - `Condvar::notify_all` will only wake up a single thread, the rest are","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":3459,"byte_end":3534,"line_start":49,"line_end":49,"column_start":1,"column_end":76}},{"value":"/   requeued to wait for the `Mutex` to be unlocked by the thread that was","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":3535,"byte_end":3611,"line_start":50,"line_end":50,"column_start":1,"column_end":77}},{"value":"/   woken up.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":3612,"byte_end":3627,"line_start":51,"line_end":51,"column_start":1,"column_end":16}},{"value":"/ - Only requires 1 word of space, whereas the standard library boxes the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":3628,"byte_end":3703,"line_start":52,"line_end":52,"column_start":1,"column_end":76}},{"value":"/   `Condvar` due to platform limitations.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":3704,"byte_end":3748,"line_start":53,"line_end":53,"column_start":1,"column_end":45}},{"value":"/ - Can be statically constructed (requires the `const_fn` nightly feature).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":3749,"byte_end":3827,"line_start":54,"line_end":54,"column_start":1,"column_end":79}},{"value":"/ - Does not require any drop glue when dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":3828,"byte_end":3878,"line_start":55,"line_end":55,"column_start":1,"column_end":51}},{"value":"/ - Inline fast path for the uncontended case.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":3879,"byte_end":3927,"line_start":56,"line_end":56,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":3928,"byte_end":3931,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":3932,"byte_end":3946,"line_start":58,"line_end":58,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":3947,"byte_end":3950,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":3951,"byte_end":3958,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::{Mutex, Condvar};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":3959,"byte_end":3997,"line_start":61,"line_end":61,"column_start":1,"column_end":39}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":3998,"byte_end":4021,"line_start":62,"line_end":62,"column_start":1,"column_end":24}},{"value":"/ use std::thread;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4022,"byte_end":4042,"line_start":63,"line_end":63,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4043,"byte_end":4046,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ let pair = Arc::new((Mutex::new(false), Condvar::new()));","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4047,"byte_end":4108,"line_start":65,"line_end":65,"column_start":1,"column_end":62}},{"value":"/ let pair2 = pair.clone();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4109,"byte_end":4138,"line_start":66,"line_end":66,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4139,"byte_end":4142,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ // Inside of our lock, spawn a new thread, and then wait for it to start","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4143,"byte_end":4219,"line_start":68,"line_end":68,"column_start":1,"column_end":77}},{"value":"/ thread::spawn(move|| {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4220,"byte_end":4246,"line_start":69,"line_end":69,"column_start":1,"column_end":27}},{"value":"/     let &(ref lock, ref cvar) = &*pair2;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4247,"byte_end":4291,"line_start":70,"line_end":70,"column_start":1,"column_end":45}},{"value":"/     let mut started = lock.lock();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4292,"byte_end":4330,"line_start":71,"line_end":71,"column_start":1,"column_end":39}},{"value":"/     *started = true;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4331,"byte_end":4355,"line_start":72,"line_end":72,"column_start":1,"column_end":25}},{"value":"/     cvar.notify_one();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4356,"byte_end":4382,"line_start":73,"line_end":73,"column_start":1,"column_end":27}},{"value":"/ });","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4383,"byte_end":4390,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4391,"byte_end":4394,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ // wait for the thread to start up","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4395,"byte_end":4433,"line_start":76,"line_end":76,"column_start":1,"column_end":39}},{"value":"/ let &(ref lock, ref cvar) = &*pair;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4434,"byte_end":4473,"line_start":77,"line_end":77,"column_start":1,"column_end":40}},{"value":"/ let mut started = lock.lock();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4474,"byte_end":4508,"line_start":78,"line_end":78,"column_start":1,"column_end":35}},{"value":"/ while !*started {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4509,"byte_end":4530,"line_start":79,"line_end":79,"column_start":1,"column_end":22}},{"value":"/     cvar.wait(&mut started);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4531,"byte_end":4563,"line_start":80,"line_end":80,"column_start":1,"column_end":33}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4564,"byte_end":4569,"line_start":81,"line_end":81,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4570,"byte_end":4577,"line_start":82,"line_end":82,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":5068,"byte_end":5071,"line_start":102,"line_end":102,"column_start":12,"column_end":15},"name":"new","qualname":"<Condvar>::new","value":"pub fn new() -> Condvar","parent":null,"children":[],"decl_id":null,"docs":" Creates a new condition variable which is ready to be waited on and\n notified.\n","sig":null,"attributes":[{"value":"/ Creates a new condition variable which is ready to be waited on and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4916,"byte_end":4987,"line_start":98,"line_end":98,"column_start":5,"column_end":76}},{"value":"/ notified.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4992,"byte_end":5005,"line_start":99,"line_end":99,"column_start":5,"column_end":18}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":5010,"byte_end":5042,"line_start":100,"line_end":100,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":5047,"byte_end":5056,"line_start":101,"line_end":101,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":5520,"byte_end":5530,"line_start":116,"line_end":116,"column_start":12,"column_end":22},"name":"notify_one","qualname":"<Condvar>::notify_one","value":"pub fn notify_one(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Wakes up one blocked thread on this condvar.","sig":null,"attributes":[{"value":"/ Wakes up one blocked thread on this condvar.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":5178,"byte_end":5226,"line_start":108,"line_end":108,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":5231,"byte_end":5234,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ If there is a blocked thread on this condition variable, then it will","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":5239,"byte_end":5312,"line_start":110,"line_end":110,"column_start":5,"column_end":78}},{"value":"/ be woken up from its call to `wait` or `wait_timeout`. Calls to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":5317,"byte_end":5384,"line_start":111,"line_end":111,"column_start":5,"column_end":72}},{"value":"/ `notify_one` are not buffered in any way.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":5389,"byte_end":5434,"line_start":112,"line_end":112,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":5439,"byte_end":5442,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ To wake up all threads, see `notify_all()`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":5447,"byte_end":5494,"line_start":114,"line_end":114,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":5499,"byte_end":5508,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":6587,"byte_end":6597,"line_start":150,"line_end":150,"column_start":12,"column_end":22},"name":"notify_all","qualname":"<Condvar>::notify_all","value":"pub fn notify_all(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Wakes up all blocked threads on this condvar.","sig":null,"attributes":[{"value":"/ Wakes up all blocked threads on this condvar.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":6276,"byte_end":6325,"line_start":142,"line_end":142,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":6330,"byte_end":6333,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ This method will ensure that any current waiters on the condition","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":6338,"byte_end":6407,"line_start":144,"line_end":144,"column_start":5,"column_end":74}},{"value":"/ variable are awoken. Calls to `notify_all()` are not buffered in any","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":6412,"byte_end":6484,"line_start":145,"line_end":145,"column_start":5,"column_end":77}},{"value":"/ way.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":6489,"byte_end":6497,"line_start":146,"line_end":146,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":6502,"byte_end":6505,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ To wake up only one thread, see `notify_one()`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":6510,"byte_end":6561,"line_start":148,"line_end":148,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":6566,"byte_end":6575,"line_start":149,"line_end":149,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":9541,"byte_end":9545,"line_start":219,"line_end":219,"column_start":12,"column_end":16},"name":"wait","qualname":"<Condvar>::wait","value":"pub fn wait<T: ?Sized>(&Self, &mut MutexGuard<, T>)","parent":null,"children":[],"decl_id":null,"docs":" Blocks the current thread until this condition variable receives a\n notification.","sig":null,"attributes":[{"value":"/ Blocks the current thread until this condition variable receives a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":8892,"byte_end":8962,"line_start":205,"line_end":205,"column_start":5,"column_end":75}},{"value":"/ notification.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":8967,"byte_end":8984,"line_start":206,"line_end":206,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":8989,"byte_end":8992,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ This function will atomically unlock the mutex specified (represented by","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":8997,"byte_end":9073,"line_start":208,"line_end":208,"column_start":5,"column_end":81}},{"value":"/ `mutex_guard`) and block the current thread. This means that any calls","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":9078,"byte_end":9152,"line_start":209,"line_end":209,"column_start":5,"column_end":79}},{"value":"/ to `notify_*()` which happen logically after the mutex is unlocked are","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":9157,"byte_end":9231,"line_start":210,"line_end":210,"column_start":5,"column_end":79}},{"value":"/ candidates to wake this thread up. When this function call returns, the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":9236,"byte_end":9311,"line_start":211,"line_end":211,"column_start":5,"column_end":80}},{"value":"/ lock specified will have been re-acquired.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":9316,"byte_end":9362,"line_start":212,"line_end":212,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":9367,"byte_end":9370,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":9375,"byte_end":9387,"line_start":214,"line_end":214,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":9392,"byte_end":9395,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ This function will panic if another thread is waiting on the `Condvar`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":9400,"byte_end":9474,"line_start":216,"line_end":216,"column_start":5,"column_end":79}},{"value":"/ with a different `Mutex` object.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":9479,"byte_end":9515,"line_start":217,"line_end":217,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":9520,"byte_end":9529,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":10816,"byte_end":10826,"line_start":247,"line_end":247,"column_start":12,"column_end":22},"name":"wait_until","qualname":"<Condvar>::wait_until","value":"pub fn wait_until<T: ?Sized>(&Self, &mut MutexGuard<, T>, Instant)\n-> WaitTimeoutResult","parent":null,"children":[],"decl_id":null,"docs":" Waits on this condition variable for a notification, timing out after\n the specified time instant.","sig":null,"attributes":[{"value":"/ Waits on this condition variable for a notification, timing out after","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":9699,"byte_end":9772,"line_start":223,"line_end":223,"column_start":5,"column_end":78}},{"value":"/ the specified time instant.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":9777,"byte_end":9808,"line_start":224,"line_end":224,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":9813,"byte_end":9816,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ The semantics of this function are equivalent to `wait()` except that","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":9821,"byte_end":9894,"line_start":226,"line_end":226,"column_start":5,"column_end":78}},{"value":"/ the thread will be blocked roughly until `timeout` is reached. This","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":9899,"byte_end":9970,"line_start":227,"line_end":227,"column_start":5,"column_end":76}},{"value":"/ method should not be used for precise timing due to anomalies such as","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":9975,"byte_end":10048,"line_start":228,"line_end":228,"column_start":5,"column_end":78}},{"value":"/ preemption or platform differences that may not cause the maximum","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":10053,"byte_end":10122,"line_start":229,"line_end":229,"column_start":5,"column_end":74}},{"value":"/ amount of time waited to be precisely `timeout`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":10127,"byte_end":10179,"line_start":230,"line_end":230,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":10184,"byte_end":10187,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ Note that the best effort is made to ensure that the time waited is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":10192,"byte_end":10263,"line_start":232,"line_end":232,"column_start":5,"column_end":76}},{"value":"/ measured with a monotonic clock, and not affected by the changes made to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":10268,"byte_end":10344,"line_start":233,"line_end":233,"column_start":5,"column_end":81}},{"value":"/ the system time.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":10349,"byte_end":10369,"line_start":234,"line_end":234,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":10374,"byte_end":10377,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ The returned `WaitTimeoutResult` value indicates if the timeout is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":10382,"byte_end":10452,"line_start":236,"line_end":236,"column_start":5,"column_end":75}},{"value":"/ known to have elapsed.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":10457,"byte_end":10483,"line_start":237,"line_end":237,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":10488,"byte_end":10491,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ Like `wait`, the lock specified will be re-acquired when this function","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":10496,"byte_end":10570,"line_start":239,"line_end":239,"column_start":5,"column_end":79}},{"value":"/ returns, regardless of whether the timeout elapsed or not.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":10575,"byte_end":10637,"line_start":240,"line_end":240,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":10642,"byte_end":10645,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":10650,"byte_end":10662,"line_start":242,"line_end":242,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":10667,"byte_end":10670,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ This function will panic if another thread is waiting on the `Condvar`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":10675,"byte_end":10749,"line_start":244,"line_end":244,"column_start":5,"column_end":79}},{"value":"/ with a different `Mutex` object.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":10754,"byte_end":10790,"line_start":245,"line_end":245,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":10795,"byte_end":10804,"line_start":246,"line_end":246,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":14957,"byte_end":14965,"line_start":349,"line_end":349,"column_start":12,"column_end":20},"name":"wait_for","qualname":"<Condvar>::wait_for","value":"pub fn wait_for<T: ?Sized>(&Self, &mut MutexGuard<, T>, Duration)\n-> WaitTimeoutResult","parent":null,"children":[],"decl_id":null,"docs":" Waits on this condition variable for a notification, timing out after a\n specified duration.","sig":null,"attributes":[{"value":"/ Waits on this condition variable for a notification, timing out after a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":13997,"byte_end":14072,"line_start":330,"line_end":330,"column_start":5,"column_end":80}},{"value":"/ specified duration.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":14077,"byte_end":14100,"line_start":331,"line_end":331,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":14105,"byte_end":14108,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ The semantics of this function are equivalent to `wait()` except that","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":14113,"byte_end":14186,"line_start":333,"line_end":333,"column_start":5,"column_end":78}},{"value":"/ the thread will be blocked for roughly no longer than `timeout`. This","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":14191,"byte_end":14264,"line_start":334,"line_end":334,"column_start":5,"column_end":78}},{"value":"/ method should not be used for precise timing due to anomalies such as","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":14269,"byte_end":14342,"line_start":335,"line_end":335,"column_start":5,"column_end":78}},{"value":"/ preemption or platform differences that may not cause the maximum","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":14347,"byte_end":14416,"line_start":336,"line_end":336,"column_start":5,"column_end":74}},{"value":"/ amount of time waited to be precisely `timeout`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":14421,"byte_end":14473,"line_start":337,"line_end":337,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":14478,"byte_end":14481,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ Note that the best effort is made to ensure that the time waited is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":14486,"byte_end":14557,"line_start":339,"line_end":339,"column_start":5,"column_end":76}},{"value":"/ measured with a monotonic clock, and not affected by the changes made to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":14562,"byte_end":14638,"line_start":340,"line_end":340,"column_start":5,"column_end":81}},{"value":"/ the system time.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":14643,"byte_end":14663,"line_start":341,"line_end":341,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":14668,"byte_end":14671,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ The returned `WaitTimeoutResult` value indicates if the timeout is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":14676,"byte_end":14746,"line_start":343,"line_end":343,"column_start":5,"column_end":75}},{"value":"/ known to have elapsed.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":14751,"byte_end":14777,"line_start":344,"line_end":344,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":14782,"byte_end":14785,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ Like `wait`, the lock specified will be re-acquired when this function","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":14790,"byte_end":14864,"line_start":346,"line_end":346,"column_start":5,"column_end":79}},{"value":"/ returns, regardless of whether the timeout elapsed or not.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":14869,"byte_end":14931,"line_start":347,"line_end":347,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":14936,"byte_end":14945,"line_start":348,"line_end":348,"column_start":5,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":94},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/elision.rs","byte_start":20156,"byte_end":20163,"line_start":12,"line_end":12,"column_start":10,"column_end":17},"name":"IntType","qualname":"::elision::AtomicElisionExt::IntType","value":"type IntType;","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":109},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28407,"byte_end":28412,"line_start":88,"line_end":88,"column_start":10,"column_end":15},"name":"Mutex","qualname":"::mutex::Mutex","value":"lock_api::Mutex<RawMutex, T>","parent":null,"children":[],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[{"value":"/ A mutual exclusion primitive useful for protecting shared data","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":25020,"byte_end":25086,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":25087,"byte_end":25090,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This mutex will block threads waiting for the lock to become available. The","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":25091,"byte_end":25170,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ mutex can also be statically initialized or created via a `new`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":25171,"byte_end":25238,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"/ constructor. Each mutex has a type parameter which represents the data that","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":25239,"byte_end":25318,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ it is protecting. The data can only be accessed through the RAII guards","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":25319,"byte_end":25394,"line_start":16,"line_end":16,"column_start":1,"column_end":76}},{"value":"/ returned from `lock` and `try_lock`, which guarantees that the data is only","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":25395,"byte_end":25474,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ ever accessed when the mutex is locked.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":25475,"byte_end":25518,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":25519,"byte_end":25522,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Fairness","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":25523,"byte_end":25537,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":25538,"byte_end":25541,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ A typical unfair lock can often end up in a situation where a single thread","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":25542,"byte_end":25621,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/ quickly acquires and releases the same mutex in succession, which can starve","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":25622,"byte_end":25702,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ other threads waiting to acquire the mutex. While this improves performance","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":25703,"byte_end":25782,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ because it doesn't force a context switch when a thread tries to re-acquire","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":25783,"byte_end":25862,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/ a mutex it has just released, this can starve other threads.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":25863,"byte_end":25927,"line_start":26,"line_end":26,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":25928,"byte_end":25931,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ This mutex uses [eventual fairness](https://trac.webkit.org/changeset/203350)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":25932,"byte_end":26013,"line_start":28,"line_end":28,"column_start":1,"column_end":82}},{"value":"/ to ensure that the lock will be fair on average without sacrificing","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":26014,"byte_end":26085,"line_start":29,"line_end":29,"column_start":1,"column_end":72}},{"value":"/ performance. This is done by forcing a fair unlock on average every 0.5ms,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":26086,"byte_end":26164,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ which will force the lock to go to the next thread waiting for the mutex.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":26165,"byte_end":26242,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":26243,"byte_end":26246,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Additionally, any critical section longer than 1ms will always use a fair","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":26247,"byte_end":26324,"line_start":33,"line_end":33,"column_start":1,"column_end":78}},{"value":"/ unlock, which has a negligible performance impact compared to the length of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":26325,"byte_end":26404,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ the critical section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":26405,"byte_end":26430,"line_start":35,"line_end":35,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":26431,"byte_end":26434,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ You can also force a fair unlock by calling `MutexGuard::unlock_fair` when","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":26435,"byte_end":26513,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/ unlocking a mutex instead of simply dropping the `MutexGuard`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":26514,"byte_end":26580,"line_start":38,"line_end":38,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":26581,"byte_end":26584,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `Mutex`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":26585,"byte_end":26636,"line_start":40,"line_end":40,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":26637,"byte_end":26640,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ - No poisoning, the lock is released normally on panic.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":26641,"byte_end":26700,"line_start":42,"line_end":42,"column_start":1,"column_end":60}},{"value":"/ - Only requires 1 byte of space, whereas the standard library boxes the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":26701,"byte_end":26776,"line_start":43,"line_end":43,"column_start":1,"column_end":76}},{"value":"/   `Mutex` due to platform limitations.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":26777,"byte_end":26819,"line_start":44,"line_end":44,"column_start":1,"column_end":43}},{"value":"/ - Can be statically constructed (requires the `const_fn` nightly feature).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":26820,"byte_end":26898,"line_start":45,"line_end":45,"column_start":1,"column_end":79}},{"value":"/ - Does not require any drop glue when dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":26899,"byte_end":26949,"line_start":46,"line_end":46,"column_start":1,"column_end":51}},{"value":"/ - Inline fast path for the uncontended case.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":26950,"byte_end":26998,"line_start":47,"line_end":47,"column_start":1,"column_end":49}},{"value":"/ - Efficient handling of micro-contention using adaptive spinning.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":26999,"byte_end":27068,"line_start":48,"line_end":48,"column_start":1,"column_end":70}},{"value":"/ - Allows raw locking & unlocking without a guard.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27069,"byte_end":27122,"line_start":49,"line_end":49,"column_start":1,"column_end":54}},{"value":"/ - Supports eventual fairness so that the mutex is fair on average.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27123,"byte_end":27193,"line_start":50,"line_end":50,"column_start":1,"column_end":71}},{"value":"/ - Optionally allows making the mutex fair by calling `MutexGuard::unlock_fair`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27194,"byte_end":27277,"line_start":51,"line_end":51,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27278,"byte_end":27281,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27282,"byte_end":27296,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27297,"byte_end":27300,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27301,"byte_end":27308,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27309,"byte_end":27332,"line_start":56,"line_end":56,"column_start":1,"column_end":24}},{"value":"/ use parking_lot::Mutex;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27333,"byte_end":27360,"line_start":57,"line_end":57,"column_start":1,"column_end":28}},{"value":"/ use std::thread;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27361,"byte_end":27381,"line_start":58,"line_end":58,"column_start":1,"column_end":21}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27382,"byte_end":27415,"line_start":59,"line_end":59,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27416,"byte_end":27419,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ const N: usize = 10;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27420,"byte_end":27444,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27445,"byte_end":27448,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ // Spawn a few threads to increment a shared variable (non-atomically), and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27449,"byte_end":27528,"line_start":63,"line_end":63,"column_start":1,"column_end":80}},{"value":"/ // let the main thread know once all increments are done.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27529,"byte_end":27590,"line_start":64,"line_end":64,"column_start":1,"column_end":62}},{"value":"/ //","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27591,"byte_end":27597,"line_start":65,"line_end":65,"column_start":1,"column_end":7}},{"value":"/ // Here we're using an Arc to share memory among threads, and the data inside","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27598,"byte_end":27679,"line_start":66,"line_end":66,"column_start":1,"column_end":82}},{"value":"/ // the Arc is protected with a mutex.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27680,"byte_end":27721,"line_start":67,"line_end":67,"column_start":1,"column_end":42}},{"value":"/ let data = Arc::new(Mutex::new(0));","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27722,"byte_end":27761,"line_start":68,"line_end":68,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27762,"byte_end":27765,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ let (tx, rx) = channel();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27766,"byte_end":27795,"line_start":70,"line_end":70,"column_start":1,"column_end":30}},{"value":"/ for _ in 0..10 {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27796,"byte_end":27816,"line_start":71,"line_end":71,"column_start":1,"column_end":21}},{"value":"/     let (data, tx) = (data.clone(), tx.clone());","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27817,"byte_end":27869,"line_start":72,"line_end":72,"column_start":1,"column_end":53}},{"value":"/     thread::spawn(move || {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27870,"byte_end":27901,"line_start":73,"line_end":73,"column_start":1,"column_end":32}},{"value":"/         // The shared state can only be accessed once the lock is held.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27902,"byte_end":27977,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"/         // Our non-atomic increment is safe because we're the only thread","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":27978,"byte_end":28055,"line_start":75,"line_end":75,"column_start":1,"column_end":78}},{"value":"/         // which can access the shared state when the lock is held.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28056,"byte_end":28127,"line_start":76,"line_end":76,"column_start":1,"column_end":72}},{"value":"/         let mut data = data.lock();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28128,"byte_end":28167,"line_start":77,"line_end":77,"column_start":1,"column_end":40}},{"value":"/         *data += 1;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28168,"byte_end":28191,"line_start":78,"line_end":78,"column_start":1,"column_end":24}},{"value":"/         if *data == N {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28192,"byte_end":28219,"line_start":79,"line_end":79,"column_start":1,"column_end":28}},{"value":"/             tx.send(()).unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28220,"byte_end":28257,"line_start":80,"line_end":80,"column_start":1,"column_end":38}},{"value":"/         }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28258,"byte_end":28271,"line_start":81,"line_end":81,"column_start":1,"column_end":14}},{"value":"/         // the lock is unlocked here when `data` goes out of scope.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28272,"byte_end":28343,"line_start":82,"line_end":82,"column_start":1,"column_end":72}},{"value":"/     });","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28344,"byte_end":28355,"line_start":83,"line_end":83,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28356,"byte_end":28361,"line_start":84,"line_end":84,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28362,"byte_end":28365,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ rx.recv().unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28366,"byte_end":28389,"line_start":86,"line_end":86,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28390,"byte_end":28397,"line_start":87,"line_end":87,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":111},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28727,"byte_end":28737,"line_start":95,"line_end":95,"column_start":10,"column_end":20},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"lock_api::MutexGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a mutex. When this structure is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28449,"byte_end":28529,"line_start":90,"line_end":90,"column_start":1,"column_end":81}},{"value":"/ dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28530,"byte_end":28590,"line_start":91,"line_end":91,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28591,"byte_end":28594,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28595,"byte_end":28673,"line_start":93,"line_end":93,"column_start":1,"column_end":79}},{"value":"/ `Deref` and `DerefMut` implementations.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28674,"byte_end":28717,"line_start":94,"line_end":94,"column_start":1,"column_end":44}}]},{"kind":"Type","id":{"krate":0,"index":114},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":29161,"byte_end":29177,"line_start":104,"line_end":104,"column_start":10,"column_end":26},"name":"MappedMutexGuard","qualname":"::mutex::MappedMutexGuard","value":"lock_api::MappedMutexGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII mutex guard returned by `MutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `MutexGuard::map`, which can point to a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28787,"byte_end":28862,"line_start":97,"line_end":97,"column_start":1,"column_end":76}},{"value":"/ subfield of the protected data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28863,"byte_end":28898,"line_start":98,"line_end":98,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28899,"byte_end":28902,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedMutexGuard` and `MutexGuard` is that the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28903,"byte_end":28982,"line_start":100,"line_end":100,"column_start":1,"column_end":80}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":28983,"byte_end":29058,"line_start":101,"line_end":101,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":29059,"byte_end":29139,"line_start":102,"line_end":102,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/mutex.rs","byte_start":29140,"byte_end":29151,"line_start":103,"line_end":103,"column_start":1,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":611},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":35219,"byte_end":35222,"line_start":33,"line_end":33,"column_start":5,"column_end":8},"name":"New","qualname":"::once::OnceState::New","value":"OnceState::New","parent":{"krate":0,"index":610},"children":[],"decl_id":null,"docs":" A closure has not been executed yet\n","sig":null,"attributes":[{"value":"/ A closure has not been executed yet","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":35175,"byte_end":35214,"line_start":32,"line_end":32,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":613},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":35274,"byte_end":35282,"line_start":36,"line_end":36,"column_start":5,"column_end":13},"name":"Poisoned","qualname":"::once::OnceState::Poisoned","value":"OnceState::Poisoned","parent":{"krate":0,"index":610},"children":[],"decl_id":null,"docs":" A closure was executed but panicked.\n","sig":null,"attributes":[{"value":"/ A closure was executed but panicked.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":35229,"byte_end":35269,"line_start":35,"line_end":35,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":615},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":35340,"byte_end":35350,"line_start":39,"line_end":39,"column_start":5,"column_end":15},"name":"InProgress","qualname":"::once::OnceState::InProgress","value":"OnceState::InProgress","parent":{"krate":0,"index":610},"children":[],"decl_id":null,"docs":" A thread is currently executing a closure.\n","sig":null,"attributes":[{"value":"/ A thread is currently executing a closure.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":35289,"byte_end":35335,"line_start":38,"line_end":38,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":617},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":35402,"byte_end":35406,"line_start":42,"line_end":42,"column_start":5,"column_end":9},"name":"Done","qualname":"::once::OnceState::Done","value":"OnceState::Done","parent":{"krate":0,"index":610},"children":[],"decl_id":null,"docs":" A closure has completed sucessfully.\n","sig":null,"attributes":[{"value":"/ A closure has completed sucessfully.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":35357,"byte_end":35397,"line_start":41,"line_end":41,"column_start":5,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":610},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":35159,"byte_end":35168,"line_start":31,"line_end":31,"column_start":10,"column_end":19},"name":"OnceState","qualname":"::once::OnceState","value":"pub enum OnceState { New, Poisoned, InProgress, Done, }","parent":null,"children":[{"krate":0,"index":611},{"krate":0,"index":613},{"krate":0,"index":615},{"krate":0,"index":617}],"decl_id":null,"docs":" Current state of a `Once`.\n","sig":null,"attributes":[{"value":"/ Current state of a `Once`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":35074,"byte_end":35104,"line_start":29,"line_end":29,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":35685,"byte_end":35693,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"poisoned","qualname":"<OnceState>::poisoned","value":"pub fn poisoned(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the associated `Once` has been poisoned.","sig":null,"attributes":[{"value":"/ Returns whether the associated `Once` has been poisoned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":35432,"byte_end":35492,"line_start":46,"line_end":46,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":35497,"byte_end":35500,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ Once an initalization routine for a `Once` has panicked it will forever","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":35505,"byte_end":35580,"line_start":48,"line_end":48,"column_start":5,"column_end":80}},{"value":"/ indicate to future forced initialization routines that it is poisoned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":35585,"byte_end":35659,"line_start":49,"line_end":49,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":35664,"byte_end":35673,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":35932,"byte_end":35936,"line_start":61,"line_end":61,"column_start":12,"column_end":16},"name":"done","qualname":"<OnceState>::done","value":"pub fn done(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the associated `Once` has successfullly executed a\n closure.\n","sig":null,"attributes":[{"value":"/ Returns whether the associated `Once` has successfullly executed a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":35819,"byte_end":35889,"line_start":58,"line_end":58,"column_start":5,"column_end":75}},{"value":"/ closure.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":35894,"byte_end":35906,"line_start":59,"line_end":59,"column_start":5,"column_end":17}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":35911,"byte_end":35920,"line_start":60,"line_end":60,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":161},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36770,"byte_end":36774,"line_start":92,"line_end":92,"column_start":12,"column_end":16},"name":"Once","qualname":"::once::Once","value":"","parent":null,"children":[],"decl_id":null,"docs":" A synchronization primitive which can be used to run a one-time\n initialization. Useful for one-time initialization for globals, FFI or\n related functionality.","sig":null,"attributes":[{"value":"/ A synchronization primitive which can be used to run a one-time","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36056,"byte_end":36123,"line_start":69,"line_end":69,"column_start":1,"column_end":68}},{"value":"/ initialization. Useful for one-time initialization for globals, FFI or","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36124,"byte_end":36198,"line_start":70,"line_end":70,"column_start":1,"column_end":75}},{"value":"/ related functionality.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36199,"byte_end":36225,"line_start":71,"line_end":71,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36226,"byte_end":36229,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `Once`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36230,"byte_end":36280,"line_start":73,"line_end":73,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36281,"byte_end":36284,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ - Only requires 1 byte of space, instead of 1 word.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36285,"byte_end":36340,"line_start":75,"line_end":75,"column_start":1,"column_end":56}},{"value":"/ - Not required to be `'static`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36341,"byte_end":36376,"line_start":76,"line_end":76,"column_start":1,"column_end":36}},{"value":"/ - Relaxed memory barriers in the fast path, which can significantly improve","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36377,"byte_end":36456,"line_start":77,"line_end":77,"column_start":1,"column_end":80}},{"value":"/   performance on some architectures.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36457,"byte_end":36497,"line_start":78,"line_end":78,"column_start":1,"column_end":41}},{"value":"/ - Efficient handling of micro-contention using adaptive spinning.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36498,"byte_end":36567,"line_start":79,"line_end":79,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36568,"byte_end":36571,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36572,"byte_end":36586,"line_start":81,"line_end":81,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36587,"byte_end":36590,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36591,"byte_end":36598,"line_start":83,"line_end":83,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::{Once, ONCE_INIT};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36599,"byte_end":36638,"line_start":84,"line_end":84,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36639,"byte_end":36642,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ static START: Once = ONCE_INIT;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36643,"byte_end":36678,"line_start":86,"line_end":86,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36679,"byte_end":36682,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ START.call_once(|| {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36683,"byte_end":36707,"line_start":88,"line_end":88,"column_start":1,"column_end":25}},{"value":"/     // run initialization here","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36708,"byte_end":36742,"line_start":89,"line_end":89,"column_start":1,"column_end":35}},{"value":"/ });","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36743,"byte_end":36750,"line_start":90,"line_end":90,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36751,"byte_end":36758,"line_start":91,"line_end":91,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":164},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36848,"byte_end":36857,"line_start":95,"line_end":95,"column_start":11,"column_end":20},"name":"ONCE_INIT","qualname":"::once::ONCE_INIT","value":"Once","parent":null,"children":[],"decl_id":null,"docs":" Initialization value for static `Once` values.\n","sig":null,"attributes":[{"value":"/ Initialization value for static `Once` values.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36787,"byte_end":36837,"line_start":94,"line_end":94,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":37150,"byte_end":37153,"line_start":108,"line_end":108,"column_start":12,"column_end":15},"name":"new","qualname":"<Once>::new","value":"pub fn new() -> Once","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Once` value.\n","sig":null,"attributes":[{"value":"/ Creates a new `Once` value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":37056,"byte_end":37087,"line_start":105,"line_end":105,"column_start":5,"column_end":36}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":37092,"byte_end":37124,"line_start":106,"line_end":106,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":37129,"byte_end":37138,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":37277,"byte_end":37282,"line_start":114,"line_end":114,"column_start":12,"column_end":17},"name":"state","qualname":"<Once>::state","value":"pub fn state(&Self) -> OnceState","parent":null,"children":[],"decl_id":null,"docs":" Returns the current state of this `Once`.\n","sig":null,"attributes":[{"value":"/ Returns the current state of this `Once`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":37206,"byte_end":37251,"line_start":112,"line_end":112,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":37256,"byte_end":37265,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":39566,"byte_end":39575,"line_start":177,"line_end":177,"column_start":12,"column_end":21},"name":"call_once","qualname":"<Once>::call_once","value":"pub fn call_once<F>(&Self, F) where F: FnOnce() -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs an initialization routine once and only once. The given closure\n will be executed if this is the first time `call_once` has been called,\n and otherwise the routine will *not* be invoked.","sig":null,"attributes":[{"value":"/ Performs an initialization routine once and only once. The given closure","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":37639,"byte_end":37715,"line_start":127,"line_end":127,"column_start":5,"column_end":81}},{"value":"/ will be executed if this is the first time `call_once` has been called,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":37720,"byte_end":37795,"line_start":128,"line_end":128,"column_start":5,"column_end":80}},{"value":"/ and otherwise the routine will *not* be invoked.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":37800,"byte_end":37852,"line_start":129,"line_end":129,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":37857,"byte_end":37860,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ This method will block the calling thread if another initialization","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":37865,"byte_end":37936,"line_start":131,"line_end":131,"column_start":5,"column_end":76}},{"value":"/ routine is currently running.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":37941,"byte_end":37974,"line_start":132,"line_end":132,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":37979,"byte_end":37982,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ When this function returns, it is guaranteed that some initialization","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":37987,"byte_end":38060,"line_start":134,"line_end":134,"column_start":5,"column_end":78}},{"value":"/ has run and completed (it may not be the closure specified). It is also","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":38065,"byte_end":38140,"line_start":135,"line_end":135,"column_start":5,"column_end":80}},{"value":"/ guaranteed that any memory writes performed by the executed closure can","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":38145,"byte_end":38220,"line_start":136,"line_end":136,"column_start":5,"column_end":80}},{"value":"/ be reliably observed by other threads at this point (there is a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":38225,"byte_end":38292,"line_start":137,"line_end":137,"column_start":5,"column_end":72}},{"value":"/ happens-before relation between the closure and code executing after the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":38297,"byte_end":38373,"line_start":138,"line_end":138,"column_start":5,"column_end":81}},{"value":"/ return).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":38378,"byte_end":38390,"line_start":139,"line_end":139,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":38395,"byte_end":38398,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":38403,"byte_end":38417,"line_start":141,"line_end":141,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":38422,"byte_end":38425,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":38430,"byte_end":38437,"line_start":143,"line_end":143,"column_start":5,"column_end":12}},{"value":"/ use parking_lot::{Once, ONCE_INIT};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":38442,"byte_end":38481,"line_start":144,"line_end":144,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":38486,"byte_end":38489,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ static mut VAL: usize = 0;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":38494,"byte_end":38524,"line_start":146,"line_end":146,"column_start":5,"column_end":35}},{"value":"/ static INIT: Once = ONCE_INIT;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":38529,"byte_end":38563,"line_start":147,"line_end":147,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":38568,"byte_end":38571,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ // Accessing a `static mut` is unsafe much of the time, but if we do so","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":38576,"byte_end":38651,"line_start":149,"line_end":149,"column_start":5,"column_end":80}},{"value":"/ // in a synchronized fashion (e.g. write once or read all) then we're","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":38656,"byte_end":38729,"line_start":150,"line_end":150,"column_start":5,"column_end":78}},{"value":"/ // good to go!","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":38734,"byte_end":38752,"line_start":151,"line_end":151,"column_start":5,"column_end":23}},{"value":"/ //","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":38757,"byte_end":38763,"line_start":152,"line_end":152,"column_start":5,"column_end":11}},{"value":"/ // This function will only call `expensive_computation` once, and will","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":38768,"byte_end":38842,"line_start":153,"line_end":153,"column_start":5,"column_end":79}},{"value":"/ // otherwise always return the value returned from the first invocation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":38847,"byte_end":38923,"line_start":154,"line_end":154,"column_start":5,"column_end":81}},{"value":"/ fn get_cached_val() -> usize {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":38928,"byte_end":38962,"line_start":155,"line_end":155,"column_start":5,"column_end":39}},{"value":"/     unsafe {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":38967,"byte_end":38983,"line_start":156,"line_end":156,"column_start":5,"column_end":21}},{"value":"/         INIT.call_once(|| {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":38988,"byte_end":39019,"line_start":157,"line_end":157,"column_start":5,"column_end":36}},{"value":"/             VAL = expensive_computation();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":39024,"byte_end":39070,"line_start":158,"line_end":158,"column_start":5,"column_end":51}},{"value":"/         });","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":39075,"byte_end":39090,"line_start":159,"line_end":159,"column_start":5,"column_end":20}},{"value":"/         VAL","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":39095,"byte_end":39110,"line_start":160,"line_end":160,"column_start":5,"column_end":20}},{"value":"/     }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":39115,"byte_end":39124,"line_start":161,"line_end":161,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":39129,"byte_end":39134,"line_start":162,"line_end":162,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":39139,"byte_end":39142,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ fn expensive_computation() -> usize {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":39147,"byte_end":39188,"line_start":164,"line_end":164,"column_start":5,"column_end":46}},{"value":"/     // ...","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":39193,"byte_end":39207,"line_start":165,"line_end":165,"column_start":5,"column_end":19}},{"value":"/ # 2","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":39212,"byte_end":39219,"line_start":166,"line_end":166,"column_start":5,"column_end":12}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":39224,"byte_end":39229,"line_start":167,"line_end":167,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":39234,"byte_end":39241,"line_start":168,"line_end":168,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":39246,"byte_end":39249,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":39254,"byte_end":39266,"line_start":170,"line_end":170,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":39271,"byte_end":39274,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ The closure `f` will only be executed once if this is called","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":39279,"byte_end":39343,"line_start":172,"line_end":172,"column_start":5,"column_end":69}},{"value":"/ concurrently amongst many threads. If that closure panics, however, then","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":39348,"byte_end":39424,"line_start":173,"line_end":173,"column_start":5,"column_end":81}},{"value":"/ it will *poison* this `Once` instance, causing all future invocations of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":39429,"byte_end":39505,"line_start":174,"line_end":174,"column_start":5,"column_end":81}},{"value":"/ `call_once` to also panic.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":39510,"byte_end":39540,"line_start":175,"line_end":175,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":39545,"byte_end":39554,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":40326,"byte_end":40341,"line_start":199,"line_end":199,"column_start":12,"column_end":27},"name":"call_once_force","qualname":"<Once>::call_once_force","value":"pub fn call_once_force<F>(&Self, F) where F: FnOnce(OnceState) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs the same function as `call_once` except ignores poisoning.","sig":null,"attributes":[{"value":"/ Performs the same function as `call_once` except ignores poisoning.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":39843,"byte_end":39914,"line_start":189,"line_end":189,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":39919,"byte_end":39922,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ If this `Once` has been poisoned (some initialization panicked) then","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":39927,"byte_end":39999,"line_start":191,"line_end":191,"column_start":5,"column_end":77}},{"value":"/ this function will continue to attempt to call initialization functions","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":40004,"byte_end":40079,"line_start":192,"line_end":192,"column_start":5,"column_end":80}},{"value":"/ until one of them doesn't panic.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":40084,"byte_end":40120,"line_start":193,"line_end":193,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":40125,"byte_end":40128,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ The closure `f` is yielded a structure which can be used to query the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":40133,"byte_end":40206,"line_start":195,"line_end":195,"column_start":5,"column_end":78}},{"value":"/ state of this `Once` (whether initialization has previously panicked or","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":40211,"byte_end":40286,"line_start":196,"line_end":196,"column_start":5,"column_end":80}},{"value":"/ not).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":40291,"byte_end":40300,"line_start":197,"line_end":197,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":40305,"byte_end":40314,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":246},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_mutex.rs","byte_start":50323,"byte_end":50331,"line_start":36,"line_end":36,"column_start":12,"column_end":20},"name":"RawMutex","qualname":"::raw_mutex::RawMutex","value":"RawMutex {  }","parent":null,"children":[{"krate":0,"index":247}],"decl_id":null,"docs":" Raw mutex type backed by the parking lot.\n","sig":null,"attributes":[{"value":"/ Raw mutex type backed by the parking lot.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_mutex.rs","byte_start":50266,"byte_end":50311,"line_start":35,"line_end":35,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":373},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":60918,"byte_end":60927,"line_start":41,"line_end":41,"column_start":12,"column_end":21},"name":"RawRwLock","qualname":"::raw_rwlock::RawRwLock","value":"RawRwLock {  }","parent":null,"children":[{"krate":0,"index":374}],"decl_id":null,"docs":" Raw reader-writer lock type backed by the parking lot.\n","sig":null,"attributes":[{"value":"/ Raw reader-writer lock type backed by the parking lot.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":60848,"byte_end":60906,"line_start":40,"line_end":40,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":475},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":108196,"byte_end":108207,"line_start":12,"line_end":12,"column_start":12,"column_end":23},"name":"RawThreadId","qualname":"::remutex::RawThreadId","value":"","parent":null,"children":[],"decl_id":null,"docs":" Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.\n","sig":null,"attributes":[{"value":"/ Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":108107,"byte_end":108184,"line_start":11,"line_end":11,"column_start":1,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":481},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":109096,"byte_end":109110,"line_start":36,"line_end":36,"column_start":10,"column_end":24},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"lock_api::ReentrantMutex<RawMutex, RawThreadId, T>","parent":null,"children":[],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[{"value":"/ A mutex which can be recursively locked by a single thread.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":108623,"byte_end":108686,"line_start":25,"line_end":25,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":108687,"byte_end":108690,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ This type is identical to `Mutex` except for the following points:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":108691,"byte_end":108761,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":108762,"byte_end":108765,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ - Locking multiple times from the same thread will work correctly instead of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":108766,"byte_end":108846,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/   deadlocking.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":108847,"byte_end":108865,"line_start":30,"line_end":30,"column_start":1,"column_end":19}},{"value":"/ - `ReentrantMutexGuard` does not give mutable references to the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":108866,"byte_end":108946,"line_start":31,"line_end":31,"column_start":1,"column_end":81}},{"value":"/   Use a `RefCell` if you need this.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":108947,"byte_end":108986,"line_start":32,"line_end":32,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":108987,"byte_end":108990,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ See [`Mutex`](struct.Mutex.html) for more details about the underlying mutex","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":108991,"byte_end":109071,"line_start":34,"line_end":34,"column_start":1,"column_end":81}},{"value":"/ primitive.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":109072,"byte_end":109086,"line_start":35,"line_end":35,"column_start":1,"column_end":15}}]},{"kind":"Type","id":{"krate":0,"index":483},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":109441,"byte_end":109460,"line_start":43,"line_end":43,"column_start":10,"column_end":29},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"lock_api::ReentrantMutexGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":109169,"byte_end":109256,"line_start":38,"line_end":38,"column_start":1,"column_end":88}},{"value":"/ is dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":109257,"byte_end":109320,"line_start":39,"line_end":39,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":109321,"byte_end":109324,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":109325,"byte_end":109403,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/ `Deref` implementation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":109404,"byte_end":109431,"line_start":42,"line_end":42,"column_start":1,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":486},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":109937,"byte_end":109962,"line_start":53,"line_end":53,"column_start":10,"column_end":35},"name":"MappedReentrantMutexGuard","qualname":"::remutex::MappedReentrantMutexGuard","value":"lock_api::MappedReentrantMutexGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":109536,"byte_end":109620,"line_start":46,"line_end":46,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":109621,"byte_end":109656,"line_start":47,"line_end":47,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":109657,"byte_end":109660,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":109661,"byte_end":109758,"line_start":49,"line_end":49,"column_start":1,"column_end":98}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":109759,"byte_end":109834,"line_start":50,"line_end":50,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":109835,"byte_end":109915,"line_start":51,"line_end":51,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":109916,"byte_end":109927,"line_start":52,"line_end":52,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":496},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115637,"byte_end":115643,"line_start":89,"line_end":89,"column_start":10,"column_end":16},"name":"RwLock","qualname":"::rwlock::RwLock","value":"lock_api::RwLock<RawRwLock, T>","parent":null,"children":[],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[{"value":"/ A reader-writer lock","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":112078,"byte_end":112102,"line_start":11,"line_end":11,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":112103,"byte_end":112106,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":112107,"byte_end":112184,"line_start":13,"line_end":13,"column_start":1,"column_end":78}},{"value":"/ point in time. The write portion of this lock typically allows modification","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":112185,"byte_end":112264,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ of the underlying data (exclusive access) and the read portion of this lock","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":112265,"byte_end":112344,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ typically allows for read-only access (shared access).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":112345,"byte_end":112403,"line_start":16,"line_end":16,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":112404,"byte_end":112407,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This lock uses a task-fair locking policy which avoids both reader and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":112408,"byte_end":112482,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ writer starvation. This means that readers trying to acquire the lock will","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":112483,"byte_end":112561,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ block even if the lock is unlocked when there are writers waiting to acquire","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":112562,"byte_end":112642,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ the lock. Because of this, attempts to recursively acquire a read lock","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":112643,"byte_end":112717,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/ within a single thread may result in a deadlock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":112718,"byte_end":112770,"line_start":22,"line_end":22,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":112771,"byte_end":112774,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The type parameter `T` represents the data that this lock protects. It is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":112775,"byte_end":112852,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ required that `T` satisfies `Send` to be shared across threads and `Sync` to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":112853,"byte_end":112933,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ allow concurrent access through readers. The RAII guards returned from the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":112934,"byte_end":113012,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ locking methods implement `Deref` (and `DerefMut` for the `write` methods)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":113013,"byte_end":113091,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ to allow access to the contained of the lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":113092,"byte_end":113141,"line_start":28,"line_end":28,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":113142,"byte_end":113145,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Fairness","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":113146,"byte_end":113160,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":113161,"byte_end":113164,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ A typical unfair lock can often end up in a situation where a single thread","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":113165,"byte_end":113244,"line_start":32,"line_end":32,"column_start":1,"column_end":80}},{"value":"/ quickly acquires and releases the same lock in succession, which can starve","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":113245,"byte_end":113324,"line_start":33,"line_end":33,"column_start":1,"column_end":80}},{"value":"/ other threads waiting to acquire the rwlock. While this improves performance","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":113325,"byte_end":113405,"line_start":34,"line_end":34,"column_start":1,"column_end":81}},{"value":"/ because it doesn't force a context switch when a thread tries to re-acquire","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":113406,"byte_end":113485,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ a rwlock it has just released, this can starve other threads.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":113486,"byte_end":113551,"line_start":36,"line_end":36,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":113552,"byte_end":113555,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ This rwlock uses [eventual fairness](https://trac.webkit.org/changeset/203350)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":113556,"byte_end":113638,"line_start":38,"line_end":38,"column_start":1,"column_end":83}},{"value":"/ to ensure that the lock will be fair on average without sacrificing","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":113639,"byte_end":113710,"line_start":39,"line_end":39,"column_start":1,"column_end":72}},{"value":"/ performance. This is done by forcing a fair unlock on average every 0.5ms,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":113711,"byte_end":113789,"line_start":40,"line_end":40,"column_start":1,"column_end":79}},{"value":"/ which will force the lock to go to the next thread waiting for the rwlock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":113790,"byte_end":113868,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":113869,"byte_end":113872,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Additionally, any critical section longer than 1ms will always use a fair","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":113873,"byte_end":113950,"line_start":43,"line_end":43,"column_start":1,"column_end":78}},{"value":"/ unlock, which has a negligible performance impact compared to the length of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":113951,"byte_end":114030,"line_start":44,"line_end":44,"column_start":1,"column_end":80}},{"value":"/ the critical section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":114031,"byte_end":114056,"line_start":45,"line_end":45,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":114057,"byte_end":114060,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ You can also force a fair unlock by calling `RwLockReadGuard::unlock_fair`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":114061,"byte_end":114139,"line_start":47,"line_end":47,"column_start":1,"column_end":79}},{"value":"/ or `RwLockWriteGuard::unlock_fair` when unlocking a mutex instead of simply","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":114140,"byte_end":114219,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ dropping the guard.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":114220,"byte_end":114243,"line_start":49,"line_end":49,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":114244,"byte_end":114247,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # Differences from the standard library `RwLock`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":114248,"byte_end":114300,"line_start":51,"line_end":51,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":114301,"byte_end":114304,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ - Supports atomically downgrading a write lock into a read lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":114305,"byte_end":114373,"line_start":53,"line_end":53,"column_start":1,"column_end":69}},{"value":"/ - Task-fair locking policy instead of an unspecified platform default.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":114374,"byte_end":114448,"line_start":54,"line_end":54,"column_start":1,"column_end":75}},{"value":"/ - No poisoning, the lock is released normally on panic.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":114449,"byte_end":114508,"line_start":55,"line_end":55,"column_start":1,"column_end":60}},{"value":"/ - Only requires 1 word of space, whereas the standard library boxes the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":114509,"byte_end":114584,"line_start":56,"line_end":56,"column_start":1,"column_end":76}},{"value":"/   `RwLock` due to platform limitations.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":114585,"byte_end":114628,"line_start":57,"line_end":57,"column_start":1,"column_end":44}},{"value":"/ - Can be statically constructed (requires the `const_fn` nightly feature).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":114629,"byte_end":114707,"line_start":58,"line_end":58,"column_start":1,"column_end":79}},{"value":"/ - Does not require any drop glue when dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":114708,"byte_end":114758,"line_start":59,"line_end":59,"column_start":1,"column_end":51}},{"value":"/ - Inline fast path for the uncontended case.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":114759,"byte_end":114807,"line_start":60,"line_end":60,"column_start":1,"column_end":49}},{"value":"/ - Efficient handling of micro-contention using adaptive spinning.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":114808,"byte_end":114877,"line_start":61,"line_end":61,"column_start":1,"column_end":70}},{"value":"/ - Allows raw locking & unlocking without a guard.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":114878,"byte_end":114931,"line_start":62,"line_end":62,"column_start":1,"column_end":54}},{"value":"/ - Supports eventual fairness so that the rwlock is fair on average.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":114932,"byte_end":115003,"line_start":63,"line_end":63,"column_start":1,"column_end":72}},{"value":"/ - Optionally allows making the rwlock fair by calling","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115004,"byte_end":115061,"line_start":64,"line_end":64,"column_start":1,"column_end":58}},{"value":"/   `RwLockReadGuard::unlock_fair` and `RwLockWriteGuard::unlock_fair`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115062,"byte_end":115135,"line_start":65,"line_end":65,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115136,"byte_end":115139,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115140,"byte_end":115154,"line_start":67,"line_end":67,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115155,"byte_end":115158,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115159,"byte_end":115166,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/ use parking_lot::RwLock;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115167,"byte_end":115195,"line_start":70,"line_end":70,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115196,"byte_end":115199,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ let lock = RwLock::new(5);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115200,"byte_end":115230,"line_start":72,"line_end":72,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115231,"byte_end":115234,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ // many reader locks can be held at once","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115235,"byte_end":115279,"line_start":74,"line_end":74,"column_start":1,"column_end":45}},{"value":"/ {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115280,"byte_end":115285,"line_start":75,"line_end":75,"column_start":1,"column_end":6}},{"value":"/     let r1 = lock.read();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115286,"byte_end":115315,"line_start":76,"line_end":76,"column_start":1,"column_end":30}},{"value":"/     let r2 = lock.read();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115316,"byte_end":115345,"line_start":77,"line_end":77,"column_start":1,"column_end":30}},{"value":"/     assert_eq!(*r1, 5);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115346,"byte_end":115373,"line_start":78,"line_end":78,"column_start":1,"column_end":28}},{"value":"/     assert_eq!(*r2, 5);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115374,"byte_end":115401,"line_start":79,"line_end":79,"column_start":1,"column_end":28}},{"value":"/ } // read locks are dropped at this point","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115402,"byte_end":115447,"line_start":80,"line_end":80,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115448,"byte_end":115451,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // only one write lock may be held, however","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115452,"byte_end":115499,"line_start":82,"line_end":82,"column_start":1,"column_end":48}},{"value":"/ {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115500,"byte_end":115505,"line_start":83,"line_end":83,"column_start":1,"column_end":6}},{"value":"/     let mut w = lock.write();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115506,"byte_end":115539,"line_start":84,"line_end":84,"column_start":1,"column_end":34}},{"value":"/     *w += 1;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115540,"byte_end":115556,"line_start":85,"line_end":85,"column_start":1,"column_end":17}},{"value":"/     assert_eq!(*w, 6);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115557,"byte_end":115583,"line_start":86,"line_end":86,"column_start":1,"column_end":27}},{"value":"/ } // write lock is dropped here","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115584,"byte_end":115619,"line_start":87,"line_end":87,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115620,"byte_end":115627,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":498},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115777,"byte_end":115792,"line_start":93,"line_end":93,"column_start":10,"column_end":25},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"lock_api::RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the shared read access of a lock when","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115682,"byte_end":115754,"line_start":91,"line_end":91,"column_start":1,"column_end":73}},{"value":"/ dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115755,"byte_end":115767,"line_start":92,"line_end":92,"column_start":1,"column_end":13}}]},{"kind":"Type","id":{"krate":0,"index":501},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115947,"byte_end":115963,"line_start":97,"line_end":97,"column_start":10,"column_end":26},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"lock_api::RwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the exclusive write access of a lock when","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115848,"byte_end":115924,"line_start":95,"line_end":95,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":115925,"byte_end":115937,"line_start":96,"line_end":96,"column_start":1,"column_end":13}}]},{"kind":"Type","id":{"krate":0,"index":504},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":116413,"byte_end":116434,"line_start":106,"line_end":106,"column_start":10,"column_end":31},"name":"MappedRwLockReadGuard","qualname":"::rwlock::MappedRwLockReadGuard","value":"lock_api::MappedRwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":116020,"byte_end":116104,"line_start":99,"line_end":99,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":116105,"byte_end":116140,"line_start":100,"line_end":100,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":116141,"byte_end":116144,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":116145,"byte_end":116234,"line_start":102,"line_end":102,"column_start":1,"column_end":90}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":116235,"byte_end":116310,"line_start":103,"line_end":103,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":116311,"byte_end":116391,"line_start":104,"line_end":104,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":116392,"byte_end":116403,"line_start":105,"line_end":105,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":507},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":116893,"byte_end":116915,"line_start":115,"line_end":115,"column_start":10,"column_end":32},"name":"MappedRwLockWriteGuard","qualname":"::rwlock::MappedRwLockWriteGuard","value":"lock_api::MappedRwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":116496,"byte_end":116582,"line_start":108,"line_end":108,"column_start":1,"column_end":87}},{"value":"/ subfield of the protected data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":116583,"byte_end":116618,"line_start":109,"line_end":109,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":116619,"byte_end":116622,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":116623,"byte_end":116714,"line_start":111,"line_end":111,"column_start":1,"column_end":92}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":116715,"byte_end":116790,"line_start":112,"line_end":112,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":116791,"byte_end":116871,"line_start":113,"line_end":113,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":116872,"byte_end":116883,"line_start":114,"line_end":114,"column_start":1,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":510},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":117077,"byte_end":117102,"line_start":119,"line_end":119,"column_start":10,"column_end":35},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"lock_api::RwLockUpgradableReadGuard","parent":null,"children":[],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the upgradable read access of a lock when","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":116978,"byte_end":117054,"line_start":117,"line_end":117,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/rwlock.rs","byte_start":117055,"byte_end":117067,"line_start":118,"line_end":118,"column_start":1,"column_end":13}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":2322,"byte_end":2339,"line_start":22,"line_end":22,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4639,"byte_end":4646,"line_start":87,"line_end":87,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":77},{"krate":0,"index":79},{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":15167,"byte_end":15174,"line_start":358,"line_end":358,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":15273,"byte_end":15280,"line_start":365,"line_end":365,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/elision.rs","byte_start":21001,"byte_end":21012,"line_start":40,"line_end":40,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":35416,"byte_end":35425,"line_start":45,"line_end":45,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36894,"byte_end":36898,"line_start":97,"line_end":97,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":171},{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":44197,"byte_end":44207,"line_start":303,"line_end":303,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":45449,"byte_end":45453,"line_start":339,"line_end":339,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":45546,"byte_end":45550,"line_start":346,"line_end":346,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_mutex.rs","byte_start":50388,"byte_end":50396,"line_start":40,"line_end":40,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_mutex.rs","byte_start":51830,"byte_end":51838,"line_start":95,"line_end":95,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_mutex.rs","byte_start":52360,"byte_end":52368,"line_start":117,"line_end":117,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_mutex.rs","byte_start":53363,"byte_end":53371,"line_start":156,"line_end":156,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":269},{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":60988,"byte_end":60997,"line_start":45,"line_end":45,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":63880,"byte_end":63889,"line_start":148,"line_end":148,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":65641,"byte_end":65650,"line_start":210,"line_end":210,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":66008,"byte_end":66017,"line_start":224,"line_end":224,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":67856,"byte_end":67865,"line_start":289,"line_end":289,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":399},{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":68535,"byte_end":68544,"line_start":313,"line_end":313,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":402},{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":69362,"byte_end":69371,"line_start":341,"line_end":341,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":71157,"byte_end":71166,"line_start":412,"line_end":412,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":411},{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":71750,"byte_end":71759,"line_start":434,"line_end":434,"column_start":43,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":414},{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":72491,"byte_end":72500,"line_start":460,"line_end":460,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":74124,"byte_end":74133,"line_start":524,"line_end":524,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":428},{"krate":0,"index":431},{"krate":0,"index":434},{"krate":0,"index":437},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":445},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":453},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":108238,"byte_end":108249,"line_start":14,"line_end":14,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/util.rs","byte_start":129527,"byte_end":129533,"line_start":13,"line_end":13,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":2322,"byte_end":2339,"line_start":22,"line_end":22,"column_start":6,"column_end":23},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":595},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":4639,"byte_end":4646,"line_start":87,"line_end":87,"column_start":6,"column_end":13},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":64},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":15167,"byte_end":15174,"line_start":358,"line_end":358,"column_start":18,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":64},"to":{"krate":2,"index":2994}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/condvar.rs","byte_start":15273,"byte_end":15280,"line_start":365,"line_end":365,"column_start":21,"column_end":28},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":64},"to":{"krate":2,"index":9394}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/elision.rs","byte_start":21001,"byte_end":21012,"line_start":40,"line_end":40,"column_start":27,"column_end":38},"kind":{"Impl":{"id":4}},"from":{"krate":2,"index":43990},"to":{"krate":0,"index":93}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":35416,"byte_end":35425,"line_start":45,"line_end":45,"column_start":6,"column_end":15},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":610},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":36894,"byte_end":36898,"line_start":97,"line_end":97,"column_start":6,"column_end":10},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":44197,"byte_end":44207,"line_start":303,"line_end":303,"column_start":27,"column_end":37},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":178},"to":{"krate":2,"index":3251}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":45449,"byte_end":45453,"line_start":339,"line_end":339,"column_start":18,"column_end":22},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":161},"to":{"krate":2,"index":2994}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/once.rs","byte_start":45546,"byte_end":45550,"line_start":346,"line_end":346,"column_start":21,"column_end":25},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":161},"to":{"krate":2,"index":9394}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_mutex.rs","byte_start":50388,"byte_end":50396,"line_start":40,"line_end":40,"column_start":31,"column_end":39},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":246},"to":{"krate":20,"index":35}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_mutex.rs","byte_start":51830,"byte_end":51838,"line_start":95,"line_end":95,"column_start":30,"column_end":38},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":246},"to":{"krate":20,"index":41}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_mutex.rs","byte_start":52360,"byte_end":52368,"line_start":117,"line_end":117,"column_start":31,"column_end":39},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":246},"to":{"krate":20,"index":44}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_mutex.rs","byte_start":53363,"byte_end":53371,"line_start":156,"line_end":156,"column_start":6,"column_end":14},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":246},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":60988,"byte_end":60997,"line_start":45,"line_end":45,"column_start":32,"column_end":41},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":373},"to":{"krate":20,"index":457}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":63880,"byte_end":63889,"line_start":148,"line_end":148,"column_start":31,"column_end":40},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":373},"to":{"krate":20,"index":466}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":65641,"byte_end":65650,"line_start":210,"line_end":210,"column_start":36,"column_end":45},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":373},"to":{"krate":20,"index":471}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":66008,"byte_end":66017,"line_start":224,"line_end":224,"column_start":32,"column_end":41},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":373},"to":{"krate":20,"index":473}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":67856,"byte_end":67865,"line_start":289,"line_end":289,"column_start":36,"column_end":45},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":373},"to":{"krate":20,"index":480}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":68535,"byte_end":68544,"line_start":313,"line_end":313,"column_start":41,"column_end":50},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":373},"to":{"krate":20,"index":483}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":69362,"byte_end":69371,"line_start":341,"line_end":341,"column_start":34,"column_end":43},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":373},"to":{"krate":20,"index":486}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":71157,"byte_end":71166,"line_start":412,"line_end":412,"column_start":38,"column_end":47},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":373},"to":{"krate":20,"index":492}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":71750,"byte_end":71759,"line_start":434,"line_end":434,"column_start":43,"column_end":52},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":373},"to":{"krate":20,"index":495}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":72491,"byte_end":72500,"line_start":460,"line_end":460,"column_start":39,"column_end":48},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":373},"to":{"krate":20,"index":498}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/raw_rwlock.rs","byte_start":74124,"byte_end":74133,"line_start":524,"line_end":524,"column_start":6,"column_end":15},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":373},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/remutex.rs","byte_start":108238,"byte_end":108249,"line_start":14,"line_end":14,"column_start":29,"column_end":40},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":475},"to":{"krate":20,"index":242}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/parking_lot-0.6.4/src/util.rs","byte_start":129527,"byte_end":129533,"line_start":13,"line_end":13,"column_start":35,"column_end":41},"kind":{"Impl":{"id":26}},"from":{"krate":2,"index":43437},"to":{"krate":0,"index":514}}]}