{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1","program":"/usr/local/rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","owning_ref","/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=83527ec03bf1c046","-C","extra-filename=-83527ec03bf1c046","--out-dir","/workspaces/rust-playground/wasm/tutorial/hello-wasm/target/rls/debug/deps","-L","dependency=/workspaces/rust-playground/wasm/tutorial/hello-wasm/target/rls/debug/deps","--extern","stable_deref_trait=/workspaces/rust-playground/wasm/tutorial/hello-wasm/target/rls/debug/deps/libstable_deref_trait-99f4e8ca04b8b38a.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/usr/local/rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/workspaces/rust-playground/wasm/tutorial/hello-wasm/target/rls/debug/deps/libowning_ref-83527ec03bf1c046.rmeta"},"prelude":{"crate_id":{"name":"owning_ref","disambiguator":[16203619859139640513,0]},"crate_root":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src","external_crates":[{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12872056181829019095,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[8373705112501149482,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16909867051943430517,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11260902004430380252,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[10608756751411298727,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4369074810188542311,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12333111663820923515,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12748886438148098175,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6627577059144635863,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15896330838049133250,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[2582212836281766037,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[4723863376138925013,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[2482912266844122781,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16993901708144586312,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[15622067442351408235,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[12927959315880918009,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[1763799641200411356,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[2454364557606196642,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[10980657607002924382,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","num":20,"id":{"name":"stable_deref_trait","disambiguator":[3990214667989801576,0]}}],"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":0,"byte_end":64692,"line_start":1,"line_end":2016,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":20,"index":8},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":6066,"byte_end":6077,"line_start":247,"line_end":247,"column_start":30,"column_end":41},"alias_span":null,"name":"StableAddress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":9},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":6096,"byte_end":6112,"line_start":247,"line_end":247,"column_start":60,"column_end":76},"alias_span":null,"name":"CloneStableAddress","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":0,"byte_end":64692,"line_start":1,"line_end":2016,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":16},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":28},{"krate":0,"index":57},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":97},{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":120},{"krate":0,"index":125},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":149},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":165},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":175},{"krate":0,"index":178},{"krate":0,"index":183},{"krate":0,"index":188},{"krate":0,"index":192},{"krate":0,"index":195},{"krate":0,"index":198},{"krate":0,"index":202},{"krate":0,"index":206},{"krate":0,"index":210},{"krate":0,"index":214},{"krate":0,"index":218},{"krate":0,"index":222},{"krate":0,"index":226},{"krate":0,"index":230},{"krate":0,"index":234},{"krate":0,"index":238},{"krate":0,"index":241},{"krate":0,"index":245},{"krate":0,"index":249},{"krate":0,"index":253},{"krate":0,"index":257},{"krate":0,"index":259},{"krate":0,"index":263},{"krate":0,"index":266},{"krate":0,"index":270},{"krate":0,"index":274},{"krate":0,"index":279},{"krate":0,"index":283},{"krate":0,"index":286},{"krate":0,"index":290},{"krate":0,"index":294},{"krate":0,"index":299},{"krate":0,"index":302},{"krate":0,"index":305},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":312},{"krate":0,"index":315},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":322},{"krate":0,"index":325},{"krate":0,"index":328},{"krate":0,"index":332},{"krate":0,"index":336},{"krate":0,"index":339},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":346},{"krate":0,"index":349},{"krate":0,"index":353},{"krate":0,"index":357},{"krate":0,"index":361},{"krate":0,"index":365},{"krate":0,"index":369},{"krate":0,"index":372},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":380},{"krate":0,"index":384},{"krate":0,"index":388},{"krate":0,"index":393},{"krate":0,"index":398},{"krate":0,"index":403},{"krate":0,"index":405},{"krate":0,"index":407},{"krate":0,"index":409}],"decl_id":null,"docs":"# An owning reference.","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"*\n# An owning reference.\n\nThis crate provides the _owning reference_ types `OwningRef` and `OwningRefMut`\nthat enables it to bundle a reference together with the owner of the data it points to.\nThis allows moving and dropping of a `OwningRef` without needing to recreate the reference.\n\nThis can sometimes be useful because Rust borrowing rules normally prevent\nmoving a type that has been moved from. For example, this kind of code gets rejected:\n\n```rust,ignore\nfn return_owned_and_referenced<'a>() -> (Vec<u8>, &'a [u8]) {\n    let v = vec![1, 2, 3, 4];\n    let s = &v[1..3];\n    (v, s)\n}\n```\n\nEven though, from a memory-layout point of view, this can be entirely safe\nif the new location of the vector still lives longer than the lifetime `'a`\nof the reference because the backing allocation of the vector does not change.\n\nThis library enables this safe usage by keeping the owner and the reference\nbundled together in a wrapper type that ensure that lifetime constraint:\n\n```rust\n# extern crate owning_ref;\n# use owning_ref::OwningRef;\n# fn main() {\nfn return_owned_and_referenced() -> OwningRef<Vec<u8>, [u8]> {\n    let v = vec![1, 2, 3, 4];\n    let or = OwningRef::new(v);\n    let or = or.map(|v| &v[1..3]);\n    or\n}\n# }\n```\n\nIt works by requiring owner types to dereference to stable memory locations\nand preventing mutable access to root containers, which in practice requires heap allocation\nas provided by `Box<T>`, `Rc<T>`, etc.\n\nAlso provided are typedefs for common owner type combinations,\nwhich allow for less verbose type signatures. For example, `BoxRef<T>` instead of `OwningRef<Box<T>, T>`.\n\nThe crate also provides the more advanced `OwningHandle` type,\nwhich allows more freedom in bundling a dependent handle object\nalong with the data it depends on, at the cost of some unsafe needed in the API.\nSee the documentation around `OwningHandle` for more details.\n\n# Examples\n\n## Basics\n\n```\nextern crate owning_ref;\nuse owning_ref::BoxRef;\n\nfn main() {\n    // Create an array owned by a Box.\n    let arr = Box::new([1, 2, 3, 4]) as Box<[i32]>;\n\n    // Transfer into a BoxRef.\n    let arr: BoxRef<[i32]> = BoxRef::new(arr);\n    assert_eq!(&*arr, &[1, 2, 3, 4]);\n\n    // We can slice the array without losing ownership or changing type.\n    let arr: BoxRef<[i32]> = arr.map(|arr| &arr[1..3]);\n    assert_eq!(&*arr, &[2, 3]);\n\n    // Also works for Arc, Rc, String and Vec!\n}\n```\n\n## Caching a reference to a struct field\n\n```\nextern crate owning_ref;\nuse owning_ref::BoxRef;\n\nfn main() {\n    struct Foo {\n        tag: u32,\n        x: u16,\n        y: u16,\n        z: u16,\n    }\n    let foo = Foo { tag: 1, x: 100, y: 200, z: 300 };\n\n    let or = BoxRef::new(Box::new(foo)).map(|foo| {\n        match foo.tag {\n            0 => &foo.x,\n            1 => &foo.y,\n            2 => &foo.z,\n            _ => panic!(),\n        }\n    });\n\n    assert_eq!(*or, 200);\n}\n```\n\n## Caching a reference to an entry in a vector\n\n```\nextern crate owning_ref;\nuse owning_ref::VecRef;\n\nfn main() {\n    let v = VecRef::new(vec![1, 2, 3, 4, 5]).map(|v| &v[3]);\n    assert_eq!(*v, 4);\n}\n```\n\n## Caching a subslice of a String\n\n```\nextern crate owning_ref;\nuse owning_ref::StringRef;\n\nfn main() {\n    let s = StringRef::new(\"hello world\".to_owned())\n        .map(|s| s.split(' ').nth(1).unwrap());\n\n    assert_eq!(&*s, \"world\");\n}\n```\n\n## Reference counted slices that share ownership of the backing storage\n\n```\nextern crate owning_ref;\nuse owning_ref::RcRef;\nuse std::rc::Rc;\n\nfn main() {\n    let rc: RcRef<[i32]> = RcRef::new(Rc::new([1, 2, 3, 4]) as Rc<[i32]>);\n    assert_eq!(&*rc, &[1, 2, 3, 4]);\n\n    let rc_a: RcRef<[i32]> = rc.clone().map(|s| &s[0..2]);\n    let rc_b = rc.clone().map(|s| &s[1..3]);\n    let rc_c = rc.clone().map(|s| &s[2..4]);\n    assert_eq!(&*rc_a, &[1, 2]);\n    assert_eq!(&*rc_b, &[2, 3]);\n    assert_eq!(&*rc_c, &[3, 4]);\n\n    let rc_c_a = rc_c.clone().map(|s| &s[1]);\n    assert_eq!(&*rc_c_a, &4);\n}\n```\n\n## Atomic reference counted slices that share ownership of the backing storage\n\n```\nextern crate owning_ref;\nuse owning_ref::ArcRef;\nuse std::sync::Arc;\n\nfn main() {\n    use std::thread;\n\n    fn par_sum(rc: ArcRef<[i32]>) -> i32 {\n        if rc.len() == 0 {\n            return 0;\n        } else if rc.len() == 1 {\n            return rc[0];\n        }\n        let mid = rc.len() / 2;\n        let left = rc.clone().map(|s| &s[..mid]);\n        let right = rc.map(|s| &s[mid..]);\n\n        let left = thread::spawn(move || par_sum(left));\n        let right = thread::spawn(move || par_sum(right));\n\n        left.join().unwrap() + right.join().unwrap()\n    }\n\n    let rc: Arc<[i32]> = Arc::new([1, 2, 3, 4]);\n    let rc: ArcRef<[i32]> = rc.into();\n\n    assert_eq!(par_sum(rc), 10);\n}\n```\n\n## References into RAII locks\n\n```\nextern crate owning_ref;\nuse owning_ref::RefRef;\nuse std::cell::{RefCell, Ref};\n\nfn main() {\n    let refcell = RefCell::new((1, 2, 3, 4));\n    // Also works with Mutex and RwLock\n\n    let refref = {\n        let refref = RefRef::new(refcell.borrow()).map(|x| &x.3);\n        assert_eq!(*refref, 4);\n\n        // We move the RAII lock and the reference to one of\n        // the subfields in the data it guards here:\n        refref\n    };\n\n    assert_eq!(*refref, 4);\n\n    drop(refref);\n\n    assert_eq!(*refcell.borrow(), (1, 2, 3, 4));\n}\n```\n\n## Mutable reference\n\nWhen the owned container implements `DerefMut`, it is also possible to make\na _mutable owning reference_. (E.g. with `Box`, `RefMut`, `MutexGuard`)\n\n```\nextern crate owning_ref;\nuse owning_ref::RefMutRefMut;\nuse std::cell::{RefCell, RefMut};\n\nfn main() {\n    let refcell = RefCell::new((1, 2, 3, 4));\n\n    let mut refmut_refmut = {\n        let mut refmut_refmut = RefMutRefMut::new(refcell.borrow_mut()).map_mut(|x| &mut x.3);\n        assert_eq!(*refmut_refmut, 4);\n        *refmut_refmut *= 2;\n\n        refmut_refmut\n    };\n\n    assert_eq!(*refmut_refmut, 8);\n    *refmut_refmut *= 2;\n\n    drop(refmut_refmut);\n\n    assert_eq!(*refcell.borrow(), (1, 2, 3, 16));\n}\n```\n*/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":24,"byte_end":6002,"line_start":3,"line_end":244,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":11},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":6474,"byte_end":6483,"line_start":258,"line_end":258,"column_start":12,"column_end":21},"name":"OwningRef","qualname":"::OwningRef","value":"OwningRef {  }","parent":null,"children":[{"krate":0,"index":14},{"krate":0,"index":15}],"decl_id":null,"docs":" An owning reference.","sig":null,"attributes":[{"value":"/ An owning reference.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":6138,"byte_end":6162,"line_start":249,"line_end":249,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":6163,"byte_end":6166,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ This wraps an owner `O` and a reference `&T` pointing","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":6167,"byte_end":6224,"line_start":251,"line_end":251,"column_start":1,"column_end":58}},{"value":"/ at something reachable from `O::Target` while keeping","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":6225,"byte_end":6282,"line_start":252,"line_end":252,"column_start":1,"column_end":58}},{"value":"/ the ability to move `self` around.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":6283,"byte_end":6321,"line_start":253,"line_end":253,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":6322,"byte_end":6325,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ The owner is usually a pointer that points at some base type.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":6326,"byte_end":6391,"line_start":255,"line_end":255,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":6392,"byte_end":6395,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"/ For more details and examples, see the module and method docs.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":6396,"byte_end":6462,"line_start":257,"line_end":257,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":16},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":6890,"byte_end":6902,"line_start":272,"line_end":272,"column_start":12,"column_end":24},"name":"OwningRefMut","qualname":"::OwningRefMut","value":"OwningRefMut {  }","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":20}],"decl_id":null,"docs":" An mutable owning reference.","sig":null,"attributes":[{"value":"/ An mutable owning reference.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":6542,"byte_end":6574,"line_start":263,"line_end":263,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":6575,"byte_end":6578,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ This wraps an owner `O` and a reference `&mut T` pointing","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":6579,"byte_end":6640,"line_start":265,"line_end":265,"column_start":1,"column_end":62}},{"value":"/ at something reachable from `O::Target` while keeping","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":6641,"byte_end":6698,"line_start":266,"line_end":266,"column_start":1,"column_end":58}},{"value":"/ the ability to move `self` around.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":6699,"byte_end":6737,"line_start":267,"line_end":267,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":6738,"byte_end":6741,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ The owner is usually a pointer that points at some base type.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":6742,"byte_end":6807,"line_start":269,"line_end":269,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":6808,"byte_end":6811,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ For more details and examples, see the module and method docs.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":6812,"byte_end":6878,"line_start":271,"line_end":271,"column_start":1,"column_end":67}}]},{"kind":"Trait","id":{"krate":0,"index":21},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":7152,"byte_end":7158,"line_start":280,"line_end":280,"column_start":11,"column_end":17},"name":"Erased","qualname":"::Erased","value":"Erased","parent":null,"children":[],"decl_id":null,"docs":" Helper trait for an erased concrete type an owner dereferences to.\n This is used in form of a trait object for keeping\n something around to (virtually) call the destructor.\n","sig":null,"attributes":[{"value":"/ Helper trait for an erased concrete type an owner dereferences to.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":6959,"byte_end":7029,"line_start":277,"line_end":277,"column_start":1,"column_end":71}},{"value":"/ This is used in form of a trait object for keeping","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":7030,"byte_end":7084,"line_start":278,"line_end":278,"column_start":1,"column_end":55}},{"value":"/ something around to (virtually) call the destructor.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":7085,"byte_end":7141,"line_start":279,"line_end":279,"column_start":1,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":24},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":7406,"byte_end":7416,"line_start":286,"line_end":286,"column_start":18,"column_end":28},"name":"IntoErased","qualname":"::IntoErased","value":"IntoErased<'a>","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27}],"decl_id":null,"docs":" Helper trait for erasing the concrete type of what an owner derferences to,\n for example `Box<T> -> Box<dyn Erased>`. This would be unneeded with\n higher kinded types support in the language.\n","sig":null,"attributes":[{"value":"/ Helper trait for erasing the concrete type of what an owner derferences to,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":7187,"byte_end":7266,"line_start":283,"line_end":283,"column_start":1,"column_end":80}},{"value":"/ for example `Box<T> -> Box<dyn Erased>`. This would be unneeded with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":7267,"byte_end":7339,"line_start":284,"line_end":284,"column_start":1,"column_end":73}},{"value":"/ higher kinded types support in the language.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":7340,"byte_end":7388,"line_start":285,"line_end":285,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":26},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":7497,"byte_end":7503,"line_start":288,"line_end":288,"column_start":10,"column_end":16},"name":"Erased","qualname":"::IntoErased::Erased","value":"type Erased;","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":" Owner with the dereference type substituted to `Erased`.\n","sig":null,"attributes":[{"value":"/ Owner with the dereference type substituted to `Erased`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":7427,"byte_end":7487,"line_start":287,"line_end":287,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":7546,"byte_end":7557,"line_start":290,"line_end":290,"column_start":8,"column_end":19},"name":"into_erased","qualname":"::IntoErased::into_erased","value":"pub fn into_erased(Self) -> Self::Erased","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":" Perform the type erasure.\n","sig":null,"attributes":[{"value":"/ Perform the type erasure.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":7509,"byte_end":7538,"line_start":289,"line_end":289,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":8163,"byte_end":8166,"line_start":311,"line_end":311,"column_start":12,"column_end":15},"name":"new","qualname":"<OwningRef<O, T>>::new","value":"pub fn new(O) -> Self where O: StableAddress, O: Deref<Target = T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new owning reference from a owner\n initialized to the direct dereference of it.","sig":null,"attributes":[{"value":"/ Creates a new owning reference from a owner","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":7795,"byte_end":7842,"line_start":298,"line_end":298,"column_start":5,"column_end":52}},{"value":"/ initialized to the direct dereference of it.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":7847,"byte_end":7895,"line_start":299,"line_end":299,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":7900,"byte_end":7903,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":7908,"byte_end":7921,"line_start":301,"line_end":301,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":7926,"byte_end":7933,"line_start":302,"line_end":302,"column_start":5,"column_end":12}},{"value":"/ extern crate owning_ref;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":7938,"byte_end":7966,"line_start":303,"line_end":303,"column_start":5,"column_end":33}},{"value":"/ use owning_ref::OwningRef;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":7971,"byte_end":8001,"line_start":304,"line_end":304,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":8006,"byte_end":8009,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":8014,"byte_end":8029,"line_start":306,"line_end":306,"column_start":5,"column_end":20}},{"value":"/     let owning_ref = OwningRef::new(Box::new(42));","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":8034,"byte_end":8088,"line_start":307,"line_end":307,"column_start":5,"column_end":59}},{"value":"/     assert_eq!(*owning_ref, 42);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":8093,"byte_end":8129,"line_start":308,"line_end":308,"column_start":5,"column_end":41}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":8134,"byte_end":8139,"line_start":309,"line_end":309,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":8144,"byte_end":8151,"line_start":310,"line_end":310,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":8713,"byte_end":8738,"line_start":326,"line_end":326,"column_start":19,"column_end":44},"name":"new_assert_stable_address","qualname":"<OwningRef<O, T>>::new_assert_stable_address","value":"pub unsafe fn new_assert_stable_address(O) -> Self where O: Deref<Target = T>","parent":null,"children":[],"decl_id":null,"docs":" Like `new`, but doesn’t require `O` to implement the `StableAddress` trait.\n Instead, the caller is responsible to make the same promises as implementing the trait.","sig":null,"attributes":[{"value":"/ Like `new`, but doesn’t require `O` to implement the `StableAddress` trait.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":8346,"byte_end":8427,"line_start":321,"line_end":321,"column_start":5,"column_end":84}},{"value":"/ Instead, the caller is responsible to make the same promises as implementing the trait.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":8432,"byte_end":8523,"line_start":322,"line_end":322,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":8528,"byte_end":8531,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ This is useful for cases where coherence rules prevents implementing the trait","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":8536,"byte_end":8618,"line_start":324,"line_end":324,"column_start":5,"column_end":87}},{"value":"/ without adding a dependency to this crate in a third-party library.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":8623,"byte_end":8694,"line_start":325,"line_end":325,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":9614,"byte_end":9617,"line_start":355,"line_end":355,"column_start":12,"column_end":15},"name":"map","qualname":"<OwningRef<O, T>>::map","value":"pub fn map<F, U: ?Sized>(Self, F) -> OwningRef<O, U> where O: StableAddress,\nF: FnOnce(&T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into a new owning reference that points at something reachable\n from the previous one.","sig":null,"attributes":[{"value":"/ Converts `self` into a new owning reference that points at something reachable","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":8886,"byte_end":8968,"line_start":335,"line_end":335,"column_start":5,"column_end":87}},{"value":"/ from the previous one.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":8973,"byte_end":8999,"line_start":336,"line_end":336,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":9004,"byte_end":9007,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ This can be a reference to a field of `U`, something reachable from a field of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":9012,"byte_end":9094,"line_start":338,"line_end":338,"column_start":5,"column_end":87}},{"value":"/ `U`, or even something unrelated with a `'static` lifetime.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":9099,"byte_end":9162,"line_start":339,"line_end":339,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":9167,"byte_end":9170,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":9175,"byte_end":9188,"line_start":341,"line_end":341,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":9193,"byte_end":9200,"line_start":342,"line_end":342,"column_start":5,"column_end":12}},{"value":"/ extern crate owning_ref;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":9205,"byte_end":9233,"line_start":343,"line_end":343,"column_start":5,"column_end":33}},{"value":"/ use owning_ref::OwningRef;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":9238,"byte_end":9268,"line_start":344,"line_end":344,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":9273,"byte_end":9276,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":9281,"byte_end":9296,"line_start":346,"line_end":346,"column_start":5,"column_end":20}},{"value":"/     let owning_ref = OwningRef::new(Box::new([1, 2, 3, 4]));","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":9301,"byte_end":9365,"line_start":347,"line_end":347,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":9370,"byte_end":9373,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/     // create a owning reference that points at the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":9378,"byte_end":9433,"line_start":349,"line_end":349,"column_start":5,"column_end":60}},{"value":"/     // third element of the array.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":9438,"byte_end":9476,"line_start":350,"line_end":350,"column_start":5,"column_end":43}},{"value":"/     let owning_ref = owning_ref.map(|array| &array[2]);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":9481,"byte_end":9540,"line_start":351,"line_end":351,"column_start":5,"column_end":64}},{"value":"/     assert_eq!(*owning_ref, 3);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":9545,"byte_end":9580,"line_start":352,"line_end":352,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":9585,"byte_end":9590,"line_start":353,"line_end":353,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":9595,"byte_end":9602,"line_start":354,"line_end":354,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":10788,"byte_end":10802,"line_start":387,"line_end":387,"column_start":12,"column_end":26},"name":"map_with_owner","qualname":"<OwningRef<O, T>>::map_with_owner","value":"pub fn map_with_owner<F, U: ?Sized>(Self, F) -> OwningRef<O, U> where\nO: StableAddress, F: for<'a> FnOnce(&'a O, &'a T) -> &'a U","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into a new owning reference that points at something reachable\n from the previous one or from the owner itself.","sig":null,"attributes":[{"value":"/ Converts `self` into a new owning reference that points at something reachable","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":9840,"byte_end":9922,"line_start":365,"line_end":365,"column_start":5,"column_end":87}},{"value":"/ from the previous one or from the owner itself.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":9927,"byte_end":9978,"line_start":366,"line_end":366,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":9983,"byte_end":9986,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ This can be a reference to a field of `U`, something reachable from a field of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":9991,"byte_end":10073,"line_start":368,"line_end":368,"column_start":5,"column_end":87}},{"value":"/ `U` or from the owner `O`, or even something unrelated with a `'static` lifetime.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":10078,"byte_end":10163,"line_start":369,"line_end":369,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":10168,"byte_end":10171,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":10176,"byte_end":10189,"line_start":371,"line_end":371,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":10194,"byte_end":10201,"line_start":372,"line_end":372,"column_start":5,"column_end":12}},{"value":"/ extern crate owning_ref;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":10206,"byte_end":10234,"line_start":373,"line_end":373,"column_start":5,"column_end":33}},{"value":"/ use owning_ref::OwningRef;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":10239,"byte_end":10269,"line_start":374,"line_end":374,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":10274,"byte_end":10277,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":10282,"byte_end":10297,"line_start":376,"line_end":376,"column_start":5,"column_end":20}},{"value":"/     let owning_ref = OwningRef::new(Box::new([1, 2, 3, 4]));","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":10302,"byte_end":10366,"line_start":377,"line_end":377,"column_start":5,"column_end":69}},{"value":"/     let owning_ref = owning_ref.map(|array| &array[2]);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":10371,"byte_end":10430,"line_start":378,"line_end":378,"column_start":5,"column_end":64}},{"value":"/     assert_eq!(*owning_ref, 3);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":10435,"byte_end":10470,"line_start":379,"line_end":379,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":10475,"byte_end":10478,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/     // create a owning reference that points at the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":10483,"byte_end":10538,"line_start":381,"line_end":381,"column_start":5,"column_end":60}},{"value":"/     // second element of the array from the owning ref that was pointing to the third","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":10543,"byte_end":10632,"line_start":382,"line_end":382,"column_start":5,"column_end":94}},{"value":"/     let owning_ref = owning_ref.map_with_owner(|array, _prev| &array[1]);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":10637,"byte_end":10714,"line_start":383,"line_end":383,"column_start":5,"column_end":82}},{"value":"/     assert_eq!(*owning_ref, 2);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":10719,"byte_end":10754,"line_start":384,"line_end":384,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":10759,"byte_end":10764,"line_start":385,"line_end":385,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":10769,"byte_end":10776,"line_start":386,"line_end":386,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":11882,"byte_end":11889,"line_start":419,"line_end":419,"column_start":12,"column_end":19},"name":"try_map","qualname":"<OwningRef<O, T>>::try_map","value":"pub fn try_map<F, U: ?Sized, E>(Self, F) -> Result<OwningRef<O, U>, E> where\nO: StableAddress, F: FnOnce(&T) -> Result<&U, E>","parent":null,"children":[],"decl_id":null,"docs":" Tries to convert `self` into a new owning reference that points\n at something reachable from the previous one.","sig":null,"attributes":[{"value":"/ Tries to convert `self` into a new owning reference that points","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":11059,"byte_end":11126,"line_start":397,"line_end":397,"column_start":5,"column_end":72}},{"value":"/ at something reachable from the previous one.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":11131,"byte_end":11180,"line_start":398,"line_end":398,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":11185,"byte_end":11188,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ This can be a reference to a field of `U`, something reachable from a field of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":11193,"byte_end":11275,"line_start":400,"line_end":400,"column_start":5,"column_end":87}},{"value":"/ `U`, or even something unrelated with a `'static` lifetime.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":11280,"byte_end":11343,"line_start":401,"line_end":401,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":11348,"byte_end":11351,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":11356,"byte_end":11369,"line_start":403,"line_end":403,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":11374,"byte_end":11381,"line_start":404,"line_end":404,"column_start":5,"column_end":12}},{"value":"/ extern crate owning_ref;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":11386,"byte_end":11414,"line_start":405,"line_end":405,"column_start":5,"column_end":33}},{"value":"/ use owning_ref::OwningRef;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":11419,"byte_end":11449,"line_start":406,"line_end":406,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":11454,"byte_end":11457,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":11462,"byte_end":11477,"line_start":408,"line_end":408,"column_start":5,"column_end":20}},{"value":"/     let owning_ref = OwningRef::new(Box::new([1, 2, 3, 4]));","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":11482,"byte_end":11546,"line_start":409,"line_end":409,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":11551,"byte_end":11554,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/     // create a owning reference that points at the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":11559,"byte_end":11614,"line_start":411,"line_end":411,"column_start":5,"column_end":60}},{"value":"/     // third element of the array.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":11619,"byte_end":11657,"line_start":412,"line_end":412,"column_start":5,"column_end":43}},{"value":"/     let owning_ref = owning_ref.try_map(|array| {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":11662,"byte_end":11715,"line_start":413,"line_end":413,"column_start":5,"column_end":58}},{"value":"/         if array[2] == 3 { Ok(&array[2]) } else { Err(()) }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":11720,"byte_end":11783,"line_start":414,"line_end":414,"column_start":5,"column_end":68}},{"value":"/     });","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":11788,"byte_end":11799,"line_start":415,"line_end":415,"column_start":5,"column_end":16}},{"value":"/     assert_eq!(*owning_ref.unwrap(), 3);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":11804,"byte_end":11848,"line_start":416,"line_end":416,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":11853,"byte_end":11858,"line_start":417,"line_end":417,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":11863,"byte_end":11870,"line_start":418,"line_end":418,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":13098,"byte_end":13116,"line_start":452,"line_end":452,"column_start":12,"column_end":30},"name":"try_map_with_owner","qualname":"<OwningRef<O, T>>::try_map_with_owner","value":"pub fn try_map_with_owner<F, U: ?Sized, E>(Self, F)\n-> Result<OwningRef<O, U>, E> where O: StableAddress,\nF: for<'a> FnOnce(&'a O, &'a T) -> Result<&'a U, E>","parent":null,"children":[],"decl_id":null,"docs":" Tries to convert `self` into a new owning reference that points\n at something reachable from the previous one.","sig":null,"attributes":[{"value":"/ Tries to convert `self` into a new owning reference that points","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":12142,"byte_end":12209,"line_start":429,"line_end":429,"column_start":5,"column_end":72}},{"value":"/ at something reachable from the previous one.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":12214,"byte_end":12263,"line_start":430,"line_end":430,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":12268,"byte_end":12271,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ This can be a reference to a field of `U`, something reachable from a field of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":12276,"byte_end":12358,"line_start":432,"line_end":432,"column_start":5,"column_end":87}},{"value":"/ `U`, or even something unrelated with a `'static` lifetime.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":12363,"byte_end":12426,"line_start":433,"line_end":433,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":12431,"byte_end":12434,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":12439,"byte_end":12452,"line_start":435,"line_end":435,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":12457,"byte_end":12464,"line_start":436,"line_end":436,"column_start":5,"column_end":12}},{"value":"/ extern crate owning_ref;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":12469,"byte_end":12497,"line_start":437,"line_end":437,"column_start":5,"column_end":33}},{"value":"/ use owning_ref::OwningRef;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":12502,"byte_end":12532,"line_start":438,"line_end":438,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":12537,"byte_end":12540,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":12545,"byte_end":12560,"line_start":440,"line_end":440,"column_start":5,"column_end":20}},{"value":"/     let owning_ref = OwningRef::new(Box::new([1, 2, 3, 4]));","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":12565,"byte_end":12629,"line_start":441,"line_end":441,"column_start":5,"column_end":69}},{"value":"/     let owning_ref = owning_ref.map(|array| &array[2]);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":12634,"byte_end":12693,"line_start":442,"line_end":442,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":12698,"byte_end":12701,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/     // create a owning reference that points at the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":12706,"byte_end":12761,"line_start":444,"line_end":444,"column_start":5,"column_end":60}},{"value":"/     // second element of the array from the owning ref that was pointing to the third","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":12766,"byte_end":12855,"line_start":445,"line_end":445,"column_start":5,"column_end":94}},{"value":"/     let owning_ref = owning_ref.try_map_with_owner(|array, _prev| {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":12860,"byte_end":12931,"line_start":446,"line_end":446,"column_start":5,"column_end":76}},{"value":"/         if array[1] == 2 { Ok(&array[1]) } else { Err(()) }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":12936,"byte_end":12999,"line_start":447,"line_end":447,"column_start":5,"column_end":68}},{"value":"/     });","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":13004,"byte_end":13015,"line_start":448,"line_end":448,"column_start":5,"column_end":16}},{"value":"/     assert_eq!(*owning_ref.unwrap(), 2);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":13020,"byte_end":13064,"line_start":449,"line_end":449,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":13069,"byte_end":13074,"line_start":450,"line_end":450,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":13079,"byte_end":13086,"line_start":451,"line_end":451,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":13737,"byte_end":13746,"line_start":467,"line_end":467,"column_start":19,"column_end":28},"name":"map_owner","qualname":"<OwningRef<O, T>>::map_owner","value":"pub unsafe fn map_owner<F, P>(Self, F) -> OwningRef<P, T> where\nO: StableAddress, P: StableAddress, F: FnOnce(O) -> P","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into a new owning reference with a different owner type.","sig":null,"attributes":[{"value":"/ Converts `self` into a new owning reference with a different owner type.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":13403,"byte_end":13479,"line_start":462,"line_end":462,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":13484,"byte_end":13487,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ The new owner type needs to still contain the original owner in some way","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":13492,"byte_end":13568,"line_start":464,"line_end":464,"column_start":5,"column_end":81}},{"value":"/ so that the reference into it remains valid. This function is marked unsafe","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":13573,"byte_end":13652,"line_start":465,"line_end":465,"column_start":5,"column_end":84}},{"value":"/ because the user needs to manually uphold this guarantee.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":13657,"byte_end":13718,"line_start":466,"line_end":466,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":14251,"byte_end":14264,"line_start":483,"line_end":483,"column_start":12,"column_end":25},"name":"map_owner_box","qualname":"<OwningRef<O, T>>::map_owner_box","value":"pub fn map_owner_box(Self) -> OwningRef<Box<O>, T>","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into a new owning reference where the owner is wrapped\n in an additional `Box<O>`.","sig":null,"attributes":[{"value":"/ Converts `self` into a new owning reference where the owner is wrapped","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":14000,"byte_end":14074,"line_start":478,"line_end":478,"column_start":5,"column_end":79}},{"value":"/ in an additional `Box<O>`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":14079,"byte_end":14109,"line_start":479,"line_end":479,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":14114,"byte_end":14117,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ This can be used to safely erase the owner of any `OwningRef<O, T>`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":14122,"byte_end":14193,"line_start":481,"line_end":481,"column_start":5,"column_end":76}},{"value":"/ to a `OwningRef<Box<dyn Erased>, T>`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":14198,"byte_end":14239,"line_start":482,"line_end":482,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":15674,"byte_end":15685,"line_start":522,"line_end":522,"column_start":12,"column_end":23},"name":"erase_owner","qualname":"<OwningRef<O, T>>::erase_owner","value":"pub fn erase_owner<'a>(Self) -> OwningRef<O::Erased, T> where O: IntoErased","parent":null,"children":[],"decl_id":null,"docs":" Erases the concrete base type of the owner with a trait object.","sig":null,"attributes":[{"value":"/ Erases the concrete base type of the owner with a trait object.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":14418,"byte_end":14485,"line_start":490,"line_end":490,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":14490,"byte_end":14493,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ This allows mixing of owned references with different owner base types.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":14498,"byte_end":14573,"line_start":492,"line_end":492,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":14578,"byte_end":14581,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":14586,"byte_end":14599,"line_start":494,"line_end":494,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":14604,"byte_end":14611,"line_start":495,"line_end":495,"column_start":5,"column_end":12}},{"value":"/ extern crate owning_ref;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":14616,"byte_end":14644,"line_start":496,"line_end":496,"column_start":5,"column_end":33}},{"value":"/ use owning_ref::{OwningRef, Erased};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":14649,"byte_end":14689,"line_start":497,"line_end":497,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":14694,"byte_end":14697,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":14702,"byte_end":14717,"line_start":499,"line_end":499,"column_start":5,"column_end":20}},{"value":"/     // NB: Using the concrete types here for explicitnes.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":14722,"byte_end":14783,"line_start":500,"line_end":500,"column_start":5,"column_end":66}},{"value":"/     // For less verbose code type aliases like `BoxRef` are provided.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":14788,"byte_end":14861,"line_start":501,"line_end":501,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":14866,"byte_end":14869,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/     let owning_ref_a: OwningRef<Box<[i32; 4]>, [i32; 4]>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":14874,"byte_end":14934,"line_start":503,"line_end":503,"column_start":5,"column_end":65}},{"value":"/         = OwningRef::new(Box::new([1, 2, 3, 4]));","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":14939,"byte_end":14992,"line_start":504,"line_end":504,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":14997,"byte_end":15000,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/     let owning_ref_b: OwningRef<Box<Vec<(i32, bool)>>, Vec<(i32, bool)>>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":15005,"byte_end":15081,"line_start":506,"line_end":506,"column_start":5,"column_end":81}},{"value":"/         = OwningRef::new(Box::new(vec![(0, false), (1, true)]));","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":15086,"byte_end":15154,"line_start":507,"line_end":507,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":15159,"byte_end":15162,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/     let owning_ref_a: OwningRef<Box<[i32; 4]>, i32>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":15167,"byte_end":15222,"line_start":509,"line_end":509,"column_start":5,"column_end":60}},{"value":"/         = owning_ref_a.map(|a| &a[0]);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":15227,"byte_end":15269,"line_start":510,"line_end":510,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":15274,"byte_end":15277,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/     let owning_ref_b: OwningRef<Box<Vec<(i32, bool)>>, i32>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":15282,"byte_end":15345,"line_start":512,"line_end":512,"column_start":5,"column_end":68}},{"value":"/         = owning_ref_b.map(|a| &a[1].0);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":15350,"byte_end":15394,"line_start":513,"line_end":513,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":15399,"byte_end":15402,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/     let owning_refs: [OwningRef<Box<dyn Erased>, i32>; 2]","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":15407,"byte_end":15468,"line_start":515,"line_end":515,"column_start":5,"column_end":66}},{"value":"/         = [owning_ref_a.erase_owner(), owning_ref_b.erase_owner()];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":15473,"byte_end":15544,"line_start":516,"line_end":516,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":15549,"byte_end":15552,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(*owning_refs[0], 1);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":15557,"byte_end":15596,"line_start":518,"line_end":518,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(*owning_refs[1], 1);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":15601,"byte_end":15640,"line_start":519,"line_end":519,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":15645,"byte_end":15650,"line_start":520,"line_end":520,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":15655,"byte_end":15662,"line_start":521,"line_end":521,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":15964,"byte_end":15972,"line_start":534,"line_end":534,"column_start":12,"column_end":20},"name":"as_owner","qualname":"<OwningRef<O, T>>::as_owner","value":"pub fn as_owner(&Self) -> &O","parent":null,"children":[],"decl_id":null,"docs":" A reference to the underlying owner.\n","sig":null,"attributes":[{"value":"/ A reference to the underlying owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":15912,"byte_end":15952,"line_start":533,"line_end":533,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":16082,"byte_end":16092,"line_start":539,"line_end":539,"column_start":12,"column_end":22},"name":"into_owner","qualname":"<OwningRef<O, T>>::into_owner","value":"pub fn into_owner(Self) -> O","parent":null,"children":[],"decl_id":null,"docs":" Discards the reference and retrieves the owner.\n","sig":null,"attributes":[{"value":"/ Discards the reference and retrieves the owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":16019,"byte_end":16070,"line_start":538,"line_end":538,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":16560,"byte_end":16563,"line_start":558,"line_end":558,"column_start":12,"column_end":15},"name":"new","qualname":"<OwningRefMut<O, T>>::new","value":"pub fn new(O) -> Self where O: StableAddress, O: DerefMut<Target = T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new owning reference from a owner\n initialized to the direct dereference of it.","sig":null,"attributes":[{"value":"/ Creates a new owning reference from a owner","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":16178,"byte_end":16225,"line_start":545,"line_end":545,"column_start":5,"column_end":52}},{"value":"/ initialized to the direct dereference of it.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":16230,"byte_end":16278,"line_start":546,"line_end":546,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":16283,"byte_end":16286,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":16291,"byte_end":16304,"line_start":548,"line_end":548,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":16309,"byte_end":16316,"line_start":549,"line_end":549,"column_start":5,"column_end":12}},{"value":"/ extern crate owning_ref;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":16321,"byte_end":16349,"line_start":550,"line_end":550,"column_start":5,"column_end":33}},{"value":"/ use owning_ref::OwningRefMut;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":16354,"byte_end":16387,"line_start":551,"line_end":551,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":16392,"byte_end":16395,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":16400,"byte_end":16415,"line_start":553,"line_end":553,"column_start":5,"column_end":20}},{"value":"/     let owning_ref_mut = OwningRefMut::new(Box::new(42));","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":16420,"byte_end":16481,"line_start":554,"line_end":554,"column_start":5,"column_end":66}},{"value":"/     assert_eq!(*owning_ref_mut, 42);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":16486,"byte_end":16526,"line_start":555,"line_end":555,"column_start":5,"column_end":45}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":16531,"byte_end":16536,"line_start":556,"line_end":556,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":16541,"byte_end":16548,"line_start":557,"line_end":557,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":17124,"byte_end":17149,"line_start":573,"line_end":573,"column_start":19,"column_end":44},"name":"new_assert_stable_address","qualname":"<OwningRefMut<O, T>>::new_assert_stable_address","value":"pub unsafe fn new_assert_stable_address(O) -> Self where O: DerefMut<Target =\nT>","parent":null,"children":[],"decl_id":null,"docs":" Like `new`, but doesn’t require `O` to implement the `StableAddress` trait.\n Instead, the caller is responsible to make the same promises as implementing the trait.","sig":null,"attributes":[{"value":"/ Like `new`, but doesn’t require `O` to implement the `StableAddress` trait.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":16757,"byte_end":16838,"line_start":568,"line_end":568,"column_start":5,"column_end":84}},{"value":"/ Instead, the caller is responsible to make the same promises as implementing the trait.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":16843,"byte_end":16934,"line_start":569,"line_end":569,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":16939,"byte_end":16942,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ This is useful for cases where coherence rules prevents implementing the trait","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":16947,"byte_end":17029,"line_start":571,"line_end":571,"column_start":5,"column_end":87}},{"value":"/ without adding a dependency to this crate in a third-party library.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":17034,"byte_end":17105,"line_start":572,"line_end":572,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":18062,"byte_end":18065,"line_start":602,"line_end":602,"column_start":12,"column_end":15},"name":"map","qualname":"<OwningRefMut<O, T>>::map","value":"pub fn map<F, U: ?Sized>(Self, F) -> OwningRef<O, U> where O: StableAddress,\nF: FnOnce(&mut T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into a new _shared_ owning reference that points at\n something reachable from the previous one.","sig":null,"attributes":[{"value":"/ Converts `self` into a new _shared_ owning reference that points at","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":17311,"byte_end":17382,"line_start":582,"line_end":582,"column_start":5,"column_end":76}},{"value":"/ something reachable from the previous one.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":17387,"byte_end":17433,"line_start":583,"line_end":583,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":17438,"byte_end":17441,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ This can be a reference to a field of `U`, something reachable from a field of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":17446,"byte_end":17528,"line_start":585,"line_end":585,"column_start":5,"column_end":87}},{"value":"/ `U`, or even something unrelated with a `'static` lifetime.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":17533,"byte_end":17596,"line_start":586,"line_end":586,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":17601,"byte_end":17604,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":17609,"byte_end":17622,"line_start":588,"line_end":588,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":17627,"byte_end":17634,"line_start":589,"line_end":589,"column_start":5,"column_end":12}},{"value":"/ extern crate owning_ref;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":17639,"byte_end":17667,"line_start":590,"line_end":590,"column_start":5,"column_end":33}},{"value":"/ use owning_ref::OwningRefMut;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":17672,"byte_end":17705,"line_start":591,"line_end":591,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":17710,"byte_end":17713,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":17718,"byte_end":17733,"line_start":593,"line_end":593,"column_start":5,"column_end":20}},{"value":"/     let owning_ref_mut = OwningRefMut::new(Box::new([1, 2, 3, 4]));","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":17738,"byte_end":17809,"line_start":594,"line_end":594,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":17814,"byte_end":17817,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/     // create a owning reference that points at the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":17822,"byte_end":17877,"line_start":596,"line_end":596,"column_start":5,"column_end":60}},{"value":"/     // third element of the array.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":17882,"byte_end":17920,"line_start":597,"line_end":597,"column_start":5,"column_end":43}},{"value":"/     let owning_ref = owning_ref_mut.map(|array| &array[2]);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":17925,"byte_end":17988,"line_start":598,"line_end":598,"column_start":5,"column_end":68}},{"value":"/     assert_eq!(*owning_ref, 3);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":17993,"byte_end":18028,"line_start":599,"line_end":599,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":18033,"byte_end":18038,"line_start":600,"line_end":600,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":18043,"byte_end":18050,"line_start":601,"line_end":601,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":19068,"byte_end":19075,"line_start":632,"line_end":632,"column_start":12,"column_end":19},"name":"map_mut","qualname":"<OwningRefMut<O, T>>::map_mut","value":"pub fn map_mut<F, U: ?Sized>(Self, F) -> OwningRefMut<O, U> where\nO: StableAddress, F: FnOnce(&mut T) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into a new _mutable_ owning reference that points at\n something reachable from the previous one.","sig":null,"attributes":[{"value":"/ Converts `self` into a new _mutable_ owning reference that points at","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":18300,"byte_end":18372,"line_start":612,"line_end":612,"column_start":5,"column_end":77}},{"value":"/ something reachable from the previous one.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":18377,"byte_end":18423,"line_start":613,"line_end":613,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":18428,"byte_end":18431,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ This can be a reference to a field of `U`, something reachable from a field of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":18436,"byte_end":18518,"line_start":615,"line_end":615,"column_start":5,"column_end":87}},{"value":"/ `U`, or even something unrelated with a `'static` lifetime.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":18523,"byte_end":18586,"line_start":616,"line_end":616,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":18591,"byte_end":18594,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":18599,"byte_end":18612,"line_start":618,"line_end":618,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":18617,"byte_end":18624,"line_start":619,"line_end":619,"column_start":5,"column_end":12}},{"value":"/ extern crate owning_ref;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":18629,"byte_end":18657,"line_start":620,"line_end":620,"column_start":5,"column_end":33}},{"value":"/ use owning_ref::OwningRefMut;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":18662,"byte_end":18695,"line_start":621,"line_end":621,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":18700,"byte_end":18703,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":18708,"byte_end":18723,"line_start":623,"line_end":623,"column_start":5,"column_end":20}},{"value":"/     let owning_ref_mut = OwningRefMut::new(Box::new([1, 2, 3, 4]));","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":18728,"byte_end":18799,"line_start":624,"line_end":624,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":18804,"byte_end":18807,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/     // create a owning reference that points at the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":18812,"byte_end":18867,"line_start":626,"line_end":626,"column_start":5,"column_end":60}},{"value":"/     // third element of the array.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":18872,"byte_end":18910,"line_start":627,"line_end":627,"column_start":5,"column_end":43}},{"value":"/     let owning_ref_mut = owning_ref_mut.map_mut(|array| &mut array[2]);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":18915,"byte_end":18990,"line_start":628,"line_end":628,"column_start":5,"column_end":80}},{"value":"/     assert_eq!(*owning_ref_mut, 3);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":18995,"byte_end":19034,"line_start":629,"line_end":629,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":19039,"byte_end":19044,"line_start":630,"line_end":630,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":19049,"byte_end":19056,"line_start":631,"line_end":631,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":20166,"byte_end":20173,"line_start":664,"line_end":664,"column_start":12,"column_end":19},"name":"try_map","qualname":"<OwningRefMut<O, T>>::try_map","value":"pub fn try_map<F, U: ?Sized, E>(Self, F) -> Result<OwningRef<O, U>, E> where\nO: StableAddress, F: FnOnce(&mut T) -> Result<&U, E>","parent":null,"children":[],"decl_id":null,"docs":" Tries to convert `self` into a new _shared_ owning reference that points\n at something reachable from the previous one.","sig":null,"attributes":[{"value":"/ Tries to convert `self` into a new _shared_ owning reference that points","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":19320,"byte_end":19396,"line_start":642,"line_end":642,"column_start":5,"column_end":81}},{"value":"/ at something reachable from the previous one.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":19401,"byte_end":19450,"line_start":643,"line_end":643,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":19455,"byte_end":19458,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ This can be a reference to a field of `U`, something reachable from a field of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":19463,"byte_end":19545,"line_start":645,"line_end":645,"column_start":5,"column_end":87}},{"value":"/ `U`, or even something unrelated with a `'static` lifetime.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":19550,"byte_end":19613,"line_start":646,"line_end":646,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":19618,"byte_end":19621,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":19626,"byte_end":19639,"line_start":648,"line_end":648,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":19644,"byte_end":19651,"line_start":649,"line_end":649,"column_start":5,"column_end":12}},{"value":"/ extern crate owning_ref;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":19656,"byte_end":19684,"line_start":650,"line_end":650,"column_start":5,"column_end":33}},{"value":"/ use owning_ref::OwningRefMut;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":19689,"byte_end":19722,"line_start":651,"line_end":651,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":19727,"byte_end":19730,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":19735,"byte_end":19750,"line_start":653,"line_end":653,"column_start":5,"column_end":20}},{"value":"/     let owning_ref_mut = OwningRefMut::new(Box::new([1, 2, 3, 4]));","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":19755,"byte_end":19826,"line_start":654,"line_end":654,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":19831,"byte_end":19834,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/     // create a owning reference that points at the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":19839,"byte_end":19894,"line_start":656,"line_end":656,"column_start":5,"column_end":60}},{"value":"/     // third element of the array.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":19899,"byte_end":19937,"line_start":657,"line_end":657,"column_start":5,"column_end":43}},{"value":"/     let owning_ref = owning_ref_mut.try_map(|array| {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":19942,"byte_end":19999,"line_start":658,"line_end":658,"column_start":5,"column_end":62}},{"value":"/         if array[2] == 3 { Ok(&array[2]) } else { Err(()) }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":20004,"byte_end":20067,"line_start":659,"line_end":659,"column_start":5,"column_end":68}},{"value":"/     });","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":20072,"byte_end":20083,"line_start":660,"line_end":660,"column_start":5,"column_end":16}},{"value":"/     assert_eq!(*owning_ref.unwrap(), 3);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":20088,"byte_end":20132,"line_start":661,"line_end":661,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":20137,"byte_end":20142,"line_start":662,"line_end":662,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":20147,"byte_end":20154,"line_start":663,"line_end":663,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":21301,"byte_end":21312,"line_start":696,"line_end":696,"column_start":12,"column_end":23},"name":"try_map_mut","qualname":"<OwningRefMut<O, T>>::try_map_mut","value":"pub fn try_map_mut<F, U: ?Sized, E>(Self, F) -> Result<OwningRefMut<O, U>, E>\nwhere O: StableAddress, F: FnOnce(&mut T) -> Result<&mut U, E>","parent":null,"children":[],"decl_id":null,"docs":" Tries to convert `self` into a new _mutable_ owning reference that points\n at something reachable from the previous one.","sig":null,"attributes":[{"value":"/ Tries to convert `self` into a new _mutable_ owning reference that points","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":20438,"byte_end":20515,"line_start":674,"line_end":674,"column_start":5,"column_end":82}},{"value":"/ at something reachable from the previous one.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":20520,"byte_end":20569,"line_start":675,"line_end":675,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":20574,"byte_end":20577,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ This can be a reference to a field of `U`, something reachable from a field of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":20582,"byte_end":20664,"line_start":677,"line_end":677,"column_start":5,"column_end":87}},{"value":"/ `U`, or even something unrelated with a `'static` lifetime.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":20669,"byte_end":20732,"line_start":678,"line_end":678,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":20737,"byte_end":20740,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":20745,"byte_end":20758,"line_start":680,"line_end":680,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":20763,"byte_end":20770,"line_start":681,"line_end":681,"column_start":5,"column_end":12}},{"value":"/ extern crate owning_ref;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":20775,"byte_end":20803,"line_start":682,"line_end":682,"column_start":5,"column_end":33}},{"value":"/ use owning_ref::OwningRefMut;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":20808,"byte_end":20841,"line_start":683,"line_end":683,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":20846,"byte_end":20849,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":20854,"byte_end":20869,"line_start":685,"line_end":685,"column_start":5,"column_end":20}},{"value":"/     let owning_ref_mut = OwningRefMut::new(Box::new([1, 2, 3, 4]));","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":20874,"byte_end":20945,"line_start":686,"line_end":686,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":20950,"byte_end":20953,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/     // create a owning reference that points at the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":20958,"byte_end":21013,"line_start":688,"line_end":688,"column_start":5,"column_end":60}},{"value":"/     // third element of the array.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":21018,"byte_end":21056,"line_start":689,"line_end":689,"column_start":5,"column_end":43}},{"value":"/     let owning_ref_mut = owning_ref_mut.try_map_mut(|array| {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":21061,"byte_end":21126,"line_start":690,"line_end":690,"column_start":5,"column_end":70}},{"value":"/         if array[2] == 3 { Ok(&mut array[2]) } else { Err(()) }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":21131,"byte_end":21198,"line_start":691,"line_end":691,"column_start":5,"column_end":72}},{"value":"/     });","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":21203,"byte_end":21214,"line_start":692,"line_end":692,"column_start":5,"column_end":16}},{"value":"/     assert_eq!(*owning_ref_mut.unwrap(), 3);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":21219,"byte_end":21267,"line_start":693,"line_end":693,"column_start":5,"column_end":53}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":21272,"byte_end":21277,"line_start":694,"line_end":694,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":21282,"byte_end":21289,"line_start":695,"line_end":695,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":21921,"byte_end":21930,"line_start":711,"line_end":711,"column_start":19,"column_end":28},"name":"map_owner","qualname":"<OwningRefMut<O, T>>::map_owner","value":"pub unsafe fn map_owner<F, P>(Self, F) -> OwningRefMut<P, T> where\nO: StableAddress, P: StableAddress, F: FnOnce(O) -> P","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into a new owning reference with a different owner type.","sig":null,"attributes":[{"value":"/ Converts `self` into a new owning reference with a different owner type.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":21587,"byte_end":21663,"line_start":706,"line_end":706,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":21668,"byte_end":21671,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ The new owner type needs to still contain the original owner in some way","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":21676,"byte_end":21752,"line_start":708,"line_end":708,"column_start":5,"column_end":81}},{"value":"/ so that the reference into it remains valid. This function is marked unsafe","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":21757,"byte_end":21836,"line_start":709,"line_end":709,"column_start":5,"column_end":84}},{"value":"/ because the user needs to manually uphold this guarantee.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":21841,"byte_end":21902,"line_start":710,"line_end":710,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":22447,"byte_end":22460,"line_start":727,"line_end":727,"column_start":12,"column_end":25},"name":"map_owner_box","qualname":"<OwningRefMut<O, T>>::map_owner_box","value":"pub fn map_owner_box(Self) -> OwningRefMut<Box<O>, T>","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into a new owning reference where the owner is wrapped\n in an additional `Box<O>`.","sig":null,"attributes":[{"value":"/ Converts `self` into a new owning reference where the owner is wrapped","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":22190,"byte_end":22264,"line_start":722,"line_end":722,"column_start":5,"column_end":79}},{"value":"/ in an additional `Box<O>`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":22269,"byte_end":22299,"line_start":723,"line_end":723,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":22304,"byte_end":22307,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ This can be used to safely erase the owner of any `OwningRefMut<O, T>`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":22312,"byte_end":22386,"line_start":725,"line_end":725,"column_start":5,"column_end":79}},{"value":"/ to a `OwningRefMut<Box<dyn Erased>, T>`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":22391,"byte_end":22435,"line_start":726,"line_end":726,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":23960,"byte_end":23971,"line_start":766,"line_end":766,"column_start":12,"column_end":23},"name":"erase_owner","qualname":"<OwningRefMut<O, T>>::erase_owner","value":"pub fn erase_owner<'a>(Self) -> OwningRefMut<O::Erased, T> where O: IntoErased","parent":null,"children":[],"decl_id":null,"docs":" Erases the concrete base type of the owner with a trait object.","sig":null,"attributes":[{"value":"/ Erases the concrete base type of the owner with a trait object.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":22620,"byte_end":22687,"line_start":734,"line_end":734,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":22692,"byte_end":22695,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ This allows mixing of owned references with different owner base types.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":22700,"byte_end":22775,"line_start":736,"line_end":736,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":22780,"byte_end":22783,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":22788,"byte_end":22801,"line_start":738,"line_end":738,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":22806,"byte_end":22813,"line_start":739,"line_end":739,"column_start":5,"column_end":12}},{"value":"/ extern crate owning_ref;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":22818,"byte_end":22846,"line_start":740,"line_end":740,"column_start":5,"column_end":33}},{"value":"/ use owning_ref::{OwningRefMut, Erased};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":22851,"byte_end":22894,"line_start":741,"line_end":741,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":22899,"byte_end":22902,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":22907,"byte_end":22922,"line_start":743,"line_end":743,"column_start":5,"column_end":20}},{"value":"/     // NB: Using the concrete types here for explicitnes.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":22927,"byte_end":22988,"line_start":744,"line_end":744,"column_start":5,"column_end":66}},{"value":"/     // For less verbose code type aliases like `BoxRef` are provided.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":22993,"byte_end":23066,"line_start":745,"line_end":745,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":23071,"byte_end":23074,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/     let owning_ref_mut_a: OwningRefMut<Box<[i32; 4]>, [i32; 4]>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":23079,"byte_end":23146,"line_start":747,"line_end":747,"column_start":5,"column_end":72}},{"value":"/         = OwningRefMut::new(Box::new([1, 2, 3, 4]));","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":23151,"byte_end":23207,"line_start":748,"line_end":748,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":23212,"byte_end":23215,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/     let owning_ref_mut_b: OwningRefMut<Box<Vec<(i32, bool)>>, Vec<(i32, bool)>>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":23220,"byte_end":23303,"line_start":750,"line_end":750,"column_start":5,"column_end":88}},{"value":"/         = OwningRefMut::new(Box::new(vec![(0, false), (1, true)]));","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":23308,"byte_end":23379,"line_start":751,"line_end":751,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":23384,"byte_end":23387,"line_start":752,"line_end":752,"column_start":5,"column_end":8}},{"value":"/     let owning_ref_mut_a: OwningRefMut<Box<[i32; 4]>, i32>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":23392,"byte_end":23454,"line_start":753,"line_end":753,"column_start":5,"column_end":67}},{"value":"/         = owning_ref_mut_a.map_mut(|a| &mut a[0]);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":23459,"byte_end":23513,"line_start":754,"line_end":754,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":23518,"byte_end":23521,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/     let owning_ref_mut_b: OwningRefMut<Box<Vec<(i32, bool)>>, i32>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":23526,"byte_end":23596,"line_start":756,"line_end":756,"column_start":5,"column_end":75}},{"value":"/         = owning_ref_mut_b.map_mut(|a| &mut a[1].0);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":23601,"byte_end":23657,"line_start":757,"line_end":757,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":23662,"byte_end":23665,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/     let owning_refs_mut: [OwningRefMut<Box<dyn Erased>, i32>; 2]","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":23670,"byte_end":23738,"line_start":759,"line_end":759,"column_start":5,"column_end":73}},{"value":"/         = [owning_ref_mut_a.erase_owner(), owning_ref_mut_b.erase_owner()];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":23743,"byte_end":23822,"line_start":760,"line_end":760,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":23827,"byte_end":23830,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(*owning_refs_mut[0], 1);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":23835,"byte_end":23878,"line_start":762,"line_end":762,"column_start":5,"column_end":48}},{"value":"/     assert_eq!(*owning_refs_mut[1], 1);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":23883,"byte_end":23926,"line_start":763,"line_end":763,"column_start":5,"column_end":48}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":23931,"byte_end":23936,"line_start":764,"line_end":764,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":23941,"byte_end":23948,"line_start":765,"line_end":765,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":24256,"byte_end":24264,"line_start":778,"line_end":778,"column_start":12,"column_end":20},"name":"as_owner","qualname":"<OwningRefMut<O, T>>::as_owner","value":"pub fn as_owner(&Self) -> &O","parent":null,"children":[],"decl_id":null,"docs":" A reference to the underlying owner.\n","sig":null,"attributes":[{"value":"/ A reference to the underlying owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":24204,"byte_end":24244,"line_start":777,"line_end":777,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":24371,"byte_end":24383,"line_start":783,"line_end":783,"column_start":12,"column_end":24},"name":"as_owner_mut","qualname":"<OwningRefMut<O, T>>::as_owner_mut","value":"pub fn as_owner_mut(&mut Self) -> &mut O","parent":null,"children":[],"decl_id":null,"docs":" A mutable reference to the underlying owner.\n","sig":null,"attributes":[{"value":"/ A mutable reference to the underlying owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":24311,"byte_end":24359,"line_start":782,"line_end":782,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":24505,"byte_end":24515,"line_start":788,"line_end":788,"column_start":12,"column_end":22},"name":"into_owner","qualname":"<OwningRefMut<O, T>>::into_owner","value":"pub fn into_owner(Self) -> O","parent":null,"children":[],"decl_id":null,"docs":" Discards the reference and retrieves the owner.\n","sig":null,"attributes":[{"value":"/ Discards the reference and retrieves the owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":24442,"byte_end":24493,"line_start":787,"line_end":787,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":92},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":25947,"byte_end":25959,"line_start":818,"line_end":818,"column_start":12,"column_end":24},"name":"OwningHandle","qualname":"::OwningHandle","value":"OwningHandle {  }","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96}],"decl_id":null,"docs":" `OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows\n consumers to pass around an owned object and a dependent reference,\n `OwningHandle` contains an owned object and a dependent _object_.","sig":null,"attributes":[{"value":"/ `OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":24764,"byte_end":24839,"line_start":799,"line_end":799,"column_start":1,"column_end":76}},{"value":"/ consumers to pass around an owned object and a dependent reference,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":24840,"byte_end":24911,"line_start":800,"line_end":800,"column_start":1,"column_end":72}},{"value":"/ `OwningHandle` contains an owned object and a dependent _object_.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":24912,"byte_end":24981,"line_start":801,"line_end":801,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":24982,"byte_end":24985,"line_start":802,"line_end":802,"column_start":1,"column_end":4}},{"value":"/ `OwningHandle` can encapsulate a `RefMut` along with its associated","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":24986,"byte_end":25057,"line_start":803,"line_end":803,"column_start":1,"column_end":72}},{"value":"/ `RefCell`, or an `RwLockReadGuard` along with its associated `RwLock`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":25058,"byte_end":25132,"line_start":804,"line_end":804,"column_start":1,"column_end":75}},{"value":"/ However, the API is completely generic and there are no restrictions on","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":25133,"byte_end":25208,"line_start":805,"line_end":805,"column_start":1,"column_end":76}},{"value":"/ what types of owning and dependent objects may be used.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":25209,"byte_end":25268,"line_start":806,"line_end":806,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":25269,"byte_end":25272,"line_start":807,"line_end":807,"column_start":1,"column_end":4}},{"value":"/ `OwningHandle` is created by passing an owner object (which dereferences","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":25273,"byte_end":25349,"line_start":808,"line_end":808,"column_start":1,"column_end":77}},{"value":"/ to a stable address) along with a callback which receives a pointer to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":25350,"byte_end":25424,"line_start":809,"line_end":809,"column_start":1,"column_end":75}},{"value":"/ that stable location. The callback may then dereference the pointer and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":25425,"byte_end":25500,"line_start":810,"line_end":810,"column_start":1,"column_end":76}},{"value":"/ mint a dependent object, with the guarantee that the returned object will","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":25501,"byte_end":25578,"line_start":811,"line_end":811,"column_start":1,"column_end":78}},{"value":"/ not outlive the referent of the pointer.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":25579,"byte_end":25623,"line_start":812,"line_end":812,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":25624,"byte_end":25627,"line_start":813,"line_end":813,"column_start":1,"column_end":4}},{"value":"/ Since the callback needs to dereference a raw pointer, it requires `unsafe`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":25628,"byte_end":25707,"line_start":814,"line_end":814,"column_start":1,"column_end":80}},{"value":"/ code. To avoid forcing this unsafety on most callers, the `ToHandle` trait is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":25708,"byte_end":25789,"line_start":815,"line_end":815,"column_start":1,"column_end":82}},{"value":"/ implemented for common data structures. Types that implement `ToHandle` can","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":25790,"byte_end":25869,"line_start":816,"line_end":816,"column_start":1,"column_end":80}},{"value":"/ be wrapped into an `OwningHandle` without passing a callback.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":25870,"byte_end":25935,"line_start":817,"line_end":817,"column_start":1,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":109},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":26586,"byte_end":26594,"line_start":847,"line_end":847,"column_start":11,"column_end":19},"name":"ToHandle","qualname":"::ToHandle","value":"ToHandle","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111}],"decl_id":null,"docs":" Trait to implement the conversion of owner to handle for common types.\n","sig":null,"attributes":[{"value":"/ Trait to implement the conversion of owner to handle for common types.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":26501,"byte_end":26575,"line_start":846,"line_end":846,"column_start":1,"column_end":75}}]},{"kind":"Type","id":{"krate":0,"index":110},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":26673,"byte_end":26679,"line_start":849,"line_end":849,"column_start":10,"column_end":16},"name":"Handle","qualname":"::ToHandle::Handle","value":"type Handle: Deref;","parent":{"krate":0,"index":109},"children":[],"decl_id":null,"docs":" The type of handle to be encapsulated by the OwningHandle.\n","sig":null,"attributes":[{"value":"/ The type of handle to be encapsulated by the OwningHandle.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":26601,"byte_end":26663,"line_start":848,"line_end":848,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":26833,"byte_end":26842,"line_start":853,"line_end":853,"column_start":15,"column_end":24},"name":"to_handle","qualname":"::ToHandle::to_handle","value":"pub unsafe fn to_handle(*const Self) -> Self::Handle","parent":{"krate":0,"index":109},"children":[],"decl_id":null,"docs":" Given an appropriately-long-lived pointer to ourselves, create a\n handle to be encapsulated by the `OwningHandle`.\n","sig":null,"attributes":[{"value":"/ Given an appropriately-long-lived pointer to ourselves, create a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":26693,"byte_end":26761,"line_start":851,"line_end":851,"column_start":5,"column_end":73}},{"value":"/ handle to be encapsulated by the `OwningHandle`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":26766,"byte_end":26818,"line_start":852,"line_end":852,"column_start":5,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":112},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":26972,"byte_end":26983,"line_start":857,"line_end":857,"column_start":11,"column_end":22},"name":"ToHandleMut","qualname":"::ToHandleMut","value":"ToHandleMut","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":114}],"decl_id":null,"docs":" Trait to implement the conversion of owner to mutable handle for common types.\n","sig":null,"attributes":[{"value":"/ Trait to implement the conversion of owner to mutable handle for common types.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":26879,"byte_end":26961,"line_start":856,"line_end":856,"column_start":1,"column_end":83}}]},{"kind":"Type","id":{"krate":0,"index":113},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":27062,"byte_end":27071,"line_start":859,"line_end":859,"column_start":10,"column_end":19},"name":"HandleMut","qualname":"::ToHandleMut::HandleMut","value":"type HandleMut: DerefMut;","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":" The type of handle to be encapsulated by the OwningHandle.\n","sig":null,"attributes":[{"value":"/ The type of handle to be encapsulated by the OwningHandle.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":26990,"byte_end":27052,"line_start":858,"line_end":858,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":27236,"byte_end":27249,"line_start":863,"line_end":863,"column_start":15,"column_end":28},"name":"to_handle_mut","qualname":"::ToHandleMut::to_handle_mut","value":"pub unsafe fn to_handle_mut(*const Self) -> Self::HandleMut","parent":{"krate":0,"index":112},"children":[],"decl_id":null,"docs":" Given an appropriately-long-lived pointer to ourselves, create a\n mutable handle to be encapsulated by the `OwningHandle`.\n","sig":null,"attributes":[{"value":"/ Given an appropriately-long-lived pointer to ourselves, create a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":27088,"byte_end":27156,"line_start":861,"line_end":861,"column_start":5,"column_end":73}},{"value":"/ mutable handle to be encapsulated by the `OwningHandle`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":27161,"byte_end":27221,"line_start":862,"line_end":862,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":27623,"byte_end":27626,"line_start":872,"line_end":872,"column_start":12,"column_end":15},"name":"new","qualname":"<OwningHandle<O, H>>::new","value":"pub fn new(O) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `OwningHandle` for a type that implements `ToHandle`. For types\n that don't implement `ToHandle`, callers may invoke `new_with_fn`, which accepts\n a callback to perform the conversion.\n","sig":null,"attributes":[{"value":"/ Create a new `OwningHandle` for a type that implements `ToHandle`. For types","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":27396,"byte_end":27476,"line_start":869,"line_end":869,"column_start":5,"column_end":85}},{"value":"/ that don't implement `ToHandle`, callers may invoke `new_with_fn`, which accepts","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":27481,"byte_end":27565,"line_start":870,"line_end":870,"column_start":5,"column_end":89}},{"value":"/ a callback to perform the conversion.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":27570,"byte_end":27611,"line_start":871,"line_end":871,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":27938,"byte_end":27945,"line_start":881,"line_end":881,"column_start":12,"column_end":19},"name":"new_mut","qualname":"<OwningHandle<O, H>>::new_mut","value":"pub fn new_mut(O) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new mutable `OwningHandle` for a type that implements `ToHandleMut`.\n","sig":null,"attributes":[{"value":"/ Create a new mutable `OwningHandle` for a type that implements `ToHandleMut`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":27845,"byte_end":27926,"line_start":880,"line_end":880,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":28386,"byte_end":28397,"line_start":893,"line_end":893,"column_start":12,"column_end":23},"name":"new_with_fn","qualname":"<OwningHandle<O, H>>::new_with_fn","value":"pub fn new_with_fn<F>(O, F) -> Self where F: FnOnce(*const O::Target) -> H","parent":null,"children":[],"decl_id":null,"docs":" Create a new OwningHandle. The provided callback will be invoked with\n a pointer to the object owned by `o`, and the returned value is stored\n as the object to which this `OwningHandle` will forward `Deref` and\n `DerefMut`.\n","sig":null,"attributes":[{"value":"/ Create a new OwningHandle. The provided callback will be invoked with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":28126,"byte_end":28199,"line_start":889,"line_end":889,"column_start":5,"column_end":78}},{"value":"/ a pointer to the object owned by `o`, and the returned value is stored","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":28204,"byte_end":28278,"line_start":890,"line_end":890,"column_start":5,"column_end":79}},{"value":"/ as the object to which this `OwningHandle` will forward `Deref` and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":28283,"byte_end":28354,"line_start":891,"line_end":891,"column_start":5,"column_end":76}},{"value":"/ `DerefMut`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":28359,"byte_end":28374,"line_start":892,"line_end":892,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":28909,"byte_end":28916,"line_start":911,"line_end":911,"column_start":12,"column_end":19},"name":"try_new","qualname":"<OwningHandle<O, H>>::try_new","value":"pub fn try_new<F, E>(O, F) -> Result<Self, E> where\nF: FnOnce(*const O::Target) -> Result<H, E>","parent":null,"children":[],"decl_id":null,"docs":" Create a new OwningHandle. The provided callback will be invoked with\n a pointer to the object owned by `o`, and the returned value is stored\n as the object to which this `OwningHandle` will forward `Deref` and\n `DerefMut`.\n","sig":null,"attributes":[{"value":"/ Create a new OwningHandle. The provided callback will be invoked with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":28649,"byte_end":28722,"line_start":907,"line_end":907,"column_start":5,"column_end":78}},{"value":"/ a pointer to the object owned by `o`, and the returned value is stored","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":28727,"byte_end":28801,"line_start":908,"line_end":908,"column_start":5,"column_end":79}},{"value":"/ as the object to which this `OwningHandle` will forward `Deref` and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":28806,"byte_end":28877,"line_start":909,"line_end":909,"column_start":5,"column_end":76}},{"value":"/ `DerefMut`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":28882,"byte_end":28897,"line_start":910,"line_end":910,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":29248,"byte_end":29256,"line_start":926,"line_end":926,"column_start":12,"column_end":20},"name":"as_owner","qualname":"<OwningHandle<O, H>>::as_owner","value":"pub fn as_owner(&Self) -> &O","parent":null,"children":[],"decl_id":null,"docs":" A getter for the underlying owner.\n","sig":null,"attributes":[{"value":"/ A getter for the underlying owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":29198,"byte_end":29236,"line_start":925,"line_end":925,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":29372,"byte_end":29382,"line_start":931,"line_end":931,"column_start":12,"column_end":22},"name":"into_owner","qualname":"<OwningHandle<O, H>>::into_owner","value":"pub fn into_owner(Self) -> O","parent":null,"children":[],"decl_id":null,"docs":" Discards the dependent object and returns the owner.\n","sig":null,"attributes":[{"value":"/ Discards the dependent object and returns the owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":29304,"byte_end":29360,"line_start":930,"line_end":930,"column_start":5,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":336},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":35469,"byte_end":35475,"line_start":1166,"line_end":1166,"column_start":10,"column_end":16},"name":"BoxRef","qualname":"::BoxRef","value":"OwningRef<Box<T>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses a `Box` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses a `Box` as the owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":35394,"byte_end":35459,"line_start":1165,"line_end":1165,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":339},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":35585,"byte_end":35591,"line_start":1168,"line_end":1168,"column_start":10,"column_end":16},"name":"VecRef","qualname":"::VecRef","value":"OwningRef<Vec<T>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses a `Vec` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses a `Vec` as the owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":35510,"byte_end":35575,"line_start":1167,"line_end":1167,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":342},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":35704,"byte_end":35713,"line_start":1170,"line_end":1170,"column_start":10,"column_end":19},"name":"StringRef","qualname":"::StringRef","value":"OwningRef<String, str>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses a `String` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses a `String` as the owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":35626,"byte_end":35694,"line_start":1169,"line_end":1169,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":343},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":35815,"byte_end":35820,"line_start":1173,"line_end":1173,"column_start":10,"column_end":15},"name":"RcRef","qualname":"::RcRef","value":"OwningRef<Rc<T>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses a `Rc` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses a `Rc` as the owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":35741,"byte_end":35805,"line_start":1172,"line_end":1172,"column_start":1,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":346},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":35929,"byte_end":35935,"line_start":1175,"line_end":1175,"column_start":10,"column_end":16},"name":"ArcRef","qualname":"::ArcRef","value":"OwningRef<Arc<T>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses a `Arc` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses a `Arc` as the owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":35854,"byte_end":35919,"line_start":1174,"line_end":1174,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":349},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":36046,"byte_end":36052,"line_start":1178,"line_end":1178,"column_start":10,"column_end":16},"name":"RefRef","qualname":"::RefRef","value":"OwningRef<Ref, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses a `Ref` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses a `Ref` as the owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":35971,"byte_end":36036,"line_start":1177,"line_end":1177,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":353},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":36173,"byte_end":36182,"line_start":1180,"line_end":1180,"column_start":10,"column_end":19},"name":"RefMutRef","qualname":"::RefMutRef","value":"OwningRef<RefMut, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses a `RefMut` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses a `RefMut` as the owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":36095,"byte_end":36163,"line_start":1179,"line_end":1179,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":357},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":36310,"byte_end":36323,"line_start":1182,"line_end":1182,"column_start":10,"column_end":23},"name":"MutexGuardRef","qualname":"::MutexGuardRef","value":"OwningRef<MutexGuard, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses a `MutexGuard` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses a `MutexGuard` as the owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":36228,"byte_end":36300,"line_start":1181,"line_end":1181,"column_start":1,"column_end":73}}]},{"kind":"Type","id":{"krate":0,"index":361},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":36460,"byte_end":36478,"line_start":1184,"line_end":1184,"column_start":10,"column_end":28},"name":"RwLockReadGuardRef","qualname":"::RwLockReadGuardRef","value":"OwningRef<RwLockReadGuard, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":36373,"byte_end":36450,"line_start":1183,"line_end":1183,"column_start":1,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":365},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":36621,"byte_end":36640,"line_start":1186,"line_end":1186,"column_start":10,"column_end":29},"name":"RwLockWriteGuardRef","qualname":"::RwLockWriteGuardRef","value":"OwningRef<RwLockWriteGuard, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":36533,"byte_end":36611,"line_start":1185,"line_end":1185,"column_start":1,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":369},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":36780,"byte_end":36789,"line_start":1189,"line_end":1189,"column_start":10,"column_end":19},"name":"BoxRefMut","qualname":"::BoxRefMut","value":"OwningRefMut<Box<T>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a mutable owning reference that uses a `Box` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a mutable owning reference that uses a `Box` as the owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":36697,"byte_end":36770,"line_start":1188,"line_end":1188,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":372},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":36910,"byte_end":36919,"line_start":1191,"line_end":1191,"column_start":10,"column_end":19},"name":"VecRefMut","qualname":"::VecRefMut","value":"OwningRefMut<Vec<T>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a mutable owning reference that uses a `Vec` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a mutable owning reference that uses a `Vec` as the owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":36827,"byte_end":36900,"line_start":1190,"line_end":1190,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":375},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":37043,"byte_end":37055,"line_start":1193,"line_end":1193,"column_start":10,"column_end":22},"name":"StringRefMut","qualname":"::StringRefMut","value":"OwningRefMut<String, str>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a mutable owning reference that uses a `String` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a mutable owning reference that uses a `String` as the owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":36957,"byte_end":37033,"line_start":1192,"line_end":1192,"column_start":1,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":376},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":37172,"byte_end":37184,"line_start":1196,"line_end":1196,"column_start":10,"column_end":22},"name":"RefMutRefMut","qualname":"::RefMutRefMut","value":"OwningRefMut<RefMut, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a mutable owning reference that uses a `RefMut` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a mutable owning reference that uses a `RefMut` as the owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":37086,"byte_end":37162,"line_start":1195,"line_end":1195,"column_start":1,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":380},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":37323,"byte_end":37339,"line_start":1198,"line_end":1198,"column_start":10,"column_end":26},"name":"MutexGuardRefMut","qualname":"::MutexGuardRefMut","value":"OwningRefMut<MutexGuard, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a mutable owning reference that uses a `MutexGuard` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a mutable owning reference that uses a `MutexGuard` as the owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":37233,"byte_end":37313,"line_start":1197,"line_end":1197,"column_start":1,"column_end":81}}]},{"kind":"Type","id":{"krate":0,"index":384},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":37488,"byte_end":37510,"line_start":1200,"line_end":1200,"column_start":10,"column_end":32},"name":"RwLockWriteGuardRefMut","qualname":"::RwLockWriteGuardRefMut","value":"OwningRefMut<RwLockWriteGuard, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a mutable owning reference that uses a `RwLockWriteGuard` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a mutable owning reference that uses a `RwLockWriteGuard` as the owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":37392,"byte_end":37478,"line_start":1199,"line_end":1199,"column_start":1,"column_end":87}}]},{"kind":"Type","id":{"krate":0,"index":403},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":38117,"byte_end":38129,"line_start":1222,"line_end":1222,"column_start":10,"column_end":22},"name":"ErasedBoxRef","qualname":"::ErasedBoxRef","value":"OwningRef<Box<dyn Erased>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses an erased `Box` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses an erased `Box` as the owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":38034,"byte_end":38107,"line_start":1221,"line_end":1221,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":405},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":38248,"byte_end":38259,"line_start":1224,"line_end":1224,"column_start":10,"column_end":21},"name":"ErasedRcRef","qualname":"::ErasedRcRef","value":"OwningRef<Rc<dyn Erased>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses an erased `Rc` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses an erased `Rc` as the owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":38166,"byte_end":38238,"line_start":1223,"line_end":1223,"column_start":1,"column_end":73}}]},{"kind":"Type","id":{"krate":0,"index":407},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":38378,"byte_end":38390,"line_start":1226,"line_end":1226,"column_start":10,"column_end":22},"name":"ErasedArcRef","qualname":"::ErasedArcRef","value":"OwningRef<Arc<dyn Erased>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a owning reference that uses an erased `Arc` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a owning reference that uses an erased `Arc` as the owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":38295,"byte_end":38368,"line_start":1225,"line_end":1225,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":409},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":38519,"byte_end":38534,"line_start":1229,"line_end":1229,"column_start":10,"column_end":25},"name":"ErasedBoxRefMut","qualname":"::ErasedBoxRefMut","value":"OwningRefMut<Box<dyn Erased>, U>","parent":null,"children":[],"decl_id":null,"docs":" Typedef of a mutable owning reference that uses an erased `Box` as the owner.\n","sig":null,"attributes":[{"value":"/ Typedef of a mutable owning reference that uses an erased `Box` as the owner.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":38428,"byte_end":38509,"line_start":1228,"line_end":1228,"column_start":1,"column_end":82}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":7181,"byte_end":7182,"line_start":281,"line_end":281,"column_start":20,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":7773,"byte_end":7782,"line_start":297,"line_end":297,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":40},{"krate":0,"index":44},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":16153,"byte_end":16165,"line_start":544,"line_end":544,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":72},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":26060,"byte_end":26072,"line_start":825,"line_end":825,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":26257,"byte_end":26269,"line_start":834,"line_end":834,"column_start":37,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":26350,"byte_end":26362,"line_start":838,"line_end":838,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":27300,"byte_end":27312,"line_start":866,"line_end":866,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":27740,"byte_end":27752,"line_start":877,"line_end":877,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":28063,"byte_end":28075,"line_start":886,"line_end":886,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":29824,"byte_end":29833,"line_start":947,"line_end":947,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":29986,"byte_end":29998,"line_start":957,"line_end":957,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":186},{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":30154,"byte_end":30166,"line_start":967,"line_end":967,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":30328,"byte_end":30337,"line_start":975,"line_end":975,"column_start":45,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":30392,"byte_end":30404,"line_start":977,"line_end":977,"column_start":45,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":30447,"byte_end":30456,"line_start":979,"line_end":979,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":30550,"byte_end":30562,"line_start":985,"line_end":985,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":30656,"byte_end":30668,"line_start":991,"line_end":991,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":30775,"byte_end":30784,"line_start":997,"line_end":997,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":30877,"byte_end":30886,"line_start":1003,"line_end":1003,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":31057,"byte_end":31069,"line_start":1012,"line_end":1012,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":31262,"byte_end":31271,"line_start":1021,"line_end":1021,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":31602,"byte_end":31611,"line_start":1035,"line_end":1035,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":31905,"byte_end":31917,"line_start":1047,"line_end":1047,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":32214,"byte_end":32223,"line_start":1059,"line_end":1059,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":32461,"byte_end":32470,"line_start":1070,"line_end":1070,"column_start":50,"column_end":59},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":32548,"byte_end":32557,"line_start":1073,"line_end":1073,"column_start":36,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":32643,"byte_end":32652,"line_start":1075,"line_end":1075,"column_start":36,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":32739,"byte_end":32751,"line_start":1078,"line_end":1078,"column_start":36,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":32841,"byte_end":32853,"line_start":1080,"line_end":1080,"column_start":36,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":33084,"byte_end":33093,"line_start":1089,"line_end":1089,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":33239,"byte_end":33248,"line_start":1095,"line_end":1095,"column_start":27,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":33305,"byte_end":33314,"line_start":1097,"line_end":1097,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":33491,"byte_end":33500,"line_start":1103,"line_end":1103,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":33647,"byte_end":33656,"line_start":1109,"line_end":1109,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":33804,"byte_end":33816,"line_start":1115,"line_end":1115,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":33962,"byte_end":33974,"line_start":1121,"line_end":1121,"column_start":27,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":34031,"byte_end":34043,"line_start":1123,"line_end":1123,"column_start":35,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":34220,"byte_end":34232,"line_start":1129,"line_end":1129,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":34379,"byte_end":34391,"line_start":1135,"line_end":1135,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":34906,"byte_end":34913,"line_start":1151,"line_end":1151,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":35064,"byte_end":35071,"line_start":1156,"line_end":1156,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":37612,"byte_end":37615,"line_start":1202,"line_end":1202,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":37767,"byte_end":37769,"line_start":1208,"line_end":1208,"column_start":43,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":396},{"krate":0,"index":397}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":37920,"byte_end":37923,"line_start":1214,"line_end":1214,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":402}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":7181,"byte_end":7182,"line_start":281,"line_end":281,"column_start":20,"column_end":21},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":23},"to":{"krate":0,"index":21}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":7773,"byte_end":7782,"line_start":297,"line_end":297,"column_start":20,"column_end":29},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":11},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":16153,"byte_end":16165,"line_start":544,"line_end":544,"column_start":20,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":16},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":26060,"byte_end":26072,"line_start":825,"line_end":825,"column_start":22,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":92},"to":{"krate":2,"index":3227}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":26257,"byte_end":26269,"line_start":834,"line_end":834,"column_start":37,"column_end":49},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":92},"to":{"krate":20,"index":8}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":26350,"byte_end":26362,"line_start":838,"line_end":838,"column_start":25,"column_end":37},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":92},"to":{"krate":2,"index":3240}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":27300,"byte_end":27312,"line_start":866,"line_end":866,"column_start":12,"column_end":24},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":92},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":27740,"byte_end":27752,"line_start":877,"line_end":877,"column_start":12,"column_end":24},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":92},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":28063,"byte_end":28075,"line_start":886,"line_end":886,"column_start":12,"column_end":24},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":92},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":29824,"byte_end":29833,"line_start":947,"line_end":947,"column_start":30,"column_end":39},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":11},"to":{"krate":2,"index":3227}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":29986,"byte_end":29998,"line_start":957,"line_end":957,"column_start":30,"column_end":42},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":16},"to":{"krate":2,"index":3227}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":30154,"byte_end":30166,"line_start":967,"line_end":967,"column_start":33,"column_end":45},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":16},"to":{"krate":2,"index":3240}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":30328,"byte_end":30337,"line_start":975,"line_end":975,"column_start":45,"column_end":54},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":11},"to":{"krate":20,"index":8}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":30392,"byte_end":30404,"line_start":977,"line_end":977,"column_start":45,"column_end":57},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":16},"to":{"krate":20,"index":8}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":30447,"byte_end":30456,"line_start":979,"line_end":979,"column_start":33,"column_end":42},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":11},"to":{"krate":2,"index":2913}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":30550,"byte_end":30562,"line_start":985,"line_end":985,"column_start":33,"column_end":45},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":16},"to":{"krate":2,"index":2913}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":30656,"byte_end":30668,"line_start":991,"line_end":991,"column_start":33,"column_end":45},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":16},"to":{"krate":2,"index":2916}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":30775,"byte_end":30784,"line_start":997,"line_end":997,"column_start":34,"column_end":43},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":11},"to":{"krate":2,"index":2615}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":30877,"byte_end":30886,"line_start":1003,"line_end":1003,"column_start":32,"column_end":41},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":11},"to":{"krate":2,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":31057,"byte_end":31069,"line_start":1012,"line_end":1012,"column_start":32,"column_end":44},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":16},"to":{"krate":2,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":31262,"byte_end":31271,"line_start":1021,"line_end":1021,"column_start":49,"column_end":58},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":11},"to":{"krate":2,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":31602,"byte_end":31611,"line_start":1035,"line_end":1035,"column_start":30,"column_end":39},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":11},"to":{"krate":2,"index":9394}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":31905,"byte_end":31917,"line_start":1047,"line_end":1047,"column_start":30,"column_end":42},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":16},"to":{"krate":2,"index":9394}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":32214,"byte_end":32223,"line_start":1059,"line_end":1059,"column_start":30,"column_end":39},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":11},"to":{"krate":2,"index":2637}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":32461,"byte_end":32470,"line_start":1070,"line_end":1070,"column_start":50,"column_end":59},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":11},"to":{"krate":20,"index":9}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":32548,"byte_end":32557,"line_start":1073,"line_end":1073,"column_start":36,"column_end":45},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":11},"to":{"krate":2,"index":3016}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":32643,"byte_end":32652,"line_start":1075,"line_end":1075,"column_start":36,"column_end":45},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":11},"to":{"krate":2,"index":3028}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":32739,"byte_end":32751,"line_start":1078,"line_end":1078,"column_start":36,"column_end":48},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":16},"to":{"krate":2,"index":3016}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":32841,"byte_end":32853,"line_start":1080,"line_end":1080,"column_start":36,"column_end":48},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":16},"to":{"krate":2,"index":3028}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":33084,"byte_end":33093,"line_start":1089,"line_end":1089,"column_start":34,"column_end":43},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":11},"to":{"krate":2,"index":2667}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":33239,"byte_end":33248,"line_start":1095,"line_end":1095,"column_start":27,"column_end":36},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":11},"to":{"krate":2,"index":2672}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":33305,"byte_end":33314,"line_start":1097,"line_end":1097,"column_start":35,"column_end":44},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":11},"to":{"krate":2,"index":2714}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":33491,"byte_end":33500,"line_start":1103,"line_end":1103,"column_start":28,"column_end":37},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":11},"to":{"krate":2,"index":2703}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":33647,"byte_end":33656,"line_start":1109,"line_end":1109,"column_start":29,"column_end":38},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":11},"to":{"krate":2,"index":9600}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":33804,"byte_end":33816,"line_start":1115,"line_end":1115,"column_start":34,"column_end":46},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":16},"to":{"krate":2,"index":2667}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":33962,"byte_end":33974,"line_start":1121,"line_end":1121,"column_start":27,"column_end":39},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":16},"to":{"krate":2,"index":2672}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":34031,"byte_end":34043,"line_start":1123,"line_end":1123,"column_start":35,"column_end":47},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":16},"to":{"krate":2,"index":2714}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":34220,"byte_end":34232,"line_start":1129,"line_end":1129,"column_start":28,"column_end":40},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":16},"to":{"krate":2,"index":2703}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":34379,"byte_end":34391,"line_start":1135,"line_end":1135,"column_start":29,"column_end":41},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":16},"to":{"krate":2,"index":9600}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":34906,"byte_end":34913,"line_start":1151,"line_end":1151,"column_start":31,"column_end":38},"kind":{"Impl":{"id":39}},"from":{"krate":2,"index":4299},"to":{"krate":0,"index":109}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":35064,"byte_end":35071,"line_start":1156,"line_end":1156,"column_start":34,"column_end":41},"kind":{"Impl":{"id":40}},"from":{"krate":2,"index":4299},"to":{"krate":0,"index":112}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":37612,"byte_end":37615,"line_start":1202,"line_end":1202,"column_start":43,"column_end":46},"kind":{"Impl":{"id":41}},"from":{"krate":5,"index":313},"to":{"krate":0,"index":24}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":37767,"byte_end":37769,"line_start":1208,"line_end":1208,"column_start":43,"column_end":45},"kind":{"Impl":{"id":42}},"from":{"krate":5,"index":4648},"to":{"krate":0,"index":24}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/owning_ref-0.4.1/src/lib.rs","byte_start":37920,"byte_end":37923,"line_start":1214,"line_end":1214,"column_start":43,"column_end":46},"kind":{"Impl":{"id":43}},"from":{"krate":5,"index":5966},"to":{"krate":0,"index":24}}]}