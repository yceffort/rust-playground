{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5","program":"/usr/local/rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","lock_api","/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"owning_ref\"","-C","metadata=99e1408191295748","-C","extra-filename=-99e1408191295748","--out-dir","/workspaces/rust-playground/wasm/tutorial/hello-wasm/target/rls/debug/deps","-L","dependency=/workspaces/rust-playground/wasm/tutorial/hello-wasm/target/rls/debug/deps","--extern","owning_ref=/workspaces/rust-playground/wasm/tutorial/hello-wasm/target/rls/debug/deps/libowning_ref-83527ec03bf1c046.rmeta","--extern","scopeguard=/workspaces/rust-playground/wasm/tutorial/hello-wasm/target/rls/debug/deps/libscopeguard-afa8490217e407f1.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/usr/local/rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/workspaces/rust-playground/wasm/tutorial/hello-wasm/target/rls/debug/deps/liblock_api-99e1408191295748.rmeta"},"prelude":{"crate_id":{"name":"lock_api","disambiguator":[13066671693769442501,0]},"crate_root":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src","external_crates":[{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[8373705112501149482,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[16909867051943430517,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11260902004430380252,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","num":4,"id":{"name":"scopeguard","disambiguator":[12282018462781743967,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","num":5,"id":{"name":"owning_ref","disambiguator":[16203619859139640513,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","num":6,"id":{"name":"std","disambiguator":[12872056181829019095,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","num":7,"id":{"name":"alloc","disambiguator":[10608756751411298727,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","num":8,"id":{"name":"libc","disambiguator":[4369074810188542311,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","num":9,"id":{"name":"unwind","disambiguator":[12333111663820923515,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","num":10,"id":{"name":"cfg_if","disambiguator":[12748886438148098175,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[6627577059144635863,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15896330838049133250,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","num":13,"id":{"name":"rustc_demangle","disambiguator":[2582212836281766037,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","num":14,"id":{"name":"std_detect","disambiguator":[4723863376138925013,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[2482912266844122781,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[16993901708144586312,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[15622067442351408235,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[12927959315880918009,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","num":19,"id":{"name":"miniz_oxide","disambiguator":[1763799641200411356,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","num":20,"id":{"name":"adler","disambiguator":[2454364557606196642,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","num":21,"id":{"name":"panic_unwind","disambiguator":[10980657607002924382,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","num":22,"id":{"name":"stable_deref_trait","disambiguator":[3990214667989801576,0]}}],"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":333,"byte_end":3974,"line_start":8,"line_end":109,"column_start":1,"column_end":19}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":3906,"byte_end":3907,"line_start":103,"line_end":103,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":3940,"byte_end":3941,"line_start":106,"line_end":106,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":3972,"byte_end":3973,"line_start":109,"line_end":109,"column_start":17,"column_end":18},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":333,"byte_end":3974,"line_start":8,"line_end":109,"column_start":1,"column_end":19},"name":"","qualname":"::","value":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":843}],"decl_id":null,"docs":" This library provides type-safe and fully-featured `Mutex` and `RwLock`\n types which wrap a simple raw mutex or rwlock type. This has several\n benefits: not only does it eliminate a large portion of the work in\n implementing custom lock types, it also allows users to write code which is\n generic with regards to different lock implementations.","sig":null,"attributes":[{"value":"/ This library provides type-safe and fully-featured `Mutex` and `RwLock`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":333,"byte_end":408,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ types which wrap a simple raw mutex or rwlock type. This has several","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":409,"byte_end":481,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"/ benefits: not only does it eliminate a large portion of the work in","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":482,"byte_end":553,"line_start":10,"line_end":10,"column_start":1,"column_end":72}},{"value":"/ implementing custom lock types, it also allows users to write code which is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":554,"byte_end":633,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ generic with regards to different lock implementations.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":634,"byte_end":693,"line_start":12,"line_end":12,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":694,"byte_end":697,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Basic usage of this crate is very straightforward:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":698,"byte_end":752,"line_start":14,"line_end":14,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":753,"byte_end":756,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ 1. Create a raw lock type. This should only contain the lock state, not any","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":757,"byte_end":836,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/    data protected by the lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":837,"byte_end":871,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"/ 2. Implement the `RawMutex` trait for your custom lock type.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":872,"byte_end":936,"line_start":18,"line_end":18,"column_start":1,"column_end":65}},{"value":"/ 3. Export your mutex as a type alias for `lock_api::Mutex`, and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":937,"byte_end":1004,"line_start":19,"line_end":19,"column_start":1,"column_end":68}},{"value":"/    your mutex guard as a type alias for `lock_api::MutexGuard`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1005,"byte_end":1072,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"/    See the [example](#example) below for details.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1073,"byte_end":1126,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1127,"byte_end":1130,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This process is similar for RwLocks, except that two guards need to be","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1131,"byte_end":1205,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/ exported instead of one. (Or 3 guards if your type supports upgradable read","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1206,"byte_end":1285,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ locks, see [extension traits](#extension-traits) below for details)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1286,"byte_end":1357,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1358,"byte_end":1361,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1362,"byte_end":1375,"line_start":27,"line_end":27,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1376,"byte_end":1379,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1380,"byte_end":1387,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use lock_api::{RawMutex, Mutex, GuardSend};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1388,"byte_end":1435,"line_start":30,"line_end":30,"column_start":1,"column_end":48}},{"value":"/ use std::sync::atomic::{AtomicBool, Ordering, ATOMIC_BOOL_INIT};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1436,"byte_end":1504,"line_start":31,"line_end":31,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1505,"byte_end":1508,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // 1. Define our raw lock type","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1509,"byte_end":1543,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/ pub struct RawSpinlock(AtomicBool);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1544,"byte_end":1583,"line_start":34,"line_end":34,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1584,"byte_end":1587,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // 2. Implement RawMutex for this type","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1588,"byte_end":1630,"line_start":36,"line_end":36,"column_start":1,"column_end":43}},{"value":"/ unsafe impl RawMutex for RawSpinlock {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1631,"byte_end":1673,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"/     const INIT: RawSpinlock = RawSpinlock(ATOMIC_BOOL_INIT);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1674,"byte_end":1738,"line_start":38,"line_end":38,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1739,"byte_end":1742,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/     // A spinlock guard can be sent to another thread and unlocked there","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1743,"byte_end":1819,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/     type GuardMarker = GuardSend;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1820,"byte_end":1857,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1858,"byte_end":1861,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/     fn lock(&self) {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1862,"byte_end":1886,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"/         // Note: This isn't the best way of implementing a spinlock, but it","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1887,"byte_end":1966,"line_start":44,"line_end":44,"column_start":1,"column_end":80}},{"value":"/         // suffices for the sake of this example.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":1967,"byte_end":2020,"line_start":45,"line_end":45,"column_start":1,"column_end":54}},{"value":"/         while !self.try_lock() {}","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2021,"byte_end":2058,"line_start":46,"line_end":46,"column_start":1,"column_end":38}},{"value":"/     }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2059,"byte_end":2068,"line_start":47,"line_end":47,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2069,"byte_end":2072,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/     fn try_lock(&self) -> bool {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2073,"byte_end":2109,"line_start":49,"line_end":49,"column_start":1,"column_end":37}},{"value":"/         self.0.swap(true, Ordering::Acquire)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2110,"byte_end":2158,"line_start":50,"line_end":50,"column_start":1,"column_end":49}},{"value":"/     }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2159,"byte_end":2168,"line_start":51,"line_end":51,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2169,"byte_end":2172,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/     fn unlock(&self) {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2173,"byte_end":2199,"line_start":53,"line_end":53,"column_start":1,"column_end":27}},{"value":"/         self.0.store(false, Ordering::Release);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2200,"byte_end":2251,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/     }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2252,"byte_end":2261,"line_start":55,"line_end":55,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2262,"byte_end":2267,"line_start":56,"line_end":56,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2268,"byte_end":2271,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ // 3. Export the wrappers. This are the types that your users will actually use.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2272,"byte_end":2356,"line_start":58,"line_end":58,"column_start":1,"column_end":85}},{"value":"/ pub type Spinlock<T> = lock_api::Mutex<RawSpinlock, T>;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2357,"byte_end":2416,"line_start":59,"line_end":59,"column_start":1,"column_end":60}},{"value":"/ pub type SpinlockGuard<'a, T> = lock_api::MutexGuard<'a, RawSpinlock, T>;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2417,"byte_end":2494,"line_start":60,"line_end":60,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2495,"byte_end":2502,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2503,"byte_end":2506,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ # Extension traits","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2507,"byte_end":2529,"line_start":63,"line_end":63,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2530,"byte_end":2533,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ In addition to basic locking & unlocking functionality, you have the option","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2534,"byte_end":2613,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/ of exposing additional functionality in your lock types by implementing","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2614,"byte_end":2689,"line_start":66,"line_end":66,"column_start":1,"column_end":76}},{"value":"/ additional traits for it. Examples of extension features include:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2690,"byte_end":2759,"line_start":67,"line_end":67,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2760,"byte_end":2763,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ - Fair unlocking (`RawMutexFair`, `RawRwLockFair`)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2764,"byte_end":2818,"line_start":69,"line_end":69,"column_start":1,"column_end":55}},{"value":"/ - Lock timeouts (`RawMutexTimed`, `RawRwLockTimed`)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2819,"byte_end":2874,"line_start":70,"line_end":70,"column_start":1,"column_end":56}},{"value":"/ - Downgradable write locks (`RawRwLockDowngradable`)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2875,"byte_end":2931,"line_start":71,"line_end":71,"column_start":1,"column_end":57}},{"value":"/ - Recursive read locks (`RawRwLockRecursive`)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2932,"byte_end":2981,"line_start":72,"line_end":72,"column_start":1,"column_end":50}},{"value":"/ - Upgradable read locks (`RawRwLockUpgrade`)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":2982,"byte_end":3030,"line_start":73,"line_end":73,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":3031,"byte_end":3034,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ The `Mutex` and `RwLock` wrappers will automatically expose this additional","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":3035,"byte_end":3114,"line_start":75,"line_end":75,"column_start":1,"column_end":80}},{"value":"/ functionality if the raw lock type implements these extension traits.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":3115,"byte_end":3188,"line_start":76,"line_end":76,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":3189,"byte_end":3192,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ # Cargo features","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":3193,"byte_end":3213,"line_start":78,"line_end":78,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":3214,"byte_end":3217,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ This crate supports two cargo features:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":3218,"byte_end":3261,"line_start":80,"line_end":80,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":3262,"byte_end":3265,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ - `owning_ref`: Allows your lock types to be used with the `owning_ref` crate.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":3266,"byte_end":3348,"line_start":82,"line_end":82,"column_start":1,"column_end":83}},{"value":"/ - `nightly`: Enables nightly-only features. At the moment the only such","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":3349,"byte_end":3424,"line_start":83,"line_end":83,"column_start":1,"column_end":76}},{"value":"/   feature is `const fn` constructors for lock types.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":3425,"byte_end":3481,"line_start":84,"line_end":84,"column_start":1,"column_end":57}},{"value":"no_std","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":3483,"byte_end":3493,"line_start":86,"line_end":86,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":3494,"byte_end":3516,"line_start":87,"line_end":87,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":6},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":3752,"byte_end":3761,"line_start":97,"line_end":97,"column_start":12,"column_end":21},"name":"GuardSend","qualname":"::GuardSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is `Send`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":3667,"byte_end":3740,"line_start":96,"line_end":96,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":9},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":3857,"byte_end":3868,"line_start":100,"line_end":100,"column_start":12,"column_end":23},"name":"GuardNoSend","qualname":"::GuardNoSend","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker type which indicates that the Guard type for a lock is not `Send`.\n","sig":null,"attributes":[{"value":"/ Marker type which indicates that the Guard type for a lock is not `Send`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/lib.rs","byte_start":3768,"byte_end":3845,"line_start":99,"line_end":99,"column_start":1,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":35},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":4830,"byte_end":4838,"line_start":26,"line_end":26,"column_start":18,"column_end":26},"name":"RawMutex","qualname":"::mutex::RawMutex","value":"RawMutex","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40}],"decl_id":null,"docs":" Basic operations for a mutex.","sig":null,"attributes":[{"value":"/ Basic operations for a mutex.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":4496,"byte_end":4529,"line_start":17,"line_end":17,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":4530,"byte_end":4533,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `Mutex` to form a safe and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":4534,"byte_end":4609,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"/ fully-functioning mutex type.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":4610,"byte_end":4643,"line_start":20,"line_end":20,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":4644,"byte_end":4647,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":4648,"byte_end":4660,"line_start":22,"line_end":22,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":4661,"byte_end":4664,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the mutex is actually","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":4665,"byte_end":4737,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/ exclusive: a lock can't be acquired while the mutex is already locked.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":4738,"byte_end":4812,"line_start":25,"line_end":25,"column_start":1,"column_end":75}}]},{"kind":"Const","id":{"krate":0,"index":36},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":4896,"byte_end":4900,"line_start":28,"line_end":28,"column_start":11,"column_end":15},"name":"INIT","qualname":"::mutex::RawMutex::INIT","value":"Self","parent":{"krate":0,"index":35},"children":[],"decl_id":null,"docs":" Initial value for an unlocked mutex.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked mutex.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":4845,"byte_end":4885,"line_start":27,"line_end":27,"column_start":5,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":37},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":5065,"byte_end":5076,"line_start":32,"line_end":32,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::mutex::RawMutex::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":35},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":4913,"byte_end":4988,"line_start":30,"line_end":30,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":4993,"byte_end":5055,"line_start":31,"line_end":31,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":5170,"byte_end":5174,"line_start":35,"line_end":35,"column_start":8,"column_end":12},"name":"lock","qualname":"::mutex::RawMutex::lock","value":"pub fn lock(&Self)","parent":{"krate":0,"index":35},"children":[],"decl_id":null,"docs":" Acquires this mutex, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires this mutex, blocking the current thread until it is able to do so.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":5083,"byte_end":5162,"line_start":34,"line_end":34,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":5248,"byte_end":5256,"line_start":38,"line_end":38,"column_start":8,"column_end":16},"name":"try_lock","qualname":"::mutex::RawMutex::try_lock","value":"pub fn try_lock(&Self) -> bool","parent":{"krate":0,"index":35},"children":[],"decl_id":null,"docs":" Attempts to acquire this mutex without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this mutex without blocking.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":5188,"byte_end":5240,"line_start":37,"line_end":37,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":5309,"byte_end":5315,"line_start":41,"line_end":41,"column_start":8,"column_end":14},"name":"unlock","qualname":"::mutex::RawMutex::unlock","value":"pub fn unlock(&Self)","parent":{"krate":0,"index":35},"children":[],"decl_id":null,"docs":" Unlocks this mutex.\n","sig":null,"attributes":[{"value":"/ Unlocks this mutex.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":5278,"byte_end":5301,"line_start":40,"line_end":40,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":41},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":5707,"byte_end":5719,"line_start":50,"line_end":50,"column_start":18,"column_end":30},"name":"RawMutexFair","qualname":"::mutex::RawMutexFair","value":"RawMutexFair: RawMutex","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43}],"decl_id":null,"docs":" Additional methods for mutexes which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support fair unlocking.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":5327,"byte_end":5391,"line_start":44,"line_end":44,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":5392,"byte_end":5395,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":5396,"byte_end":5476,"line_start":46,"line_end":46,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":5477,"byte_end":5552,"line_start":47,"line_end":47,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":5553,"byte_end":5627,"line_start":48,"line_end":48,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":5628,"byte_end":5689,"line_start":49,"line_end":49,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":5796,"byte_end":5807,"line_start":52,"line_end":52,"column_start":8,"column_end":19},"name":"unlock_fair","qualname":"::mutex::RawMutexFair::unlock_fair","value":"pub fn unlock_fair(&Self)","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Unlocks this mutex using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Unlocks this mutex using a fair unlock protocol.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":5736,"byte_end":5788,"line_start":51,"line_end":51,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":6100,"byte_end":6104,"line_start":59,"line_end":59,"column_start":8,"column_end":12},"name":"bump","qualname":"::mutex::RawMutexFair::bump","value":"pub fn bump(&Self)","parent":{"krate":0,"index":41},"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":5821,"byte_end":5890,"line_start":54,"line_end":54,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":5895,"byte_end":5898,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":5903,"byte_end":5979,"line_start":56,"line_end":56,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":5984,"byte_end":6060,"line_start":57,"line_end":57,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":6065,"byte_end":6092,"line_start":58,"line_end":58,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":44},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":6402,"byte_end":6415,"line_start":69,"line_end":69,"column_start":18,"column_end":31},"name":"RawMutexTimed","qualname":"::mutex::RawMutexTimed","value":"RawMutexTimed: RawMutex","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48}],"decl_id":null,"docs":" Additional methods for mutexes which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for mutexes which support locking with timeouts.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":6172,"byte_end":6243,"line_start":65,"line_end":65,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":6244,"byte_end":6247,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":6248,"byte_end":6328,"line_start":67,"line_end":67,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":6329,"byte_end":6384,"line_start":68,"line_end":68,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":45},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":6484,"byte_end":6492,"line_start":71,"line_end":71,"column_start":10,"column_end":18},"name":"Duration","qualname":"::mutex::RawMutexTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":6432,"byte_end":6474,"line_start":70,"line_end":70,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":46},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":6552,"byte_end":6559,"line_start":74,"line_end":74,"column_start":10,"column_end":17},"name":"Instant","qualname":"::mutex::RawMutexTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":6499,"byte_end":6542,"line_start":73,"line_end":73,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":6635,"byte_end":6647,"line_start":77,"line_end":77,"column_start":8,"column_end":20},"name":"try_lock_for","qualname":"::mutex::RawMutexTimed::try_lock_for","value":"pub fn try_lock_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":6566,"byte_end":6627,"line_start":76,"line_end":76,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":6763,"byte_end":6777,"line_start":80,"line_end":80,"column_start":8,"column_end":22},"name":"try_lock_until","qualname":"::mutex::RawMutexTimed::try_lock_until","value":"pub fn try_lock_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":6694,"byte_end":6755,"line_start":79,"line_end":79,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":49},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":7331,"byte_end":7336,"line_start":91,"line_end":91,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53}],"decl_id":null,"docs":" A mutual exclusion primitive useful for protecting shared data","sig":null,"attributes":[{"value":"/ A mutual exclusion primitive useful for protecting shared data","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":6821,"byte_end":6887,"line_start":83,"line_end":83,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":6888,"byte_end":6891,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ This mutex will block threads waiting for the lock to become available. The","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":6892,"byte_end":6971,"line_start":85,"line_end":85,"column_start":1,"column_end":80}},{"value":"/ mutex can also be statically initialized or created via a `new`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":6972,"byte_end":7039,"line_start":86,"line_end":86,"column_start":1,"column_end":68}},{"value":"/ constructor. Each mutex has a type parameter which represents the data that","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":7040,"byte_end":7119,"line_start":87,"line_end":87,"column_start":1,"column_end":80}},{"value":"/ it is protecting. The data can only be accessed through the RAII guards","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":7120,"byte_end":7195,"line_start":88,"line_end":88,"column_start":1,"column_end":76}},{"value":"/ returned from `lock` and `try_lock`, which guarantees that the data is only","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":7196,"byte_end":7275,"line_start":89,"line_end":89,"column_start":1,"column_end":80}},{"value":"/ ever accessed when the mutex is locked.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":7276,"byte_end":7319,"line_start":90,"line_end":90,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":7968,"byte_end":7971,"line_start":113,"line_end":113,"column_start":12,"column_end":15},"name":"new","qualname":"<Mutex<R, T>>::new","value":"pub fn new(T) -> Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new mutex in an unlocked state ready for use.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":7846,"byte_end":7905,"line_start":110,"line_end":110,"column_start":5,"column_end":64}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":7910,"byte_end":7942,"line_start":111,"line_end":111,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":7947,"byte_end":7956,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":8209,"byte_end":8219,"line_start":123,"line_end":123,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Mutex<R, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":8100,"byte_end":8155,"line_start":120,"line_end":120,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":8160,"byte_end":8169,"line_start":121,"line_end":121,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":8174,"byte_end":8197,"line_start":122,"line_end":122,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":9021,"byte_end":9025,"line_start":147,"line_end":147,"column_start":12,"column_end":16},"name":"lock","qualname":"<Mutex<R, T>>::lock","value":"pub fn lock(&Self) -> MutexGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutex, blocking the current thread until it is able to do so.","sig":null,"attributes":[{"value":"/ Acquires a mutex, blocking the current thread until it is able to do so.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":8483,"byte_end":8559,"line_start":137,"line_end":137,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":8564,"byte_end":8567,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ This function will block the local thread until it is available to acquire","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":8572,"byte_end":8650,"line_start":139,"line_end":139,"column_start":5,"column_end":83}},{"value":"/ the mutex. Upon returning, the thread is the only thread with the mutex","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":8655,"byte_end":8730,"line_start":140,"line_end":140,"column_start":5,"column_end":80}},{"value":"/ held. An RAII guard is returned to allow scoped unlock of the lock. When","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":8735,"byte_end":8811,"line_start":141,"line_end":141,"column_start":5,"column_end":81}},{"value":"/ the guard goes out of scope, the mutex will be unlocked.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":8816,"byte_end":8876,"line_start":142,"line_end":142,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":8881,"byte_end":8884,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Attempts to lock a mutex in the thread which already holds the lock will","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":8889,"byte_end":8965,"line_start":144,"line_end":144,"column_start":5,"column_end":81}},{"value":"/ result in a deadlock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":8970,"byte_end":8995,"line_start":145,"line_end":145,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":9000,"byte_end":9009,"line_start":146,"line_end":146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":9414,"byte_end":9422,"line_start":160,"line_end":160,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<R, T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":9112,"byte_end":9146,"line_start":152,"line_end":152,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":9151,"byte_end":9154,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":9159,"byte_end":9235,"line_start":154,"line_end":154,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":9240,"byte_end":9316,"line_start":155,"line_end":155,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":9321,"byte_end":9342,"line_start":156,"line_end":156,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":9347,"byte_end":9350,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":9355,"byte_end":9388,"line_start":158,"line_end":158,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":9393,"byte_end":9402,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":9826,"byte_end":9833,"line_start":173,"line_end":173,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Mutex<R, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":9579,"byte_end":9634,"line_start":168,"line_end":168,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":9639,"byte_end":9642,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `Mutex` mutably, no actual locking needs to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":9647,"byte_end":9722,"line_start":170,"line_end":170,"column_start":5,"column_end":80}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":9727,"byte_end":9800,"line_start":171,"line_end":171,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":9805,"byte_end":9814,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10417,"byte_end":10429,"line_start":189,"line_end":189,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<Mutex<R, T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":9909,"byte_end":9940,"line_start":177,"line_end":177,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":9945,"byte_end":9948,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":9953,"byte_end":10027,"line_start":179,"line_end":179,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10032,"byte_end":10102,"line_start":180,"line_end":180,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10107,"byte_end":10128,"line_start":181,"line_end":181,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10133,"byte_end":10136,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10141,"byte_end":10153,"line_start":183,"line_end":183,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10158,"byte_end":10161,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10166,"byte_end":10240,"line_start":185,"line_end":185,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10245,"byte_end":10314,"line_start":186,"line_end":186,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10319,"byte_end":10384,"line_start":187,"line_end":187,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10389,"byte_end":10398,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10866,"byte_end":10869,"line_start":203,"line_end":203,"column_start":19,"column_end":22},"name":"raw","qualname":"<Mutex<R, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10477,"byte_end":10521,"line_start":193,"line_end":193,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10526,"byte_end":10529,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10534,"byte_end":10609,"line_start":195,"line_end":195,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10614,"byte_end":10675,"line_start":196,"line_end":196,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10680,"byte_end":10683,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10688,"byte_end":10700,"line_start":198,"line_end":198,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10705,"byte_end":10708,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10713,"byte_end":10780,"line_start":200,"line_end":200,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `MutexGuard`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10785,"byte_end":10833,"line_start":201,"line_end":201,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10838,"byte_end":10847,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":11500,"byte_end":11517,"line_start":221,"line_end":221,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<Mutex<R, T>>::force_unlock_fair","value":"pub unsafe fn force_unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock procotol.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10963,"byte_end":11023,"line_start":209,"line_end":209,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":11028,"byte_end":11031,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":11036,"byte_end":11110,"line_start":211,"line_end":211,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `MutexGuard` object alive, for example when","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":11115,"byte_end":11185,"line_start":212,"line_end":212,"column_start":5,"column_end":75}},{"value":"/ dealing with FFI.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":11190,"byte_end":11211,"line_start":213,"line_end":213,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":11216,"byte_end":11219,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":11224,"byte_end":11236,"line_start":215,"line_end":215,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":11241,"byte_end":11244,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":11249,"byte_end":11323,"line_start":217,"line_end":217,"column_start":5,"column_end":79}},{"value":"/ `MutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":11328,"byte_end":11397,"line_start":218,"line_end":218,"column_start":5,"column_end":74}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":11402,"byte_end":11467,"line_start":219,"line_end":219,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":11472,"byte_end":11481,"line_start":220,"line_end":220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":11917,"byte_end":11929,"line_start":233,"line_end":233,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<Mutex<R, T>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":11620,"byte_end":11681,"line_start":227,"line_end":227,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":11686,"byte_end":11689,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":11694,"byte_end":11764,"line_start":229,"line_end":229,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":11769,"byte_end":11844,"line_start":230,"line_end":230,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":11849,"byte_end":11891,"line_start":231,"line_end":231,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":11896,"byte_end":11905,"line_start":232,"line_end":232,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":12416,"byte_end":12430,"line_start":247,"line_end":247,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<Mutex<R, T>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant) -> Option<MutexGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":12119,"byte_end":12180,"line_start":241,"line_end":241,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":12185,"byte_end":12188,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":12193,"byte_end":12263,"line_start":243,"line_end":243,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":12268,"byte_end":12343,"line_start":244,"line_end":244,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":12348,"byte_end":12390,"line_start":245,"line_end":245,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":12395,"byte_end":12404,"line_start":246,"line_end":246,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":95},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":13514,"byte_end":13524,"line_start":285,"line_end":285,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":100}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\n dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a mutex. When this structure is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":13222,"byte_end":13302,"line_start":279,"line_end":279,"column_start":1,"column_end":81}},{"value":"/ dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":13303,"byte_end":13363,"line_start":280,"line_end":280,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":13364,"byte_end":13367,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":13368,"byte_end":13446,"line_start":282,"line_end":282,"column_start":1,"column_end":79}},{"value":"/ `Deref` and `DerefMut` implementations.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":13447,"byte_end":13490,"line_start":283,"line_end":283,"column_start":1,"column_end":44}},{"value":"must_use","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":13491,"byte_end":13502,"line_start":284,"line_end":284,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":13885,"byte_end":13890,"line_start":294,"line_end":294,"column_start":12,"column_end":17},"name":"mutex","qualname":"<MutexGuard>::mutex","value":"pub fn mutex(&Self) -> &'a Mutex<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `Mutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `Mutex` object.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":13818,"byte_end":13873,"line_start":293,"line_end":293,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":14355,"byte_end":14358,"line_start":307,"line_end":307,"column_start":12,"column_end":15},"name":"map","qualname":"<MutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedMutexGuard where F: FnOnce(&mut T)\n-> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":13949,"byte_end":14019,"line_start":298,"line_end":298,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":14024,"byte_end":14027,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":14032,"byte_end":14089,"line_start":300,"line_end":300,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":14094,"byte_end":14126,"line_start":301,"line_end":301,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":14131,"byte_end":14134,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":14139,"byte_end":14190,"line_start":303,"line_end":303,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":14195,"byte_end":14271,"line_start":304,"line_end":304,"column_start":5,"column_end":81}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":14276,"byte_end":14329,"line_start":305,"line_end":305,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":14334,"byte_end":14343,"line_start":306,"line_end":306,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":15188,"byte_end":15195,"line_start":331,"line_end":331,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedMutexGuard, Self> where\nF: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedMutexGuard` for a component of the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":14702,"byte_end":14771,"line_start":321,"line_end":321,"column_start":5,"column_end":74}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":14776,"byte_end":14852,"line_start":322,"line_end":322,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":14857,"byte_end":14860,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MutexGuard` passed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":14865,"byte_end":14922,"line_start":324,"line_end":324,"column_start":5,"column_end":62}},{"value":"/ in already locked the mutex.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":14927,"byte_end":14959,"line_start":325,"line_end":325,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":14964,"byte_end":14967,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":14972,"byte_end":15023,"line_start":327,"line_end":327,"column_start":5,"column_end":56}},{"value":"/ used as `MutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":15028,"byte_end":15104,"line_start":328,"line_end":328,"column_start":5,"column_end":81}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":15109,"byte_end":15162,"line_start":329,"line_end":329,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":15167,"byte_end":15176,"line_start":330,"line_end":330,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":15876,"byte_end":15884,"line_start":353,"line_end":353,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<MutexGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":15650,"byte_end":15714,"line_start":348,"line_end":348,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":15719,"byte_end":15722,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":15727,"byte_end":15795,"line_start":350,"line_end":350,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":15800,"byte_end":15850,"line_start":351,"line_end":351,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":15855,"byte_end":15864,"line_start":352,"line_end":352,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":16900,"byte_end":16911,"line_start":377,"line_end":377,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":16119,"byte_end":16170,"line_start":364,"line_end":364,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":16175,"byte_end":16178,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":16183,"byte_end":16257,"line_start":366,"line_end":366,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":16262,"byte_end":16334,"line_start":367,"line_end":367,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":16339,"byte_end":16413,"line_start":368,"line_end":368,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":16418,"byte_end":16493,"line_start":369,"line_end":369,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":16498,"byte_end":16569,"line_start":370,"line_end":370,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":16574,"byte_end":16631,"line_start":371,"line_end":371,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":16636,"byte_end":16639,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":16644,"byte_end":16720,"line_start":373,"line_end":373,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":16725,"byte_end":16801,"line_start":374,"line_end":374,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":16806,"byte_end":16874,"line_start":375,"line_end":375,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":16879,"byte_end":16888,"line_start":376,"line_end":376,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":17281,"byte_end":17294,"line_start":389,"line_end":389,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<MutexGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":16993,"byte_end":17057,"line_start":382,"line_end":382,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":17062,"byte_end":17065,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked a fair unlock protocol.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":17070,"byte_end":17119,"line_start":384,"line_end":384,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":17124,"byte_end":17127,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":17132,"byte_end":17200,"line_start":386,"line_end":386,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":17205,"byte_end":17255,"line_start":387,"line_end":387,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":17260,"byte_end":17269,"line_start":388,"line_end":388,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":17759,"byte_end":17763,"line_start":404,"line_end":404,"column_start":12,"column_end":16},"name":"bump","qualname":"<MutexGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":17462,"byte_end":17531,"line_start":398,"line_end":398,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":17536,"byte_end":17539,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":17544,"byte_end":17620,"line_start":400,"line_end":400,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":17625,"byte_end":17701,"line_start":401,"line_end":401,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":17706,"byte_end":17733,"line_start":402,"line_end":402,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":17738,"byte_end":17747,"line_start":403,"line_end":403,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":148},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":18865,"byte_end":18881,"line_start":442,"line_end":442,"column_start":12,"column_end":28},"name":"MappedMutexGuard","qualname":"::mutex::MappedMutexGuard","value":"MappedMutexGuard {  }","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154}],"decl_id":null,"docs":" An RAII mutex guard returned by `MutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `MutexGuard::map`, which can point to a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":18477,"byte_end":18552,"line_start":434,"line_end":434,"column_start":1,"column_end":76}},{"value":"/ subfield of the protected data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":18553,"byte_end":18588,"line_start":435,"line_end":435,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":18589,"byte_end":18592,"line_start":436,"line_end":436,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedMutexGuard` and `MutexGuard` is that the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":18593,"byte_end":18672,"line_start":437,"line_end":437,"column_start":1,"column_end":80}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":18673,"byte_end":18748,"line_start":438,"line_end":438,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":18749,"byte_end":18829,"line_start":439,"line_end":439,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":18830,"byte_end":18841,"line_start":440,"line_end":440,"column_start":1,"column_end":12}},{"value":"must_use","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":18842,"byte_end":18853,"line_start":441,"line_end":441,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":19717,"byte_end":19720,"line_start":465,"line_end":465,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedMutexGuard where F: FnOnce(&mut T)\n-> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedMutexGuard` for a component of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":19299,"byte_end":19369,"line_start":456,"line_end":456,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":19374,"byte_end":19377,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":19382,"byte_end":19445,"line_start":458,"line_end":458,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":19450,"byte_end":19482,"line_start":459,"line_end":459,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":19487,"byte_end":19490,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":19495,"byte_end":19546,"line_start":461,"line_end":461,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":19551,"byte_end":19633,"line_start":462,"line_end":462,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":19638,"byte_end":19691,"line_start":463,"line_end":463,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":19696,"byte_end":19705,"line_start":464,"line_end":464,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":20543,"byte_end":20550,"line_start":489,"line_end":489,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedMutexGuard, Self> where\nF: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedMutexGuard` for a component of the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":20045,"byte_end":20114,"line_start":479,"line_end":479,"column_start":5,"column_end":74}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":20119,"byte_end":20195,"line_start":480,"line_end":480,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":20200,"byte_end":20203,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedMutexGuard` passed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":20208,"byte_end":20271,"line_start":482,"line_end":482,"column_start":5,"column_end":68}},{"value":"/ in already locked the mutex.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":20276,"byte_end":20308,"line_start":483,"line_end":483,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":20313,"byte_end":20316,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":20321,"byte_end":20372,"line_start":485,"line_end":485,"column_start":5,"column_end":56}},{"value":"/ used as `MappedMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":20377,"byte_end":20459,"line_start":486,"line_end":486,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":20464,"byte_end":20517,"line_start":487,"line_end":487,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":20522,"byte_end":20531,"line_start":488,"line_end":488,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":21845,"byte_end":21856,"line_start":521,"line_end":521,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":21064,"byte_end":21115,"line_start":508,"line_end":508,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":21120,"byte_end":21123,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":21128,"byte_end":21202,"line_start":510,"line_end":510,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":21207,"byte_end":21279,"line_start":511,"line_end":511,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":21284,"byte_end":21358,"line_start":512,"line_end":512,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":21363,"byte_end":21438,"line_start":513,"line_end":513,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":21443,"byte_end":21514,"line_start":514,"line_end":514,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":21519,"byte_end":21576,"line_start":515,"line_end":515,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":21581,"byte_end":21584,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":21589,"byte_end":21665,"line_start":517,"line_end":517,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":21670,"byte_end":21746,"line_start":518,"line_end":518,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MutexGuard` normally.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":21751,"byte_end":21819,"line_start":519,"line_end":519,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":21824,"byte_end":21833,"line_start":520,"line_end":520,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":242},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":23619,"byte_end":23630,"line_start":30,"line_end":30,"column_start":18,"column_end":29},"name":"GetThreadId","qualname":"::remutex::GetThreadId","value":"GetThreadId","parent":null,"children":[{"krate":0,"index":243},{"krate":0,"index":244}],"decl_id":null,"docs":" Helper trait which returns a non-zero thread ID.","sig":null,"attributes":[{"value":"/ Helper trait which returns a non-zero thread ID.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":23218,"byte_end":23270,"line_start":20,"line_end":20,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":23271,"byte_end":23274,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ The simplest way to implement this trait is to return the address of a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":23275,"byte_end":23349,"line_start":22,"line_end":22,"column_start":1,"column_end":75}},{"value":"/ thread-local variable.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":23350,"byte_end":23376,"line_start":23,"line_end":23,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":23377,"byte_end":23380,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":23381,"byte_end":23393,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":23394,"byte_end":23397,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that no two active threads share","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":23398,"byte_end":23476,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ the same thread ID. However the ID of a thread that has exited can be","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":23477,"byte_end":23550,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"/ re-used since that thread is no longer active.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":23551,"byte_end":23601,"line_start":29,"line_end":29,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":243},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":23666,"byte_end":23670,"line_start":32,"line_end":32,"column_start":11,"column_end":15},"name":"INIT","qualname":"::remutex::GetThreadId::INIT","value":"Self","parent":{"krate":0,"index":242},"children":[],"decl_id":null,"docs":" Initial value.\n","sig":null,"attributes":[{"value":"/ Initial value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":23637,"byte_end":23655,"line_start":31,"line_end":31,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":23781,"byte_end":23798,"line_start":36,"line_end":36,"column_start":8,"column_end":25},"name":"nonzero_thread_id","qualname":"::remutex::GetThreadId::nonzero_thread_id","value":"pub fn nonzero_thread_id(&Self) -> usize","parent":{"krate":0,"index":242},"children":[],"decl_id":null,"docs":" Returns a non-zero thread ID which identifies the current thread of\n execution.\n","sig":null,"attributes":[{"value":"/ Returns a non-zero thread ID which identifies the current thread of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":23683,"byte_end":23754,"line_start":34,"line_end":34,"column_start":5,"column_end":76}},{"value":"/ execution.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":23759,"byte_end":23773,"line_start":35,"line_end":35,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":274},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":26644,"byte_end":26658,"line_start":138,"line_end":138,"column_start":12,"column_end":26},"name":"ReentrantMutex","qualname":"::remutex::ReentrantMutex","value":"ReentrantMutex {  }","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279}],"decl_id":null,"docs":" A mutex which can be recursively locked by a single thread.","sig":null,"attributes":[{"value":"/ A mutex which can be recursively locked by a single thread.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":26169,"byte_end":26232,"line_start":127,"line_end":127,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":26233,"byte_end":26236,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ This type is identical to `Mutex` except for the following points:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":26237,"byte_end":26307,"line_start":129,"line_end":129,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":26308,"byte_end":26311,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ - Locking multiple times from the same thread will work correctly instead of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":26312,"byte_end":26392,"line_start":131,"line_end":131,"column_start":1,"column_end":81}},{"value":"/   deadlocking.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":26393,"byte_end":26411,"line_start":132,"line_end":132,"column_start":1,"column_end":19}},{"value":"/ - `ReentrantMutexGuard` does not give mutable references to the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":26412,"byte_end":26492,"line_start":133,"line_end":133,"column_start":1,"column_end":81}},{"value":"/   Use a `RefCell` if you need this.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":26493,"byte_end":26532,"line_start":134,"line_end":134,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":26533,"byte_end":26536,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ See [`Mutex`](struct.Mutex.html) for more details about the underlying mutex","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":26537,"byte_end":26617,"line_start":136,"line_end":136,"column_start":1,"column_end":81}},{"value":"/ primitive.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":26618,"byte_end":26632,"line_start":137,"line_end":137,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":27659,"byte_end":27662,"line_start":169,"line_end":169,"column_start":12,"column_end":15},"name":"new","qualname":"<ReentrantMutex<R, G, T>>::new","value":"pub fn new(T) -> ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reentrant mutex in an unlocked state ready for use.\n","sig":null,"attributes":[{"value":"/ Creates a new reentrant mutex in an unlocked state ready for use.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":27527,"byte_end":27596,"line_start":166,"line_end":166,"column_start":5,"column_end":74}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":27601,"byte_end":27633,"line_start":167,"line_end":167,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":27638,"byte_end":27647,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":28105,"byte_end":28115,"line_start":184,"line_end":184,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ReentrantMutex<R, G, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this mutex, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this mutex, returning the underlying data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":27996,"byte_end":28051,"line_start":181,"line_end":181,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":28056,"byte_end":28065,"line_start":182,"line_end":182,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":28070,"byte_end":28093,"line_start":183,"line_end":183,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":29070,"byte_end":29074,"line_start":209,"line_end":209,"column_start":12,"column_end":16},"name":"lock","qualname":"<ReentrantMutex<R, G, T>>::lock","value":"pub fn lock(&Self) -> ReentrantMutexGuard<, R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reentrant mutex, blocking the current thread until it is able\n to do so.","sig":null,"attributes":[{"value":"/ Acquires a reentrant mutex, blocking the current thread until it is able","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":28431,"byte_end":28507,"line_start":198,"line_end":198,"column_start":5,"column_end":81}},{"value":"/ to do so.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":28512,"byte_end":28525,"line_start":199,"line_end":199,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":28530,"byte_end":28533,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ If the mutex is held by another thread then this function will block the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":28538,"byte_end":28614,"line_start":201,"line_end":201,"column_start":5,"column_end":81}},{"value":"/ local thread until it is available to acquire the mutex. If the mutex is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":28619,"byte_end":28695,"line_start":202,"line_end":202,"column_start":5,"column_end":81}},{"value":"/ already held by the current thread then this function will increment the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":28700,"byte_end":28776,"line_start":203,"line_end":203,"column_start":5,"column_end":81}},{"value":"/ lock reference count and return immediately. Upon returning,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":28781,"byte_end":28845,"line_start":204,"line_end":204,"column_start":5,"column_end":69}},{"value":"/ the thread is the only thread with the mutex held. An RAII guard is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":28850,"byte_end":28921,"line_start":205,"line_end":205,"column_start":5,"column_end":76}},{"value":"/ returned to allow scoped unlock of the lock. When the guard goes out of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":28926,"byte_end":29001,"line_start":206,"line_end":206,"column_start":5,"column_end":80}},{"value":"/ scope, the mutex will be unlocked.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":29006,"byte_end":29044,"line_start":207,"line_end":207,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":29049,"byte_end":29058,"line_start":208,"line_end":208,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":29475,"byte_end":29483,"line_start":222,"line_end":222,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<ReentrantMutex<R, G, T>>::try_lock","value":"pub fn try_lock(&Self) -> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":29173,"byte_end":29207,"line_start":214,"line_end":214,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":29212,"byte_end":29215,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":29220,"byte_end":29296,"line_start":216,"line_end":216,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned. The lock will be unlocked when the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":29301,"byte_end":29377,"line_start":217,"line_end":217,"column_start":5,"column_end":81}},{"value":"/ guard is dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":29382,"byte_end":29403,"line_start":218,"line_end":218,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":29408,"byte_end":29411,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":29416,"byte_end":29449,"line_start":220,"line_end":220,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":29454,"byte_end":29463,"line_start":221,"line_end":221,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":29908,"byte_end":29915,"line_start":235,"line_end":235,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ReentrantMutex<R, G, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":29652,"byte_end":29707,"line_start":230,"line_end":230,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":29712,"byte_end":29715,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `ReentrantMutex` mutably, no actual locking needs to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":29720,"byte_end":29804,"line_start":232,"line_end":232,"column_start":5,"column_end":89}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":29809,"byte_end":29882,"line_start":233,"line_end":233,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":29887,"byte_end":29896,"line_start":234,"line_end":234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":30517,"byte_end":30529,"line_start":251,"line_end":251,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<ReentrantMutex<R, G, T>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":29991,"byte_end":30022,"line_start":239,"line_end":239,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":30027,"byte_end":30030,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":30035,"byte_end":30109,"line_start":241,"line_end":241,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":30114,"byte_end":30193,"line_start":242,"line_end":242,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":30198,"byte_end":30219,"line_start":243,"line_end":243,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":30224,"byte_end":30227,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":30232,"byte_end":30244,"line_start":245,"line_end":245,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":30249,"byte_end":30252,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":30257,"byte_end":30331,"line_start":247,"line_end":247,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":30336,"byte_end":30414,"line_start":248,"line_end":248,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":30419,"byte_end":30484,"line_start":249,"line_end":249,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":30489,"byte_end":30498,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":30975,"byte_end":30978,"line_start":265,"line_end":265,"column_start":19,"column_end":22},"name":"raw","qualname":"<ReentrantMutex<R, G, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw mutex object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw mutex object.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":30577,"byte_end":30621,"line_start":255,"line_end":255,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":30626,"byte_end":30629,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawMutex` trait from","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":30634,"byte_end":30709,"line_start":257,"line_end":257,"column_start":5,"column_end":80}},{"value":"/ `lock_api` to be able to call functions on the raw mutex.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":30714,"byte_end":30775,"line_start":258,"line_end":258,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":30780,"byte_end":30783,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":30788,"byte_end":30800,"line_start":260,"line_end":260,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":30805,"byte_end":30808,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":30813,"byte_end":30880,"line_start":262,"line_end":262,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a `ReentrantMutexGuard`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":30885,"byte_end":30942,"line_start":263,"line_end":263,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":30947,"byte_end":30956,"line_start":264,"line_end":264,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":31661,"byte_end":31678,"line_start":283,"line_end":283,"column_start":19,"column_end":36},"name":"force_unlock_fair","qualname":"<ReentrantMutex<R, G, T>>::force_unlock_fair","value":"pub unsafe fn force_unlock_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":31106,"byte_end":31166,"line_start":271,"line_end":271,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":31171,"byte_end":31174,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":31179,"byte_end":31253,"line_start":273,"line_end":273,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `ReentrantMutexGuard` object alive, for example when","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":31258,"byte_end":31337,"line_start":274,"line_end":274,"column_start":5,"column_end":84}},{"value":"/ dealing with FFI.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":31342,"byte_end":31363,"line_start":275,"line_end":275,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":31368,"byte_end":31371,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":31376,"byte_end":31388,"line_start":277,"line_end":277,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":31393,"byte_end":31396,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":31401,"byte_end":31475,"line_start":279,"line_end":279,"column_start":5,"column_end":79}},{"value":"/ `ReentrantMutexGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":31480,"byte_end":31558,"line_start":280,"line_end":280,"column_start":5,"column_end":83}},{"value":"/ Behavior is undefined if a mutex is unlocked when not locked.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":31563,"byte_end":31628,"line_start":281,"line_end":281,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":31633,"byte_end":31642,"line_start":282,"line_end":282,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":32106,"byte_end":32118,"line_start":295,"line_end":295,"column_start":12,"column_end":24},"name":"try_lock_for","qualname":"<ReentrantMutex<R, G, T>>::try_lock_for","value":"pub fn try_lock_for(&Self, R::Duration)\n-> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":31809,"byte_end":31870,"line_start":289,"line_end":289,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":31875,"byte_end":31878,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":31883,"byte_end":31953,"line_start":291,"line_end":291,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":31958,"byte_end":32033,"line_start":292,"line_end":292,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":32038,"byte_end":32080,"line_start":293,"line_end":293,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":32085,"byte_end":32094,"line_start":294,"line_end":294,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":32617,"byte_end":32631,"line_start":309,"line_end":309,"column_start":12,"column_end":26},"name":"try_lock_until","qualname":"<ReentrantMutex<R, G, T>>::try_lock_until","value":"pub fn try_lock_until(&Self, R::Instant)\n-> Option<ReentrantMutexGuard<, R, G, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this lock until a timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this lock until a timeout is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":32320,"byte_end":32381,"line_start":303,"line_end":303,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":32386,"byte_end":32389,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired before the timeout expired, then","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":32394,"byte_end":32464,"line_start":305,"line_end":305,"column_start":5,"column_end":75}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned. The lock will","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":32469,"byte_end":32544,"line_start":306,"line_end":306,"column_start":5,"column_end":80}},{"value":"/ be unlocked when the guard is dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":32549,"byte_end":32591,"line_start":307,"line_end":307,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":32596,"byte_end":32605,"line_start":308,"line_end":308,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":330},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":33916,"byte_end":33935,"line_start":350,"line_end":350,"column_start":12,"column_end":31},"name":"ReentrantMutexGuard","qualname":"::remutex::ReentrantMutexGuard","value":"ReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":335},{"krate":0,"index":336}],"decl_id":null,"docs":" An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure\n is dropped (falls out of scope), the lock will be unlocked.","sig":null,"attributes":[{"value":"/ An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":33630,"byte_end":33717,"line_start":344,"line_end":344,"column_start":1,"column_end":88}},{"value":"/ is dropped (falls out of scope), the lock will be unlocked.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":33718,"byte_end":33781,"line_start":345,"line_end":345,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":33782,"byte_end":33785,"line_start":346,"line_end":346,"column_start":1,"column_end":4}},{"value":"/ The data protected by the mutex can be accessed through this guard via its","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":33786,"byte_end":33864,"line_start":347,"line_end":347,"column_start":1,"column_end":79}},{"value":"/ `Deref` implementation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":33865,"byte_end":33892,"line_start":348,"line_end":348,"column_start":1,"column_end":28}},{"value":"must_use","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":33893,"byte_end":33904,"line_start":349,"line_end":349,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":34410,"byte_end":34417,"line_start":361,"line_end":361,"column_start":12,"column_end":19},"name":"remutex","qualname":"<ReentrantMutexGuard>::remutex","value":"pub fn remutex(&Self) -> &'a ReentrantMutex<R, G, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original `ReentrantMutex` object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original `ReentrantMutex` object.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":34334,"byte_end":34398,"line_start":360,"line_end":360,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":34923,"byte_end":34926,"line_start":374,"line_end":374,"column_start":12,"column_end":15},"name":"map","qualname":"<ReentrantMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedReentrantMutexGuard where\nF: FnOnce(&T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":34490,"byte_end":34569,"line_start":365,"line_end":365,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":34574,"byte_end":34577,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":34582,"byte_end":34648,"line_start":367,"line_end":367,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":34653,"byte_end":34685,"line_start":368,"line_end":368,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":34690,"byte_end":34693,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":34698,"byte_end":34749,"line_start":370,"line_end":370,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":34754,"byte_end":34839,"line_start":371,"line_end":371,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":34844,"byte_end":34897,"line_start":372,"line_end":372,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":34902,"byte_end":34911,"line_start":373,"line_end":373,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":35796,"byte_end":35803,"line_start":398,"line_end":398,"column_start":12,"column_end":19},"name":"try_map","qualname":"<ReentrantMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F)\n-> Result<MappedReentrantMutexGuard, Self> where F: FnOnce(&mut T) ->\nOption<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":35283,"byte_end":35361,"line_start":388,"line_end":388,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":35366,"byte_end":35442,"line_start":389,"line_end":389,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":35447,"byte_end":35450,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `ReentrantMutexGuard` passed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":35455,"byte_end":35521,"line_start":391,"line_end":391,"column_start":5,"column_end":71}},{"value":"/ in already locked the mutex.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":35526,"byte_end":35558,"line_start":392,"line_end":392,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":35563,"byte_end":35566,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":35571,"byte_end":35622,"line_start":394,"line_end":394,"column_start":5,"column_end":56}},{"value":"/ used as `ReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":35627,"byte_end":35712,"line_start":395,"line_end":395,"column_start":5,"column_end":90}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":35717,"byte_end":35770,"line_start":396,"line_end":396,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":35775,"byte_end":35784,"line_start":397,"line_end":397,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":36509,"byte_end":36517,"line_start":420,"line_end":420,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<ReentrantMutexGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":36283,"byte_end":36347,"line_start":415,"line_end":415,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":36352,"byte_end":36355,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":36360,"byte_end":36428,"line_start":417,"line_end":417,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":36433,"byte_end":36483,"line_start":418,"line_end":418,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":36488,"byte_end":36497,"line_start":419,"line_end":419,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":37583,"byte_end":37594,"line_start":446,"line_end":446,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<ReentrantMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":36793,"byte_end":36844,"line_start":433,"line_end":433,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":36849,"byte_end":36852,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":36857,"byte_end":36931,"line_start":435,"line_end":435,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":36936,"byte_end":37008,"line_start":436,"line_end":436,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":37013,"byte_end":37087,"line_start":437,"line_end":437,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":37092,"byte_end":37167,"line_start":438,"line_end":438,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":37172,"byte_end":37243,"line_start":439,"line_end":439,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":37248,"byte_end":37305,"line_start":440,"line_end":440,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":37310,"byte_end":37313,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":37318,"byte_end":37394,"line_start":442,"line_end":442,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":37399,"byte_end":37475,"line_start":443,"line_end":443,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":37480,"byte_end":37557,"line_start":444,"line_end":444,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":37562,"byte_end":37571,"line_start":445,"line_end":445,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":37966,"byte_end":37979,"line_start":458,"line_end":458,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<ReentrantMutexGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the mutex to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the mutex to execute the given function.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":37678,"byte_end":37742,"line_start":451,"line_end":451,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":37747,"byte_end":37750,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ The mutex is unlocked a fair unlock protocol.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":37755,"byte_end":37804,"line_start":453,"line_end":453,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":37809,"byte_end":37812,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":37817,"byte_end":37885,"line_start":455,"line_end":455,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the mutex.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":37890,"byte_end":37940,"line_start":456,"line_end":456,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":37945,"byte_end":37954,"line_start":457,"line_end":457,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":38448,"byte_end":38452,"line_start":473,"line_end":473,"column_start":12,"column_end":16},"name":"bump","qualname":"<ReentrantMutexGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the mutex to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the mutex to a waiting thread if there is one.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":38151,"byte_end":38220,"line_start":467,"line_end":467,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":38225,"byte_end":38228,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":38233,"byte_end":38309,"line_start":469,"line_end":469,"column_start":5,"column_end":81}},{"value":"/ by `lock`, however it can be much more efficient in the case where there","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":38314,"byte_end":38390,"line_start":470,"line_end":470,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":38395,"byte_end":38422,"line_start":471,"line_end":471,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":38427,"byte_end":38436,"line_start":472,"line_end":472,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":385},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":39509,"byte_end":39534,"line_start":510,"line_end":510,"column_start":12,"column_end":37},"name":"MappedReentrantMutexGuard","qualname":"::remutex::MappedReentrantMutexGuard","value":"MappedReentrantMutexGuard {  }","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392}],"decl_id":null,"docs":" An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":39094,"byte_end":39178,"line_start":502,"line_end":502,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":39179,"byte_end":39214,"line_start":503,"line_end":503,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":39215,"byte_end":39218,"line_start":504,"line_end":504,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedReentrantMutexGuard` and `ReentrantMutexGuard` is that the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":39219,"byte_end":39316,"line_start":505,"line_end":505,"column_start":1,"column_end":98}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":39317,"byte_end":39392,"line_start":506,"line_end":506,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":39393,"byte_end":39473,"line_start":507,"line_end":507,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":39474,"byte_end":39485,"line_start":508,"line_end":508,"column_start":1,"column_end":12}},{"value":"must_use","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":39486,"byte_end":39497,"line_start":509,"line_end":509,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":40395,"byte_end":40398,"line_start":532,"line_end":532,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedReentrantMutexGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedReentrantMutexGuard where\nF: FnOnce(&T) -> &U","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `MappedReentrantMutexGuard` for a component of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":39950,"byte_end":40029,"line_start":523,"line_end":523,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":40034,"byte_end":40037,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":40042,"byte_end":40114,"line_start":525,"line_end":525,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":40119,"byte_end":40151,"line_start":526,"line_end":526,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":40156,"byte_end":40159,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":40164,"byte_end":40215,"line_start":528,"line_end":528,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":40220,"byte_end":40311,"line_start":529,"line_end":529,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":40316,"byte_end":40369,"line_start":530,"line_end":530,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":40374,"byte_end":40383,"line_start":531,"line_end":531,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":41257,"byte_end":41264,"line_start":556,"line_end":556,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedReentrantMutexGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F)\n-> Result<MappedReentrantMutexGuard, Self> where F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedReentrantMutexGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedReentrantMutexGuard` for a component of the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":40732,"byte_end":40810,"line_start":546,"line_end":546,"column_start":5,"column_end":83}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":40815,"byte_end":40891,"line_start":547,"line_end":547,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":40896,"byte_end":40899,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedReentrantMutexGuard` passed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":40904,"byte_end":40976,"line_start":549,"line_end":549,"column_start":5,"column_end":77}},{"value":"/ in already locked the mutex.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":40981,"byte_end":41013,"line_start":550,"line_end":550,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":41018,"byte_end":41021,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":41026,"byte_end":41077,"line_start":552,"line_end":552,"column_start":5,"column_end":56}},{"value":"/ used as `MappedReentrantMutexGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":41082,"byte_end":41173,"line_start":553,"line_end":553,"column_start":5,"column_end":96}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":41178,"byte_end":41231,"line_start":554,"line_end":554,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":41236,"byte_end":41245,"line_start":555,"line_end":555,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":42614,"byte_end":42625,"line_start":590,"line_end":590,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedReentrantMutexGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the mutex using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the mutex using a fair unlock protocol.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":41824,"byte_end":41875,"line_start":577,"line_end":577,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":41880,"byte_end":41883,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ By default, mutexes are unfair and allow the current thread to re-lock","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":41888,"byte_end":41962,"line_start":579,"line_end":579,"column_start":5,"column_end":79}},{"value":"/ the mutex before another has the chance to acquire the lock, even if","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":41967,"byte_end":42039,"line_start":580,"line_end":580,"column_start":5,"column_end":77}},{"value":"/ that thread has been blocked on the mutex for a long time. This is the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":42044,"byte_end":42118,"line_start":581,"line_end":581,"column_start":5,"column_end":79}},{"value":"/ default because it allows much higher throughput as it avoids forcing a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":42123,"byte_end":42198,"line_start":582,"line_end":582,"column_start":5,"column_end":80}},{"value":"/ context switch on every mutex unlock. This can result in one thread","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":42203,"byte_end":42274,"line_start":583,"line_end":583,"column_start":5,"column_end":76}},{"value":"/ acquiring a mutex many more times than other threads.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":42279,"byte_end":42336,"line_start":584,"line_end":584,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":42341,"byte_end":42344,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":42349,"byte_end":42425,"line_start":586,"line_end":586,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":42430,"byte_end":42506,"line_start":587,"line_end":587,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `ReentrantMutexGuard` normally.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":42511,"byte_end":42588,"line_start":588,"line_end":588,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":42593,"byte_end":42602,"line_start":589,"line_end":589,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":457},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":44248,"byte_end":44257,"line_start":28,"line_end":28,"column_start":18,"column_end":27},"name":"RawRwLock","qualname":"::rwlock::RawRwLock","value":"RawRwLock","parent":null,"children":[{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465}],"decl_id":null,"docs":" Basic operations for a reader-writer lock.","sig":null,"attributes":[{"value":"/ Basic operations for a reader-writer lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":43801,"byte_end":43847,"line_start":17,"line_end":17,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":43848,"byte_end":43851,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Types implementing this trait can be used by `RwLock` to form a safe and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":43852,"byte_end":43928,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ fully-functioning `RwLock` type.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":43929,"byte_end":43965,"line_start":20,"line_end":20,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":43966,"byte_end":43969,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":43970,"byte_end":43982,"line_start":22,"line_end":22,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":43983,"byte_end":43986,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait must ensure that the `RwLock` is actually","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":43987,"byte_end":44062,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"/ exclusive: an exclusive lock can't be acquired while an exclusive or shared","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":44063,"byte_end":44142,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/ lock exists, and a shared lock can't be acquire while an exclusive lock","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":44143,"byte_end":44218,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/ exists.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":44219,"byte_end":44230,"line_start":27,"line_end":27,"column_start":1,"column_end":12}}]},{"kind":"Const","id":{"krate":0,"index":458},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":44318,"byte_end":44322,"line_start":30,"line_end":30,"column_start":11,"column_end":15},"name":"INIT","qualname":"::rwlock::RawRwLock::INIT","value":"Self","parent":{"krate":0,"index":457},"children":[],"decl_id":null,"docs":" Initial value for an unlocked `RwLock`.\n","sig":null,"attributes":[{"value":"/ Initial value for an unlocked `RwLock`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":44264,"byte_end":44307,"line_start":29,"line_end":29,"column_start":5,"column_end":48}}]},{"kind":"Type","id":{"krate":0,"index":459},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":44487,"byte_end":44498,"line_start":34,"line_end":34,"column_start":10,"column_end":21},"name":"GuardMarker","qualname":"::rwlock::RawRwLock::GuardMarker","value":"type GuardMarker;","parent":{"krate":0,"index":457},"children":[],"decl_id":null,"docs":" Marker type which determines whether a lock guard should be `Send`. Use\n one of the `GuardSend` or `GuardNoSend` helper types here.\n","sig":null,"attributes":[{"value":"/ Marker type which determines whether a lock guard should be `Send`. Use","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":44335,"byte_end":44410,"line_start":32,"line_end":32,"column_start":5,"column_end":80}},{"value":"/ one of the `GuardSend` or `GuardNoSend` helper types here.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":44415,"byte_end":44477,"line_start":33,"line_end":33,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":44595,"byte_end":44606,"line_start":37,"line_end":37,"column_start":8,"column_end":19},"name":"lock_shared","qualname":"::rwlock::RawRwLock::lock_shared","value":"pub fn lock_shared(&Self)","parent":{"krate":0,"index":457},"children":[],"decl_id":null,"docs":" Acquires a shared lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock, blocking the current thread until it is able to do so.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":44505,"byte_end":44587,"line_start":36,"line_end":36,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":44683,"byte_end":44698,"line_start":40,"line_end":40,"column_start":8,"column_end":23},"name":"try_lock_shared","qualname":"::rwlock::RawRwLock::try_lock_shared","value":"pub fn try_lock_shared(&Self) -> bool","parent":{"krate":0,"index":457},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without blocking.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":44620,"byte_end":44675,"line_start":39,"line_end":39,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":44755,"byte_end":44768,"line_start":43,"line_end":43,"column_start":8,"column_end":21},"name":"unlock_shared","qualname":"::rwlock::RawRwLock::unlock_shared","value":"pub fn unlock_shared(&Self)","parent":{"krate":0,"index":457},"children":[],"decl_id":null,"docs":" Releases a shared lock.\n","sig":null,"attributes":[{"value":"/ Releases a shared lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":44720,"byte_end":44747,"line_start":42,"line_end":42,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":44876,"byte_end":44890,"line_start":46,"line_end":46,"column_start":8,"column_end":22},"name":"lock_exclusive","qualname":"::rwlock::RawRwLock::lock_exclusive","value":"pub fn lock_exclusive(&Self)","parent":{"krate":0,"index":457},"children":[],"decl_id":null,"docs":" Acquires an exclusive lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an exclusive lock, blocking the current thread until it is able to do so.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":44782,"byte_end":44868,"line_start":45,"line_end":45,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":44971,"byte_end":44989,"line_start":49,"line_end":49,"column_start":8,"column_end":26},"name":"try_lock_exclusive","qualname":"::rwlock::RawRwLock::try_lock_exclusive","value":"pub fn try_lock_exclusive(&Self) -> bool","parent":{"krate":0,"index":457},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock without blocking.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":44904,"byte_end":44963,"line_start":48,"line_end":48,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":45050,"byte_end":45066,"line_start":52,"line_end":52,"column_start":8,"column_end":24},"name":"unlock_exclusive","qualname":"::rwlock::RawRwLock::unlock_exclusive","value":"pub fn unlock_exclusive(&Self)","parent":{"krate":0,"index":457},"children":[],"decl_id":null,"docs":" Releases an exclusive lock.\n","sig":null,"attributes":[{"value":"/ Releases an exclusive lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":45011,"byte_end":45042,"line_start":51,"line_end":51,"column_start":5,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":466},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":45458,"byte_end":45471,"line_start":61,"line_end":61,"column_start":18,"column_end":31},"name":"RawRwLockFair","qualname":"::rwlock::RawRwLockFair","value":"RawRwLockFair: RawRwLock","parent":null,"children":[{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470}],"decl_id":null,"docs":" Additional methods for RwLocks which support fair unlocking.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support fair unlocking.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":45078,"byte_end":45142,"line_start":55,"line_end":55,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":45143,"byte_end":45146,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ Fair unlocking means that a lock is handed directly over to the next waiting","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":45147,"byte_end":45227,"line_start":57,"line_end":57,"column_start":1,"column_end":81}},{"value":"/ thread if there is one, without giving other threads the opportunity to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":45228,"byte_end":45303,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"/ \"steal\" the lock in the meantime. This is typically slower than unfair","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":45304,"byte_end":45378,"line_start":59,"line_end":59,"column_start":1,"column_end":75}},{"value":"/ unlocking, but may be necessary in certain circumstances.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":45379,"byte_end":45440,"line_start":60,"line_end":60,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":45553,"byte_end":45571,"line_start":63,"line_end":63,"column_start":8,"column_end":26},"name":"unlock_shared_fair","qualname":"::rwlock::RawRwLockFair::unlock_shared_fair","value":"pub fn unlock_shared_fair(&Self)","parent":{"krate":0,"index":466},"children":[],"decl_id":null,"docs":" Releases a shared lock using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Releases a shared lock using a fair unlock protocol.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":45489,"byte_end":45545,"line_start":62,"line_end":62,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":45653,"byte_end":45674,"line_start":66,"line_end":66,"column_start":8,"column_end":29},"name":"unlock_exclusive_fair","qualname":"::rwlock::RawRwLockFair::unlock_exclusive_fair","value":"pub fn unlock_exclusive_fair(&Self)","parent":{"krate":0,"index":466},"children":[],"decl_id":null,"docs":" Releases an exclusive lock using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Releases an exclusive lock using a fair unlock protocol.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":45585,"byte_end":45645,"line_start":65,"line_end":65,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":45985,"byte_end":45996,"line_start":73,"line_end":73,"column_start":8,"column_end":19},"name":"bump_shared","qualname":"::rwlock::RawRwLockFair::bump_shared","value":"pub fn bump_shared(&Self)","parent":{"krate":0,"index":466},"children":[],"decl_id":null,"docs":" Temporarily yields a shared lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields a shared lock to a waiting thread if there is one.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":45688,"byte_end":45761,"line_start":68,"line_end":68,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":45766,"byte_end":45769,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_shared_fair` followed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":45774,"byte_end":45857,"line_start":70,"line_end":70,"column_start":5,"column_end":88}},{"value":"/ by `lock_shared`, however it can be much more efficient in the case where there","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":45862,"byte_end":45945,"line_start":71,"line_end":71,"column_start":5,"column_end":88}},{"value":"/ are no waiting threads.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":45950,"byte_end":45977,"line_start":72,"line_end":72,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":46387,"byte_end":46401,"line_start":83,"line_end":83,"column_start":8,"column_end":22},"name":"bump_exclusive","qualname":"::rwlock::RawRwLockFair::bump_exclusive","value":"pub fn bump_exclusive(&Self)","parent":{"krate":0,"index":466},"children":[],"decl_id":null,"docs":" Temporarily yields an exclusive lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an exclusive lock to a waiting thread if there is one.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":46080,"byte_end":46157,"line_start":78,"line_end":78,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":46162,"byte_end":46165,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_exclusive_fair` followed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":46170,"byte_end":46256,"line_start":80,"line_end":80,"column_start":5,"column_end":91}},{"value":"/ by `lock_exclusive`, however it can be much more efficient in the case where there","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":46261,"byte_end":46347,"line_start":81,"line_end":81,"column_start":5,"column_end":91}},{"value":"/ are no waiting threads.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":46352,"byte_end":46379,"line_start":82,"line_end":82,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":471},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":46618,"byte_end":46636,"line_start":91,"line_end":91,"column_start":18,"column_end":36},"name":"RawRwLockDowngrade","qualname":"::rwlock::RawRwLockDowngrade","value":"RawRwLockDowngrade: RawRwLock","parent":null,"children":[{"krate":0,"index":472}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically downgrading an\n exclusive lock to a shared lock.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically downgrading an","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":46489,"byte_end":46563,"line_start":89,"line_end":89,"column_start":1,"column_end":75}},{"value":"/ exclusive lock to a shared lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":46564,"byte_end":46600,"line_start":90,"line_end":90,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":46803,"byte_end":46812,"line_start":94,"line_end":94,"column_start":8,"column_end":17},"name":"downgrade","qualname":"::rwlock::RawRwLockDowngrade::downgrade","value":"pub fn downgrade(&Self)","parent":{"krate":0,"index":471},"children":[],"decl_id":null,"docs":" Atomically downgrades an exclusive lock into a shared lock without\n allowing any thread to take an exclusive lock in the meantime.\n","sig":null,"attributes":[{"value":"/ Atomically downgrades an exclusive lock into a shared lock without","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":46654,"byte_end":46724,"line_start":92,"line_end":92,"column_start":5,"column_end":75}},{"value":"/ allowing any thread to take an exclusive lock in the meantime.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":46729,"byte_end":46795,"line_start":93,"line_end":93,"column_start":5,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":473},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":47054,"byte_end":47068,"line_start":101,"line_end":101,"column_start":18,"column_end":32},"name":"RawRwLockTimed","qualname":"::rwlock::RawRwLockTimed","value":"RawRwLockTimed: RawRwLock","parent":null,"children":[{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479}],"decl_id":null,"docs":" Additional methods for RwLocks which support locking with timeouts.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support locking with timeouts.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":46824,"byte_end":46895,"line_start":97,"line_end":97,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":46896,"byte_end":46899,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ The `Duration` and `Instant` types are specified as associated types so that","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":46900,"byte_end":46980,"line_start":99,"line_end":99,"column_start":1,"column_end":81}},{"value":"/ this trait is usable even in `no_std` environments.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":46981,"byte_end":47036,"line_start":100,"line_end":100,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":474},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":47138,"byte_end":47146,"line_start":103,"line_end":103,"column_start":10,"column_end":18},"name":"Duration","qualname":"::rwlock::RawRwLockTimed::Duration","value":"type Duration;","parent":{"krate":0,"index":473},"children":[],"decl_id":null,"docs":" Duration type used for `try_lock_for`.\n","sig":null,"attributes":[{"value":"/ Duration type used for `try_lock_for`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":47086,"byte_end":47128,"line_start":102,"line_end":102,"column_start":5,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":475},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":47206,"byte_end":47213,"line_start":106,"line_end":106,"column_start":10,"column_end":17},"name":"Instant","qualname":"::rwlock::RawRwLockTimed::Instant","value":"type Instant;","parent":{"krate":0,"index":473},"children":[],"decl_id":null,"docs":" Instant type used for `try_lock_until`.\n","sig":null,"attributes":[{"value":"/ Instant type used for `try_lock_until`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":47153,"byte_end":47196,"line_start":105,"line_end":105,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":47293,"byte_end":47312,"line_start":109,"line_end":109,"column_start":8,"column_end":27},"name":"try_lock_shared_for","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_for","value":"pub fn try_lock_shared_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":473},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":47220,"byte_end":47285,"line_start":108,"line_end":108,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":47432,"byte_end":47453,"line_start":112,"line_end":112,"column_start":8,"column_end":29},"name":"try_lock_shared_until","qualname":"::rwlock::RawRwLockTimed::try_lock_shared_until","value":"pub fn try_lock_shared_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":473},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":47359,"byte_end":47424,"line_start":111,"line_end":111,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":47576,"byte_end":47598,"line_start":115,"line_end":115,"column_start":8,"column_end":30},"name":"try_lock_exclusive_for","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_for","value":"pub fn try_lock_exclusive_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":473},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":47499,"byte_end":47568,"line_start":114,"line_end":114,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":47722,"byte_end":47746,"line_start":118,"line_end":118,"column_start":8,"column_end":32},"name":"try_lock_exclusive_until","qualname":"::rwlock::RawRwLockTimed::try_lock_exclusive_until","value":"pub fn try_lock_exclusive_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":473},"children":[],"decl_id":null,"docs":" Attempts to acquire an exclusive lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an exclusive lock until a timeout is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":47645,"byte_end":47714,"line_start":117,"line_end":117,"column_start":5,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":480},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":48179,"byte_end":48197,"line_start":128,"line_end":128,"column_start":18,"column_end":36},"name":"RawRwLockRecursive","qualname":"::rwlock::RawRwLockRecursive","value":"RawRwLockRecursive: RawRwLock","parent":null,"children":[{"krate":0,"index":481},{"krate":0,"index":482}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":47790,"byte_end":47860,"line_start":121,"line_end":121,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":47861,"byte_end":47864,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ These are guaranteed to succeed without blocking if","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":47865,"byte_end":47920,"line_start":123,"line_end":123,"column_start":1,"column_end":56}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":47921,"byte_end":47996,"line_start":124,"line_end":124,"column_start":1,"column_end":76}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":47997,"byte_end":48068,"line_start":125,"line_end":125,"column_start":1,"column_end":72}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":48069,"byte_end":48143,"line_start":126,"line_end":126,"column_start":1,"column_end":75}},{"value":"/ for the lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":48144,"byte_end":48161,"line_start":127,"line_end":127,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":48298,"byte_end":48319,"line_start":130,"line_end":130,"column_start":8,"column_end":29},"name":"lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::lock_shared_recursive","value":"pub fn lock_shared_recursive(&Self)","parent":{"krate":0,"index":480},"children":[],"decl_id":null,"docs":" Acquires a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Acquires a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":48215,"byte_end":48290,"line_start":129,"line_end":129,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":48427,"byte_end":48452,"line_start":133,"line_end":133,"column_start":8,"column_end":33},"name":"try_lock_shared_recursive","qualname":"::rwlock::RawRwLockRecursive::try_lock_shared_recursive","value":"pub fn try_lock_shared_recursive(&Self) -> bool","parent":{"krate":0,"index":480},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock without deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock without deadlocking in case of a recursive lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":48333,"byte_end":48419,"line_start":132,"line_end":132,"column_start":5,"column_end":91}}]},{"kind":"Trait","id":{"krate":0,"index":483},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":48573,"byte_end":48596,"line_start":137,"line_end":137,"column_start":18,"column_end":41},"name":"RawRwLockRecursiveTimed","qualname":"::rwlock::RawRwLockRecursiveTimed","value":"RawRwLockRecursiveTimed: RawRwLockRecursive + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":484},{"krate":0,"index":485}],"decl_id":null,"docs":" Additional methods for RwLocks which support recursive read locks and timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support recursive read locks and timeouts.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":48472,"byte_end":48555,"line_start":136,"line_end":136,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":48770,"byte_end":48799,"line_start":140,"line_end":140,"column_start":8,"column_end":37},"name":"try_lock_shared_recursive_for","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_for","value":"pub fn try_lock_shared_recursive_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":483},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":48640,"byte_end":48713,"line_start":138,"line_end":138,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":48718,"byte_end":48762,"line_start":139,"line_end":139,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":48976,"byte_end":49007,"line_start":144,"line_end":144,"column_start":8,"column_end":39},"name":"try_lock_shared_recursive_until","qualname":"::rwlock::RawRwLockRecursiveTimed::try_lock_shared_recursive_until","value":"pub fn try_lock_shared_recursive_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":483},"children":[],"decl_id":null,"docs":" Attempts to acquire a shared lock until a timeout is reached, without\n deadlocking in case of a recursive lock.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire a shared lock until a timeout is reached, without","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":48846,"byte_end":48919,"line_start":142,"line_end":142,"column_start":5,"column_end":78}},{"value":"/ deadlocking in case of a recursive lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":48924,"byte_end":48968,"line_start":143,"line_end":143,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":486},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":49383,"byte_end":49399,"line_start":153,"line_end":153,"column_start":18,"column_end":34},"name":"RawRwLockUpgrade","qualname":"::rwlock::RawRwLockUpgrade","value":"RawRwLockUpgrade: RawRwLock","parent":null,"children":[{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491}],"decl_id":null,"docs":" Additional methods for RwLocks which support atomically upgrading a shared\n lock to an exclusive lock.","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support atomically upgrading a shared","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":49051,"byte_end":49129,"line_start":147,"line_end":147,"column_start":1,"column_end":79}},{"value":"/ lock to an exclusive lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":49130,"byte_end":49160,"line_start":148,"line_end":148,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":49161,"byte_end":49164,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ This requires acquiring a special \"upgradable read lock\" instead of a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":49165,"byte_end":49238,"line_start":150,"line_end":150,"column_start":1,"column_end":74}},{"value":"/ normal shared lock. There may only be one upgradable lock at any time,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":49239,"byte_end":49313,"line_start":151,"line_end":151,"column_start":1,"column_end":75}},{"value":"/ otherwise deadlocks could occur when upgrading.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":49314,"byte_end":49365,"line_start":152,"line_end":152,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":49512,"byte_end":49527,"line_start":155,"line_end":155,"column_start":8,"column_end":23},"name":"lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::lock_upgradable","value":"pub fn lock_upgradable(&Self)","parent":{"krate":0,"index":486},"children":[],"decl_id":null,"docs":" Acquires an upgradable lock, blocking the current thread until it is able to do so.\n","sig":null,"attributes":[{"value":"/ Acquires an upgradable lock, blocking the current thread until it is able to do so.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":49417,"byte_end":49504,"line_start":154,"line_end":154,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":49609,"byte_end":49628,"line_start":158,"line_end":158,"column_start":8,"column_end":27},"name":"try_lock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::try_lock_upgradable","value":"pub fn try_lock_upgradable(&Self) -> bool","parent":{"krate":0,"index":486},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock without blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock without blocking.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":49541,"byte_end":49601,"line_start":157,"line_end":157,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":49690,"byte_end":49707,"line_start":161,"line_end":161,"column_start":8,"column_end":25},"name":"unlock_upgradable","qualname":"::rwlock::RawRwLockUpgrade::unlock_upgradable","value":"pub fn unlock_upgradable(&Self)","parent":{"krate":0,"index":486},"children":[],"decl_id":null,"docs":" Releases an upgradable lock.\n","sig":null,"attributes":[{"value":"/ Releases an upgradable lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":49650,"byte_end":49682,"line_start":160,"line_end":160,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":49782,"byte_end":49789,"line_start":164,"line_end":164,"column_start":8,"column_end":15},"name":"upgrade","qualname":"::rwlock::RawRwLockUpgrade::upgrade","value":"pub fn upgrade(&Self)","parent":{"krate":0,"index":486},"children":[],"decl_id":null,"docs":" Upgrades an upgradable lock to an exclusive lock.\n","sig":null,"attributes":[{"value":"/ Upgrades an upgradable lock to an exclusive lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":49721,"byte_end":49774,"line_start":163,"line_end":163,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":49900,"byte_end":49911,"line_start":168,"line_end":168,"column_start":8,"column_end":19},"name":"try_upgrade","qualname":"::rwlock::RawRwLockUpgrade::try_upgrade","value":"pub fn try_upgrade(&Self) -> bool","parent":{"krate":0,"index":486},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock without\n blocking.\n","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock without","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":49803,"byte_end":49874,"line_start":166,"line_end":166,"column_start":5,"column_end":76}},{"value":"/ blocking.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":49879,"byte_end":49892,"line_start":167,"line_end":167,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":492},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":50038,"byte_end":50058,"line_start":173,"line_end":173,"column_start":18,"column_end":38},"name":"RawRwLockUpgradeFair","qualname":"::rwlock::RawRwLockUpgradeFair","value":"RawRwLockUpgradeFair: RawRwLockUpgrade + RawRwLockFair","parent":null,"children":[{"krate":0,"index":493},{"krate":0,"index":494}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and fair\n unlocking.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and fair","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":49931,"byte_end":50005,"line_start":171,"line_end":171,"column_start":1,"column_end":75}},{"value":"/ unlocking.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":50006,"byte_end":50020,"line_start":172,"line_end":172,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":50168,"byte_end":50190,"line_start":175,"line_end":175,"column_start":8,"column_end":30},"name":"unlock_upgradable_fair","qualname":"::rwlock::RawRwLockUpgradeFair::unlock_upgradable_fair","value":"pub fn unlock_upgradable_fair(&Self)","parent":{"krate":0,"index":492},"children":[],"decl_id":null,"docs":" Releases an upgradable lock using a fair unlock protocol.\n","sig":null,"attributes":[{"value":"/ Releases an upgradable lock using a fair unlock protocol.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":50099,"byte_end":50160,"line_start":174,"line_end":174,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":50514,"byte_end":50529,"line_start":182,"line_end":182,"column_start":8,"column_end":23},"name":"bump_upgradable","qualname":"::rwlock::RawRwLockUpgradeFair::bump_upgradable","value":"pub fn bump_upgradable(&Self)","parent":{"krate":0,"index":492},"children":[],"decl_id":null,"docs":" Temporarily yields an upgradable lock to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields an upgradable lock to a waiting thread if there is one.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":50204,"byte_end":50282,"line_start":177,"line_end":177,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":50287,"byte_end":50290,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_upgradable_fair` followed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":50295,"byte_end":50382,"line_start":179,"line_end":179,"column_start":5,"column_end":92}},{"value":"/ by `lock_upgradable`, however it can be much more efficient in the case where there","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":50387,"byte_end":50474,"line_start":180,"line_end":180,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":50479,"byte_end":50506,"line_start":181,"line_end":181,"column_start":5,"column_end":32}}]},{"kind":"Trait","id":{"krate":0,"index":495},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":50728,"byte_end":50753,"line_start":190,"line_end":190,"column_start":18,"column_end":43},"name":"RawRwLockUpgradeDowngrade","qualname":"::rwlock::RawRwLockUpgradeDowngrade","value":"RawRwLockUpgradeDowngrade: RawRwLockUpgrade + RawRwLockDowngrade","parent":null,"children":[{"krate":0,"index":496},{"krate":0,"index":497}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and lock\n downgrading.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and lock","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":50619,"byte_end":50693,"line_start":188,"line_end":188,"column_start":1,"column_end":75}},{"value":"/ downgrading.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":50694,"byte_end":50710,"line_start":189,"line_end":189,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":50858,"byte_end":50878,"line_start":192,"line_end":192,"column_start":8,"column_end":28},"name":"downgrade_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_upgradable","value":"pub fn downgrade_upgradable(&Self)","parent":{"krate":0,"index":495},"children":[],"decl_id":null,"docs":" Downgrades an upgradable lock to a shared lock.\n","sig":null,"attributes":[{"value":"/ Downgrades an upgradable lock to a shared lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":50799,"byte_end":50850,"line_start":191,"line_end":191,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":50955,"byte_end":50978,"line_start":195,"line_end":195,"column_start":8,"column_end":31},"name":"downgrade_to_upgradable","qualname":"::rwlock::RawRwLockUpgradeDowngrade::downgrade_to_upgradable","value":"pub fn downgrade_to_upgradable(&Self)","parent":{"krate":0,"index":495},"children":[],"decl_id":null,"docs":" Downgrades an exclusive lock to an upgradable lock.\n","sig":null,"attributes":[{"value":"/ Downgrades an exclusive lock to an upgradable lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":50892,"byte_end":50947,"line_start":194,"line_end":194,"column_start":5,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":498},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":51104,"byte_end":51125,"line_start":200,"line_end":200,"column_start":18,"column_end":39},"name":"RawRwLockUpgradeTimed","qualname":"::rwlock::RawRwLockUpgradeTimed","value":"RawRwLockUpgradeTimed: RawRwLockUpgrade + RawRwLockTimed","parent":null,"children":[{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502}],"decl_id":null,"docs":" Additional methods for RwLocks which support upgradable locks and locking\n with timeouts.\n","sig":null,"attributes":[{"value":"/ Additional methods for RwLocks which support upgradable locks and locking","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":50990,"byte_end":51067,"line_start":198,"line_end":198,"column_start":1,"column_end":78}},{"value":"/ with timeouts.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":51068,"byte_end":51086,"line_start":199,"line_end":199,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":51245,"byte_end":51268,"line_start":202,"line_end":202,"column_start":8,"column_end":31},"name":"try_lock_upgradable_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_for","value":"pub fn try_lock_upgradable_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":498},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":51167,"byte_end":51237,"line_start":201,"line_end":201,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":51393,"byte_end":51418,"line_start":205,"line_end":205,"column_start":8,"column_end":33},"name":"try_lock_upgradable_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_lock_upgradable_until","value":"pub fn try_lock_upgradable_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":498},"children":[],"decl_id":null,"docs":" Attempts to acquire an upgradable lock until a timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to acquire an upgradable lock until a timeout is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":51315,"byte_end":51385,"line_start":204,"line_end":204,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":51571,"byte_end":51586,"line_start":209,"line_end":209,"column_start":8,"column_end":23},"name":"try_upgrade_for","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_for","value":"pub fn try_upgrade_for(&Self, Self::Duration) -> bool","parent":{"krate":0,"index":498},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":51464,"byte_end":51535,"line_start":207,"line_end":207,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":51540,"byte_end":51563,"line_start":208,"line_end":208,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":51740,"byte_end":51757,"line_start":213,"line_end":213,"column_start":8,"column_end":25},"name":"try_upgrade_until","qualname":"::rwlock::RawRwLockUpgradeTimed::try_upgrade_until","value":"pub fn try_upgrade_until(&Self, Self::Instant) -> bool","parent":{"krate":0,"index":498},"children":[],"decl_id":null,"docs":" Attempts to upgrade an upgradable lock to an exclusive lock until a\n timeout is reached.\n","sig":null,"attributes":[{"value":"/ Attempts to upgrade an upgradable lock to an exclusive lock until a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":51633,"byte_end":51704,"line_start":211,"line_end":211,"column_start":5,"column_end":76}},{"value":"/ timeout is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":51709,"byte_end":51732,"line_start":212,"line_end":212,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":503},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":52509,"byte_end":52515,"line_start":228,"line_end":228,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rwlock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":506},{"krate":0,"index":507}],"decl_id":null,"docs":" A reader-writer lock","sig":null,"attributes":[{"value":"/ A reader-writer lock","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":51801,"byte_end":51825,"line_start":216,"line_end":216,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":51826,"byte_end":51829,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":51830,"byte_end":51907,"line_start":218,"line_end":218,"column_start":1,"column_end":78}},{"value":"/ point in time. The write portion of this lock typically allows modification","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":51908,"byte_end":51987,"line_start":219,"line_end":219,"column_start":1,"column_end":80}},{"value":"/ of the underlying data (exclusive access) and the read portion of this lock","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":51988,"byte_end":52067,"line_start":220,"line_end":220,"column_start":1,"column_end":80}},{"value":"/ typically allows for read-only access (shared access).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":52068,"byte_end":52126,"line_start":221,"line_end":221,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":52127,"byte_end":52130,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ The type parameter `T` represents the data that this lock protects. It is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":52131,"byte_end":52208,"line_start":223,"line_end":223,"column_start":1,"column_end":78}},{"value":"/ required that `T` satisfies `Send` to be shared across threads and `Sync` to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":52209,"byte_end":52289,"line_start":224,"line_end":224,"column_start":1,"column_end":81}},{"value":"/ allow concurrent access through readers. The RAII guards returned from the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":52290,"byte_end":52368,"line_start":225,"line_end":225,"column_start":1,"column_end":79}},{"value":"/ locking methods implement `Deref` (and `DerefMut` for the `write` methods)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":52369,"byte_end":52447,"line_start":226,"line_end":226,"column_start":1,"column_end":79}},{"value":"/ to allow access to the contained of the lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":52448,"byte_end":52497,"line_start":227,"line_end":227,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":53171,"byte_end":53174,"line_start":250,"line_end":250,"column_start":12,"column_end":15},"name":"new","qualname":"<RwLock<R, T>>::new","value":"pub fn new(T) -> RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of an `RwLock<T>` which is unlocked.\n","sig":null,"attributes":[{"value":"/ Creates a new instance of an `RwLock<T>` which is unlocked.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":53045,"byte_end":53108,"line_start":247,"line_end":247,"column_start":5,"column_end":68}},{"value":"cfg(not(feature = \"nightly\"))","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":53113,"byte_end":53145,"line_start":248,"line_end":248,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":53150,"byte_end":53159,"line_start":249,"line_end":249,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":53417,"byte_end":53427,"line_start":260,"line_end":260,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<R, T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `RwLock`, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this `RwLock`, returning the underlying data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":53305,"byte_end":53363,"line_start":257,"line_end":257,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":53368,"byte_end":53377,"line_start":258,"line_end":258,"column_start":5,"column_end":14}},{"value":"allow(unused_unsafe)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":53382,"byte_end":53405,"line_start":259,"line_end":259,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":54488,"byte_end":54492,"line_start":295,"line_end":295,"column_start":12,"column_end":16},"name":"read","qualname":"<RwLock<R, T>>::read","value":"pub fn read(&Self) -> RwLockReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":53880,"byte_end":53956,"line_start":282,"line_end":282,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":53961,"byte_end":53990,"line_start":283,"line_end":283,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":53995,"byte_end":53998,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":54003,"byte_end":54079,"line_start":285,"line_end":285,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":54084,"byte_end":54160,"line_start":286,"line_end":286,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":54165,"byte_end":54189,"line_start":287,"line_end":287,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":54194,"byte_end":54197,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ Note that attempts to recursively acquire a read lock on a `RwLock` when","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":54202,"byte_end":54278,"line_start":289,"line_end":289,"column_start":5,"column_end":81}},{"value":"/ the current thread already holds one may result in a deadlock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":54283,"byte_end":54349,"line_start":290,"line_end":290,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":54354,"byte_end":54357,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":54362,"byte_end":54434,"line_start":292,"line_end":292,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":54439,"byte_end":54462,"line_start":293,"line_end":293,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":54467,"byte_end":54476,"line_start":294,"line_end":294,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":54930,"byte_end":54938,"line_start":308,"line_end":308,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<R, T>>::try_read","value":"pub fn try_read(&Self) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":54596,"byte_end":54658,"line_start":300,"line_end":300,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":54663,"byte_end":54666,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":54671,"byte_end":54748,"line_start":302,"line_end":302,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":54753,"byte_end":54830,"line_start":303,"line_end":303,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":54835,"byte_end":54858,"line_start":304,"line_end":304,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":54863,"byte_end":54866,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":54871,"byte_end":54904,"line_start":306,"line_end":306,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":54909,"byte_end":54918,"line_start":307,"line_end":307,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":55488,"byte_end":55493,"line_start":325,"line_end":325,"column_start":12,"column_end":17},"name":"write","qualname":"<RwLock<R, T>>::write","value":"pub fn write(&Self) -> RwLockWriteGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with exclusive write access, blocking the current\n thread until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with exclusive write access, blocking the current","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":55112,"byte_end":55185,"line_start":316,"line_end":316,"column_start":5,"column_end":78}},{"value":"/ thread until it can be acquired.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":55190,"byte_end":55226,"line_start":317,"line_end":317,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":55231,"byte_end":55234,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ This function will not return while other writers or other readers","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":55239,"byte_end":55309,"line_start":319,"line_end":319,"column_start":5,"column_end":75}},{"value":"/ currently have access to the lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":55314,"byte_end":55352,"line_start":320,"line_end":320,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":55357,"byte_end":55360,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will drop the write access of this `RwLock`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":55365,"byte_end":55440,"line_start":322,"line_end":322,"column_start":5,"column_end":80}},{"value":"/ when dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":55445,"byte_end":55462,"line_start":323,"line_end":323,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":55467,"byte_end":55476,"line_start":324,"line_end":324,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":55927,"byte_end":55936,"line_start":338,"line_end":338,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<R, T>>::try_write","value":"pub fn try_write(&Self) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to lock this `RwLock` with exclusive write access.","sig":null,"attributes":[{"value":"/ Attempts to lock this `RwLock` with exclusive write access.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":55602,"byte_end":55665,"line_start":330,"line_end":330,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":55670,"byte_end":55673,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired at this time, then `None` is returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":55678,"byte_end":55754,"line_start":332,"line_end":332,"column_start":5,"column_end":81}},{"value":"/ Otherwise, an RAII guard is returned which will release the lock when","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":55759,"byte_end":55832,"line_start":333,"line_end":333,"column_start":5,"column_end":78}},{"value":"/ it is dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":55837,"byte_end":55855,"line_start":334,"line_end":334,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":55860,"byte_end":55863,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":55868,"byte_end":55901,"line_start":336,"line_end":336,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":55906,"byte_end":55915,"line_start":337,"line_end":337,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":56363,"byte_end":56370,"line_start":351,"line_end":351,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<R, T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":56115,"byte_end":56170,"line_start":346,"line_end":346,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":56175,"byte_end":56178,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the `RwLock` mutably, no actual locking needs to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":56183,"byte_end":56259,"line_start":348,"line_end":348,"column_start":5,"column_end":81}},{"value":"/ take place---the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":56264,"byte_end":56337,"line_start":349,"line_end":349,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":56342,"byte_end":56351,"line_start":350,"line_end":350,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":56977,"byte_end":56994,"line_start":367,"line_end":367,"column_start":19,"column_end":36},"name":"force_unlock_read","qualname":"<RwLock<R, T>>::force_unlock_read","value":"pub unsafe fn force_unlock_read(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":56446,"byte_end":56479,"line_start":355,"line_end":355,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":56484,"byte_end":56487,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":56492,"byte_end":56566,"line_start":357,"line_end":357,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":56571,"byte_end":56646,"line_start":358,"line_end":358,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":56651,"byte_end":56672,"line_start":359,"line_end":359,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":56677,"byte_end":56680,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":56685,"byte_end":56697,"line_start":361,"line_end":361,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":56702,"byte_end":56705,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":56710,"byte_end":56784,"line_start":363,"line_end":363,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":56789,"byte_end":56863,"line_start":364,"line_end":364,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":56868,"byte_end":56944,"line_start":365,"line_end":365,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":56949,"byte_end":56958,"line_start":366,"line_end":366,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":57585,"byte_end":57603,"line_start":383,"line_end":383,"column_start":19,"column_end":37},"name":"force_unlock_write","qualname":"<RwLock<R, T>>::force_unlock_write","value":"pub unsafe fn force_unlock_write(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":57049,"byte_end":57083,"line_start":371,"line_end":371,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":57088,"byte_end":57091,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":57096,"byte_end":57170,"line_start":373,"line_end":373,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":57175,"byte_end":57251,"line_start":374,"line_end":374,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":57256,"byte_end":57277,"line_start":375,"line_end":375,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":57282,"byte_end":57285,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":57290,"byte_end":57302,"line_start":377,"line_end":377,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":57307,"byte_end":57310,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":57315,"byte_end":57389,"line_start":379,"line_end":379,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":57394,"byte_end":57469,"line_start":380,"line_end":380,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":57474,"byte_end":57552,"line_start":381,"line_end":381,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":57557,"byte_end":57566,"line_start":382,"line_end":382,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":58069,"byte_end":58072,"line_start":397,"line_end":397,"column_start":19,"column_end":22},"name":"raw","qualname":"<RwLock<R, T>>::raw","value":"pub unsafe fn raw(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw reader-writer lock object.","sig":null,"attributes":[{"value":"/ Returns the underlying raw reader-writer lock object.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":57661,"byte_end":57718,"line_start":387,"line_end":387,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":57723,"byte_end":57726,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ Note that you will most likely need to import the `RawRwLock` trait from","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":57731,"byte_end":57807,"line_start":389,"line_end":389,"column_start":5,"column_end":81}},{"value":"/ `lock_api` to be able to call functions on the raw","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":57812,"byte_end":57866,"line_start":390,"line_end":390,"column_start":5,"column_end":59}},{"value":"/ reader-writer lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":57871,"byte_end":57894,"line_start":391,"line_end":391,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":57899,"byte_end":57902,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":57907,"byte_end":57919,"line_start":393,"line_end":393,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":57924,"byte_end":57927,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ This method is unsafe because it allows unlocking a mutex while","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":57932,"byte_end":57999,"line_start":395,"line_end":395,"column_start":5,"column_end":72}},{"value":"/ still holding a reference to a lock guard.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":58004,"byte_end":58050,"line_start":396,"line_end":396,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":58728,"byte_end":58750,"line_start":415,"line_end":415,"column_start":19,"column_end":41},"name":"force_unlock_read_fair","qualname":"<RwLock<R, T>>::force_unlock_read_fair","value":"pub unsafe fn force_unlock_read_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a read lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a read lock using a fair unlock procotol.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":58168,"byte_end":58230,"line_start":403,"line_end":403,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":58235,"byte_end":58238,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":58243,"byte_end":58317,"line_start":405,"line_end":405,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockReadGuard` object alive, for example when","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":58322,"byte_end":58397,"line_start":406,"line_end":406,"column_start":5,"column_end":80}},{"value":"/ dealing with FFI.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":58402,"byte_end":58423,"line_start":407,"line_end":407,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":58428,"byte_end":58431,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":58436,"byte_end":58448,"line_start":409,"line_end":409,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":58453,"byte_end":58456,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":58461,"byte_end":58535,"line_start":411,"line_end":411,"column_start":5,"column_end":79}},{"value":"/ `RwLockReadGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":58540,"byte_end":58614,"line_start":412,"line_end":412,"column_start":5,"column_end":79}},{"value":"/ Behavior is undefined if a rwlock is read-unlocked when not read-locked.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":58619,"byte_end":58695,"line_start":413,"line_end":413,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":58700,"byte_end":58709,"line_start":414,"line_end":414,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":59375,"byte_end":59398,"line_start":431,"line_end":431,"column_start":19,"column_end":42},"name":"force_unlock_write_fair","qualname":"<RwLock<R, T>>::force_unlock_write_fair","value":"pub unsafe fn force_unlock_write_fair(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Forcibly unlocks a write lock using a fair unlock procotol.","sig":null,"attributes":[{"value":"/ Forcibly unlocks a write lock using a fair unlock procotol.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":58810,"byte_end":58873,"line_start":419,"line_end":419,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":58878,"byte_end":58881,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ This is useful when combined with `mem::forget` to hold a lock without","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":58886,"byte_end":58960,"line_start":421,"line_end":421,"column_start":5,"column_end":79}},{"value":"/ the need to maintain a `RwLockWriteGuard` object alive, for example when","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":58965,"byte_end":59041,"line_start":422,"line_end":422,"column_start":5,"column_end":81}},{"value":"/ dealing with FFI.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":59046,"byte_end":59067,"line_start":423,"line_end":423,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":59072,"byte_end":59075,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":59080,"byte_end":59092,"line_start":425,"line_end":425,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":59097,"byte_end":59100,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ This method must only be called if the current thread logically owns a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":59105,"byte_end":59179,"line_start":427,"line_end":427,"column_start":5,"column_end":79}},{"value":"/ `RwLockWriteGuard` but that guard has be discarded using `mem::forget`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":59184,"byte_end":59259,"line_start":428,"line_end":428,"column_start":5,"column_end":80}},{"value":"/ Behavior is undefined if a rwlock is write-unlocked when not write-locked.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":59264,"byte_end":59342,"line_start":429,"line_end":429,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":59347,"byte_end":59356,"line_start":430,"line_end":430,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":59850,"byte_end":59862,"line_start":444,"line_end":444,"column_start":12,"column_end":24},"name":"try_read_for","qualname":"<RwLock<R, T>>::try_read_for","value":"pub fn try_read_for(&Self, R::Duration) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":59513,"byte_end":59590,"line_start":437,"line_end":437,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":59595,"byte_end":59610,"line_start":438,"line_end":438,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":59615,"byte_end":59618,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":59623,"byte_end":59694,"line_start":440,"line_end":440,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":59699,"byte_end":59770,"line_start":441,"line_end":441,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":59775,"byte_end":59824,"line_start":442,"line_end":442,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":59829,"byte_end":59838,"line_start":443,"line_end":443,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":60406,"byte_end":60420,"line_start":459,"line_end":459,"column_start":12,"column_end":26},"name":"try_read_until","qualname":"<RwLock<R, T>>::try_read_until","value":"pub fn try_read_until(&Self, R::Instant) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":60069,"byte_end":60146,"line_start":452,"line_end":452,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":60151,"byte_end":60166,"line_start":453,"line_end":453,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":60171,"byte_end":60174,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":60179,"byte_end":60250,"line_start":455,"line_end":455,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":60255,"byte_end":60326,"line_start":456,"line_end":456,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":60331,"byte_end":60380,"line_start":457,"line_end":457,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":60385,"byte_end":60394,"line_start":458,"line_end":458,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":60972,"byte_end":60985,"line_start":474,"line_end":474,"column_start":12,"column_end":25},"name":"try_write_for","qualname":"<RwLock<R, T>>::try_write_for","value":"pub fn try_write_for(&Self, R::Duration) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":60628,"byte_end":60701,"line_start":467,"line_end":467,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":60706,"byte_end":60729,"line_start":468,"line_end":468,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":60734,"byte_end":60737,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":60742,"byte_end":60813,"line_start":470,"line_end":470,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":60818,"byte_end":60889,"line_start":471,"line_end":471,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":60894,"byte_end":60946,"line_start":472,"line_end":472,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":60951,"byte_end":60960,"line_start":473,"line_end":473,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":61541,"byte_end":61556,"line_start":489,"line_end":489,"column_start":12,"column_end":27},"name":"try_write_until","qualname":"<RwLock<R, T>>::try_write_until","value":"pub fn try_write_until(&Self, R::Instant) -> Option<RwLockWriteGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with exclusive write access until a\n timeout is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with exclusive write access until a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":61197,"byte_end":61270,"line_start":482,"line_end":482,"column_start":5,"column_end":78}},{"value":"/ timeout is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":61275,"byte_end":61298,"line_start":483,"line_end":483,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":61303,"byte_end":61306,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":61311,"byte_end":61382,"line_start":485,"line_end":485,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":61387,"byte_end":61458,"line_start":486,"line_end":486,"column_start":5,"column_end":76}},{"value":"/ release the exclusive access when it is dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":61463,"byte_end":61515,"line_start":487,"line_end":487,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":61520,"byte_end":61529,"line_start":488,"line_end":488,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":62618,"byte_end":62632,"line_start":515,"line_end":515,"column_start":12,"column_end":26},"name":"read_recursive","qualname":"<RwLock<R, T>>::read_recursive","value":"pub fn read_recursive(&Self) -> RwLockReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with shared read access, blocking the current thread","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":61825,"byte_end":61901,"line_start":499,"line_end":499,"column_start":5,"column_end":81}},{"value":"/ until it can be acquired.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":61906,"byte_end":61935,"line_start":500,"line_end":500,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":61940,"byte_end":61943,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":61948,"byte_end":62024,"line_start":502,"line_end":502,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":62029,"byte_end":62105,"line_start":503,"line_end":503,"column_start":5,"column_end":81}},{"value":"/ this method returns.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":62110,"byte_end":62134,"line_start":504,"line_end":504,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":62139,"byte_end":62142,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ Unlike `read`, this method is guaranteed to succeed without blocking if","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":62147,"byte_end":62222,"line_start":506,"line_end":506,"column_start":5,"column_end":80}},{"value":"/ another read lock is held at the time of the call. This allows a thread","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":62227,"byte_end":62302,"line_start":507,"line_end":507,"column_start":5,"column_end":80}},{"value":"/ to recursively lock a `RwLock`. However using this method can cause","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":62307,"byte_end":62378,"line_start":508,"line_end":508,"column_start":5,"column_end":76}},{"value":"/ writers to starve since readers no longer block if a writer is waiting","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":62383,"byte_end":62457,"line_start":509,"line_end":509,"column_start":5,"column_end":79}},{"value":"/ for the lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":62462,"byte_end":62479,"line_start":510,"line_end":510,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":62484,"byte_end":62487,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":62492,"byte_end":62564,"line_start":512,"line_end":512,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":62569,"byte_end":62592,"line_start":513,"line_end":513,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":62597,"byte_end":62606,"line_start":514,"line_end":514,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":63251,"byte_end":63269,"line_start":531,"line_end":531,"column_start":12,"column_end":30},"name":"try_read_recursive","qualname":"<RwLock<R, T>>::try_read_recursive","value":"pub fn try_read_recursive(&Self) -> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":62746,"byte_end":62808,"line_start":520,"line_end":520,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":62813,"byte_end":62816,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":62821,"byte_end":62898,"line_start":522,"line_end":522,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":62903,"byte_end":62980,"line_start":523,"line_end":523,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":62985,"byte_end":63008,"line_start":524,"line_end":524,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":63013,"byte_end":63016,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed if another read lock is held at the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":63021,"byte_end":63097,"line_start":526,"line_end":526,"column_start":5,"column_end":81}},{"value":"/ time of the call. See the documentation for `read_recursive` for details.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":63102,"byte_end":63179,"line_start":527,"line_end":527,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":63184,"byte_end":63187,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":63192,"byte_end":63225,"line_start":529,"line_end":529,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":63230,"byte_end":63239,"line_start":530,"line_end":530,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":64047,"byte_end":64069,"line_start":552,"line_end":552,"column_start":12,"column_end":34},"name":"try_read_recursive_for","qualname":"<RwLock<R, T>>::try_read_recursive_for","value":"pub fn try_read_recursive_for(&Self, R::Duration)\n-> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":63514,"byte_end":63591,"line_start":541,"line_end":541,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":63596,"byte_end":63611,"line_start":542,"line_end":542,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":63616,"byte_end":63619,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":63624,"byte_end":63695,"line_start":544,"line_end":544,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":63700,"byte_end":63771,"line_start":545,"line_end":545,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":63776,"byte_end":63825,"line_start":546,"line_end":546,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":63830,"byte_end":63833,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ This method is guaranteed to succeed without blocking if another read","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":63838,"byte_end":63911,"line_start":548,"line_end":548,"column_start":5,"column_end":78}},{"value":"/ lock is held at the time of the call. See the documentation for","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":63916,"byte_end":63983,"line_start":549,"line_end":549,"column_start":5,"column_end":72}},{"value":"/ `read_recursive` for details.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":63988,"byte_end":64021,"line_start":550,"line_end":550,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":64026,"byte_end":64035,"line_start":551,"line_end":551,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":64623,"byte_end":64647,"line_start":567,"line_end":567,"column_start":12,"column_end":36},"name":"try_read_recursive_until","qualname":"<RwLock<R, T>>::try_read_recursive_until","value":"pub fn try_read_recursive_until(&Self, R::Instant)\n-> Option<RwLockReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access until a timeout","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":64286,"byte_end":64363,"line_start":560,"line_end":560,"column_start":5,"column_end":82}},{"value":"/ is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":64368,"byte_end":64383,"line_start":561,"line_end":561,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":64388,"byte_end":64391,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":64396,"byte_end":64467,"line_start":563,"line_end":563,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":64472,"byte_end":64543,"line_start":564,"line_end":564,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":64548,"byte_end":64597,"line_start":565,"line_end":565,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":64602,"byte_end":64611,"line_start":566,"line_end":566,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":65591,"byte_end":65606,"line_start":595,"line_end":595,"column_start":12,"column_end":27},"name":"upgradable_read","qualname":"<RwLock<R, T>>::upgradable_read","value":"pub fn upgradable_read(&Self) -> RwLockUpgradableReadGuard<, R, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this `RwLock` with upgradable read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this `RwLock` with upgradable read access, blocking the current thread","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":65113,"byte_end":65193,"line_start":585,"line_end":585,"column_start":5,"column_end":85}},{"value":"/ until it can be acquired.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":65198,"byte_end":65227,"line_start":586,"line_end":586,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":65232,"byte_end":65235,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers or other","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":65240,"byte_end":65319,"line_start":588,"line_end":588,"column_start":5,"column_end":84}},{"value":"/ upgradable reads which hold the lock. There may be other readers currently","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":65324,"byte_end":65402,"line_start":589,"line_end":589,"column_start":5,"column_end":83}},{"value":"/ inside the lock when this method returns.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":65407,"byte_end":65452,"line_start":590,"line_end":590,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":65457,"byte_end":65460,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":65465,"byte_end":65537,"line_start":592,"line_end":592,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":65542,"byte_end":65565,"line_start":593,"line_end":593,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":65570,"byte_end":65579,"line_start":594,"line_end":594,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":66068,"byte_end":66087,"line_start":608,"line_end":608,"column_start":12,"column_end":31},"name":"try_upgradable_read","qualname":"<RwLock<R, T>>::try_upgradable_read","value":"pub fn try_upgradable_read(&Self) -> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":65730,"byte_end":65796,"line_start":600,"line_end":600,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":65801,"byte_end":65804,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then `None` is returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":65809,"byte_end":65886,"line_start":602,"line_end":602,"column_start":5,"column_end":82}},{"value":"/ Otherwise, an RAII guard is returned which will release the shared access","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":65891,"byte_end":65968,"line_start":603,"line_end":603,"column_start":5,"column_end":82}},{"value":"/ when it is dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":65973,"byte_end":65996,"line_start":604,"line_end":604,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":66001,"byte_end":66004,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":66009,"byte_end":66042,"line_start":606,"line_end":606,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":66047,"byte_end":66056,"line_start":607,"line_end":607,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":66681,"byte_end":66704,"line_start":625,"line_end":625,"column_start":12,"column_end":35},"name":"try_upgradable_read_for","qualname":"<RwLock<R, T>>::try_upgradable_read_for","value":"pub fn try_upgradable_read_for(&Self, R::Duration)\n-> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":66340,"byte_end":66421,"line_start":618,"line_end":618,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":66426,"byte_end":66441,"line_start":619,"line_end":619,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":66446,"byte_end":66449,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":66454,"byte_end":66525,"line_start":621,"line_end":621,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":66530,"byte_end":66601,"line_start":622,"line_end":622,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":66606,"byte_end":66655,"line_start":623,"line_end":623,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":66660,"byte_end":66669,"line_start":624,"line_end":624,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":67295,"byte_end":67320,"line_start":643,"line_end":643,"column_start":12,"column_end":37},"name":"try_upgradable_read_until","qualname":"<RwLock<R, T>>::try_upgradable_read_until","value":"pub fn try_upgradable_read_until(&Self, R::Instant)\n-> Option<RwLockUpgradableReadGuard<, R, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with upgradable read access until a timeout\n is reached.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with upgradable read access until a timeout","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":66954,"byte_end":67035,"line_start":636,"line_end":636,"column_start":5,"column_end":86}},{"value":"/ is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":67040,"byte_end":67055,"line_start":637,"line_end":637,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":67060,"byte_end":67063,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":67068,"byte_end":67139,"line_start":639,"line_end":639,"column_start":5,"column_end":76}},{"value":"/ `None` is returned. Otherwise, an RAII guard is returned which will","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":67144,"byte_end":67215,"line_start":640,"line_end":640,"column_start":5,"column_end":76}},{"value":"/ release the shared access when it is dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":67220,"byte_end":67269,"line_start":641,"line_end":641,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":67274,"byte_end":67283,"line_start":642,"line_end":642,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":577},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":68293,"byte_end":68308,"line_start":681,"line_end":681,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":581},{"krate":0,"index":582}],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the shared read access of a lock when","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":68184,"byte_end":68256,"line_start":678,"line_end":678,"column_start":1,"column_end":73}},{"value":"/ dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":68257,"byte_end":68269,"line_start":679,"line_end":679,"column_start":1,"column_end":13}},{"value":"must_use","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":68270,"byte_end":68281,"line_start":680,"line_end":680,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":68684,"byte_end":68690,"line_start":690,"line_end":690,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockReadGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":68606,"byte_end":68672,"line_start":689,"line_end":689,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":69170,"byte_end":69173,"line_start":703,"line_end":703,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockReadGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockReadGuard where F: FnOnce(&T)\n-> &U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":68751,"byte_end":68825,"line_start":694,"line_end":694,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":68830,"byte_end":68833,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":68838,"byte_end":68900,"line_start":696,"line_end":696,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":68905,"byte_end":68936,"line_start":697,"line_end":697,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":68941,"byte_end":68944,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":68949,"byte_end":69000,"line_start":699,"line_end":699,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":69005,"byte_end":69086,"line_start":700,"line_end":700,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":69091,"byte_end":69144,"line_start":701,"line_end":701,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":69149,"byte_end":69158,"line_start":702,"line_end":702,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":70017,"byte_end":70024,"line_start":727,"line_end":727,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockReadGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockReadGuard, Self>\nwhere F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":69517,"byte_end":69591,"line_start":717,"line_end":717,"column_start":5,"column_end":79}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":69596,"byte_end":69672,"line_start":718,"line_end":718,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":69677,"byte_end":69680,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockReadGuard` passed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":69685,"byte_end":69747,"line_start":720,"line_end":720,"column_start":5,"column_end":67}},{"value":"/ in already locked the data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":69752,"byte_end":69783,"line_start":721,"line_end":721,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":69788,"byte_end":69791,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":69796,"byte_end":69847,"line_start":723,"line_end":723,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":69852,"byte_end":69933,"line_start":724,"line_end":724,"column_start":5,"column_end":86}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":69938,"byte_end":69991,"line_start":725,"line_end":725,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":69996,"byte_end":70005,"line_start":726,"line_end":726,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":70776,"byte_end":70784,"line_start":751,"line_end":751,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockReadGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":70479,"byte_end":70546,"line_start":744,"line_end":744,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":70551,"byte_end":70554,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":70559,"byte_end":70611,"line_start":746,"line_end":746,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":70616,"byte_end":70619,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":70624,"byte_end":70692,"line_start":748,"line_end":748,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":70697,"byte_end":70750,"line_start":749,"line_end":749,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":70755,"byte_end":70764,"line_start":750,"line_end":750,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":71842,"byte_end":71853,"line_start":775,"line_end":775,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":71041,"byte_end":71095,"line_start":762,"line_end":762,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":71100,"byte_end":71103,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":71108,"byte_end":71182,"line_start":764,"line_end":764,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":71187,"byte_end":71262,"line_start":765,"line_end":765,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":71267,"byte_end":71340,"line_start":766,"line_end":766,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":71345,"byte_end":71414,"line_start":767,"line_end":767,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":71419,"byte_end":71496,"line_start":768,"line_end":768,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":71501,"byte_end":71568,"line_start":769,"line_end":769,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":71573,"byte_end":71576,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":71581,"byte_end":71657,"line_start":771,"line_end":771,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":71662,"byte_end":71738,"line_start":772,"line_end":772,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockReadGuard` normally.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":71743,"byte_end":71816,"line_start":773,"line_end":773,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":71821,"byte_end":71830,"line_start":774,"line_end":774,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":72240,"byte_end":72253,"line_start":787,"line_end":787,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockReadGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":71943,"byte_end":72010,"line_start":780,"line_end":780,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":72015,"byte_end":72018,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":72023,"byte_end":72075,"line_start":782,"line_end":782,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":72080,"byte_end":72083,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":72088,"byte_end":72156,"line_start":784,"line_end":784,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":72161,"byte_end":72214,"line_start":785,"line_end":785,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":72219,"byte_end":72228,"line_start":786,"line_end":786,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":72737,"byte_end":72741,"line_start":802,"line_end":802,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockReadGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":72437,"byte_end":72509,"line_start":796,"line_end":796,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":72514,"byte_end":72517,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":72522,"byte_end":72598,"line_start":798,"line_end":798,"column_start":5,"column_end":81}},{"value":"/ by `read`, however it can be much more efficient in the case where there","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":72603,"byte_end":72679,"line_start":799,"line_end":799,"column_start":5,"column_end":81}},{"value":"/ are no waiting threads.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":72684,"byte_end":72711,"line_start":800,"line_end":800,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":72716,"byte_end":72725,"line_start":801,"line_end":801,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":625},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":73414,"byte_end":73430,"line_start":828,"line_end":828,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":629},{"krate":0,"index":630}],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the exclusive write access of a lock when","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":73301,"byte_end":73377,"line_start":825,"line_end":825,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":73378,"byte_end":73390,"line_start":826,"line_end":826,"column_start":1,"column_end":13}},{"value":"must_use","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":73391,"byte_end":73402,"line_start":827,"line_end":827,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":639},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":73812,"byte_end":73818,"line_start":837,"line_end":837,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockWriteGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":73734,"byte_end":73800,"line_start":836,"line_end":836,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":74301,"byte_end":74304,"line_start":850,"line_end":850,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockWriteGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockWriteGuard where\nF: FnOnce(&mut T) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":73879,"byte_end":73954,"line_start":841,"line_end":841,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":73959,"byte_end":73962,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":73967,"byte_end":74030,"line_start":843,"line_end":843,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":74035,"byte_end":74066,"line_start":844,"line_end":844,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":74071,"byte_end":74074,"line_start":845,"line_end":845,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":74079,"byte_end":74130,"line_start":846,"line_end":846,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":74135,"byte_end":74217,"line_start":847,"line_end":847,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":74222,"byte_end":74275,"line_start":848,"line_end":848,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":74280,"byte_end":74289,"line_start":849,"line_end":849,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":643},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":75165,"byte_end":75172,"line_start":874,"line_end":874,"column_start":12,"column_end":19},"name":"try_map","qualname":"<RwLockWriteGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockWriteGuard, Self>\nwhere F: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":74662,"byte_end":74737,"line_start":864,"line_end":864,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":74742,"byte_end":74818,"line_start":865,"line_end":865,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":74823,"byte_end":74826,"line_start":866,"line_end":866,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `RwLockWriteGuard` passed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":74831,"byte_end":74894,"line_start":867,"line_end":867,"column_start":5,"column_end":68}},{"value":"/ in already locked the data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":74899,"byte_end":74930,"line_start":868,"line_end":868,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":74935,"byte_end":74938,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":74943,"byte_end":74994,"line_start":870,"line_end":870,"column_start":5,"column_end":56}},{"value":"/ used as `RwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":74999,"byte_end":75081,"line_start":871,"line_end":871,"column_start":5,"column_end":87}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":75086,"byte_end":75139,"line_start":872,"line_end":872,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":75144,"byte_end":75153,"line_start":873,"line_end":873,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":75873,"byte_end":75881,"line_start":896,"line_end":896,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockWriteGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":75641,"byte_end":75708,"line_start":891,"line_end":891,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":75713,"byte_end":75716,"line_start":892,"line_end":892,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":75721,"byte_end":75789,"line_start":893,"line_end":893,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":75794,"byte_end":75847,"line_start":894,"line_end":894,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":75852,"byte_end":75861,"line_start":895,"line_end":895,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":76492,"byte_end":76501,"line_start":913,"line_end":913,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockWriteGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into a read lock without allowing any","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":76150,"byte_end":76226,"line_start":907,"line_end":907,"column_start":5,"column_end":81}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":76231,"byte_end":76296,"line_start":908,"line_end":908,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":76301,"byte_end":76304,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":76309,"byte_end":76382,"line_start":910,"line_end":910,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":76387,"byte_end":76460,"line_start":911,"line_end":911,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":76465,"byte_end":76480,"line_start":912,"line_end":912,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":77176,"byte_end":77199,"line_start":931,"line_end":931,"column_start":12,"column_end":35},"name":"downgrade_to_upgradable","qualname":"<RwLockWriteGuard>::downgrade_to_upgradable","value":"pub fn downgrade_to_upgradable(Self) -> RwLockUpgradableReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into an upgradable read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into an upgradable read lock without allowing any","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":76822,"byte_end":76910,"line_start":925,"line_end":925,"column_start":5,"column_end":93}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":76915,"byte_end":76980,"line_start":926,"line_end":926,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":76985,"byte_end":76988,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":76993,"byte_end":77066,"line_start":928,"line_end":928,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":77071,"byte_end":77144,"line_start":929,"line_end":929,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":77149,"byte_end":77164,"line_start":930,"line_end":930,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":78344,"byte_end":78355,"line_start":956,"line_end":956,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockWriteGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":77542,"byte_end":77596,"line_start":943,"line_end":943,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":77601,"byte_end":77604,"line_start":944,"line_end":944,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":77609,"byte_end":77683,"line_start":945,"line_end":945,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":77688,"byte_end":77763,"line_start":946,"line_end":946,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":77768,"byte_end":77841,"line_start":947,"line_end":947,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":77846,"byte_end":77915,"line_start":948,"line_end":948,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":77920,"byte_end":77997,"line_start":949,"line_end":949,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":78002,"byte_end":78069,"line_start":950,"line_end":950,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":78074,"byte_end":78077,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":78082,"byte_end":78158,"line_start":952,"line_end":952,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":78163,"byte_end":78239,"line_start":953,"line_end":953,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockWriteGuard` normally.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":78244,"byte_end":78318,"line_start":954,"line_end":954,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":78323,"byte_end":78332,"line_start":955,"line_end":955,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":78745,"byte_end":78758,"line_start":968,"line_end":968,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockWriteGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":78448,"byte_end":78515,"line_start":961,"line_end":961,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":78520,"byte_end":78523,"line_start":962,"line_end":962,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":78528,"byte_end":78580,"line_start":963,"line_end":963,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":78585,"byte_end":78588,"line_start":964,"line_end":964,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":78593,"byte_end":78661,"line_start":965,"line_end":965,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":78666,"byte_end":78719,"line_start":966,"line_end":966,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":78724,"byte_end":78733,"line_start":967,"line_end":967,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":79249,"byte_end":79253,"line_start":983,"line_end":983,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockWriteGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":78948,"byte_end":79020,"line_start":977,"line_end":977,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":79025,"byte_end":79028,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":79033,"byte_end":79109,"line_start":979,"line_end":979,"column_start":5,"column_end":81}},{"value":"/ by `write`, however it can be much more efficient in the case where there","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":79114,"byte_end":79191,"line_start":980,"line_end":980,"column_start":5,"column_end":82}},{"value":"/ are no waiting threads.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":79196,"byte_end":79223,"line_start":981,"line_end":981,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":79228,"byte_end":79237,"line_start":982,"line_end":982,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":688},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":80132,"byte_end":80157,"line_start":1016,"line_end":1016,"column_start":12,"column_end":37},"name":"RwLockUpgradableReadGuard","qualname":"::rwlock::RwLockUpgradableReadGuard","value":"RwLockUpgradableReadGuard {  }","parent":null,"children":[{"krate":0,"index":692},{"krate":0,"index":693}],"decl_id":null,"docs":" RAII structure used to release the upgradable read access of a lock when\n dropped.\n","sig":null,"attributes":[{"value":"/ RAII structure used to release the upgradable read access of a lock when","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":80019,"byte_end":80095,"line_start":1013,"line_end":1013,"column_start":1,"column_end":77}},{"value":"/ dropped.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":80096,"byte_end":80108,"line_start":1014,"line_end":1014,"column_start":1,"column_end":13}},{"value":"must_use","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":80109,"byte_end":80120,"line_start":1015,"line_end":1015,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":80578,"byte_end":80584,"line_start":1027,"line_end":1027,"column_start":12,"column_end":18},"name":"rwlock","qualname":"<RwLockUpgradableReadGuard>::rwlock","value":"pub fn rwlock(&Self) -> &'a RwLock<R, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the original reader-writer lock object.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the original reader-writer lock object.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":80500,"byte_end":80566,"line_start":1026,"line_end":1026,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":80877,"byte_end":80885,"line_start":1036,"line_end":1036,"column_start":12,"column_end":20},"name":"unlocked","qualname":"<RwLockUpgradableReadGuard>::unlocked","value":"pub fn unlocked<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":80645,"byte_end":80712,"line_start":1031,"line_end":1031,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":80717,"byte_end":80720,"line_start":1032,"line_end":1032,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":80725,"byte_end":80793,"line_start":1033,"line_end":1033,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":80798,"byte_end":80851,"line_start":1034,"line_end":1034,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":80856,"byte_end":80865,"line_start":1035,"line_end":1035,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":81227,"byte_end":81234,"line_start":1047,"line_end":1047,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<RwLockUpgradableReadGuard>::upgrade","value":"pub fn upgrade(Self) -> RwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically upgrades an upgradable read lock lock into a exclusive write lock,\n blocking the current thread until it can be acquired.\n","sig":null,"attributes":[{"value":"/ Atomically upgrades an upgradable read lock lock into a exclusive write lock,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":81072,"byte_end":81153,"line_start":1045,"line_end":1045,"column_start":5,"column_end":86}},{"value":"/ blocking the current thread until it can be acquired.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":81158,"byte_end":81215,"line_start":1046,"line_end":1046,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":81661,"byte_end":81672,"line_start":1060,"line_end":1060,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<RwLockUpgradableReadGuard>::try_upgrade","value":"pub fn try_upgrade(Self) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive write lock.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":81464,"byte_end":81548,"line_start":1057,"line_end":1057,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":81553,"byte_end":81556,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted at this time, then the current guard is returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":81561,"byte_end":81649,"line_start":1059,"line_end":1059,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":82904,"byte_end":82915,"line_start":1088,"line_end":1088,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<RwLockUpgradableReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":82093,"byte_end":82147,"line_start":1075,"line_end":1075,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":82152,"byte_end":82155,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":82160,"byte_end":82234,"line_start":1077,"line_end":1077,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":82239,"byte_end":82314,"line_start":1078,"line_end":1078,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":82319,"byte_end":82392,"line_start":1079,"line_end":1079,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":82397,"byte_end":82466,"line_start":1080,"line_end":1080,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":82471,"byte_end":82548,"line_start":1081,"line_end":1081,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":82553,"byte_end":82620,"line_start":1082,"line_end":1082,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":82625,"byte_end":82628,"line_start":1083,"line_end":1083,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":82633,"byte_end":82709,"line_start":1084,"line_end":1084,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":82714,"byte_end":82790,"line_start":1085,"line_end":1085,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `RwLockUpgradableReadGuard` normally.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":82795,"byte_end":82878,"line_start":1086,"line_end":1086,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":82883,"byte_end":82892,"line_start":1087,"line_end":1087,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":83306,"byte_end":83319,"line_start":1100,"line_end":1100,"column_start":12,"column_end":25},"name":"unlocked_fair","qualname":"<RwLockUpgradableReadGuard>::unlocked_fair","value":"pub fn unlocked_fair<F, U>(&mut Self, F) -> U where F: FnOnce() -> U","parent":null,"children":[],"decl_id":null,"docs":" Temporarily unlocks the `RwLock` to execute the given function.","sig":null,"attributes":[{"value":"/ Temporarily unlocks the `RwLock` to execute the given function.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":83009,"byte_end":83076,"line_start":1093,"line_end":1093,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":83081,"byte_end":83084,"line_start":1094,"line_end":1094,"column_start":5,"column_end":8}},{"value":"/ The `RwLock` is unlocked a fair unlock protocol.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":83089,"byte_end":83141,"line_start":1095,"line_end":1095,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":83146,"byte_end":83149,"line_start":1096,"line_end":1096,"column_start":5,"column_end":8}},{"value":"/ This is safe because `&mut` guarantees that there exist no other","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":83154,"byte_end":83222,"line_start":1097,"line_end":1097,"column_start":5,"column_end":73}},{"value":"/ references to the data protected by the `RwLock`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":83227,"byte_end":83280,"line_start":1098,"line_end":1098,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":83285,"byte_end":83294,"line_start":1099,"line_end":1099,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":83822,"byte_end":83826,"line_start":1115,"line_end":1115,"column_start":12,"column_end":16},"name":"bump","qualname":"<RwLockUpgradableReadGuard>::bump","value":"pub fn bump(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Temporarily yields the `RwLock` to a waiting thread if there is one.","sig":null,"attributes":[{"value":"/ Temporarily yields the `RwLock` to a waiting thread if there is one.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":83511,"byte_end":83583,"line_start":1109,"line_end":1109,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":83588,"byte_end":83591,"line_start":1110,"line_end":1110,"column_start":5,"column_end":8}},{"value":"/ This method is functionally equivalent to calling `unlock_fair` followed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":83596,"byte_end":83672,"line_start":1111,"line_end":1111,"column_start":5,"column_end":81}},{"value":"/ by `upgradable_read`, however it can be much more efficient in the case where there","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":83677,"byte_end":83764,"line_start":1112,"line_end":1112,"column_start":5,"column_end":92}},{"value":"/ are no waiting threads.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":83769,"byte_end":83796,"line_start":1113,"line_end":1113,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":83801,"byte_end":83810,"line_start":1114,"line_end":1114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":84367,"byte_end":84376,"line_start":1128,"line_end":1128,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockUpgradableReadGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades an upgradable read lock lock into a shared read lock\n without allowing any writers to take exclusive access of the lock in the\n meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades an upgradable read lock lock into a shared read lock","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":83994,"byte_end":84072,"line_start":1121,"line_end":1121,"column_start":5,"column_end":83}},{"value":"/ without allowing any writers to take exclusive access of the lock in the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":84077,"byte_end":84153,"line_start":1122,"line_end":1122,"column_start":5,"column_end":81}},{"value":"/ meantime.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":84158,"byte_end":84171,"line_start":1123,"line_end":1123,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":84176,"byte_end":84179,"line_start":1124,"line_end":1124,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":84184,"byte_end":84257,"line_start":1125,"line_end":1125,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":84262,"byte_end":84335,"line_start":1126,"line_end":1126,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":84340,"byte_end":84355,"line_start":1127,"line_end":1127,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":84968,"byte_end":84983,"line_start":1145,"line_end":1145,"column_start":12,"column_end":27},"name":"try_upgrade_for","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_for","value":"pub fn try_upgrade_for(Self, R::Duration) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":84713,"byte_end":84785,"line_start":1140,"line_end":1140,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":84790,"byte_end":84833,"line_start":1141,"line_end":1141,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":84838,"byte_end":84841,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":84846,"byte_end":84917,"line_start":1143,"line_end":1143,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":84922,"byte_end":84956,"line_start":1144,"line_end":1144,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":85634,"byte_end":85651,"line_start":1167,"line_end":1167,"column_start":12,"column_end":29},"name":"try_upgrade_until","qualname":"<RwLockUpgradableReadGuard>::try_upgrade_until","value":"pub fn try_upgrade_until(Self, R::Instant) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to atomically upgrade an upgradable read lock into a exclusive\n write lock, until a timeout is reached.","sig":null,"attributes":[{"value":"/ Tries to atomically upgrade an upgradable read lock into a exclusive","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":85365,"byte_end":85437,"line_start":1161,"line_end":1161,"column_start":5,"column_end":77}},{"value":"/ write lock, until a timeout is reached.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":85442,"byte_end":85485,"line_start":1162,"line_end":1162,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":85490,"byte_end":85493,"line_start":1163,"line_end":1163,"column_start":5,"column_end":8}},{"value":"/ If the access could not be granted before the timeout expires, then","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":85498,"byte_end":85569,"line_start":1164,"line_end":1164,"column_start":5,"column_end":76}},{"value":"/ the current guard is returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":85574,"byte_end":85608,"line_start":1165,"line_end":1165,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":85613,"byte_end":85622,"line_start":1166,"line_end":1166,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":743},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":86996,"byte_end":87017,"line_start":1212,"line_end":1212,"column_start":12,"column_end":33},"name":"MappedRwLockReadGuard","qualname":"::rwlock::MappedRwLockReadGuard","value":"MappedRwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":749}],"decl_id":null,"docs":" An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":86589,"byte_end":86673,"line_start":1204,"line_end":1204,"column_start":1,"column_end":85}},{"value":"/ subfield of the protected data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":86674,"byte_end":86709,"line_start":1205,"line_end":1205,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":86710,"byte_end":86713,"line_start":1206,"line_end":1206,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockReadGuard` and `RwLockReadGuard` is that the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":86714,"byte_end":86803,"line_start":1207,"line_end":1207,"column_start":1,"column_end":90}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":86804,"byte_end":86879,"line_start":1208,"line_end":1208,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":86880,"byte_end":86960,"line_start":1209,"line_end":1209,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":86961,"byte_end":86972,"line_start":1210,"line_end":1210,"column_start":1,"column_end":12}},{"value":"must_use","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":86973,"byte_end":86984,"line_start":1211,"line_end":1211,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":87872,"byte_end":87875,"line_start":1233,"line_end":1233,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockReadGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockReadGuard where F: FnOnce(&T)\n-> &U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockReadGuard` for a component of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":87441,"byte_end":87515,"line_start":1224,"line_end":1224,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":87520,"byte_end":87523,"line_start":1225,"line_end":1225,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":87528,"byte_end":87596,"line_start":1226,"line_end":1226,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":87601,"byte_end":87632,"line_start":1227,"line_end":1227,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":87637,"byte_end":87640,"line_start":1228,"line_end":1228,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":87645,"byte_end":87696,"line_start":1229,"line_end":1229,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":87701,"byte_end":87788,"line_start":1230,"line_end":1230,"column_start":5,"column_end":92}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":87793,"byte_end":87846,"line_start":1231,"line_end":1231,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":87851,"byte_end":87860,"line_start":1232,"line_end":1232,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":765},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":88710,"byte_end":88717,"line_start":1257,"line_end":1257,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockReadGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockReadGuard, Self>\nwhere F: FnOnce(&T) -> Option<&U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockReadGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockReadGuard` for a component of the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":88198,"byte_end":88272,"line_start":1247,"line_end":1247,"column_start":5,"column_end":79}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":88277,"byte_end":88353,"line_start":1248,"line_end":1248,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":88358,"byte_end":88361,"line_start":1249,"line_end":1249,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockReadGuard` passed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":88366,"byte_end":88434,"line_start":1250,"line_end":1250,"column_start":5,"column_end":73}},{"value":"/ in already locked the data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":88439,"byte_end":88470,"line_start":1251,"line_end":1251,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":88475,"byte_end":88478,"line_start":1252,"line_end":1252,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":88483,"byte_end":88534,"line_start":1253,"line_end":1253,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockReadGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":88539,"byte_end":88626,"line_start":1254,"line_end":1254,"column_start":5,"column_end":92}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":88631,"byte_end":88684,"line_start":1255,"line_end":1255,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":88689,"byte_end":88698,"line_start":1256,"line_end":1256,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":90042,"byte_end":90053,"line_start":1289,"line_end":1289,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockReadGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":89235,"byte_end":89289,"line_start":1276,"line_end":1276,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":89294,"byte_end":89297,"line_start":1277,"line_end":1277,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":89302,"byte_end":89376,"line_start":1278,"line_end":1278,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":89381,"byte_end":89456,"line_start":1279,"line_end":1279,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":89461,"byte_end":89534,"line_start":1280,"line_end":1280,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":89539,"byte_end":89608,"line_start":1281,"line_end":1281,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":89613,"byte_end":89690,"line_start":1282,"line_end":1282,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":89695,"byte_end":89762,"line_start":1283,"line_end":1283,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":89767,"byte_end":89770,"line_start":1284,"line_end":1284,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":89775,"byte_end":89851,"line_start":1285,"line_end":1285,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":89856,"byte_end":89932,"line_start":1286,"line_end":1286,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockReadGuard` normally.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":89937,"byte_end":90016,"line_start":1287,"line_end":1287,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":90021,"byte_end":90030,"line_start":1288,"line_end":1288,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":788},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":91045,"byte_end":91067,"line_start":1323,"line_end":1323,"column_start":12,"column_end":34},"name":"MappedRwLockWriteGuard","qualname":"::rwlock::MappedRwLockWriteGuard","value":"MappedRwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":794}],"decl_id":null,"docs":" An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a\n subfield of the protected data.","sig":null,"attributes":[{"value":"/ An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":90634,"byte_end":90720,"line_start":1315,"line_end":1315,"column_start":1,"column_end":87}},{"value":"/ subfield of the protected data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":90721,"byte_end":90756,"line_start":1316,"line_end":1316,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":90757,"byte_end":90760,"line_start":1317,"line_end":1317,"column_start":1,"column_end":4}},{"value":"/ The main difference between `MappedRwLockWriteGuard` and `RwLockWriteGuard` is that the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":90761,"byte_end":90852,"line_start":1318,"line_end":1318,"column_start":1,"column_end":92}},{"value":"/ former doesn't support temporarily unlocking and re-locking, since that","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":90853,"byte_end":90928,"line_start":1319,"line_end":1319,"column_start":1,"column_end":76}},{"value":"/ could introduce soundness issues if the locked object is modified by another","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":90929,"byte_end":91009,"line_start":1320,"line_end":1320,"column_start":1,"column_end":81}},{"value":"/ thread.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":91010,"byte_end":91021,"line_start":1321,"line_end":1321,"column_start":1,"column_end":12}},{"value":"must_use","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":91022,"byte_end":91033,"line_start":1322,"line_end":1322,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":91934,"byte_end":91937,"line_start":1346,"line_end":1346,"column_start":12,"column_end":15},"name":"map","qualname":"<MappedRwLockWriteGuard>::map","value":"pub fn map<U: ?Sized, F>(Self, F) -> MappedRwLockWriteGuard where\nF: FnOnce(&mut T) -> &mut U","parent":null,"children":[],"decl_id":null,"docs":" Make a new `MappedRwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Make a new `MappedRwLockWriteGuard` for a component of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":91500,"byte_end":91575,"line_start":1337,"line_end":1337,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":91580,"byte_end":91583,"line_start":1338,"line_end":1338,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":91588,"byte_end":91657,"line_start":1339,"line_end":1339,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":91662,"byte_end":91693,"line_start":1340,"line_end":1340,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":91698,"byte_end":91701,"line_start":1341,"line_end":1341,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":91706,"byte_end":91757,"line_start":1342,"line_end":1342,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":91762,"byte_end":91850,"line_start":1343,"line_end":1343,"column_start":5,"column_end":93}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":91855,"byte_end":91908,"line_start":1344,"line_end":1344,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":91913,"byte_end":91922,"line_start":1345,"line_end":1345,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":92789,"byte_end":92796,"line_start":1370,"line_end":1370,"column_start":12,"column_end":19},"name":"try_map","qualname":"<MappedRwLockWriteGuard>::try_map","value":"pub fn try_map<U: ?Sized, F>(Self, F) -> Result<MappedRwLockWriteGuard, Self>\nwhere F: FnOnce(&mut T) -> Option<&mut U>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to make  a new `MappedRwLockWriteGuard` for a component of the\n locked data. The original guard is return if the closure returns `None`.","sig":null,"attributes":[{"value":"/ Attempts to make  a new `MappedRwLockWriteGuard` for a component of the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":92274,"byte_end":92349,"line_start":1360,"line_end":1360,"column_start":5,"column_end":80}},{"value":"/ locked data. The original guard is return if the closure returns `None`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":92354,"byte_end":92430,"line_start":1361,"line_end":1361,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":92435,"byte_end":92438,"line_start":1362,"line_end":1362,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as the `MappedRwLockWriteGuard` passed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":92443,"byte_end":92512,"line_start":1363,"line_end":1363,"column_start":5,"column_end":74}},{"value":"/ in already locked the data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":92517,"byte_end":92548,"line_start":1364,"line_end":1364,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":92553,"byte_end":92556,"line_start":1365,"line_end":1365,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":92561,"byte_end":92612,"line_start":1366,"line_end":1366,"column_start":5,"column_end":56}},{"value":"/ used as `MappedRwLockWriteGuard::map(...)`. A method would interfere with methods of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":92617,"byte_end":92705,"line_start":1367,"line_end":1367,"column_start":5,"column_end":93}},{"value":"/ the same name on the contents of the locked data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":92710,"byte_end":92763,"line_start":1368,"line_end":1368,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":92768,"byte_end":92777,"line_start":1369,"line_end":1369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":93676,"byte_end":93685,"line_start":1395,"line_end":1395,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<MappedRwLockWriteGuard>::downgrade","value":"pub fn downgrade(Self) -> MappedRwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Atomically downgrades a write lock into a read lock without allowing any\n writers to take exclusive access of the lock in the meantime.","sig":null,"attributes":[{"value":"/ Atomically downgrades a write lock into a read lock without allowing any","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":93334,"byte_end":93410,"line_start":1389,"line_end":1389,"column_start":5,"column_end":81}},{"value":"/ writers to take exclusive access of the lock in the meantime.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":93415,"byte_end":93480,"line_start":1390,"line_end":1390,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":93485,"byte_end":93488,"line_start":1391,"line_end":1391,"column_start":5,"column_end":8}},{"value":"/ Note that if there are any writers currently waiting to take the lock","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":93493,"byte_end":93566,"line_start":1392,"line_end":1392,"column_start":5,"column_end":78}},{"value":"/ then other readers may not be able to acquire the lock even if it was","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":93571,"byte_end":93644,"line_start":1393,"line_end":1393,"column_start":5,"column_end":78}},{"value":"/ downgraded.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":93649,"byte_end":93664,"line_start":1394,"line_end":1394,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":94849,"byte_end":94860,"line_start":1422,"line_end":1422,"column_start":12,"column_end":23},"name":"unlock_fair","qualname":"<MappedRwLockWriteGuard>::unlock_fair","value":"pub fn unlock_fair(Self)","parent":null,"children":[],"decl_id":null,"docs":" Unlocks the `RwLock` using a fair unlock protocol.","sig":null,"attributes":[{"value":"/ Unlocks the `RwLock` using a fair unlock protocol.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":94041,"byte_end":94095,"line_start":1409,"line_end":1409,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":94100,"byte_end":94103,"line_start":1410,"line_end":1410,"column_start":5,"column_end":8}},{"value":"/ By default, `RwLock` is unfair and allow the current thread to re-lock","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":94108,"byte_end":94182,"line_start":1411,"line_end":1411,"column_start":5,"column_end":79}},{"value":"/ the `RwLock` before another has the chance to acquire the lock, even if","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":94187,"byte_end":94262,"line_start":1412,"line_end":1412,"column_start":5,"column_end":80}},{"value":"/ that thread has been blocked on the `RwLock` for a long time. This is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":94267,"byte_end":94340,"line_start":1413,"line_end":1413,"column_start":5,"column_end":78}},{"value":"/ the default because it allows much higher throughput as it avoids","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":94345,"byte_end":94414,"line_start":1414,"line_end":1414,"column_start":5,"column_end":74}},{"value":"/ forcing a context switch on every `RwLock` unlock. This can result in one","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":94419,"byte_end":94496,"line_start":1415,"line_end":1415,"column_start":5,"column_end":82}},{"value":"/ thread acquiring a `RwLock` many more times than other threads.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":94501,"byte_end":94568,"line_start":1416,"line_end":1416,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":94573,"byte_end":94576,"line_start":1417,"line_end":1417,"column_start":5,"column_end":8}},{"value":"/ However in some cases it can be beneficial to ensure fairness by forcing","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":94581,"byte_end":94657,"line_start":1418,"line_end":1418,"column_start":5,"column_end":81}},{"value":"/ the lock to pass on to a waiting thread if there is one. This is done by","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":94662,"byte_end":94738,"line_start":1419,"line_end":1419,"column_start":5,"column_end":81}},{"value":"/ using this method instead of dropping the `MappedRwLockWriteGuard` normally.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":94743,"byte_end":94823,"line_start":1420,"line_end":1420,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":94828,"byte_end":94837,"line_start":1421,"line_end":1421,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":7462,"byte_end":7467,"line_start":96,"line_end":96,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":7536,"byte_end":7541,"line_start":97,"line_end":97,"column_start":60,"column_end":65},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":7573,"byte_end":7578,"line_start":99,"line_end":99,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":8313,"byte_end":8318,"line_start":128,"line_end":128,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10945,"byte_end":10950,"line_start":208,"line_end":208,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":11602,"byte_end":11607,"line_start":226,"line_end":226,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":12670,"byte_end":12675,"line_start":256,"line_end":256,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":12813,"byte_end":12818,"line_start":263,"line_end":263,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":12964,"byte_end":12969,"line_start":270,"line_end":270,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":13723,"byte_end":13733,"line_start":290,"line_end":290,"column_start":74,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":13791,"byte_end":13801,"line_start":292,"line_end":292,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":16092,"byte_end":16102,"line_start":363,"line_end":363,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":17870,"byte_end":17880,"line_start":409,"line_end":409,"column_start":54,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":18064,"byte_end":18074,"line_start":417,"line_end":417,"column_start":57,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":18249,"byte_end":18259,"line_start":424,"line_end":424,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":18452,"byte_end":18462,"line_start":432,"line_end":432,"column_start":69,"column_end":79},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":19072,"byte_end":19088,"line_start":449,"line_end":449,"column_start":9,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":19161,"byte_end":19177,"line_start":451,"line_end":451,"column_start":60,"column_end":76},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":19266,"byte_end":19282,"line_start":455,"line_end":455,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":21031,"byte_end":21047,"line_start":507,"line_end":507,"column_start":48,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":21983,"byte_end":21999,"line_start":527,"line_end":527,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":22171,"byte_end":22187,"line_start":535,"line_end":535,"column_start":57,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":22350,"byte_end":22366,"line_start":542,"line_end":542,"column_start":53,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":22553,"byte_end":22569,"line_start":550,"line_end":550,"column_start":69,"column_end":85},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":24001,"byte_end":24018,"line_start":46,"line_end":46,"column_start":35,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":257},{"krate":0,"index":259},{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":25206,"byte_end":25223,"line_start":92,"line_end":92,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":25850,"byte_end":25867,"line_start":115,"line_end":115,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":270},{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":26849,"byte_end":26863,"line_start":144,"line_end":144,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":26962,"byte_end":26976,"line_start":147,"line_end":147,"column_start":9,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":27027,"byte_end":27041,"line_start":150,"line_end":150,"column_start":38,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":28225,"byte_end":28239,"line_start":189,"line_end":189,"column_start":46,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":31076,"byte_end":31090,"line_start":270,"line_end":270,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":31779,"byte_end":31793,"line_start":288,"line_end":288,"column_start":51,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":313},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":32899,"byte_end":32913,"line_start":318,"line_end":318,"column_start":68,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":33091,"byte_end":33105,"line_start":325,"line_end":325,"column_start":50,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":33291,"byte_end":33305,"line_start":332,"line_end":332,"column_start":74,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":34194,"byte_end":34213,"line_start":356,"line_end":356,"column_start":9,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":34295,"byte_end":34314,"line_start":359,"line_end":359,"column_start":65,"column_end":84},"value":"","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":351},{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":36754,"byte_end":36773,"line_start":431,"line_end":431,"column_start":5,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":38586,"byte_end":38605,"line_start":479,"line_end":479,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":372},{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":38815,"byte_end":38834,"line_start":489,"line_end":489,"column_start":9,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":39057,"byte_end":39076,"line_start":499,"line_end":499,"column_start":9,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":39794,"byte_end":39819,"line_start":517,"line_end":517,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":39905,"byte_end":39930,"line_start":521,"line_end":521,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":403},{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":41779,"byte_end":41804,"line_start":575,"line_end":575,"column_start":5,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":42777,"byte_end":42802,"line_start":597,"line_end":597,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":42998,"byte_end":43023,"line_start":607,"line_end":607,"column_start":9,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":427}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":43238,"byte_end":43263,"line_start":617,"line_end":617,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":52643,"byte_end":52649,"line_start":233,"line_end":233,"column_start":61,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":52726,"byte_end":52732,"line_start":234,"line_end":234,"column_start":68,"column_end":74},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":52765,"byte_end":52771,"line_start":236,"line_end":236,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":517},{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":53522,"byte_end":53528,"line_start":265,"line_end":265,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":58149,"byte_end":58155,"line_start":402,"line_end":402,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":535},{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":59494,"byte_end":59500,"line_start":436,"line_end":436,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":61806,"byte_end":61812,"line_start":498,"line_end":498,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":547},{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":63495,"byte_end":63501,"line_start":540,"line_end":540,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":552},{"krate":0,"index":553}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":64900,"byte_end":64906,"line_start":576,"line_end":576,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":66321,"byte_end":66327,"line_start":617,"line_end":617,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":563},{"krate":0,"index":564}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":67621,"byte_end":67627,"line_start":655,"line_end":655,"column_start":53,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":568}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":67768,"byte_end":67774,"line_start":662,"line_end":662,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":67923,"byte_end":67929,"line_start":669,"line_end":669,"column_start":59,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":68500,"byte_end":68515,"line_start":686,"line_end":686,"column_start":68,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":68574,"byte_end":68589,"line_start":688,"line_end":688,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":595},{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":71009,"byte_end":71024,"line_start":761,"line_end":761,"column_start":49,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":72857,"byte_end":72872,"line_start":807,"line_end":807,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":614},{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":73054,"byte_end":73069,"line_start":815,"line_end":815,"column_start":54,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":73271,"byte_end":73286,"line_start":823,"line_end":823,"column_start":70,"column_end":85},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":73626,"byte_end":73642,"line_start":833,"line_end":833,"column_start":68,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":73701,"byte_end":73717,"line_start":835,"line_end":835,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":643},{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":76117,"byte_end":76133,"line_start":906,"line_end":906,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":76789,"byte_end":76805,"line_start":924,"line_end":924,"column_start":61,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":658}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":77509,"byte_end":77525,"line_start":942,"line_end":942,"column_start":49,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":79372,"byte_end":79388,"line_start":988,"line_end":988,"column_start":55,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":672},{"krate":0,"index":673}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":79574,"byte_end":79590,"line_start":996,"line_end":996,"column_start":58,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":79767,"byte_end":79783,"line_start":1003,"line_end":1003,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":683}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":79988,"byte_end":80004,"line_start":1011,"line_end":1011,"column_start":70,"column_end":86},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":80367,"byte_end":80392,"line_start":1022,"line_end":1022,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":80458,"byte_end":80483,"line_start":1025,"line_end":1025,"column_start":52,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":706},{"krate":0,"index":707}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":82051,"byte_end":82076,"line_start":1074,"line_end":1074,"column_start":56,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":716}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":83952,"byte_end":83977,"line_start":1120,"line_end":1120,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":721}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":84671,"byte_end":84696,"line_start":1139,"line_end":1139,"column_start":57,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":726},{"krate":0,"index":727}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":86093,"byte_end":86118,"line_start":1184,"line_end":1184,"column_start":62,"column_end":87},"value":"","parent":null,"children":[{"krate":0,"index":732},{"krate":0,"index":733}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":86307,"byte_end":86332,"line_start":1192,"line_end":1192,"column_start":61,"column_end":86},"value":"","parent":null,"children":[{"krate":0,"index":738}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":86549,"byte_end":86574,"line_start":1201,"line_end":1201,"column_start":9,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":87197,"byte_end":87218,"line_start":1218,"line_end":1218,"column_start":68,"column_end":89},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":87292,"byte_end":87313,"line_start":1219,"line_end":1219,"column_start":61,"column_end":82},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":87403,"byte_end":87424,"line_start":1223,"line_end":1223,"column_start":45,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":762},{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":89197,"byte_end":89218,"line_start":1275,"line_end":1275,"column_start":49,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":90188,"byte_end":90209,"line_start":1295,"line_end":1295,"column_start":55,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":90378,"byte_end":90399,"line_start":1303,"line_end":1303,"column_start":54,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":783}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":90598,"byte_end":90619,"line_start":1312,"line_end":1312,"column_start":9,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":91253,"byte_end":91275,"line_start":1330,"line_end":1330,"column_start":9,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":91349,"byte_end":91371,"line_start":1332,"line_end":1332,"column_start":61,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":91461,"byte_end":91483,"line_start":1336,"line_end":1336,"column_start":45,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":807},{"krate":0,"index":810}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":93295,"byte_end":93317,"line_start":1388,"line_end":1388,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":817}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":94002,"byte_end":94024,"line_start":1408,"line_end":1408,"column_start":49,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":822}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":94998,"byte_end":95020,"line_start":1428,"line_end":1428,"column_start":55,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":827},{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":95193,"byte_end":95215,"line_start":1436,"line_end":1436,"column_start":58,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":95379,"byte_end":95401,"line_start":1443,"line_end":1443,"column_start":54,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":95603,"byte_end":95625,"line_start":1452,"line_end":1452,"column_start":9,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":5721,"byte_end":5729,"line_start":50,"line_end":50,"column_start":32,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":35},"to":{"krate":0,"index":41}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":6417,"byte_end":6425,"line_start":69,"line_end":69,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":35},"to":{"krate":0,"index":44}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":7462,"byte_end":7467,"line_start":96,"line_end":96,"column_start":60,"column_end":65},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":49},"to":{"krate":1,"index":3016}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":7536,"byte_end":7541,"line_start":97,"line_end":97,"column_start":60,"column_end":65},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":49},"to":{"krate":1,"index":3028}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":7573,"byte_end":7578,"line_start":99,"line_end":99,"column_start":22,"column_end":27},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":49},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":8313,"byte_end":8318,"line_start":128,"line_end":128,"column_start":30,"column_end":35},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":49},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":10945,"byte_end":10950,"line_start":208,"line_end":208,"column_start":34,"column_end":39},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":49},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":11602,"byte_end":11607,"line_start":226,"line_end":226,"column_start":35,"column_end":40},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":49},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":12670,"byte_end":12675,"line_start":256,"line_end":256,"column_start":52,"column_end":57},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":49},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":12813,"byte_end":12818,"line_start":263,"line_end":263,"column_start":34,"column_end":39},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":49},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":12964,"byte_end":12969,"line_start":270,"line_end":270,"column_start":58,"column_end":63},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":49},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":13723,"byte_end":13733,"line_start":290,"line_end":290,"column_start":74,"column_end":84},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3028}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":13791,"byte_end":13801,"line_start":292,"line_end":292,"column_start":44,"column_end":54},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":95},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":16092,"byte_end":16102,"line_start":363,"line_end":363,"column_start":48,"column_end":58},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":95},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":17870,"byte_end":17880,"line_start":409,"line_end":409,"column_start":54,"column_end":64},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3227}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":18064,"byte_end":18074,"line_start":417,"line_end":417,"column_start":57,"column_end":67},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3240}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":18249,"byte_end":18259,"line_start":424,"line_end":424,"column_start":53,"column_end":63},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":95},"to":{"krate":1,"index":3251}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":18452,"byte_end":18462,"line_start":432,"line_end":432,"column_start":69,"column_end":79},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":95},"to":{"krate":22,"index":8}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":19072,"byte_end":19088,"line_start":449,"line_end":449,"column_start":9,"column_end":25},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":148},"to":{"krate":1,"index":3028}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":19161,"byte_end":19177,"line_start":451,"line_end":451,"column_start":60,"column_end":76},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":148},"to":{"krate":1,"index":3016}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":19266,"byte_end":19282,"line_start":455,"line_end":455,"column_start":44,"column_end":60},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":148},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":21031,"byte_end":21047,"line_start":507,"line_end":507,"column_start":48,"column_end":64},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":148},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":21983,"byte_end":21999,"line_start":527,"line_end":527,"column_start":54,"column_end":70},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":148},"to":{"krate":1,"index":3227}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":22171,"byte_end":22187,"line_start":535,"line_end":535,"column_start":57,"column_end":73},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":148},"to":{"krate":1,"index":3240}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":22350,"byte_end":22366,"line_start":542,"line_end":542,"column_start":53,"column_end":69},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":148},"to":{"krate":1,"index":3251}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/mutex.rs","byte_start":22553,"byte_end":22569,"line_start":550,"line_end":550,"column_start":69,"column_end":85},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":148},"to":{"krate":22,"index":8}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":24001,"byte_end":24018,"line_start":46,"line_end":46,"column_start":35,"column_end":52},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":245},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":25206,"byte_end":25223,"line_start":92,"line_end":92,"column_start":39,"column_end":56},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":245},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":25850,"byte_end":25867,"line_start":115,"line_end":115,"column_start":40,"column_end":57},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":245},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":26849,"byte_end":26863,"line_start":144,"line_end":144,"column_start":9,"column_end":23},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":274},"to":{"krate":1,"index":3016}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":26962,"byte_end":26976,"line_start":147,"line_end":147,"column_start":9,"column_end":23},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":274},"to":{"krate":1,"index":3028}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":27027,"byte_end":27041,"line_start":150,"line_end":150,"column_start":38,"column_end":52},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":274},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":28225,"byte_end":28239,"line_start":189,"line_end":189,"column_start":46,"column_end":60},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":274},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":31076,"byte_end":31090,"line_start":270,"line_end":270,"column_start":50,"column_end":64},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":274},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":31779,"byte_end":31793,"line_start":288,"line_end":288,"column_start":51,"column_end":65},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":274},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":32899,"byte_end":32913,"line_start":318,"line_end":318,"column_start":68,"column_end":82},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":274},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":33091,"byte_end":33105,"line_start":325,"line_end":325,"column_start":50,"column_end":64},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":274},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":33291,"byte_end":33305,"line_start":332,"line_end":332,"column_start":74,"column_end":88},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":274},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":34194,"byte_end":34213,"line_start":356,"line_end":356,"column_start":9,"column_end":28},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":3028}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":34295,"byte_end":34314,"line_start":359,"line_end":359,"column_start":65,"column_end":84},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":36754,"byte_end":36773,"line_start":431,"line_end":431,"column_start":5,"column_end":24},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":38586,"byte_end":38605,"line_start":479,"line_end":479,"column_start":9,"column_end":28},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":3227}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":38815,"byte_end":38834,"line_start":489,"line_end":489,"column_start":9,"column_end":28},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":330},"to":{"krate":1,"index":3251}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":39057,"byte_end":39076,"line_start":499,"line_end":499,"column_start":9,"column_end":28},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":330},"to":{"krate":22,"index":8}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":39794,"byte_end":39819,"line_start":517,"line_end":517,"column_start":9,"column_end":34},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":385},"to":{"krate":1,"index":3028}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":39905,"byte_end":39930,"line_start":521,"line_end":521,"column_start":5,"column_end":30},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":385},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":41779,"byte_end":41804,"line_start":575,"line_end":575,"column_start":5,"column_end":30},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":385},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":42777,"byte_end":42802,"line_start":597,"line_end":597,"column_start":9,"column_end":34},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":385},"to":{"krate":1,"index":3227}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":42998,"byte_end":43023,"line_start":607,"line_end":607,"column_start":9,"column_end":34},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":385},"to":{"krate":1,"index":3251}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/remutex.rs","byte_start":43238,"byte_end":43263,"line_start":617,"line_end":617,"column_start":9,"column_end":34},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":385},"to":{"krate":22,"index":8}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":45473,"byte_end":45482,"line_start":61,"line_end":61,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":457},"to":{"krate":0,"index":466}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":46638,"byte_end":46647,"line_start":91,"line_end":91,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":457},"to":{"krate":0,"index":471}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":47070,"byte_end":47079,"line_start":101,"line_end":101,"column_start":34,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":457},"to":{"krate":0,"index":473}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":48199,"byte_end":48208,"line_start":128,"line_end":128,"column_start":38,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":457},"to":{"krate":0,"index":480}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":48598,"byte_end":48616,"line_start":137,"line_end":137,"column_start":43,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":480},"to":{"krate":0,"index":483}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":48619,"byte_end":48633,"line_start":137,"line_end":137,"column_start":64,"column_end":78},"kind":"SuperTrait","from":{"krate":0,"index":473},"to":{"krate":0,"index":483}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":49401,"byte_end":49410,"line_start":153,"line_end":153,"column_start":36,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":457},"to":{"krate":0,"index":486}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":50060,"byte_end":50076,"line_start":173,"line_end":173,"column_start":40,"column_end":56},"kind":"SuperTrait","from":{"krate":0,"index":486},"to":{"krate":0,"index":492}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":50079,"byte_end":50092,"line_start":173,"line_end":173,"column_start":59,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":466},"to":{"krate":0,"index":492}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":50755,"byte_end":50771,"line_start":190,"line_end":190,"column_start":45,"column_end":61},"kind":"SuperTrait","from":{"krate":0,"index":486},"to":{"krate":0,"index":495}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":50774,"byte_end":50792,"line_start":190,"line_end":190,"column_start":64,"column_end":82},"kind":"SuperTrait","from":{"krate":0,"index":471},"to":{"krate":0,"index":495}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":51127,"byte_end":51143,"line_start":200,"line_end":200,"column_start":41,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":486},"to":{"krate":0,"index":498}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":51146,"byte_end":51160,"line_start":200,"line_end":200,"column_start":60,"column_end":74},"kind":"SuperTrait","from":{"krate":0,"index":473},"to":{"krate":0,"index":498}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":52643,"byte_end":52649,"line_start":233,"line_end":233,"column_start":61,"column_end":67},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":503},"to":{"krate":1,"index":3016}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":52726,"byte_end":52732,"line_start":234,"line_end":234,"column_start":68,"column_end":74},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":503},"to":{"krate":1,"index":3028}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":52765,"byte_end":52771,"line_start":236,"line_end":236,"column_start":23,"column_end":29},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":503},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":53522,"byte_end":53528,"line_start":265,"line_end":265,"column_start":31,"column_end":37},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":503},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":58149,"byte_end":58155,"line_start":402,"line_end":402,"column_start":35,"column_end":41},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":503},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":59494,"byte_end":59500,"line_start":436,"line_end":436,"column_start":36,"column_end":42},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":503},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":61806,"byte_end":61812,"line_start":498,"line_end":498,"column_start":40,"column_end":46},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":503},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":63495,"byte_end":63501,"line_start":540,"line_end":540,"column_start":45,"column_end":51},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":503},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":64900,"byte_end":64906,"line_start":576,"line_end":576,"column_start":38,"column_end":44},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":503},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":66321,"byte_end":66327,"line_start":617,"line_end":617,"column_start":43,"column_end":49},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":503},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":67621,"byte_end":67627,"line_start":655,"line_end":655,"column_start":53,"column_end":59},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":503},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":67768,"byte_end":67774,"line_start":662,"line_end":662,"column_start":35,"column_end":41},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":503},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":67923,"byte_end":67929,"line_start":669,"line_end":669,"column_start":59,"column_end":65},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":503},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":68500,"byte_end":68515,"line_start":686,"line_end":686,"column_start":68,"column_end":83},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":577},"to":{"krate":1,"index":3028}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":68574,"byte_end":68589,"line_start":688,"line_end":688,"column_start":45,"column_end":60},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":577},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":71009,"byte_end":71024,"line_start":761,"line_end":761,"column_start":49,"column_end":64},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":577},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":72857,"byte_end":72872,"line_start":807,"line_end":807,"column_start":55,"column_end":70},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":577},"to":{"krate":1,"index":3227}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":73054,"byte_end":73069,"line_start":815,"line_end":815,"column_start":54,"column_end":69},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":577},"to":{"krate":1,"index":3251}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":73271,"byte_end":73286,"line_start":823,"line_end":823,"column_start":70,"column_end":85},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":577},"to":{"krate":22,"index":8}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":73626,"byte_end":73642,"line_start":833,"line_end":833,"column_start":68,"column_end":84},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":625},"to":{"krate":1,"index":3028}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":73701,"byte_end":73717,"line_start":835,"line_end":835,"column_start":45,"column_end":61},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":625},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":76117,"byte_end":76133,"line_start":906,"line_end":906,"column_start":54,"column_end":70},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":625},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":76789,"byte_end":76805,"line_start":924,"line_end":924,"column_start":61,"column_end":77},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":625},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":77509,"byte_end":77525,"line_start":942,"line_end":942,"column_start":49,"column_end":65},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":625},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":79372,"byte_end":79388,"line_start":988,"line_end":988,"column_start":55,"column_end":71},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":625},"to":{"krate":1,"index":3227}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":79574,"byte_end":79590,"line_start":996,"line_end":996,"column_start":58,"column_end":74},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":625},"to":{"krate":1,"index":3240}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":79767,"byte_end":79783,"line_start":1003,"line_end":1003,"column_start":54,"column_end":70},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":625},"to":{"krate":1,"index":3251}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":79988,"byte_end":80004,"line_start":1011,"line_end":1011,"column_start":70,"column_end":86},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":625},"to":{"krate":22,"index":8}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":80367,"byte_end":80392,"line_start":1022,"line_end":1022,"column_start":9,"column_end":34},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":688},"to":{"krate":1,"index":3028}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":80458,"byte_end":80483,"line_start":1025,"line_end":1025,"column_start":52,"column_end":77},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":688},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":82051,"byte_end":82076,"line_start":1074,"line_end":1074,"column_start":56,"column_end":81},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":688},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":83952,"byte_end":83977,"line_start":1120,"line_end":1120,"column_start":61,"column_end":86},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":688},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":84671,"byte_end":84696,"line_start":1139,"line_end":1139,"column_start":57,"column_end":82},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":688},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":86093,"byte_end":86118,"line_start":1184,"line_end":1184,"column_start":62,"column_end":87},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":688},"to":{"krate":1,"index":3227}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":86307,"byte_end":86332,"line_start":1192,"line_end":1192,"column_start":61,"column_end":86},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":688},"to":{"krate":1,"index":3251}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":86549,"byte_end":86574,"line_start":1201,"line_end":1201,"column_start":9,"column_end":34},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":688},"to":{"krate":22,"index":8}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":87197,"byte_end":87218,"line_start":1218,"line_end":1218,"column_start":68,"column_end":89},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":743},"to":{"krate":1,"index":3028}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":87292,"byte_end":87313,"line_start":1219,"line_end":1219,"column_start":61,"column_end":82},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":743},"to":{"krate":1,"index":3016}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":87403,"byte_end":87424,"line_start":1223,"line_end":1223,"column_start":45,"column_end":66},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":743},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":89197,"byte_end":89218,"line_start":1275,"line_end":1275,"column_start":49,"column_end":70},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":743},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":90188,"byte_end":90209,"line_start":1295,"line_end":1295,"column_start":55,"column_end":76},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":743},"to":{"krate":1,"index":3227}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":90378,"byte_end":90399,"line_start":1303,"line_end":1303,"column_start":54,"column_end":75},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":743},"to":{"krate":1,"index":3251}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":90598,"byte_end":90619,"line_start":1312,"line_end":1312,"column_start":9,"column_end":30},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":743},"to":{"krate":22,"index":8}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":91253,"byte_end":91275,"line_start":1330,"line_end":1330,"column_start":9,"column_end":31},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":788},"to":{"krate":1,"index":3028}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":91349,"byte_end":91371,"line_start":1332,"line_end":1332,"column_start":61,"column_end":83},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":788},"to":{"krate":1,"index":3016}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":91461,"byte_end":91483,"line_start":1336,"line_end":1336,"column_start":45,"column_end":67},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":788},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":93295,"byte_end":93317,"line_start":1388,"line_end":1388,"column_start":54,"column_end":76},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":788},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":94002,"byte_end":94024,"line_start":1408,"line_end":1408,"column_start":49,"column_end":71},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":788},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":94998,"byte_end":95020,"line_start":1428,"line_end":1428,"column_start":55,"column_end":77},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":788},"to":{"krate":1,"index":3227}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":95193,"byte_end":95215,"line_start":1436,"line_end":1436,"column_start":58,"column_end":80},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":788},"to":{"krate":1,"index":3240}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":95379,"byte_end":95401,"line_start":1443,"line_end":1443,"column_start":54,"column_end":76},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":788},"to":{"krate":1,"index":3251}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/lock_api-0.1.5/src/rwlock.rs","byte_start":95603,"byte_end":95625,"line_start":1452,"line_end":1452,"column_start":9,"column_end":31},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":788},"to":{"krate":22,"index":8}}]}