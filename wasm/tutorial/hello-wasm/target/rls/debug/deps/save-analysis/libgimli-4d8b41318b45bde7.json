{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1","program":"/usr/local/rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","gimli","--edition=2018","/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"read\"","--cfg","feature=\"read-core\"","-C","metadata=4d8b41318b45bde7","-C","extra-filename=-4d8b41318b45bde7","--out-dir","/workspaces/rust-playground/wasm/tutorial/hello-wasm/target/rls/debug/deps","-L","dependency=/workspaces/rust-playground/wasm/tutorial/hello-wasm/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/usr/local/rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/workspaces/rust-playground/wasm/tutorial/hello-wasm/target/rls/debug/deps/libgimli-4d8b41318b45bde7.rmeta"},"prelude":{"crate_id":{"name":"gimli","disambiguator":[350812519107691989,0]},"crate_root":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src","external_crates":[{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[8373705112501149482,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[16909867051943430517,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11260902004430380252,0]}},{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[10608756751411298727,0]}}],"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":0,"byte_end":2193,"line_start":1,"line_end":76,"column_start":1,"column_end":15}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":1761,"byte_end":1762,"line_start":52,"line_end":52,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"Format","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":1796,"byte_end":1797,"line_start":55,"line_end":55,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":1870,"byte_end":1871,"line_start":59,"line_end":59,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6023},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":1916,"byte_end":1925,"line_start":62,"line_end":62,"column_start":28,"column_end":37},"alias_span":null,"name":"BigEndian","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6024},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":1916,"byte_end":1925,"line_start":62,"line_end":62,"column_start":28,"column_end":37},"alias_span":null,"name":"BigEndian","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":62},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":1927,"byte_end":1936,"line_start":62,"line_end":62,"column_start":39,"column_end":48},"alias_span":null,"name":"Endianity","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6007},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":1938,"byte_end":1950,"line_start":62,"line_end":62,"column_start":50,"column_end":62},"alias_span":null,"name":"LittleEndian","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6008},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":1938,"byte_end":1950,"line_start":62,"line_end":62,"column_start":50,"column_end":62},"alias_span":null,"name":"LittleEndian","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":93},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":1952,"byte_end":1964,"line_start":62,"line_end":62,"column_start":64,"column_end":76},"alias_span":null,"name":"NativeEndian","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":94},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":1952,"byte_end":1964,"line_start":62,"line_end":62,"column_start":64,"column_end":76},"alias_span":null,"name":"NativeEndian","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5988},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":1966,"byte_end":1979,"line_start":62,"line_end":62,"column_start":78,"column_end":91},"alias_span":null,"name":"RunTimeEndian","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":100666,"byte_end":100667,"line_start":181,"line_end":181,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":145}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":100700,"byte_end":100701,"line_start":184,"line_end":184,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"DebugAddr","parent":{"krate":0,"index":145}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":100732,"byte_end":100733,"line_start":187,"line_end":187,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"CallFrameInstruction, UnwindOffset","parent":{"krate":0,"index":145}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":100818,"byte_end":100819,"line_start":192,"line_end":192,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":145}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":100868,"byte_end":100869,"line_start":195,"line_end":195,"column_start":29,"column_end":30},"alias_span":null,"name":"*","value":"EndianSlice","parent":{"krate":0,"index":145}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":101026,"byte_end":101027,"line_start":203,"line_end":203,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Reader, ReaderOffsetId, ReaderOffset","parent":{"krate":0,"index":145}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":101114,"byte_end":101115,"line_start":208,"line_end":208,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Abbreviations, AttributeSpecification, Abbreviation, DebugAbbrev","parent":{"krate":0,"index":145}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":101154,"byte_end":101155,"line_start":211,"line_end":211,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"DebugAranges","parent":{"krate":0,"index":145}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":101190,"byte_end":101191,"line_start":214,"line_end":214,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"DebugTuIndex, UnitIndexSectionIterator, DebugCuIndex, UnitIndex","parent":{"krate":0,"index":145}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":101274,"byte_end":101275,"line_start":219,"line_end":219,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"IncompleteLineProgram, DebugLine","parent":{"krate":0,"index":145}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":101328,"byte_end":101329,"line_start":224,"line_end":224,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"LocationLists, DebugLoc, LocListIter, DebugLocLists, RawLocListIter","parent":{"krate":0,"index":145}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":101396,"byte_end":101397,"line_start":230,"line_end":230,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"Expression","parent":{"krate":0,"index":145}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":101488,"byte_end":101489,"line_start":235,"line_end":235,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":145}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":101580,"byte_end":101581,"line_start":240,"line_end":240,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":145}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":101622,"byte_end":101623,"line_start":243,"line_end":243,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"Range, DebugRngLists, RawRngListIter, RawRange, RngListIter, RangeLists","parent":{"krate":0,"index":145}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":101654,"byte_end":101655,"line_start":246,"line_end":246,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"DebugLineStr, DebugStrOffsets, DebugStr","parent":{"krate":0,"index":145}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":101905,"byte_end":101906,"line_start":255,"line_end":255,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"DebugTypes, EntriesTree, DebuggingInformationEntry, AttributeValue, DebugInfo, parse_debug_info_offset, EntriesCursor, DebugInfoUnitHeadersIter, UnitHeader, UnitType, EntriesRaw, DebugTypesUnitHeadersIter","parent":{"krate":0,"index":145}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":101941,"byte_end":101942,"line_start":258,"line_end":258,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"ValueType, Value","parent":{"krate":0,"index":145}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":2120,"byte_end":2121,"line_start":70,"line_end":70,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"CallFrameInstruction","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":0,"byte_end":2193,"line_start":1,"line_end":76,"column_start":1,"column_end":15},"name":"","qualname":"::","value":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":111},{"krate":0,"index":145},{"krate":0,"index":3005}],"decl_id":null,"docs":" `gimli` is a library for reading and writing the\n [DWARF debugging format](http://dwarfstd.org/).","sig":null,"attributes":[{"value":"/ `gimli` is a library for reading and writing the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":0,"byte_end":52,"line_start":1,"line_end":1,"column_start":1,"column_end":53}},{"value":"/ [DWARF debugging format](http://dwarfstd.org/).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":53,"byte_end":104,"line_start":2,"line_end":2,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":105,"byte_end":108,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ See the [read](./read/index.html) and [write](./write/index.html) modules","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":109,"byte_end":186,"line_start":4,"line_end":4,"column_start":1,"column_end":78}},{"value":"/ for examples and API documentation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":187,"byte_end":226,"line_start":5,"line_end":5,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":227,"byte_end":230,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ## Cargo Features","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":231,"byte_end":252,"line_start":7,"line_end":7,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":253,"byte_end":256,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Cargo features that can be enabled with `gimli`:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":257,"byte_end":309,"line_start":9,"line_end":9,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":310,"byte_end":313,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * `std`: Enabled by default. Use the `std` library. Disabling this feature","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":314,"byte_end":392,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ allows using `gimli` in embedded environments that do not have access to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":393,"byte_end":469,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ `std`. Note that even when `std` is disabled, `gimli` still requires an","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":470,"byte_end":545,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/ implementation of the `alloc` crate.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":546,"byte_end":586,"line_start":14,"line_end":14,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":587,"byte_end":590,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ * `read`: Enabled by default. Enables the `read` module. Use of `std` is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":591,"byte_end":667,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ optional.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":668,"byte_end":681,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":682,"byte_end":685,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ * `write`: Enabled by default. Enables the `write` module. Always uses","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":686,"byte_end":760,"line_start":19,"line_end":19,"column_start":1,"column_end":75}},{"value":"/ the `std` library.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":761,"byte_end":783,"line_start":20,"line_end":20,"column_start":1,"column_end":23}},{"value":"deny(missing_docs)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":784,"byte_end":806,"line_start":21,"line_end":21,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":807,"byte_end":846,"line_start":22,"line_end":22,"column_start":1,"column_end":40}},{"value":"warn(bare_trait_objects)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":888,"byte_end":916,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"warn(unused_extern_crates)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":917,"byte_end":947,"line_start":25,"line_end":25,"column_start":1,"column_end":31}},{"value":"warn(ellipsis_inclusive_range_patterns)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":948,"byte_end":991,"line_start":26,"line_end":26,"column_start":1,"column_end":44}},{"value":"warn(explicit_outlives_requirements)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":1030,"byte_end":1070,"line_start":28,"line_end":28,"column_start":1,"column_end":41}},{"value":"allow(unknown_lints)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":1133,"byte_end":1157,"line_start":30,"line_end":30,"column_start":1,"column_end":25}},{"value":"allow(clippy :: should_implement_trait)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":1203,"byte_end":1244,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"allow(clippy :: never_loop)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":1291,"byte_end":1320,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"allow(clippy :: panic_params)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":1393,"byte_end":1424,"line_start":36,"line_end":36,"column_start":1,"column_end":32}},{"value":"no_std","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":1425,"byte_end":1435,"line_start":37,"line_end":37,"column_start":1,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3007},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":2352,"byte_end":2359,"line_start":5,"line_end":5,"column_start":5,"column_end":12},"name":"Dwarf64","qualname":"::common::Format::Dwarf64","value":"Format::Dwarf64","parent":{"krate":0,"index":3006},"children":[],"decl_id":null,"docs":" 64-bit DWARF\n","sig":null,"attributes":[{"value":"/ 64-bit DWARF","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":2331,"byte_end":2347,"line_start":4,"line_end":4,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3010},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":2390,"byte_end":2397,"line_start":7,"line_end":7,"column_start":5,"column_end":12},"name":"Dwarf32","qualname":"::common::Format::Dwarf32","value":"Format::Dwarf32","parent":{"krate":0,"index":3006},"children":[],"decl_id":null,"docs":" 32-bit DWARF\n","sig":null,"attributes":[{"value":"/ 32-bit DWARF","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":2369,"byte_end":2385,"line_start":6,"line_end":6,"column_start":5,"column_end":21}}]},{"kind":"Enum","id":{"krate":0,"index":3006},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":2318,"byte_end":2324,"line_start":3,"line_end":3,"column_start":10,"column_end":16},"name":"Format","qualname":"::common::Format","value":"pub enum Format { Dwarf64 = , Dwarf32 = , }","parent":null,"children":[{"krate":0,"index":3007},{"krate":0,"index":3010}],"decl_id":null,"docs":" Whether the format of a compilation unit is 32- or 64-bit.\n","sig":null,"attributes":[{"value":"/ Whether the format of a compilation unit is 32- or 64-bit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":2195,"byte_end":2257,"line_start":1,"line_end":1,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":7},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":2523,"byte_end":2542,"line_start":13,"line_end":13,"column_start":12,"column_end":31},"name":"initial_length_size","qualname":"<Format>::initial_length_size","value":"pub fn initial_length_size(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Return the serialized size of an initial length field for the format.\n","sig":null,"attributes":[{"value":"/ Return the serialized size of an initial length field for the format.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":2424,"byte_end":2497,"line_start":11,"line_end":11,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":2502,"byte_end":2511,"line_start":12,"line_end":12,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":8},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":2741,"byte_end":2750,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"word_size","qualname":"<Format>::word_size","value":"pub fn word_size(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Return the natural word size for the format\n","sig":null,"attributes":[{"value":"/ Return the natural word size for the format","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":2668,"byte_end":2715,"line_start":20,"line_end":20,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":2720,"byte_end":2729,"line_start":21,"line_end":21,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3027},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":3174,"byte_end":3182,"line_start":37,"line_end":37,"column_start":12,"column_end":20},"name":"Encoding","qualname":"::common::Encoding","value":"Encoding { address_size, format, version }","parent":null,"children":[{"krate":0,"index":3028},{"krate":0,"index":3029},{"krate":0,"index":3030}],"decl_id":null,"docs":" Encoding parameters that are commonly used for multiple DWARF sections.","sig":null,"attributes":[{"value":"/ Encoding parameters that are commonly used for multiple DWARF sections.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":2873,"byte_end":2948,"line_start":30,"line_end":30,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":2949,"byte_end":2952,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This is intended to be small enough to pass by value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":2953,"byte_end":3010,"line_start":32,"line_end":32,"column_start":1,"column_end":58}},{"value":"repr(C)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":3152,"byte_end":3162,"line_start":36,"line_end":36,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3028},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":3225,"byte_end":3237,"line_start":39,"line_end":39,"column_start":9,"column_end":21},"name":"address_size","qualname":"::common::Encoding::address_size","value":"u8","parent":{"krate":0,"index":3027},"children":[],"decl_id":null,"docs":" The size of an address.\n","sig":null,"attributes":[{"value":"/ The size of an address.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":3189,"byte_end":3216,"line_start":38,"line_end":38,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":3029},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":3377,"byte_end":3383,"line_start":44,"line_end":44,"column_start":9,"column_end":15},"name":"format","qualname":"::common::Encoding::format","value":"common::Format","parent":{"krate":0,"index":3027},"children":[],"decl_id":null,"docs":" Whether the DWARF format is 32- or 64-bit.\n","sig":null,"attributes":[{"value":"/ Whether the DWARF format is 32- or 64-bit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":3322,"byte_end":3368,"line_start":43,"line_end":43,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":3030},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":3443,"byte_end":3450,"line_start":47,"line_end":47,"column_start":9,"column_end":16},"name":"version","qualname":"::common::Encoding::version","value":"u16","parent":{"krate":0,"index":3027},"children":[],"decl_id":null,"docs":" The DWARF version of the header.\n","sig":null,"attributes":[{"value":"/ The DWARF version of the header.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":3398,"byte_end":3434,"line_start":46,"line_end":46,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":3046},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":3573,"byte_end":3585,"line_start":52,"line_end":52,"column_start":12,"column_end":24},"name":"LineEncoding","qualname":"::common::LineEncoding","value":"LineEncoding { minimum_instruction_length, maximum_operations_per_instruction, default_is_stmt, line_base, line_range }","parent":null,"children":[{"krate":0,"index":3047},{"krate":0,"index":3048},{"krate":0,"index":3049},{"krate":0,"index":3050},{"krate":0,"index":3051}],"decl_id":null,"docs":" Encoding parameters for a line number program.\n","sig":null,"attributes":[{"value":"/ Encoding parameters for a line number program.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":3460,"byte_end":3510,"line_start":50,"line_end":50,"column_start":1,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":3047},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":3666,"byte_end":3692,"line_start":54,"line_end":54,"column_start":9,"column_end":35},"name":"minimum_instruction_length","qualname":"::common::LineEncoding::minimum_instruction_length","value":"u8","parent":{"krate":0,"index":3046},"children":[],"decl_id":null,"docs":" The size in bytes of the smallest target machine instruction.\n","sig":null,"attributes":[{"value":"/ The size in bytes of the smallest target machine instruction.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":3592,"byte_end":3657,"line_start":53,"line_end":53,"column_start":5,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":3048},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":3806,"byte_end":3840,"line_start":58,"line_end":58,"column_start":9,"column_end":43},"name":"maximum_operations_per_instruction","qualname":"::common::LineEncoding::maximum_operations_per_instruction","value":"u8","parent":{"krate":0,"index":3046},"children":[],"decl_id":null,"docs":" The maximum number of individual operations that may be encoded in an\n instruction.\n","sig":null,"attributes":[{"value":"/ The maximum number of individual operations that may be encoded in an","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":3703,"byte_end":3776,"line_start":56,"line_end":56,"column_start":5,"column_end":78}},{"value":"/ instruction.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":3781,"byte_end":3797,"line_start":57,"line_end":57,"column_start":5,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":3049},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":3908,"byte_end":3923,"line_start":61,"line_end":61,"column_start":9,"column_end":24},"name":"default_is_stmt","qualname":"::common::LineEncoding::default_is_stmt","value":"bool","parent":{"krate":0,"index":3046},"children":[],"decl_id":null,"docs":" The initial value of the `is_stmt` register.\n","sig":null,"attributes":[{"value":"/ The initial value of the `is_stmt` register.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":3851,"byte_end":3899,"line_start":60,"line_end":60,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":3050},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":4019,"byte_end":4028,"line_start":64,"line_end":64,"column_start":9,"column_end":18},"name":"line_base","qualname":"::common::LineEncoding::line_base","value":"i8","parent":{"krate":0,"index":3046},"children":[],"decl_id":null,"docs":" The minimum value which a special opcode can add to the line register.\n","sig":null,"attributes":[{"value":"/ The minimum value which a special opcode can add to the line register.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":3936,"byte_end":4010,"line_start":63,"line_end":63,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":3051},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":4124,"byte_end":4134,"line_start":67,"line_end":67,"column_start":9,"column_end":19},"name":"line_range","qualname":"::common::LineEncoding::line_range","value":"u8","parent":{"krate":0,"index":3046},"children":[],"decl_id":null,"docs":" The range of values which a special opcode can add to the line register.\n","sig":null,"attributes":[{"value":"/ The range of values which a special opcode can add to the line register.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":4039,"byte_end":4115,"line_start":66,"line_end":66,"column_start":5,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":3067},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":4711,"byte_end":4719,"line_start":88,"line_end":88,"column_start":12,"column_end":20},"name":"Register","qualname":"::common::Register","value":"","parent":null,"children":[],"decl_id":null,"docs":" A DWARF register number.","sig":null,"attributes":[{"value":"/ A DWARF register number.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":4457,"byte_end":4485,"line_start":83,"line_end":83,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":4486,"byte_end":4489,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ The meaning of this value is ABI dependent. This is generally encoded as","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":4490,"byte_end":4566,"line_start":85,"line_end":85,"column_start":1,"column_end":77}},{"value":"/ a ULEB128, but supported architectures need 16 bits at most.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":4567,"byte_end":4631,"line_start":86,"line_end":86,"column_start":1,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":3069},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":4720,"byte_end":4727,"line_start":88,"line_end":88,"column_start":21,"column_end":28},"name":"0","qualname":"::common::Register::0","value":"u16","parent":{"krate":0,"index":3067},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3089},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":4841,"byte_end":4858,"line_start":92,"line_end":92,"column_start":12,"column_end":29},"name":"DebugAbbrevOffset","qualname":"::common::DebugAbbrevOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_abbrev` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_abbrev` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":4731,"byte_end":4778,"line_start":90,"line_end":90,"column_start":1,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":3092},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":4870,"byte_end":4875,"line_start":92,"line_end":92,"column_start":41,"column_end":46},"name":"0","qualname":"::common::DebugAbbrevOffset::0","value":"T","parent":{"krate":0,"index":3089},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3116},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":4999,"byte_end":5012,"line_start":96,"line_end":96,"column_start":12,"column_end":25},"name":"DebugAddrBase","qualname":"::common::DebugAddrBase","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset to a set of entries in the `.debug_addr` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of entries in the `.debug_addr` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":4879,"byte_end":4942,"line_start":94,"line_end":94,"column_start":1,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":3119},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":5024,"byte_end":5029,"line_start":96,"line_end":96,"column_start":37,"column_end":42},"name":"0","qualname":"::common::DebugAddrBase::0","value":"T","parent":{"krate":0,"index":3116},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3139},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":5156,"byte_end":5170,"line_start":100,"line_end":100,"column_start":12,"column_end":26},"name":"DebugAddrIndex","qualname":"::common::DebugAddrIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" An index into a set of addresses in the `.debug_addr` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of addresses in the `.debug_addr` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":5033,"byte_end":5099,"line_start":98,"line_end":98,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":3142},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":5182,"byte_end":5187,"line_start":100,"line_end":100,"column_start":38,"column_end":43},"name":"0","qualname":"::common::DebugAddrIndex::0","value":"T","parent":{"krate":0,"index":3139},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3162},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":5296,"byte_end":5314,"line_start":104,"line_end":104,"column_start":12,"column_end":30},"name":"DebugArangesOffset","qualname":"::common::DebugArangesOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_aranges` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_aranges` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":5191,"byte_end":5239,"line_start":102,"line_end":102,"column_start":1,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":3165},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":5326,"byte_end":5331,"line_start":104,"line_end":104,"column_start":42,"column_end":47},"name":"0","qualname":"::common::DebugArangesOffset::0","value":"T","parent":{"krate":0,"index":3162},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3185},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":5460,"byte_end":5475,"line_start":108,"line_end":108,"column_start":12,"column_end":27},"name":"DebugInfoOffset","qualname":"::common::DebugInfoOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_info` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_info` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":5335,"byte_end":5380,"line_start":106,"line_end":106,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":3188},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":5487,"byte_end":5492,"line_start":108,"line_end":108,"column_start":39,"column_end":44},"name":"0","qualname":"::common::DebugInfoOffset::0","value":"T","parent":{"krate":0,"index":3185},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3218},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":5598,"byte_end":5613,"line_start":112,"line_end":112,"column_start":12,"column_end":27},"name":"DebugLineOffset","qualname":"::common::DebugLineOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_line` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_line` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":5496,"byte_end":5541,"line_start":110,"line_end":110,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":3221},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":5625,"byte_end":5630,"line_start":112,"line_end":112,"column_start":39,"column_end":44},"name":"0","qualname":"::common::DebugLineOffset::0","value":"T","parent":{"krate":0,"index":3218},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3241},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":5740,"byte_end":5758,"line_start":116,"line_end":116,"column_start":12,"column_end":30},"name":"DebugLineStrOffset","qualname":"::common::DebugLineStrOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_line_str` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_line_str` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":5634,"byte_end":5683,"line_start":114,"line_end":114,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":3244},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":5770,"byte_end":5775,"line_start":116,"line_end":116,"column_start":42,"column_end":47},"name":"0","qualname":"::common::DebugLineStrOffset::0","value":"T","parent":{"krate":0,"index":3241},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3264},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":5996,"byte_end":6015,"line_start":121,"line_end":121,"column_start":12,"column_end":31},"name":"LocationListsOffset","qualname":"::common::LocationListsOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into either the `.debug_loc` section or the `.debug_loclists` section,\n depending on the version of the unit the offset was contained in.\n","sig":null,"attributes":[{"value":"/ An offset into either the `.debug_loc` section or the `.debug_loclists` section,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":5779,"byte_end":5863,"line_start":118,"line_end":118,"column_start":1,"column_end":85}},{"value":"/ depending on the version of the unit the offset was contained in.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":5864,"byte_end":5933,"line_start":119,"line_end":119,"column_start":1,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":3267},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":6027,"byte_end":6032,"line_start":121,"line_end":121,"column_start":43,"column_end":48},"name":"0","qualname":"::common::LocationListsOffset::0","value":"T","parent":{"krate":0,"index":3264},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3291},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":6174,"byte_end":6191,"line_start":125,"line_end":125,"column_start":12,"column_end":29},"name":"DebugLocListsBase","qualname":"::common::DebugLocListsBase","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset to a set of location list offsets in the `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of location list offsets in the `.debug_loclists` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":6036,"byte_end":6117,"line_start":123,"line_end":123,"column_start":1,"column_end":82}}]},{"kind":"Field","id":{"krate":0,"index":3294},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":6203,"byte_end":6208,"line_start":125,"line_end":125,"column_start":41,"column_end":46},"name":"0","qualname":"::common::DebugLocListsBase::0","value":"T","parent":{"krate":0,"index":3291},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3314},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":6351,"byte_end":6369,"line_start":129,"line_end":129,"column_start":12,"column_end":30},"name":"DebugLocListsIndex","qualname":"::common::DebugLocListsIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" An index into a set of location list offsets in the `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of location list offsets in the `.debug_loclists` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":6212,"byte_end":6294,"line_start":127,"line_end":127,"column_start":1,"column_end":83}}]},{"kind":"Field","id":{"krate":0,"index":3317},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":6381,"byte_end":6386,"line_start":129,"line_end":129,"column_start":42,"column_end":47},"name":"0","qualname":"::common::DebugLocListsIndex::0","value":"T","parent":{"krate":0,"index":3314},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3337},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":6501,"byte_end":6519,"line_start":133,"line_end":133,"column_start":12,"column_end":30},"name":"DebugMacinfoOffset","qualname":"::common::DebugMacinfoOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_macinfo` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_macinfo` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":6390,"byte_end":6438,"line_start":131,"line_end":131,"column_start":1,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":3340},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":6531,"byte_end":6536,"line_start":133,"line_end":133,"column_start":42,"column_end":47},"name":"0","qualname":"::common::DebugMacinfoOffset::0","value":"T","parent":{"krate":0,"index":3337},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3364},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":6649,"byte_end":6665,"line_start":137,"line_end":137,"column_start":12,"column_end":28},"name":"DebugMacroOffset","qualname":"::common::DebugMacroOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_macro` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_macro` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":6540,"byte_end":6586,"line_start":135,"line_end":135,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":3367},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":6677,"byte_end":6682,"line_start":137,"line_end":137,"column_start":40,"column_end":45},"name":"0","qualname":"::common::DebugMacroOffset::0","value":"T","parent":{"krate":0,"index":3364},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3391},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":7087,"byte_end":7106,"line_start":145,"line_end":145,"column_start":12,"column_end":31},"name":"RawRangeListsOffset","qualname":"::common::RawRangeListsOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into either the `.debug_ranges` section or the `.debug_rnglists` section,\n depending on the version of the unit the offset was contained in.","sig":null,"attributes":[{"value":"/ An offset into either the `.debug_ranges` section or the `.debug_rnglists` section,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":6686,"byte_end":6773,"line_start":139,"line_end":139,"column_start":1,"column_end":88}},{"value":"/ depending on the version of the unit the offset was contained in.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":6774,"byte_end":6843,"line_start":140,"line_end":140,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":6844,"byte_end":6847,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ If this is from a DWARF 4 DWO file, then it must additionally be offset by the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":6848,"byte_end":6930,"line_start":142,"line_end":142,"column_start":1,"column_end":83}},{"value":"/ value of `DW_AT_GNU_ranges_base`. You can use `Dwarf::ranges_offset_from_raw` to do this.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":6931,"byte_end":7024,"line_start":143,"line_end":143,"column_start":1,"column_end":94}}]},{"kind":"Field","id":{"krate":0,"index":3394},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":7118,"byte_end":7123,"line_start":145,"line_end":145,"column_start":43,"column_end":48},"name":"0","qualname":"::common::RawRangeListsOffset::0","value":"T","parent":{"krate":0,"index":3391},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3418},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":7347,"byte_end":7363,"line_start":150,"line_end":150,"column_start":12,"column_end":28},"name":"RangeListsOffset","qualname":"::common::RangeListsOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into either the `.debug_ranges` section or the `.debug_rnglists` section,\n depending on the version of the unit the offset was contained in.\n","sig":null,"attributes":[{"value":"/ An offset into either the `.debug_ranges` section or the `.debug_rnglists` section,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":7127,"byte_end":7214,"line_start":147,"line_end":147,"column_start":1,"column_end":88}},{"value":"/ depending on the version of the unit the offset was contained in.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":7215,"byte_end":7284,"line_start":148,"line_end":148,"column_start":1,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":3421},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":7375,"byte_end":7380,"line_start":150,"line_end":150,"column_start":40,"column_end":45},"name":"0","qualname":"::common::RangeListsOffset::0","value":"T","parent":{"krate":0,"index":3418},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3445},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":7519,"byte_end":7536,"line_start":154,"line_end":154,"column_start":12,"column_end":29},"name":"DebugRngListsBase","qualname":"::common::DebugRngListsBase","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset to a set of range list offsets in the `.debug_rnglists` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of range list offsets in the `.debug_rnglists` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":7384,"byte_end":7462,"line_start":152,"line_end":152,"column_start":1,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":3448},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":7548,"byte_end":7553,"line_start":154,"line_end":154,"column_start":41,"column_end":46},"name":"0","qualname":"::common::DebugRngListsBase::0","value":"T","parent":{"krate":0,"index":3445},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3468},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":7693,"byte_end":7711,"line_start":158,"line_end":158,"column_start":12,"column_end":30},"name":"DebugRngListsIndex","qualname":"::common::DebugRngListsIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" An index into a set of range list offsets in the `.debug_rnglists` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of range list offsets in the `.debug_rnglists` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":7557,"byte_end":7636,"line_start":156,"line_end":156,"column_start":1,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":3471},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":7723,"byte_end":7728,"line_start":158,"line_end":158,"column_start":42,"column_end":47},"name":"0","qualname":"::common::DebugRngListsIndex::0","value":"T","parent":{"krate":0,"index":3468},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3491},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":7833,"byte_end":7847,"line_start":162,"line_end":162,"column_start":12,"column_end":26},"name":"DebugStrOffset","qualname":"::common::DebugStrOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_str` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_str` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":7732,"byte_end":7776,"line_start":160,"line_end":160,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":3494},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":7859,"byte_end":7864,"line_start":162,"line_end":162,"column_start":38,"column_end":43},"name":"0","qualname":"::common::DebugStrOffset::0","value":"T","parent":{"krate":0,"index":3491},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3514},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":7995,"byte_end":8014,"line_start":166,"line_end":166,"column_start":12,"column_end":31},"name":"DebugStrOffsetsBase","qualname":"::common::DebugStrOffsetsBase","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset to a set of entries in the `.debug_str_offsets` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of entries in the `.debug_str_offsets` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":7868,"byte_end":7938,"line_start":164,"line_end":164,"column_start":1,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":3517},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":8026,"byte_end":8031,"line_start":166,"line_end":166,"column_start":43,"column_end":48},"name":"0","qualname":"::common::DebugStrOffsetsBase::0","value":"T","parent":{"krate":0,"index":3514},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3537},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":8163,"byte_end":8183,"line_start":170,"line_end":170,"column_start":12,"column_end":32},"name":"DebugStrOffsetsIndex","qualname":"::common::DebugStrOffsetsIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" An index into a set of entries in the `.debug_str_offsets` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of entries in the `.debug_str_offsets` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":8035,"byte_end":8106,"line_start":168,"line_end":168,"column_start":1,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":3540},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":8195,"byte_end":8200,"line_start":170,"line_end":170,"column_start":44,"column_end":49},"name":"0","qualname":"::common::DebugStrOffsetsIndex::0","value":"T","parent":{"krate":0,"index":3537},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3560},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":8330,"byte_end":8346,"line_start":174,"line_end":174,"column_start":12,"column_end":28},"name":"DebugTypesOffset","qualname":"::common::DebugTypesOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_types` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_types` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":8204,"byte_end":8250,"line_start":172,"line_end":172,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":3563},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":8358,"byte_end":8363,"line_start":174,"line_end":174,"column_start":40,"column_end":45},"name":"0","qualname":"::common::DebugTypesOffset::0","value":"T","parent":{"krate":0,"index":3560},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3593},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":8489,"byte_end":8507,"line_start":178,"line_end":178,"column_start":12,"column_end":30},"name":"DebugTypeSignature","qualname":"::common::DebugTypeSignature","value":"","parent":null,"children":[],"decl_id":null,"docs":" A type signature as used in the `.debug_types` section.\n","sig":null,"attributes":[{"value":"/ A type signature as used in the `.debug_types` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":8367,"byte_end":8426,"line_start":176,"line_end":176,"column_start":1,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":3595},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":8508,"byte_end":8515,"line_start":178,"line_end":178,"column_start":31,"column_end":38},"name":"0","qualname":"::common::DebugTypeSignature::0","value":"u64","parent":{"krate":0,"index":3593},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3611},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":8628,"byte_end":8644,"line_start":182,"line_end":182,"column_start":12,"column_end":28},"name":"DebugFrameOffset","qualname":"::common::DebugFrameOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.debug_frame` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_frame` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":8519,"byte_end":8565,"line_start":180,"line_end":180,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":3614},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":8656,"byte_end":8661,"line_start":182,"line_end":182,"column_start":40,"column_end":45},"name":"0","qualname":"::common::DebugFrameOffset::0","value":"T","parent":{"krate":0,"index":3611},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3638},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":8892,"byte_end":8905,"line_start":193,"line_end":193,"column_start":12,"column_end":25},"name":"EhFrameOffset","qualname":"::common::EhFrameOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the `.eh_frame` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.eh_frame` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":8786,"byte_end":8829,"line_start":191,"line_end":191,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":3641},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":8917,"byte_end":8922,"line_start":193,"line_end":193,"column_start":37,"column_end":42},"name":"0","qualname":"::common::EhFrameOffset::0","value":"T","parent":{"krate":0,"index":3638},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3667},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":9268,"byte_end":9283,"line_start":206,"line_end":206,"column_start":5,"column_end":20},"name":"DebugInfoOffset","qualname":"::common::UnitSectionOffset::DebugInfoOffset","value":"UnitSectionOffset::DebugInfoOffset(DebugInfoOffset<T>)","parent":{"krate":0,"index":3665},"children":[],"decl_id":null,"docs":" An offset into the `.debug_info` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_info` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":9218,"byte_end":9263,"line_start":205,"line_end":205,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3670},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":9360,"byte_end":9376,"line_start":208,"line_end":208,"column_start":5,"column_end":21},"name":"DebugTypesOffset","qualname":"::common::UnitSectionOffset::DebugTypesOffset","value":"UnitSectionOffset::DebugTypesOffset(DebugTypesOffset<T>)","parent":{"krate":0,"index":3665},"children":[],"decl_id":null,"docs":" An offset into the `.debug_types` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_types` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":9309,"byte_end":9355,"line_start":207,"line_end":207,"column_start":5,"column_end":51}}]},{"kind":"Enum","id":{"krate":0,"index":3665},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":9183,"byte_end":9200,"line_start":204,"line_end":204,"column_start":10,"column_end":27},"name":"UnitSectionOffset","qualname":"::common::UnitSectionOffset","value":"pub enum UnitSectionOffset<T = usize> {\n    DebugInfoOffset(DebugInfoOffset<T>),\n    DebugTypesOffset(DebugTypesOffset<T>),\n}","parent":null,"children":[{"krate":0,"index":3667},{"krate":0,"index":3670}],"decl_id":null,"docs":" An offset into the `.debug_info` or `.debug_types` sections.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_info` or `.debug_types` sections.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":9041,"byte_end":9105,"line_start":202,"line_end":202,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":9874,"byte_end":9894,"line_start":228,"line_end":228,"column_start":12,"column_end":32},"name":"as_debug_info_offset","qualname":"<UnitSectionOffset<T>>::as_debug_info_offset","value":"pub fn as_debug_info_offset(&Self) -> Option<DebugInfoOffset<T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `DebugInfoOffset` inside, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns the `DebugInfoOffset` inside, or `None` otherwise.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":9800,"byte_end":9862,"line_start":227,"line_end":227,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":10190,"byte_end":10211,"line_start":235,"line_end":235,"column_start":12,"column_end":33},"name":"as_debug_types_offset","qualname":"<UnitSectionOffset<T>>::as_debug_types_offset","value":"pub fn as_debug_types_offset(&Self) -> Option<DebugTypesOffset<T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `DebugTypesOffset` inside, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns the `DebugTypesOffset` inside, or `None` otherwise.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":10115,"byte_end":10178,"line_start":234,"line_end":234,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3703},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":10601,"byte_end":10612,"line_start":247,"line_end":247,"column_start":5,"column_end":16},"name":"DebugAbbrev","qualname":"::common::SectionId::DebugAbbrev","value":"SectionId::DebugAbbrev","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":" The `.debug_abbrev` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_abbrev` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":10564,"byte_end":10596,"line_start":246,"line_end":246,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3705},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":10653,"byte_end":10662,"line_start":249,"line_end":249,"column_start":5,"column_end":14},"name":"DebugAddr","qualname":"::common::SectionId::DebugAddr","value":"SectionId::DebugAddr","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":" The `.debug_addr` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_addr` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":10618,"byte_end":10648,"line_start":248,"line_end":248,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3707},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":10706,"byte_end":10718,"line_start":251,"line_end":251,"column_start":5,"column_end":17},"name":"DebugAranges","qualname":"::common::SectionId::DebugAranges","value":"SectionId::DebugAranges","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":" The `.debug_aranges` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_aranges` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":10668,"byte_end":10701,"line_start":250,"line_end":250,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3709},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":10763,"byte_end":10775,"line_start":253,"line_end":253,"column_start":5,"column_end":17},"name":"DebugCuIndex","qualname":"::common::SectionId::DebugCuIndex","value":"SectionId::DebugCuIndex","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":" The `.debug_cu_index` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_cu_index` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":10724,"byte_end":10758,"line_start":252,"line_end":252,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3711},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":10817,"byte_end":10827,"line_start":255,"line_end":255,"column_start":5,"column_end":15},"name":"DebugFrame","qualname":"::common::SectionId::DebugFrame","value":"SectionId::DebugFrame","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":" The `.debug_frame` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_frame` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":10781,"byte_end":10812,"line_start":254,"line_end":254,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3713},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":10866,"byte_end":10873,"line_start":257,"line_end":257,"column_start":5,"column_end":12},"name":"EhFrame","qualname":"::common::SectionId::EhFrame","value":"SectionId::EhFrame","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":" The `.eh_frame` section.\n","sig":null,"attributes":[{"value":"/ The `.eh_frame` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":10833,"byte_end":10861,"line_start":256,"line_end":256,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3715},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":10916,"byte_end":10926,"line_start":259,"line_end":259,"column_start":5,"column_end":15},"name":"EhFrameHdr","qualname":"::common::SectionId::EhFrameHdr","value":"SectionId::EhFrameHdr","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":" The `.eh_frame_hdr` section.\n","sig":null,"attributes":[{"value":"/ The `.eh_frame_hdr` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":10879,"byte_end":10911,"line_start":258,"line_end":258,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3717},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":10967,"byte_end":10976,"line_start":261,"line_end":261,"column_start":5,"column_end":14},"name":"DebugInfo","qualname":"::common::SectionId::DebugInfo","value":"SectionId::DebugInfo","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":" The `.debug_info` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_info` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":10932,"byte_end":10962,"line_start":260,"line_end":260,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3719},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11017,"byte_end":11026,"line_start":263,"line_end":263,"column_start":5,"column_end":14},"name":"DebugLine","qualname":"::common::SectionId::DebugLine","value":"SectionId::DebugLine","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":" The `.debug_line` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_line` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":10982,"byte_end":11012,"line_start":262,"line_end":262,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3721},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11071,"byte_end":11083,"line_start":265,"line_end":265,"column_start":5,"column_end":17},"name":"DebugLineStr","qualname":"::common::SectionId::DebugLineStr","value":"SectionId::DebugLineStr","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":" The `.debug_line_str` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_line_str` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11032,"byte_end":11066,"line_start":264,"line_end":264,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3723},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11123,"byte_end":11131,"line_start":267,"line_end":267,"column_start":5,"column_end":13},"name":"DebugLoc","qualname":"::common::SectionId::DebugLoc","value":"SectionId::DebugLoc","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":" The `.debug_loc` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_loc` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11089,"byte_end":11118,"line_start":266,"line_end":266,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3725},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11176,"byte_end":11189,"line_start":269,"line_end":269,"column_start":5,"column_end":18},"name":"DebugLocLists","qualname":"::common::SectionId::DebugLocLists","value":"SectionId::DebugLocLists","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":" The `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_loclists` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11137,"byte_end":11171,"line_start":268,"line_end":268,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3727},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11233,"byte_end":11245,"line_start":271,"line_end":271,"column_start":5,"column_end":17},"name":"DebugMacinfo","qualname":"::common::SectionId::DebugMacinfo","value":"SectionId::DebugMacinfo","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":" The `.debug_macinfo` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_macinfo` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11195,"byte_end":11228,"line_start":270,"line_end":270,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3729},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11287,"byte_end":11297,"line_start":273,"line_end":273,"column_start":5,"column_end":15},"name":"DebugMacro","qualname":"::common::SectionId::DebugMacro","value":"SectionId::DebugMacro","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":" The `.debug_macro` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_macro` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11251,"byte_end":11282,"line_start":272,"line_end":272,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3731},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11342,"byte_end":11355,"line_start":275,"line_end":275,"column_start":5,"column_end":18},"name":"DebugPubNames","qualname":"::common::SectionId::DebugPubNames","value":"SectionId::DebugPubNames","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":" The `.debug_pubnames` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_pubnames` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11303,"byte_end":11337,"line_start":274,"line_end":274,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3733},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11400,"byte_end":11413,"line_start":277,"line_end":277,"column_start":5,"column_end":18},"name":"DebugPubTypes","qualname":"::common::SectionId::DebugPubTypes","value":"SectionId::DebugPubTypes","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":" The `.debug_pubtypes` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_pubtypes` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11361,"byte_end":11395,"line_start":276,"line_end":276,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3735},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11456,"byte_end":11467,"line_start":279,"line_end":279,"column_start":5,"column_end":16},"name":"DebugRanges","qualname":"::common::SectionId::DebugRanges","value":"SectionId::DebugRanges","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":" The `.debug_ranges` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_ranges` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11419,"byte_end":11451,"line_start":278,"line_end":278,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3737},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11512,"byte_end":11525,"line_start":281,"line_end":281,"column_start":5,"column_end":18},"name":"DebugRngLists","qualname":"::common::SectionId::DebugRngLists","value":"SectionId::DebugRngLists","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":" The `.debug_rnglists` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_rnglists` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11473,"byte_end":11507,"line_start":280,"line_end":280,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3739},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11565,"byte_end":11573,"line_start":283,"line_end":283,"column_start":5,"column_end":13},"name":"DebugStr","qualname":"::common::SectionId::DebugStr","value":"SectionId::DebugStr","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":" The `.debug_str` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_str` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11531,"byte_end":11560,"line_start":282,"line_end":282,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3741},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11621,"byte_end":11636,"line_start":285,"line_end":285,"column_start":5,"column_end":20},"name":"DebugStrOffsets","qualname":"::common::SectionId::DebugStrOffsets","value":"SectionId::DebugStrOffsets","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":" The `.debug_str_offsets` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_str_offsets` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11579,"byte_end":11616,"line_start":284,"line_end":284,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3743},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11681,"byte_end":11693,"line_start":287,"line_end":287,"column_start":5,"column_end":17},"name":"DebugTuIndex","qualname":"::common::SectionId::DebugTuIndex","value":"SectionId::DebugTuIndex","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":" The `.debug_tu_index` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_tu_index` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11642,"byte_end":11676,"line_start":286,"line_end":286,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3745},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11735,"byte_end":11745,"line_start":289,"line_end":289,"column_start":5,"column_end":15},"name":"DebugTypes","qualname":"::common::SectionId::DebugTypes","value":"SectionId::DebugTypes","parent":{"krate":0,"index":3702},"children":[],"decl_id":null,"docs":" The `.debug_types` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_types` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11699,"byte_end":11730,"line_start":288,"line_end":288,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":3702},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":10548,"byte_end":10557,"line_start":245,"line_end":245,"column_start":10,"column_end":19},"name":"SectionId","qualname":"::common::SectionId","value":"pub enum SectionId {\n    DebugAbbrev,\n    DebugAddr,\n    DebugAranges,\n    DebugCuIndex,\n    DebugFrame,\n    EhFrame,\n    EhFrameHdr,\n    DebugInfo,\n    DebugLine,\n    DebugLineStr,\n    DebugLoc,\n    DebugLocLists,\n    DebugMacinfo,\n    DebugMacro,\n    DebugPubNames,\n    DebugPubTypes,\n    DebugRanges,\n    DebugRngLists,\n    DebugStr,\n    DebugStrOffsets,\n    DebugTuIndex,\n    DebugTypes,\n}","parent":null,"children":[{"krate":0,"index":3703},{"krate":0,"index":3705},{"krate":0,"index":3707},{"krate":0,"index":3709},{"krate":0,"index":3711},{"krate":0,"index":3713},{"krate":0,"index":3715},{"krate":0,"index":3717},{"krate":0,"index":3719},{"krate":0,"index":3721},{"krate":0,"index":3723},{"krate":0,"index":3725},{"krate":0,"index":3727},{"krate":0,"index":3729},{"krate":0,"index":3731},{"krate":0,"index":3733},{"krate":0,"index":3735},{"krate":0,"index":3737},{"krate":0,"index":3739},{"krate":0,"index":3741},{"krate":0,"index":3743},{"krate":0,"index":3745}],"decl_id":null,"docs":" An identifier for a DWARF section.\n","sig":null,"attributes":[{"value":"/ An identifier for a DWARF section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":10432,"byte_end":10470,"line_start":243,"line_end":243,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11830,"byte_end":11834,"line_start":294,"line_end":294,"column_start":12,"column_end":16},"name":"name","qualname":"<SectionId>::name","value":"pub fn name(Self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Returns the ELF section name for this kind.\n","sig":null,"attributes":[{"value":"/ Returns the ELF section name for this kind.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11771,"byte_end":11818,"line_start":293,"line_end":293,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":13204,"byte_end":13212,"line_start":322,"line_end":322,"column_start":12,"column_end":20},"name":"dwo_name","qualname":"<SectionId>::dwo_name","value":"pub fn dwo_name(Self) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the ELF section name for this kind, when found in a .dwo or .dwp file.\n","sig":null,"attributes":[{"value":"/ Returns the ELF section name for this kind, when found in a .dwo or .dwp file.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":13110,"byte_end":13192,"line_start":321,"line_end":321,"column_start":5,"column_end":87}}]},{"kind":"Struct","id":{"krate":0,"index":3765},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":14360,"byte_end":14365,"line_start":346,"line_end":346,"column_start":12,"column_end":17},"name":"DwoId","qualname":"::common::DwoId","value":"","parent":null,"children":[],"decl_id":null,"docs":" An optionally-provided implementation-defined compilation unit ID to enable\n split DWARF and linking a split compilation unit back together.\n","sig":null,"attributes":[{"value":"/ An optionally-provided implementation-defined compilation unit ID to enable","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":14150,"byte_end":14229,"line_start":343,"line_end":343,"column_start":1,"column_end":80}},{"value":"/ split DWARF and linking a split compilation unit back together.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":14230,"byte_end":14297,"line_start":344,"line_end":344,"column_start":1,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":3767},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":14366,"byte_end":14373,"line_start":346,"line_end":346,"column_start":18,"column_end":25},"name":"0","qualname":"::common::DwoId::0","value":"u64","parent":{"krate":0,"index":3765},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3784},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":14643,"byte_end":14647,"line_start":353,"line_end":353,"column_start":5,"column_end":9},"name":"Main","qualname":"::common::DwarfFileType::Main","value":"DwarfFileType::Main","parent":{"krate":0,"index":3783},"children":[],"decl_id":null,"docs":" A normal executable or object file.\n","sig":null,"attributes":[{"value":"/ A normal executable or object file.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":14599,"byte_end":14638,"line_start":352,"line_end":352,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3786},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":14686,"byte_end":14689,"line_start":355,"line_end":355,"column_start":5,"column_end":8},"name":"Dwo","qualname":"::common::DwarfFileType::Dwo","value":"DwarfFileType::Dwo","parent":{"krate":0,"index":3783},"children":[],"decl_id":null,"docs":" A .dwo split DWARF file.\n","sig":null,"attributes":[{"value":"/ A .dwo split DWARF file.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":14653,"byte_end":14681,"line_start":354,"line_end":354,"column_start":5,"column_end":33}}]},{"kind":"Enum","id":{"krate":0,"index":3783},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":14579,"byte_end":14592,"line_start":351,"line_end":351,"column_start":10,"column_end":23},"name":"DwarfFileType","qualname":"::common::DwarfFileType","value":"pub enum DwarfFileType { Main, Dwo, }","parent":null,"children":[{"krate":0,"index":3784},{"krate":0,"index":3786}],"decl_id":null,"docs":" The \"type\" of file with DWARF debugging information. This determines, among other things,\n which files DWARF sections should be loaded from.\n","sig":null,"attributes":[{"value":"/ The \"type\" of file with DWARF debugging information. This determines, among other things,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":14377,"byte_end":14470,"line_start":348,"line_end":348,"column_start":1,"column_end":94}},{"value":"/ which files DWARF sections should be loaded from.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":14471,"byte_end":14524,"line_start":349,"line_end":349,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":3799},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16425,"byte_end":16428,"line_start":49,"line_end":49,"column_start":12,"column_end":15},"name":"Arm","qualname":"::arch::Arm","value":"","parent":null,"children":[],"decl_id":null,"docs":" ARM architecture specific definitions.","sig":null,"attributes":[{"value":"/ ARM architecture specific definitions.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16243,"byte_end":16285,"line_start":45,"line_end":45,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16286,"byte_end":16289,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ See [DWARF for the ARM Architecture](https://developer.arm.com/documentation/ihi0040/c/).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16290,"byte_end":16383,"line_start":47,"line_end":47,"column_start":1,"column_end":94}}]},{"kind":"Const","id":{"krate":0,"index":3807},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16453,"byte_end":16455,"line_start":52,"line_end":52,"column_start":5,"column_end":7},"name":"R0","qualname":"::arch::Arm::R0","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3808},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16473,"byte_end":16475,"line_start":53,"line_end":53,"column_start":5,"column_end":7},"name":"R1","qualname":"::arch::Arm::R1","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3809},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16493,"byte_end":16495,"line_start":54,"line_end":54,"column_start":5,"column_end":7},"name":"R2","qualname":"::arch::Arm::R2","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3810},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16513,"byte_end":16515,"line_start":55,"line_end":55,"column_start":5,"column_end":7},"name":"R3","qualname":"::arch::Arm::R3","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3811},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16533,"byte_end":16535,"line_start":56,"line_end":56,"column_start":5,"column_end":7},"name":"R4","qualname":"::arch::Arm::R4","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3812},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16553,"byte_end":16555,"line_start":57,"line_end":57,"column_start":5,"column_end":7},"name":"R5","qualname":"::arch::Arm::R5","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3813},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16573,"byte_end":16575,"line_start":58,"line_end":58,"column_start":5,"column_end":7},"name":"R6","qualname":"::arch::Arm::R6","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3814},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16593,"byte_end":16595,"line_start":59,"line_end":59,"column_start":5,"column_end":7},"name":"R7","qualname":"::arch::Arm::R7","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3815},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16613,"byte_end":16615,"line_start":60,"line_end":60,"column_start":5,"column_end":7},"name":"R8","qualname":"::arch::Arm::R8","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3816},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16633,"byte_end":16635,"line_start":61,"line_end":61,"column_start":5,"column_end":7},"name":"R9","qualname":"::arch::Arm::R9","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3817},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16653,"byte_end":16656,"line_start":62,"line_end":62,"column_start":5,"column_end":8},"name":"R10","qualname":"::arch::Arm::R10","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3818},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16676,"byte_end":16679,"line_start":63,"line_end":63,"column_start":5,"column_end":8},"name":"R11","qualname":"::arch::Arm::R11","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3819},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16699,"byte_end":16702,"line_start":64,"line_end":64,"column_start":5,"column_end":8},"name":"R12","qualname":"::arch::Arm::R12","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3820},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16722,"byte_end":16725,"line_start":65,"line_end":65,"column_start":5,"column_end":8},"name":"R13","qualname":"::arch::Arm::R13","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3821},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16745,"byte_end":16748,"line_start":66,"line_end":66,"column_start":5,"column_end":8},"name":"R14","qualname":"::arch::Arm::R14","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3822},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16768,"byte_end":16771,"line_start":67,"line_end":67,"column_start":5,"column_end":8},"name":"R15","qualname":"::arch::Arm::R15","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3823},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16792,"byte_end":16797,"line_start":69,"line_end":69,"column_start":5,"column_end":10},"name":"WCGR0","qualname":"::arch::Arm::WCGR0","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3824},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16820,"byte_end":16825,"line_start":70,"line_end":70,"column_start":5,"column_end":10},"name":"WCGR1","qualname":"::arch::Arm::WCGR1","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3825},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16848,"byte_end":16853,"line_start":71,"line_end":71,"column_start":5,"column_end":10},"name":"WCGR2","qualname":"::arch::Arm::WCGR2","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3826},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16876,"byte_end":16881,"line_start":72,"line_end":72,"column_start":5,"column_end":10},"name":"WCGR3","qualname":"::arch::Arm::WCGR3","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3827},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16904,"byte_end":16909,"line_start":73,"line_end":73,"column_start":5,"column_end":10},"name":"WCGR4","qualname":"::arch::Arm::WCGR4","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3828},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16932,"byte_end":16937,"line_start":74,"line_end":74,"column_start":5,"column_end":10},"name":"WCGR5","qualname":"::arch::Arm::WCGR5","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3829},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16960,"byte_end":16965,"line_start":75,"line_end":75,"column_start":5,"column_end":10},"name":"WCGR6","qualname":"::arch::Arm::WCGR6","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3830},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":16988,"byte_end":16993,"line_start":76,"line_end":76,"column_start":5,"column_end":10},"name":"WCGR7","qualname":"::arch::Arm::WCGR7","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3831},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17017,"byte_end":17020,"line_start":78,"line_end":78,"column_start":5,"column_end":8},"name":"WR0","qualname":"::arch::Arm::WR0","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3832},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17041,"byte_end":17044,"line_start":79,"line_end":79,"column_start":5,"column_end":8},"name":"WR1","qualname":"::arch::Arm::WR1","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3833},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17065,"byte_end":17068,"line_start":80,"line_end":80,"column_start":5,"column_end":8},"name":"WR2","qualname":"::arch::Arm::WR2","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3834},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17089,"byte_end":17092,"line_start":81,"line_end":81,"column_start":5,"column_end":8},"name":"WR3","qualname":"::arch::Arm::WR3","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3835},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17113,"byte_end":17116,"line_start":82,"line_end":82,"column_start":5,"column_end":8},"name":"WR4","qualname":"::arch::Arm::WR4","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3836},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17137,"byte_end":17140,"line_start":83,"line_end":83,"column_start":5,"column_end":8},"name":"WR5","qualname":"::arch::Arm::WR5","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3837},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17161,"byte_end":17164,"line_start":84,"line_end":84,"column_start":5,"column_end":8},"name":"WR6","qualname":"::arch::Arm::WR6","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3838},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17185,"byte_end":17188,"line_start":85,"line_end":85,"column_start":5,"column_end":8},"name":"WR7","qualname":"::arch::Arm::WR7","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3839},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17209,"byte_end":17212,"line_start":86,"line_end":86,"column_start":5,"column_end":8},"name":"WR8","qualname":"::arch::Arm::WR8","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3840},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17233,"byte_end":17236,"line_start":87,"line_end":87,"column_start":5,"column_end":8},"name":"WR9","qualname":"::arch::Arm::WR9","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3841},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17257,"byte_end":17261,"line_start":88,"line_end":88,"column_start":5,"column_end":9},"name":"WR10","qualname":"::arch::Arm::WR10","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3842},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17283,"byte_end":17287,"line_start":89,"line_end":89,"column_start":5,"column_end":9},"name":"WR11","qualname":"::arch::Arm::WR11","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3843},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17309,"byte_end":17313,"line_start":90,"line_end":90,"column_start":5,"column_end":9},"name":"WR12","qualname":"::arch::Arm::WR12","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3844},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17335,"byte_end":17339,"line_start":91,"line_end":91,"column_start":5,"column_end":9},"name":"WR13","qualname":"::arch::Arm::WR13","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3845},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17361,"byte_end":17365,"line_start":92,"line_end":92,"column_start":5,"column_end":9},"name":"WR14","qualname":"::arch::Arm::WR14","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3846},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17387,"byte_end":17391,"line_start":93,"line_end":93,"column_start":5,"column_end":9},"name":"WR15","qualname":"::arch::Arm::WR15","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3847},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17414,"byte_end":17418,"line_start":95,"line_end":95,"column_start":5,"column_end":9},"name":"SPSR","qualname":"::arch::Arm::SPSR","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3848},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17440,"byte_end":17448,"line_start":96,"line_end":96,"column_start":5,"column_end":13},"name":"SPSR_FIQ","qualname":"::arch::Arm::SPSR_FIQ","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3849},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17474,"byte_end":17482,"line_start":97,"line_end":97,"column_start":5,"column_end":13},"name":"SPSR_IRQ","qualname":"::arch::Arm::SPSR_IRQ","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3850},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17508,"byte_end":17516,"line_start":98,"line_end":98,"column_start":5,"column_end":13},"name":"SPSR_ABT","qualname":"::arch::Arm::SPSR_ABT","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3851},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17542,"byte_end":17550,"line_start":99,"line_end":99,"column_start":5,"column_end":13},"name":"SPSR_UND","qualname":"::arch::Arm::SPSR_UND","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3852},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17576,"byte_end":17584,"line_start":100,"line_end":100,"column_start":5,"column_end":13},"name":"SPSR_SVC","qualname":"::arch::Arm::SPSR_SVC","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3853},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17611,"byte_end":17617,"line_start":102,"line_end":102,"column_start":5,"column_end":11},"name":"R8_USR","qualname":"::arch::Arm::R8_USR","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3854},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17641,"byte_end":17647,"line_start":103,"line_end":103,"column_start":5,"column_end":11},"name":"R9_USR","qualname":"::arch::Arm::R9_USR","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3855},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17671,"byte_end":17678,"line_start":104,"line_end":104,"column_start":5,"column_end":12},"name":"R10_USR","qualname":"::arch::Arm::R10_USR","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3856},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17703,"byte_end":17710,"line_start":105,"line_end":105,"column_start":5,"column_end":12},"name":"R11_USR","qualname":"::arch::Arm::R11_USR","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3857},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17735,"byte_end":17742,"line_start":106,"line_end":106,"column_start":5,"column_end":12},"name":"R12_USR","qualname":"::arch::Arm::R12_USR","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3858},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17767,"byte_end":17774,"line_start":107,"line_end":107,"column_start":5,"column_end":12},"name":"R13_USR","qualname":"::arch::Arm::R13_USR","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3859},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17799,"byte_end":17806,"line_start":108,"line_end":108,"column_start":5,"column_end":12},"name":"R14_USR","qualname":"::arch::Arm::R14_USR","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3860},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17832,"byte_end":17838,"line_start":110,"line_end":110,"column_start":5,"column_end":11},"name":"R8_FIQ","qualname":"::arch::Arm::R8_FIQ","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3861},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17862,"byte_end":17868,"line_start":111,"line_end":111,"column_start":5,"column_end":11},"name":"R9_FIQ","qualname":"::arch::Arm::R9_FIQ","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3862},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17892,"byte_end":17899,"line_start":112,"line_end":112,"column_start":5,"column_end":12},"name":"R10_FIQ","qualname":"::arch::Arm::R10_FIQ","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3863},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17924,"byte_end":17931,"line_start":113,"line_end":113,"column_start":5,"column_end":12},"name":"R11_FIQ","qualname":"::arch::Arm::R11_FIQ","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3864},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17956,"byte_end":17963,"line_start":114,"line_end":114,"column_start":5,"column_end":12},"name":"R12_FIQ","qualname":"::arch::Arm::R12_FIQ","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3865},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":17988,"byte_end":17995,"line_start":115,"line_end":115,"column_start":5,"column_end":12},"name":"R13_FIQ","qualname":"::arch::Arm::R13_FIQ","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3866},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18020,"byte_end":18027,"line_start":116,"line_end":116,"column_start":5,"column_end":12},"name":"R14_FIQ","qualname":"::arch::Arm::R14_FIQ","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3867},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18053,"byte_end":18060,"line_start":118,"line_end":118,"column_start":5,"column_end":12},"name":"R13_IRQ","qualname":"::arch::Arm::R13_IRQ","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3868},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18085,"byte_end":18092,"line_start":119,"line_end":119,"column_start":5,"column_end":12},"name":"R14_IRQ","qualname":"::arch::Arm::R14_IRQ","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3869},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18118,"byte_end":18125,"line_start":121,"line_end":121,"column_start":5,"column_end":12},"name":"R13_ABT","qualname":"::arch::Arm::R13_ABT","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3870},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18150,"byte_end":18157,"line_start":122,"line_end":122,"column_start":5,"column_end":12},"name":"R14_ABT","qualname":"::arch::Arm::R14_ABT","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3871},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18183,"byte_end":18190,"line_start":124,"line_end":124,"column_start":5,"column_end":12},"name":"R13_UND","qualname":"::arch::Arm::R13_UND","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3872},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18215,"byte_end":18222,"line_start":125,"line_end":125,"column_start":5,"column_end":12},"name":"R14_UND","qualname":"::arch::Arm::R14_UND","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3873},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18248,"byte_end":18255,"line_start":127,"line_end":127,"column_start":5,"column_end":12},"name":"R13_SVC","qualname":"::arch::Arm::R13_SVC","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3874},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18280,"byte_end":18287,"line_start":128,"line_end":128,"column_start":5,"column_end":12},"name":"R14_SVC","qualname":"::arch::Arm::R14_SVC","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3875},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18313,"byte_end":18316,"line_start":130,"line_end":130,"column_start":5,"column_end":8},"name":"WC0","qualname":"::arch::Arm::WC0","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3876},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18337,"byte_end":18340,"line_start":131,"line_end":131,"column_start":5,"column_end":8},"name":"WC1","qualname":"::arch::Arm::WC1","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3877},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18361,"byte_end":18364,"line_start":132,"line_end":132,"column_start":5,"column_end":8},"name":"WC2","qualname":"::arch::Arm::WC2","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3878},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18385,"byte_end":18388,"line_start":133,"line_end":133,"column_start":5,"column_end":8},"name":"WC3","qualname":"::arch::Arm::WC3","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3879},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18409,"byte_end":18412,"line_start":134,"line_end":134,"column_start":5,"column_end":8},"name":"WC4","qualname":"::arch::Arm::WC4","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3880},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18433,"byte_end":18436,"line_start":135,"line_end":135,"column_start":5,"column_end":8},"name":"WC5","qualname":"::arch::Arm::WC5","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3881},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18457,"byte_end":18460,"line_start":136,"line_end":136,"column_start":5,"column_end":8},"name":"WC6","qualname":"::arch::Arm::WC6","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3882},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18481,"byte_end":18484,"line_start":137,"line_end":137,"column_start":5,"column_end":8},"name":"WC7","qualname":"::arch::Arm::WC7","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3883},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18506,"byte_end":18508,"line_start":139,"line_end":139,"column_start":5,"column_end":7},"name":"D0","qualname":"::arch::Arm::D0","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3884},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18528,"byte_end":18530,"line_start":140,"line_end":140,"column_start":5,"column_end":7},"name":"D1","qualname":"::arch::Arm::D1","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3885},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18550,"byte_end":18552,"line_start":141,"line_end":141,"column_start":5,"column_end":7},"name":"D2","qualname":"::arch::Arm::D2","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3886},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18572,"byte_end":18574,"line_start":142,"line_end":142,"column_start":5,"column_end":7},"name":"D3","qualname":"::arch::Arm::D3","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3887},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18594,"byte_end":18596,"line_start":143,"line_end":143,"column_start":5,"column_end":7},"name":"D4","qualname":"::arch::Arm::D4","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3888},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18616,"byte_end":18618,"line_start":144,"line_end":144,"column_start":5,"column_end":7},"name":"D5","qualname":"::arch::Arm::D5","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3889},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18638,"byte_end":18640,"line_start":145,"line_end":145,"column_start":5,"column_end":7},"name":"D6","qualname":"::arch::Arm::D6","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3890},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18660,"byte_end":18662,"line_start":146,"line_end":146,"column_start":5,"column_end":7},"name":"D7","qualname":"::arch::Arm::D7","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3891},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18682,"byte_end":18684,"line_start":147,"line_end":147,"column_start":5,"column_end":7},"name":"D8","qualname":"::arch::Arm::D8","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3892},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18704,"byte_end":18706,"line_start":148,"line_end":148,"column_start":5,"column_end":7},"name":"D9","qualname":"::arch::Arm::D9","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3893},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18726,"byte_end":18729,"line_start":149,"line_end":149,"column_start":5,"column_end":8},"name":"D10","qualname":"::arch::Arm::D10","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3894},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18750,"byte_end":18753,"line_start":150,"line_end":150,"column_start":5,"column_end":8},"name":"D11","qualname":"::arch::Arm::D11","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3895},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18774,"byte_end":18777,"line_start":151,"line_end":151,"column_start":5,"column_end":8},"name":"D12","qualname":"::arch::Arm::D12","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3896},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18798,"byte_end":18801,"line_start":152,"line_end":152,"column_start":5,"column_end":8},"name":"D13","qualname":"::arch::Arm::D13","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3897},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18822,"byte_end":18825,"line_start":153,"line_end":153,"column_start":5,"column_end":8},"name":"D14","qualname":"::arch::Arm::D14","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3898},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18846,"byte_end":18849,"line_start":154,"line_end":154,"column_start":5,"column_end":8},"name":"D15","qualname":"::arch::Arm::D15","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3899},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18870,"byte_end":18873,"line_start":155,"line_end":155,"column_start":5,"column_end":8},"name":"D16","qualname":"::arch::Arm::D16","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3900},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18894,"byte_end":18897,"line_start":156,"line_end":156,"column_start":5,"column_end":8},"name":"D17","qualname":"::arch::Arm::D17","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3901},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18918,"byte_end":18921,"line_start":157,"line_end":157,"column_start":5,"column_end":8},"name":"D18","qualname":"::arch::Arm::D18","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3902},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18942,"byte_end":18945,"line_start":158,"line_end":158,"column_start":5,"column_end":8},"name":"D19","qualname":"::arch::Arm::D19","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3903},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18966,"byte_end":18969,"line_start":159,"line_end":159,"column_start":5,"column_end":8},"name":"D20","qualname":"::arch::Arm::D20","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3904},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":18990,"byte_end":18993,"line_start":160,"line_end":160,"column_start":5,"column_end":8},"name":"D21","qualname":"::arch::Arm::D21","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3905},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19014,"byte_end":19017,"line_start":161,"line_end":161,"column_start":5,"column_end":8},"name":"D22","qualname":"::arch::Arm::D22","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3906},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19038,"byte_end":19041,"line_start":162,"line_end":162,"column_start":5,"column_end":8},"name":"D23","qualname":"::arch::Arm::D23","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3907},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19062,"byte_end":19065,"line_start":163,"line_end":163,"column_start":5,"column_end":8},"name":"D24","qualname":"::arch::Arm::D24","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3908},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19086,"byte_end":19089,"line_start":164,"line_end":164,"column_start":5,"column_end":8},"name":"D25","qualname":"::arch::Arm::D25","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3909},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19110,"byte_end":19113,"line_start":165,"line_end":165,"column_start":5,"column_end":8},"name":"D26","qualname":"::arch::Arm::D26","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3910},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19134,"byte_end":19137,"line_start":166,"line_end":166,"column_start":5,"column_end":8},"name":"D27","qualname":"::arch::Arm::D27","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3911},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19158,"byte_end":19161,"line_start":167,"line_end":167,"column_start":5,"column_end":8},"name":"D28","qualname":"::arch::Arm::D28","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3912},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19182,"byte_end":19185,"line_start":168,"line_end":168,"column_start":5,"column_end":8},"name":"D29","qualname":"::arch::Arm::D29","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3913},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19206,"byte_end":19209,"line_start":169,"line_end":169,"column_start":5,"column_end":8},"name":"D30","qualname":"::arch::Arm::D30","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3914},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19230,"byte_end":19233,"line_start":170,"line_end":170,"column_start":5,"column_end":8},"name":"D31","qualname":"::arch::Arm::D31","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3915},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19267,"byte_end":19269,"line_start":173,"line_end":173,"column_start":5,"column_end":7},"name":"SP","qualname":"::arch::Arm::SP","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3916},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19288,"byte_end":19290,"line_start":174,"line_end":174,"column_start":5,"column_end":7},"name":"LR","qualname":"::arch::Arm::LR","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3917},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19309,"byte_end":19311,"line_start":175,"line_end":175,"column_start":5,"column_end":7},"name":"PC","qualname":"::arch::Arm::PC","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3918},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19331,"byte_end":19335,"line_start":177,"line_end":177,"column_start":5,"column_end":9},"name":"ACC0","qualname":"::arch::Arm::ACC0","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3919},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19357,"byte_end":19361,"line_start":178,"line_end":178,"column_start":5,"column_end":9},"name":"ACC1","qualname":"::arch::Arm::ACC1","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3920},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19383,"byte_end":19387,"line_start":179,"line_end":179,"column_start":5,"column_end":9},"name":"ACC2","qualname":"::arch::Arm::ACC2","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3921},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19409,"byte_end":19413,"line_start":180,"line_end":180,"column_start":5,"column_end":9},"name":"ACC3","qualname":"::arch::Arm::ACC3","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3922},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19435,"byte_end":19439,"line_start":181,"line_end":181,"column_start":5,"column_end":9},"name":"ACC4","qualname":"::arch::Arm::ACC4","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3923},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19461,"byte_end":19465,"line_start":182,"line_end":182,"column_start":5,"column_end":9},"name":"ACC5","qualname":"::arch::Arm::ACC5","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3924},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19487,"byte_end":19491,"line_start":183,"line_end":183,"column_start":5,"column_end":9},"name":"ACC6","qualname":"::arch::Arm::ACC6","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3925},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19513,"byte_end":19517,"line_start":184,"line_end":184,"column_start":5,"column_end":9},"name":"ACC7","qualname":"::arch::Arm::ACC7","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3926},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19540,"byte_end":19542,"line_start":186,"line_end":186,"column_start":5,"column_end":7},"name":"S0","qualname":"::arch::Arm::S0","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3927},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19562,"byte_end":19564,"line_start":187,"line_end":187,"column_start":5,"column_end":7},"name":"S1","qualname":"::arch::Arm::S1","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3928},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19584,"byte_end":19586,"line_start":188,"line_end":188,"column_start":5,"column_end":7},"name":"S2","qualname":"::arch::Arm::S2","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3929},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19606,"byte_end":19608,"line_start":189,"line_end":189,"column_start":5,"column_end":7},"name":"S3","qualname":"::arch::Arm::S3","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3930},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19628,"byte_end":19630,"line_start":190,"line_end":190,"column_start":5,"column_end":7},"name":"S4","qualname":"::arch::Arm::S4","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3931},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19650,"byte_end":19652,"line_start":191,"line_end":191,"column_start":5,"column_end":7},"name":"S5","qualname":"::arch::Arm::S5","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3932},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19672,"byte_end":19674,"line_start":192,"line_end":192,"column_start":5,"column_end":7},"name":"S6","qualname":"::arch::Arm::S6","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3933},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19694,"byte_end":19696,"line_start":193,"line_end":193,"column_start":5,"column_end":7},"name":"S7","qualname":"::arch::Arm::S7","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3934},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19716,"byte_end":19718,"line_start":194,"line_end":194,"column_start":5,"column_end":7},"name":"S8","qualname":"::arch::Arm::S8","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3935},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19738,"byte_end":19740,"line_start":195,"line_end":195,"column_start":5,"column_end":7},"name":"S9","qualname":"::arch::Arm::S9","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3936},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19760,"byte_end":19763,"line_start":196,"line_end":196,"column_start":5,"column_end":8},"name":"S10","qualname":"::arch::Arm::S10","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3937},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19784,"byte_end":19787,"line_start":197,"line_end":197,"column_start":5,"column_end":8},"name":"S11","qualname":"::arch::Arm::S11","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3938},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19808,"byte_end":19811,"line_start":198,"line_end":198,"column_start":5,"column_end":8},"name":"S12","qualname":"::arch::Arm::S12","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3939},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19832,"byte_end":19835,"line_start":199,"line_end":199,"column_start":5,"column_end":8},"name":"S13","qualname":"::arch::Arm::S13","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3940},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19856,"byte_end":19859,"line_start":200,"line_end":200,"column_start":5,"column_end":8},"name":"S14","qualname":"::arch::Arm::S14","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3941},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19880,"byte_end":19883,"line_start":201,"line_end":201,"column_start":5,"column_end":8},"name":"S15","qualname":"::arch::Arm::S15","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3942},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19904,"byte_end":19907,"line_start":202,"line_end":202,"column_start":5,"column_end":8},"name":"S16","qualname":"::arch::Arm::S16","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3943},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19928,"byte_end":19931,"line_start":203,"line_end":203,"column_start":5,"column_end":8},"name":"S17","qualname":"::arch::Arm::S17","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3944},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19952,"byte_end":19955,"line_start":204,"line_end":204,"column_start":5,"column_end":8},"name":"S18","qualname":"::arch::Arm::S18","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3945},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":19976,"byte_end":19979,"line_start":205,"line_end":205,"column_start":5,"column_end":8},"name":"S19","qualname":"::arch::Arm::S19","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3946},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20000,"byte_end":20003,"line_start":206,"line_end":206,"column_start":5,"column_end":8},"name":"S20","qualname":"::arch::Arm::S20","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3947},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20024,"byte_end":20027,"line_start":207,"line_end":207,"column_start":5,"column_end":8},"name":"S21","qualname":"::arch::Arm::S21","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3948},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20048,"byte_end":20051,"line_start":208,"line_end":208,"column_start":5,"column_end":8},"name":"S22","qualname":"::arch::Arm::S22","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3949},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20072,"byte_end":20075,"line_start":209,"line_end":209,"column_start":5,"column_end":8},"name":"S23","qualname":"::arch::Arm::S23","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3950},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20096,"byte_end":20099,"line_start":210,"line_end":210,"column_start":5,"column_end":8},"name":"S24","qualname":"::arch::Arm::S24","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3951},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20120,"byte_end":20123,"line_start":211,"line_end":211,"column_start":5,"column_end":8},"name":"S25","qualname":"::arch::Arm::S25","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3952},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20144,"byte_end":20147,"line_start":212,"line_end":212,"column_start":5,"column_end":8},"name":"S26","qualname":"::arch::Arm::S26","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3953},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20168,"byte_end":20171,"line_start":213,"line_end":213,"column_start":5,"column_end":8},"name":"S27","qualname":"::arch::Arm::S27","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3954},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20192,"byte_end":20195,"line_start":214,"line_end":214,"column_start":5,"column_end":8},"name":"S28","qualname":"::arch::Arm::S28","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3955},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20216,"byte_end":20219,"line_start":215,"line_end":215,"column_start":5,"column_end":8},"name":"S29","qualname":"::arch::Arm::S29","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3956},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20240,"byte_end":20243,"line_start":216,"line_end":216,"column_start":5,"column_end":8},"name":"S30","qualname":"::arch::Arm::S30","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3957},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20264,"byte_end":20267,"line_start":217,"line_end":217,"column_start":5,"column_end":8},"name":"S31","qualname":"::arch::Arm::S31","value":"Register","parent":{"krate":0,"index":3806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3961},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20495,"byte_end":20502,"line_start":224,"line_end":224,"column_start":12,"column_end":19},"name":"AArch64","qualname":"::arch::AArch64","value":"","parent":null,"children":[],"decl_id":null,"docs":" ARM 64-bit (AArch64) architecture specific definitions.","sig":null,"attributes":[{"value":"/ ARM 64-bit (AArch64) architecture specific definitions.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20289,"byte_end":20348,"line_start":220,"line_end":220,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20349,"byte_end":20352,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ See [DWARF for the ARM 64-bit Architecture](https://developer.arm.com/documentation/ihi0057/b/).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20353,"byte_end":20453,"line_start":222,"line_end":222,"column_start":1,"column_end":101}}]},{"kind":"Const","id":{"krate":0,"index":3969},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20531,"byte_end":20533,"line_start":227,"line_end":227,"column_start":5,"column_end":7},"name":"X0","qualname":"::arch::AArch64::X0","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3970},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20551,"byte_end":20553,"line_start":228,"line_end":228,"column_start":5,"column_end":7},"name":"X1","qualname":"::arch::AArch64::X1","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3971},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20571,"byte_end":20573,"line_start":229,"line_end":229,"column_start":5,"column_end":7},"name":"X2","qualname":"::arch::AArch64::X2","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3972},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20591,"byte_end":20593,"line_start":230,"line_end":230,"column_start":5,"column_end":7},"name":"X3","qualname":"::arch::AArch64::X3","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3973},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20611,"byte_end":20613,"line_start":231,"line_end":231,"column_start":5,"column_end":7},"name":"X4","qualname":"::arch::AArch64::X4","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3974},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20631,"byte_end":20633,"line_start":232,"line_end":232,"column_start":5,"column_end":7},"name":"X5","qualname":"::arch::AArch64::X5","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3975},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20651,"byte_end":20653,"line_start":233,"line_end":233,"column_start":5,"column_end":7},"name":"X6","qualname":"::arch::AArch64::X6","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3976},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20671,"byte_end":20673,"line_start":234,"line_end":234,"column_start":5,"column_end":7},"name":"X7","qualname":"::arch::AArch64::X7","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3977},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20691,"byte_end":20693,"line_start":235,"line_end":235,"column_start":5,"column_end":7},"name":"X8","qualname":"::arch::AArch64::X8","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3978},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20711,"byte_end":20713,"line_start":236,"line_end":236,"column_start":5,"column_end":7},"name":"X9","qualname":"::arch::AArch64::X9","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3979},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20731,"byte_end":20734,"line_start":237,"line_end":237,"column_start":5,"column_end":8},"name":"X10","qualname":"::arch::AArch64::X10","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3980},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20754,"byte_end":20757,"line_start":238,"line_end":238,"column_start":5,"column_end":8},"name":"X11","qualname":"::arch::AArch64::X11","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3981},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20777,"byte_end":20780,"line_start":239,"line_end":239,"column_start":5,"column_end":8},"name":"X12","qualname":"::arch::AArch64::X12","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3982},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20800,"byte_end":20803,"line_start":240,"line_end":240,"column_start":5,"column_end":8},"name":"X13","qualname":"::arch::AArch64::X13","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3983},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20823,"byte_end":20826,"line_start":241,"line_end":241,"column_start":5,"column_end":8},"name":"X14","qualname":"::arch::AArch64::X14","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3984},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20846,"byte_end":20849,"line_start":242,"line_end":242,"column_start":5,"column_end":8},"name":"X15","qualname":"::arch::AArch64::X15","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3985},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20869,"byte_end":20872,"line_start":243,"line_end":243,"column_start":5,"column_end":8},"name":"X16","qualname":"::arch::AArch64::X16","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3986},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20892,"byte_end":20895,"line_start":244,"line_end":244,"column_start":5,"column_end":8},"name":"X17","qualname":"::arch::AArch64::X17","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3987},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20915,"byte_end":20918,"line_start":245,"line_end":245,"column_start":5,"column_end":8},"name":"X18","qualname":"::arch::AArch64::X18","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3988},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20938,"byte_end":20941,"line_start":246,"line_end":246,"column_start":5,"column_end":8},"name":"X19","qualname":"::arch::AArch64::X19","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3989},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20961,"byte_end":20964,"line_start":247,"line_end":247,"column_start":5,"column_end":8},"name":"X20","qualname":"::arch::AArch64::X20","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3990},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":20984,"byte_end":20987,"line_start":248,"line_end":248,"column_start":5,"column_end":8},"name":"X21","qualname":"::arch::AArch64::X21","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3991},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21007,"byte_end":21010,"line_start":249,"line_end":249,"column_start":5,"column_end":8},"name":"X22","qualname":"::arch::AArch64::X22","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3992},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21030,"byte_end":21033,"line_start":250,"line_end":250,"column_start":5,"column_end":8},"name":"X23","qualname":"::arch::AArch64::X23","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3993},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21053,"byte_end":21056,"line_start":251,"line_end":251,"column_start":5,"column_end":8},"name":"X24","qualname":"::arch::AArch64::X24","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3994},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21076,"byte_end":21079,"line_start":252,"line_end":252,"column_start":5,"column_end":8},"name":"X25","qualname":"::arch::AArch64::X25","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3995},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21099,"byte_end":21102,"line_start":253,"line_end":253,"column_start":5,"column_end":8},"name":"X26","qualname":"::arch::AArch64::X26","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3996},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21122,"byte_end":21125,"line_start":254,"line_end":254,"column_start":5,"column_end":8},"name":"X27","qualname":"::arch::AArch64::X27","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3997},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21145,"byte_end":21148,"line_start":255,"line_end":255,"column_start":5,"column_end":8},"name":"X28","qualname":"::arch::AArch64::X28","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3998},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21168,"byte_end":21171,"line_start":256,"line_end":256,"column_start":5,"column_end":8},"name":"X29","qualname":"::arch::AArch64::X29","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3999},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21191,"byte_end":21194,"line_start":257,"line_end":257,"column_start":5,"column_end":8},"name":"X30","qualname":"::arch::AArch64::X30","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4000},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21214,"byte_end":21216,"line_start":258,"line_end":258,"column_start":5,"column_end":7},"name":"SP","qualname":"::arch::AArch64::SP","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4001},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21236,"byte_end":21238,"line_start":260,"line_end":260,"column_start":5,"column_end":7},"name":"V0","qualname":"::arch::AArch64::V0","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4002},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21257,"byte_end":21259,"line_start":261,"line_end":261,"column_start":5,"column_end":7},"name":"V1","qualname":"::arch::AArch64::V1","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4003},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21278,"byte_end":21280,"line_start":262,"line_end":262,"column_start":5,"column_end":7},"name":"V2","qualname":"::arch::AArch64::V2","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4004},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21299,"byte_end":21301,"line_start":263,"line_end":263,"column_start":5,"column_end":7},"name":"V3","qualname":"::arch::AArch64::V3","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4005},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21320,"byte_end":21322,"line_start":264,"line_end":264,"column_start":5,"column_end":7},"name":"V4","qualname":"::arch::AArch64::V4","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4006},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21341,"byte_end":21343,"line_start":265,"line_end":265,"column_start":5,"column_end":7},"name":"V5","qualname":"::arch::AArch64::V5","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4007},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21362,"byte_end":21364,"line_start":266,"line_end":266,"column_start":5,"column_end":7},"name":"V6","qualname":"::arch::AArch64::V6","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4008},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21383,"byte_end":21385,"line_start":267,"line_end":267,"column_start":5,"column_end":7},"name":"V7","qualname":"::arch::AArch64::V7","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4009},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21404,"byte_end":21406,"line_start":268,"line_end":268,"column_start":5,"column_end":7},"name":"V8","qualname":"::arch::AArch64::V8","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4010},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21425,"byte_end":21427,"line_start":269,"line_end":269,"column_start":5,"column_end":7},"name":"V9","qualname":"::arch::AArch64::V9","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4011},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21446,"byte_end":21449,"line_start":270,"line_end":270,"column_start":5,"column_end":8},"name":"V10","qualname":"::arch::AArch64::V10","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4012},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21469,"byte_end":21472,"line_start":271,"line_end":271,"column_start":5,"column_end":8},"name":"V11","qualname":"::arch::AArch64::V11","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4013},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21492,"byte_end":21495,"line_start":272,"line_end":272,"column_start":5,"column_end":8},"name":"V12","qualname":"::arch::AArch64::V12","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4014},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21515,"byte_end":21518,"line_start":273,"line_end":273,"column_start":5,"column_end":8},"name":"V13","qualname":"::arch::AArch64::V13","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4015},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21538,"byte_end":21541,"line_start":274,"line_end":274,"column_start":5,"column_end":8},"name":"V14","qualname":"::arch::AArch64::V14","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4016},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21561,"byte_end":21564,"line_start":275,"line_end":275,"column_start":5,"column_end":8},"name":"V15","qualname":"::arch::AArch64::V15","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4017},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21584,"byte_end":21587,"line_start":276,"line_end":276,"column_start":5,"column_end":8},"name":"V16","qualname":"::arch::AArch64::V16","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4018},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21607,"byte_end":21610,"line_start":277,"line_end":277,"column_start":5,"column_end":8},"name":"V17","qualname":"::arch::AArch64::V17","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4019},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21630,"byte_end":21633,"line_start":278,"line_end":278,"column_start":5,"column_end":8},"name":"V18","qualname":"::arch::AArch64::V18","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4020},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21653,"byte_end":21656,"line_start":279,"line_end":279,"column_start":5,"column_end":8},"name":"V19","qualname":"::arch::AArch64::V19","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4021},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21676,"byte_end":21679,"line_start":280,"line_end":280,"column_start":5,"column_end":8},"name":"V20","qualname":"::arch::AArch64::V20","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4022},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21699,"byte_end":21702,"line_start":281,"line_end":281,"column_start":5,"column_end":8},"name":"V21","qualname":"::arch::AArch64::V21","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4023},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21722,"byte_end":21725,"line_start":282,"line_end":282,"column_start":5,"column_end":8},"name":"V22","qualname":"::arch::AArch64::V22","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4024},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21745,"byte_end":21748,"line_start":283,"line_end":283,"column_start":5,"column_end":8},"name":"V23","qualname":"::arch::AArch64::V23","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4025},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21768,"byte_end":21771,"line_start":284,"line_end":284,"column_start":5,"column_end":8},"name":"V24","qualname":"::arch::AArch64::V24","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4026},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21791,"byte_end":21794,"line_start":285,"line_end":285,"column_start":5,"column_end":8},"name":"V25","qualname":"::arch::AArch64::V25","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4027},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21814,"byte_end":21817,"line_start":286,"line_end":286,"column_start":5,"column_end":8},"name":"V26","qualname":"::arch::AArch64::V26","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4028},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21837,"byte_end":21840,"line_start":287,"line_end":287,"column_start":5,"column_end":8},"name":"V27","qualname":"::arch::AArch64::V27","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4029},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21860,"byte_end":21863,"line_start":288,"line_end":288,"column_start":5,"column_end":8},"name":"V28","qualname":"::arch::AArch64::V28","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4030},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21883,"byte_end":21886,"line_start":289,"line_end":289,"column_start":5,"column_end":8},"name":"V29","qualname":"::arch::AArch64::V29","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4031},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21906,"byte_end":21909,"line_start":290,"line_end":290,"column_start":5,"column_end":8},"name":"V30","qualname":"::arch::AArch64::V30","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4032},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21929,"byte_end":21932,"line_start":291,"line_end":291,"column_start":5,"column_end":8},"name":"V31","qualname":"::arch::AArch64::V31","value":"Register","parent":{"krate":0,"index":3968},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4036},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22132,"byte_end":22137,"line_start":298,"line_end":298,"column_start":12,"column_end":17},"name":"RiscV","qualname":"::arch::RiscV","value":"","parent":null,"children":[],"decl_id":null,"docs":" RISC-V architecture specific definitions.","sig":null,"attributes":[{"value":"/ RISC-V architecture specific definitions.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21953,"byte_end":21998,"line_start":294,"line_end":294,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":21999,"byte_end":22002,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ See [RISC-V ELF psABI specification](https://github.com/riscv/riscv-elf-psabi-doc).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22003,"byte_end":22090,"line_start":296,"line_end":296,"column_start":1,"column_end":88}}]},{"kind":"Const","id":{"krate":0,"index":4044},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22164,"byte_end":22166,"line_start":301,"line_end":301,"column_start":5,"column_end":7},"name":"X0","qualname":"::arch::RiscV::X0","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4045},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22184,"byte_end":22186,"line_start":302,"line_end":302,"column_start":5,"column_end":7},"name":"X1","qualname":"::arch::RiscV::X1","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4046},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22204,"byte_end":22206,"line_start":303,"line_end":303,"column_start":5,"column_end":7},"name":"X2","qualname":"::arch::RiscV::X2","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4047},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22224,"byte_end":22226,"line_start":304,"line_end":304,"column_start":5,"column_end":7},"name":"X3","qualname":"::arch::RiscV::X3","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4048},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22244,"byte_end":22246,"line_start":305,"line_end":305,"column_start":5,"column_end":7},"name":"X4","qualname":"::arch::RiscV::X4","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4049},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22264,"byte_end":22266,"line_start":306,"line_end":306,"column_start":5,"column_end":7},"name":"X5","qualname":"::arch::RiscV::X5","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4050},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22284,"byte_end":22286,"line_start":307,"line_end":307,"column_start":5,"column_end":7},"name":"X6","qualname":"::arch::RiscV::X6","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4051},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22304,"byte_end":22306,"line_start":308,"line_end":308,"column_start":5,"column_end":7},"name":"X7","qualname":"::arch::RiscV::X7","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4052},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22324,"byte_end":22326,"line_start":309,"line_end":309,"column_start":5,"column_end":7},"name":"X8","qualname":"::arch::RiscV::X8","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4053},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22344,"byte_end":22346,"line_start":310,"line_end":310,"column_start":5,"column_end":7},"name":"X9","qualname":"::arch::RiscV::X9","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4054},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22364,"byte_end":22367,"line_start":311,"line_end":311,"column_start":5,"column_end":8},"name":"X10","qualname":"::arch::RiscV::X10","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4055},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22387,"byte_end":22390,"line_start":312,"line_end":312,"column_start":5,"column_end":8},"name":"X11","qualname":"::arch::RiscV::X11","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4056},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22410,"byte_end":22413,"line_start":313,"line_end":313,"column_start":5,"column_end":8},"name":"X12","qualname":"::arch::RiscV::X12","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4057},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22433,"byte_end":22436,"line_start":314,"line_end":314,"column_start":5,"column_end":8},"name":"X13","qualname":"::arch::RiscV::X13","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4058},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22456,"byte_end":22459,"line_start":315,"line_end":315,"column_start":5,"column_end":8},"name":"X14","qualname":"::arch::RiscV::X14","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4059},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22479,"byte_end":22482,"line_start":316,"line_end":316,"column_start":5,"column_end":8},"name":"X15","qualname":"::arch::RiscV::X15","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4060},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22502,"byte_end":22505,"line_start":317,"line_end":317,"column_start":5,"column_end":8},"name":"X16","qualname":"::arch::RiscV::X16","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4061},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22525,"byte_end":22528,"line_start":318,"line_end":318,"column_start":5,"column_end":8},"name":"X17","qualname":"::arch::RiscV::X17","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4062},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22548,"byte_end":22551,"line_start":319,"line_end":319,"column_start":5,"column_end":8},"name":"X18","qualname":"::arch::RiscV::X18","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4063},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22571,"byte_end":22574,"line_start":320,"line_end":320,"column_start":5,"column_end":8},"name":"X19","qualname":"::arch::RiscV::X19","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4064},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22594,"byte_end":22597,"line_start":321,"line_end":321,"column_start":5,"column_end":8},"name":"X20","qualname":"::arch::RiscV::X20","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4065},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22617,"byte_end":22620,"line_start":322,"line_end":322,"column_start":5,"column_end":8},"name":"X21","qualname":"::arch::RiscV::X21","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4066},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22640,"byte_end":22643,"line_start":323,"line_end":323,"column_start":5,"column_end":8},"name":"X22","qualname":"::arch::RiscV::X22","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4067},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22663,"byte_end":22666,"line_start":324,"line_end":324,"column_start":5,"column_end":8},"name":"X23","qualname":"::arch::RiscV::X23","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4068},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22686,"byte_end":22689,"line_start":325,"line_end":325,"column_start":5,"column_end":8},"name":"X24","qualname":"::arch::RiscV::X24","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4069},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22709,"byte_end":22712,"line_start":326,"line_end":326,"column_start":5,"column_end":8},"name":"X25","qualname":"::arch::RiscV::X25","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4070},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22732,"byte_end":22735,"line_start":327,"line_end":327,"column_start":5,"column_end":8},"name":"X26","qualname":"::arch::RiscV::X26","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4071},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22755,"byte_end":22758,"line_start":328,"line_end":328,"column_start":5,"column_end":8},"name":"X27","qualname":"::arch::RiscV::X27","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4072},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22778,"byte_end":22781,"line_start":329,"line_end":329,"column_start":5,"column_end":8},"name":"X28","qualname":"::arch::RiscV::X28","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4073},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22801,"byte_end":22804,"line_start":330,"line_end":330,"column_start":5,"column_end":8},"name":"X29","qualname":"::arch::RiscV::X29","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4074},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22824,"byte_end":22827,"line_start":331,"line_end":331,"column_start":5,"column_end":8},"name":"X30","qualname":"::arch::RiscV::X30","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4075},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22847,"byte_end":22850,"line_start":332,"line_end":332,"column_start":5,"column_end":8},"name":"X31","qualname":"::arch::RiscV::X31","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4076},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22871,"byte_end":22873,"line_start":334,"line_end":334,"column_start":5,"column_end":7},"name":"F0","qualname":"::arch::RiscV::F0","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4077},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22892,"byte_end":22894,"line_start":335,"line_end":335,"column_start":5,"column_end":7},"name":"F1","qualname":"::arch::RiscV::F1","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4078},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22913,"byte_end":22915,"line_start":336,"line_end":336,"column_start":5,"column_end":7},"name":"F2","qualname":"::arch::RiscV::F2","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4079},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22934,"byte_end":22936,"line_start":337,"line_end":337,"column_start":5,"column_end":7},"name":"F3","qualname":"::arch::RiscV::F3","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4080},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22955,"byte_end":22957,"line_start":338,"line_end":338,"column_start":5,"column_end":7},"name":"F4","qualname":"::arch::RiscV::F4","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4081},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22976,"byte_end":22978,"line_start":339,"line_end":339,"column_start":5,"column_end":7},"name":"F5","qualname":"::arch::RiscV::F5","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4082},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":22997,"byte_end":22999,"line_start":340,"line_end":340,"column_start":5,"column_end":7},"name":"F6","qualname":"::arch::RiscV::F6","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4083},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23018,"byte_end":23020,"line_start":341,"line_end":341,"column_start":5,"column_end":7},"name":"F7","qualname":"::arch::RiscV::F7","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4084},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23039,"byte_end":23041,"line_start":342,"line_end":342,"column_start":5,"column_end":7},"name":"F8","qualname":"::arch::RiscV::F8","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4085},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23060,"byte_end":23062,"line_start":343,"line_end":343,"column_start":5,"column_end":7},"name":"F9","qualname":"::arch::RiscV::F9","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4086},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23081,"byte_end":23084,"line_start":344,"line_end":344,"column_start":5,"column_end":8},"name":"F10","qualname":"::arch::RiscV::F10","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4087},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23104,"byte_end":23107,"line_start":345,"line_end":345,"column_start":5,"column_end":8},"name":"F11","qualname":"::arch::RiscV::F11","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4088},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23127,"byte_end":23130,"line_start":346,"line_end":346,"column_start":5,"column_end":8},"name":"F12","qualname":"::arch::RiscV::F12","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4089},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23150,"byte_end":23153,"line_start":347,"line_end":347,"column_start":5,"column_end":8},"name":"F13","qualname":"::arch::RiscV::F13","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4090},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23173,"byte_end":23176,"line_start":348,"line_end":348,"column_start":5,"column_end":8},"name":"F14","qualname":"::arch::RiscV::F14","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4091},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23196,"byte_end":23199,"line_start":349,"line_end":349,"column_start":5,"column_end":8},"name":"F15","qualname":"::arch::RiscV::F15","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4092},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23219,"byte_end":23222,"line_start":350,"line_end":350,"column_start":5,"column_end":8},"name":"F16","qualname":"::arch::RiscV::F16","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4093},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23242,"byte_end":23245,"line_start":351,"line_end":351,"column_start":5,"column_end":8},"name":"F17","qualname":"::arch::RiscV::F17","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4094},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23265,"byte_end":23268,"line_start":352,"line_end":352,"column_start":5,"column_end":8},"name":"F18","qualname":"::arch::RiscV::F18","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4095},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23288,"byte_end":23291,"line_start":353,"line_end":353,"column_start":5,"column_end":8},"name":"F19","qualname":"::arch::RiscV::F19","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4096},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23311,"byte_end":23314,"line_start":354,"line_end":354,"column_start":5,"column_end":8},"name":"F20","qualname":"::arch::RiscV::F20","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4097},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23334,"byte_end":23337,"line_start":355,"line_end":355,"column_start":5,"column_end":8},"name":"F21","qualname":"::arch::RiscV::F21","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4098},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23357,"byte_end":23360,"line_start":356,"line_end":356,"column_start":5,"column_end":8},"name":"F22","qualname":"::arch::RiscV::F22","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4099},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23380,"byte_end":23383,"line_start":357,"line_end":357,"column_start":5,"column_end":8},"name":"F23","qualname":"::arch::RiscV::F23","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4100},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23403,"byte_end":23406,"line_start":358,"line_end":358,"column_start":5,"column_end":8},"name":"F24","qualname":"::arch::RiscV::F24","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4101},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23426,"byte_end":23429,"line_start":359,"line_end":359,"column_start":5,"column_end":8},"name":"F25","qualname":"::arch::RiscV::F25","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4102},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23449,"byte_end":23452,"line_start":360,"line_end":360,"column_start":5,"column_end":8},"name":"F26","qualname":"::arch::RiscV::F26","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4103},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23472,"byte_end":23475,"line_start":361,"line_end":361,"column_start":5,"column_end":8},"name":"F27","qualname":"::arch::RiscV::F27","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4104},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23495,"byte_end":23498,"line_start":362,"line_end":362,"column_start":5,"column_end":8},"name":"F28","qualname":"::arch::RiscV::F28","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4105},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23518,"byte_end":23521,"line_start":363,"line_end":363,"column_start":5,"column_end":8},"name":"F29","qualname":"::arch::RiscV::F29","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4106},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23541,"byte_end":23544,"line_start":364,"line_end":364,"column_start":5,"column_end":8},"name":"F30","qualname":"::arch::RiscV::F30","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4107},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23564,"byte_end":23567,"line_start":365,"line_end":365,"column_start":5,"column_end":8},"name":"F31","qualname":"::arch::RiscV::F31","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4108},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23600,"byte_end":23604,"line_start":368,"line_end":368,"column_start":5,"column_end":9},"name":"ZERO","qualname":"::arch::RiscV::ZERO","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4109},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23624,"byte_end":23626,"line_start":369,"line_end":369,"column_start":5,"column_end":7},"name":"RA","qualname":"::arch::RiscV::RA","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4110},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23644,"byte_end":23646,"line_start":370,"line_end":370,"column_start":5,"column_end":7},"name":"SP","qualname":"::arch::RiscV::SP","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4111},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23664,"byte_end":23666,"line_start":371,"line_end":371,"column_start":5,"column_end":7},"name":"GP","qualname":"::arch::RiscV::GP","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4112},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23684,"byte_end":23686,"line_start":372,"line_end":372,"column_start":5,"column_end":7},"name":"TP","qualname":"::arch::RiscV::TP","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4113},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23704,"byte_end":23706,"line_start":373,"line_end":373,"column_start":5,"column_end":7},"name":"T0","qualname":"::arch::RiscV::T0","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4114},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23724,"byte_end":23726,"line_start":374,"line_end":374,"column_start":5,"column_end":7},"name":"T1","qualname":"::arch::RiscV::T1","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4115},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23744,"byte_end":23746,"line_start":375,"line_end":375,"column_start":5,"column_end":7},"name":"T2","qualname":"::arch::RiscV::T2","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4116},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23764,"byte_end":23766,"line_start":376,"line_end":376,"column_start":5,"column_end":7},"name":"S0","qualname":"::arch::RiscV::S0","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4117},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23784,"byte_end":23786,"line_start":377,"line_end":377,"column_start":5,"column_end":7},"name":"S1","qualname":"::arch::RiscV::S1","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4118},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23804,"byte_end":23806,"line_start":378,"line_end":378,"column_start":5,"column_end":7},"name":"A0","qualname":"::arch::RiscV::A0","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4119},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23825,"byte_end":23827,"line_start":379,"line_end":379,"column_start":5,"column_end":7},"name":"A1","qualname":"::arch::RiscV::A1","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4120},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23846,"byte_end":23848,"line_start":380,"line_end":380,"column_start":5,"column_end":7},"name":"A2","qualname":"::arch::RiscV::A2","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4121},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23867,"byte_end":23869,"line_start":381,"line_end":381,"column_start":5,"column_end":7},"name":"A3","qualname":"::arch::RiscV::A3","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4122},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23888,"byte_end":23890,"line_start":382,"line_end":382,"column_start":5,"column_end":7},"name":"A4","qualname":"::arch::RiscV::A4","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4123},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23909,"byte_end":23911,"line_start":383,"line_end":383,"column_start":5,"column_end":7},"name":"A5","qualname":"::arch::RiscV::A5","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4124},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23930,"byte_end":23932,"line_start":384,"line_end":384,"column_start":5,"column_end":7},"name":"A6","qualname":"::arch::RiscV::A6","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4125},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23951,"byte_end":23953,"line_start":385,"line_end":385,"column_start":5,"column_end":7},"name":"A7","qualname":"::arch::RiscV::A7","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4126},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23972,"byte_end":23974,"line_start":386,"line_end":386,"column_start":5,"column_end":7},"name":"S2","qualname":"::arch::RiscV::S2","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4127},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":23993,"byte_end":23995,"line_start":387,"line_end":387,"column_start":5,"column_end":7},"name":"S3","qualname":"::arch::RiscV::S3","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4128},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24014,"byte_end":24016,"line_start":388,"line_end":388,"column_start":5,"column_end":7},"name":"S4","qualname":"::arch::RiscV::S4","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4129},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24035,"byte_end":24037,"line_start":389,"line_end":389,"column_start":5,"column_end":7},"name":"S5","qualname":"::arch::RiscV::S5","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4130},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24056,"byte_end":24058,"line_start":390,"line_end":390,"column_start":5,"column_end":7},"name":"S6","qualname":"::arch::RiscV::S6","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4131},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24077,"byte_end":24079,"line_start":391,"line_end":391,"column_start":5,"column_end":7},"name":"S7","qualname":"::arch::RiscV::S7","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4132},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24098,"byte_end":24100,"line_start":392,"line_end":392,"column_start":5,"column_end":7},"name":"S8","qualname":"::arch::RiscV::S8","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4133},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24119,"byte_end":24121,"line_start":393,"line_end":393,"column_start":5,"column_end":7},"name":"S9","qualname":"::arch::RiscV::S9","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4134},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24140,"byte_end":24143,"line_start":394,"line_end":394,"column_start":5,"column_end":8},"name":"S10","qualname":"::arch::RiscV::S10","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4135},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24163,"byte_end":24166,"line_start":395,"line_end":395,"column_start":5,"column_end":8},"name":"S11","qualname":"::arch::RiscV::S11","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4136},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24186,"byte_end":24188,"line_start":396,"line_end":396,"column_start":5,"column_end":7},"name":"T3","qualname":"::arch::RiscV::T3","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4137},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24207,"byte_end":24209,"line_start":397,"line_end":397,"column_start":5,"column_end":7},"name":"T4","qualname":"::arch::RiscV::T4","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4138},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24228,"byte_end":24230,"line_start":398,"line_end":398,"column_start":5,"column_end":7},"name":"T5","qualname":"::arch::RiscV::T5","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4139},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24249,"byte_end":24251,"line_start":399,"line_end":399,"column_start":5,"column_end":7},"name":"T6","qualname":"::arch::RiscV::T6","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4140},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24271,"byte_end":24274,"line_start":401,"line_end":401,"column_start":5,"column_end":8},"name":"FT0","qualname":"::arch::RiscV::FT0","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4141},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24294,"byte_end":24297,"line_start":402,"line_end":402,"column_start":5,"column_end":8},"name":"FT1","qualname":"::arch::RiscV::FT1","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4142},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24317,"byte_end":24320,"line_start":403,"line_end":403,"column_start":5,"column_end":8},"name":"FT2","qualname":"::arch::RiscV::FT2","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4143},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24340,"byte_end":24343,"line_start":404,"line_end":404,"column_start":5,"column_end":8},"name":"FT3","qualname":"::arch::RiscV::FT3","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4144},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24363,"byte_end":24366,"line_start":405,"line_end":405,"column_start":5,"column_end":8},"name":"FT4","qualname":"::arch::RiscV::FT4","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4145},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24386,"byte_end":24389,"line_start":406,"line_end":406,"column_start":5,"column_end":8},"name":"FT5","qualname":"::arch::RiscV::FT5","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4146},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24409,"byte_end":24412,"line_start":407,"line_end":407,"column_start":5,"column_end":8},"name":"FT6","qualname":"::arch::RiscV::FT6","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4147},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24432,"byte_end":24435,"line_start":408,"line_end":408,"column_start":5,"column_end":8},"name":"FT7","qualname":"::arch::RiscV::FT7","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4148},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24455,"byte_end":24458,"line_start":409,"line_end":409,"column_start":5,"column_end":8},"name":"FS0","qualname":"::arch::RiscV::FS0","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4149},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24478,"byte_end":24481,"line_start":410,"line_end":410,"column_start":5,"column_end":8},"name":"FS1","qualname":"::arch::RiscV::FS1","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4150},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24501,"byte_end":24504,"line_start":411,"line_end":411,"column_start":5,"column_end":8},"name":"FA0","qualname":"::arch::RiscV::FA0","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4151},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24524,"byte_end":24527,"line_start":412,"line_end":412,"column_start":5,"column_end":8},"name":"FA1","qualname":"::arch::RiscV::FA1","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4152},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24547,"byte_end":24550,"line_start":413,"line_end":413,"column_start":5,"column_end":8},"name":"FA2","qualname":"::arch::RiscV::FA2","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4153},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24570,"byte_end":24573,"line_start":414,"line_end":414,"column_start":5,"column_end":8},"name":"FA3","qualname":"::arch::RiscV::FA3","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4154},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24593,"byte_end":24596,"line_start":415,"line_end":415,"column_start":5,"column_end":8},"name":"FA4","qualname":"::arch::RiscV::FA4","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4155},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24616,"byte_end":24619,"line_start":416,"line_end":416,"column_start":5,"column_end":8},"name":"FA5","qualname":"::arch::RiscV::FA5","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4156},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24639,"byte_end":24642,"line_start":417,"line_end":417,"column_start":5,"column_end":8},"name":"FA6","qualname":"::arch::RiscV::FA6","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4157},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24662,"byte_end":24665,"line_start":418,"line_end":418,"column_start":5,"column_end":8},"name":"FA7","qualname":"::arch::RiscV::FA7","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4158},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24685,"byte_end":24688,"line_start":419,"line_end":419,"column_start":5,"column_end":8},"name":"FS2","qualname":"::arch::RiscV::FS2","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4159},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24708,"byte_end":24711,"line_start":420,"line_end":420,"column_start":5,"column_end":8},"name":"FS3","qualname":"::arch::RiscV::FS3","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4160},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24731,"byte_end":24734,"line_start":421,"line_end":421,"column_start":5,"column_end":8},"name":"FS4","qualname":"::arch::RiscV::FS4","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4161},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24754,"byte_end":24757,"line_start":422,"line_end":422,"column_start":5,"column_end":8},"name":"FS5","qualname":"::arch::RiscV::FS5","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4162},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24777,"byte_end":24780,"line_start":423,"line_end":423,"column_start":5,"column_end":8},"name":"FS6","qualname":"::arch::RiscV::FS6","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4163},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24800,"byte_end":24803,"line_start":424,"line_end":424,"column_start":5,"column_end":8},"name":"FS7","qualname":"::arch::RiscV::FS7","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4164},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24823,"byte_end":24826,"line_start":425,"line_end":425,"column_start":5,"column_end":8},"name":"FS8","qualname":"::arch::RiscV::FS8","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4165},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24846,"byte_end":24849,"line_start":426,"line_end":426,"column_start":5,"column_end":8},"name":"FS9","qualname":"::arch::RiscV::FS9","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4166},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24869,"byte_end":24873,"line_start":427,"line_end":427,"column_start":5,"column_end":9},"name":"FS10","qualname":"::arch::RiscV::FS10","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4167},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24894,"byte_end":24898,"line_start":428,"line_end":428,"column_start":5,"column_end":9},"name":"FS11","qualname":"::arch::RiscV::FS11","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4168},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24919,"byte_end":24922,"line_start":429,"line_end":429,"column_start":5,"column_end":8},"name":"FT8","qualname":"::arch::RiscV::FT8","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4169},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24942,"byte_end":24945,"line_start":430,"line_end":430,"column_start":5,"column_end":8},"name":"FT9","qualname":"::arch::RiscV::FT9","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4170},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24965,"byte_end":24969,"line_start":431,"line_end":431,"column_start":5,"column_end":9},"name":"FT10","qualname":"::arch::RiscV::FT10","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4171},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":24990,"byte_end":24994,"line_start":432,"line_end":432,"column_start":5,"column_end":9},"name":"FT11","qualname":"::arch::RiscV::FT11","value":"Register","parent":{"krate":0,"index":4043},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4175},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25226,"byte_end":25229,"line_start":439,"line_end":439,"column_start":12,"column_end":15},"name":"X86","qualname":"::arch::X86","value":"","parent":null,"children":[],"decl_id":null,"docs":" Intel i386 architecture specific definitions.","sig":null,"attributes":[{"value":"/ Intel i386 architecture specific definitions.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25016,"byte_end":25065,"line_start":435,"line_end":435,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25066,"byte_end":25069,"line_start":436,"line_end":436,"column_start":1,"column_end":4}},{"value":"/ See Intel386 psABi version 1.1 at the [X86 psABI wiki](https://github.com/hjl-tools/x86-psABI/wiki/X86-psABI).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25070,"byte_end":25184,"line_start":437,"line_end":437,"column_start":1,"column_end":115}}]},{"kind":"Const","id":{"krate":0,"index":4183},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25254,"byte_end":25257,"line_start":442,"line_end":442,"column_start":5,"column_end":8},"name":"EAX","qualname":"::arch::X86::EAX","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4184},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25276,"byte_end":25279,"line_start":443,"line_end":443,"column_start":5,"column_end":8},"name":"ECX","qualname":"::arch::X86::ECX","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4185},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25298,"byte_end":25301,"line_start":444,"line_end":444,"column_start":5,"column_end":8},"name":"EDX","qualname":"::arch::X86::EDX","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4186},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25320,"byte_end":25323,"line_start":445,"line_end":445,"column_start":5,"column_end":8},"name":"EBX","qualname":"::arch::X86::EBX","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4187},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25342,"byte_end":25345,"line_start":446,"line_end":446,"column_start":5,"column_end":8},"name":"ESP","qualname":"::arch::X86::ESP","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4188},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25364,"byte_end":25367,"line_start":447,"line_end":447,"column_start":5,"column_end":8},"name":"EBP","qualname":"::arch::X86::EBP","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4189},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25386,"byte_end":25389,"line_start":448,"line_end":448,"column_start":5,"column_end":8},"name":"ESI","qualname":"::arch::X86::ESI","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4190},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25408,"byte_end":25411,"line_start":449,"line_end":449,"column_start":5,"column_end":8},"name":"EDI","qualname":"::arch::X86::EDI","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4191},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25527,"byte_end":25529,"line_start":452,"line_end":452,"column_start":5,"column_end":7},"name":"RA","qualname":"::arch::X86::RA","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4192},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25548,"byte_end":25551,"line_start":454,"line_end":454,"column_start":5,"column_end":8},"name":"ST0","qualname":"::arch::X86::ST0","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4193},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25571,"byte_end":25574,"line_start":455,"line_end":455,"column_start":5,"column_end":8},"name":"ST1","qualname":"::arch::X86::ST1","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4194},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25594,"byte_end":25597,"line_start":456,"line_end":456,"column_start":5,"column_end":8},"name":"ST2","qualname":"::arch::X86::ST2","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4195},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25617,"byte_end":25620,"line_start":457,"line_end":457,"column_start":5,"column_end":8},"name":"ST3","qualname":"::arch::X86::ST3","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4196},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25640,"byte_end":25643,"line_start":458,"line_end":458,"column_start":5,"column_end":8},"name":"ST4","qualname":"::arch::X86::ST4","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4197},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25663,"byte_end":25666,"line_start":459,"line_end":459,"column_start":5,"column_end":8},"name":"ST5","qualname":"::arch::X86::ST5","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4198},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25686,"byte_end":25689,"line_start":460,"line_end":460,"column_start":5,"column_end":8},"name":"ST6","qualname":"::arch::X86::ST6","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4199},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25709,"byte_end":25712,"line_start":461,"line_end":461,"column_start":5,"column_end":8},"name":"ST7","qualname":"::arch::X86::ST7","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4200},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25733,"byte_end":25737,"line_start":463,"line_end":463,"column_start":5,"column_end":9},"name":"XMM0","qualname":"::arch::X86::XMM0","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4201},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25758,"byte_end":25762,"line_start":464,"line_end":464,"column_start":5,"column_end":9},"name":"XMM1","qualname":"::arch::X86::XMM1","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4202},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25783,"byte_end":25787,"line_start":465,"line_end":465,"column_start":5,"column_end":9},"name":"XMM2","qualname":"::arch::X86::XMM2","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4203},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25808,"byte_end":25812,"line_start":466,"line_end":466,"column_start":5,"column_end":9},"name":"XMM3","qualname":"::arch::X86::XMM3","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4204},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25833,"byte_end":25837,"line_start":467,"line_end":467,"column_start":5,"column_end":9},"name":"XMM4","qualname":"::arch::X86::XMM4","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4205},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25858,"byte_end":25862,"line_start":468,"line_end":468,"column_start":5,"column_end":9},"name":"XMM5","qualname":"::arch::X86::XMM5","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4206},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25883,"byte_end":25887,"line_start":469,"line_end":469,"column_start":5,"column_end":9},"name":"XMM6","qualname":"::arch::X86::XMM6","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4207},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25908,"byte_end":25912,"line_start":470,"line_end":470,"column_start":5,"column_end":9},"name":"XMM7","qualname":"::arch::X86::XMM7","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4208},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25934,"byte_end":25937,"line_start":472,"line_end":472,"column_start":5,"column_end":8},"name":"MM0","qualname":"::arch::X86::MM0","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4209},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25957,"byte_end":25960,"line_start":473,"line_end":473,"column_start":5,"column_end":8},"name":"MM1","qualname":"::arch::X86::MM1","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4210},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":25980,"byte_end":25983,"line_start":474,"line_end":474,"column_start":5,"column_end":8},"name":"MM2","qualname":"::arch::X86::MM2","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4211},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26003,"byte_end":26006,"line_start":475,"line_end":475,"column_start":5,"column_end":8},"name":"MM3","qualname":"::arch::X86::MM3","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4212},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26026,"byte_end":26029,"line_start":476,"line_end":476,"column_start":5,"column_end":8},"name":"MM4","qualname":"::arch::X86::MM4","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4213},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26049,"byte_end":26052,"line_start":477,"line_end":477,"column_start":5,"column_end":8},"name":"MM5","qualname":"::arch::X86::MM5","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4214},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26072,"byte_end":26075,"line_start":478,"line_end":478,"column_start":5,"column_end":8},"name":"MM6","qualname":"::arch::X86::MM6","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4215},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26095,"byte_end":26098,"line_start":479,"line_end":479,"column_start":5,"column_end":8},"name":"MM7","qualname":"::arch::X86::MM7","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4216},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26119,"byte_end":26124,"line_start":481,"line_end":481,"column_start":5,"column_end":10},"name":"MXCSR","qualname":"::arch::X86::MXCSR","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4217},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26147,"byte_end":26149,"line_start":483,"line_end":483,"column_start":5,"column_end":7},"name":"ES","qualname":"::arch::X86::ES","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4218},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26168,"byte_end":26170,"line_start":484,"line_end":484,"column_start":5,"column_end":7},"name":"CS","qualname":"::arch::X86::CS","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4219},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26189,"byte_end":26191,"line_start":485,"line_end":485,"column_start":5,"column_end":7},"name":"SS","qualname":"::arch::X86::SS","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4220},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26210,"byte_end":26212,"line_start":486,"line_end":486,"column_start":5,"column_end":7},"name":"DS","qualname":"::arch::X86::DS","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4221},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26231,"byte_end":26233,"line_start":487,"line_end":487,"column_start":5,"column_end":7},"name":"FS","qualname":"::arch::X86::FS","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4222},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26252,"byte_end":26254,"line_start":488,"line_end":488,"column_start":5,"column_end":7},"name":"GS","qualname":"::arch::X86::GS","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4223},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26274,"byte_end":26276,"line_start":490,"line_end":490,"column_start":5,"column_end":7},"name":"TR","qualname":"::arch::X86::TR","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4224},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26295,"byte_end":26299,"line_start":491,"line_end":491,"column_start":5,"column_end":9},"name":"LDTR","qualname":"::arch::X86::LDTR","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4225},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26321,"byte_end":26328,"line_start":493,"line_end":493,"column_start":5,"column_end":12},"name":"FS_BASE","qualname":"::arch::X86::FS_BASE","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4226},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26352,"byte_end":26359,"line_start":494,"line_end":494,"column_start":5,"column_end":12},"name":"GS_BASE","qualname":"::arch::X86::GS_BASE","value":"Register","parent":{"krate":0,"index":4182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4230},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26587,"byte_end":26593,"line_start":501,"line_end":501,"column_start":12,"column_end":18},"name":"X86_64","qualname":"::arch::X86_64","value":"","parent":null,"children":[],"decl_id":null,"docs":" AMD64 architecture specific definitions.","sig":null,"attributes":[{"value":"/ AMD64 architecture specific definitions.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26384,"byte_end":26428,"line_start":497,"line_end":497,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26429,"byte_end":26432,"line_start":498,"line_end":498,"column_start":1,"column_end":4}},{"value":"/ See x86-64 psABI version 1.0 at the [X86 psABI wiki](https://github.com/hjl-tools/x86-psABI/wiki/X86-psABI).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26433,"byte_end":26545,"line_start":499,"line_end":499,"column_start":1,"column_end":113}}]},{"kind":"Const","id":{"krate":0,"index":4238},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26621,"byte_end":26624,"line_start":504,"line_end":504,"column_start":5,"column_end":8},"name":"RAX","qualname":"::arch::X86_64::RAX","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4239},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26643,"byte_end":26646,"line_start":505,"line_end":505,"column_start":5,"column_end":8},"name":"RDX","qualname":"::arch::X86_64::RDX","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4240},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26665,"byte_end":26668,"line_start":506,"line_end":506,"column_start":5,"column_end":8},"name":"RCX","qualname":"::arch::X86_64::RCX","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4241},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26687,"byte_end":26690,"line_start":507,"line_end":507,"column_start":5,"column_end":8},"name":"RBX","qualname":"::arch::X86_64::RBX","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4242},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26709,"byte_end":26712,"line_start":508,"line_end":508,"column_start":5,"column_end":8},"name":"RSI","qualname":"::arch::X86_64::RSI","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4243},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26731,"byte_end":26734,"line_start":509,"line_end":509,"column_start":5,"column_end":8},"name":"RDI","qualname":"::arch::X86_64::RDI","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4244},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26753,"byte_end":26756,"line_start":510,"line_end":510,"column_start":5,"column_end":8},"name":"RBP","qualname":"::arch::X86_64::RBP","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4245},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26775,"byte_end":26778,"line_start":511,"line_end":511,"column_start":5,"column_end":8},"name":"RSP","qualname":"::arch::X86_64::RSP","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4246},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26798,"byte_end":26800,"line_start":513,"line_end":513,"column_start":5,"column_end":7},"name":"R8","qualname":"::arch::X86_64::R8","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4247},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26818,"byte_end":26820,"line_start":514,"line_end":514,"column_start":5,"column_end":7},"name":"R9","qualname":"::arch::X86_64::R9","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4248},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26838,"byte_end":26841,"line_start":515,"line_end":515,"column_start":5,"column_end":8},"name":"R10","qualname":"::arch::X86_64::R10","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4249},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26861,"byte_end":26864,"line_start":516,"line_end":516,"column_start":5,"column_end":8},"name":"R11","qualname":"::arch::X86_64::R11","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4250},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26884,"byte_end":26887,"line_start":517,"line_end":517,"column_start":5,"column_end":8},"name":"R12","qualname":"::arch::X86_64::R12","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4251},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26907,"byte_end":26910,"line_start":518,"line_end":518,"column_start":5,"column_end":8},"name":"R13","qualname":"::arch::X86_64::R13","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4252},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26930,"byte_end":26933,"line_start":519,"line_end":519,"column_start":5,"column_end":8},"name":"R14","qualname":"::arch::X86_64::R14","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4253},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":26953,"byte_end":26956,"line_start":520,"line_end":520,"column_start":5,"column_end":8},"name":"R15","qualname":"::arch::X86_64::R15","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4254},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27073,"byte_end":27075,"line_start":523,"line_end":523,"column_start":5,"column_end":7},"name":"RA","qualname":"::arch::X86_64::RA","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4255},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27095,"byte_end":27099,"line_start":525,"line_end":525,"column_start":5,"column_end":9},"name":"XMM0","qualname":"::arch::X86_64::XMM0","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4256},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27120,"byte_end":27124,"line_start":526,"line_end":526,"column_start":5,"column_end":9},"name":"XMM1","qualname":"::arch::X86_64::XMM1","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4257},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27145,"byte_end":27149,"line_start":527,"line_end":527,"column_start":5,"column_end":9},"name":"XMM2","qualname":"::arch::X86_64::XMM2","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4258},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27170,"byte_end":27174,"line_start":528,"line_end":528,"column_start":5,"column_end":9},"name":"XMM3","qualname":"::arch::X86_64::XMM3","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4259},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27195,"byte_end":27199,"line_start":529,"line_end":529,"column_start":5,"column_end":9},"name":"XMM4","qualname":"::arch::X86_64::XMM4","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4260},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27220,"byte_end":27224,"line_start":530,"line_end":530,"column_start":5,"column_end":9},"name":"XMM5","qualname":"::arch::X86_64::XMM5","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4261},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27245,"byte_end":27249,"line_start":531,"line_end":531,"column_start":5,"column_end":9},"name":"XMM6","qualname":"::arch::X86_64::XMM6","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4262},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27270,"byte_end":27274,"line_start":532,"line_end":532,"column_start":5,"column_end":9},"name":"XMM7","qualname":"::arch::X86_64::XMM7","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4263},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27296,"byte_end":27300,"line_start":534,"line_end":534,"column_start":5,"column_end":9},"name":"XMM8","qualname":"::arch::X86_64::XMM8","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4264},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27321,"byte_end":27325,"line_start":535,"line_end":535,"column_start":5,"column_end":9},"name":"XMM9","qualname":"::arch::X86_64::XMM9","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4265},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27346,"byte_end":27351,"line_start":536,"line_end":536,"column_start":5,"column_end":10},"name":"XMM10","qualname":"::arch::X86_64::XMM10","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4266},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27373,"byte_end":27378,"line_start":537,"line_end":537,"column_start":5,"column_end":10},"name":"XMM11","qualname":"::arch::X86_64::XMM11","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4267},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27400,"byte_end":27405,"line_start":538,"line_end":538,"column_start":5,"column_end":10},"name":"XMM12","qualname":"::arch::X86_64::XMM12","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4268},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27427,"byte_end":27432,"line_start":539,"line_end":539,"column_start":5,"column_end":10},"name":"XMM13","qualname":"::arch::X86_64::XMM13","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4269},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27454,"byte_end":27459,"line_start":540,"line_end":540,"column_start":5,"column_end":10},"name":"XMM14","qualname":"::arch::X86_64::XMM14","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4270},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27481,"byte_end":27486,"line_start":541,"line_end":541,"column_start":5,"column_end":10},"name":"XMM15","qualname":"::arch::X86_64::XMM15","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4271},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27509,"byte_end":27512,"line_start":543,"line_end":543,"column_start":5,"column_end":8},"name":"ST0","qualname":"::arch::X86_64::ST0","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4272},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27532,"byte_end":27535,"line_start":544,"line_end":544,"column_start":5,"column_end":8},"name":"ST1","qualname":"::arch::X86_64::ST1","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4273},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27555,"byte_end":27558,"line_start":545,"line_end":545,"column_start":5,"column_end":8},"name":"ST2","qualname":"::arch::X86_64::ST2","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4274},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27578,"byte_end":27581,"line_start":546,"line_end":546,"column_start":5,"column_end":8},"name":"ST3","qualname":"::arch::X86_64::ST3","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4275},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27601,"byte_end":27604,"line_start":547,"line_end":547,"column_start":5,"column_end":8},"name":"ST4","qualname":"::arch::X86_64::ST4","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4276},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27624,"byte_end":27627,"line_start":548,"line_end":548,"column_start":5,"column_end":8},"name":"ST5","qualname":"::arch::X86_64::ST5","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4277},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27647,"byte_end":27650,"line_start":549,"line_end":549,"column_start":5,"column_end":8},"name":"ST6","qualname":"::arch::X86_64::ST6","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4278},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27670,"byte_end":27673,"line_start":550,"line_end":550,"column_start":5,"column_end":8},"name":"ST7","qualname":"::arch::X86_64::ST7","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4279},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27694,"byte_end":27697,"line_start":552,"line_end":552,"column_start":5,"column_end":8},"name":"MM0","qualname":"::arch::X86_64::MM0","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4280},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27717,"byte_end":27720,"line_start":553,"line_end":553,"column_start":5,"column_end":8},"name":"MM1","qualname":"::arch::X86_64::MM1","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4281},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27740,"byte_end":27743,"line_start":554,"line_end":554,"column_start":5,"column_end":8},"name":"MM2","qualname":"::arch::X86_64::MM2","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4282},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27763,"byte_end":27766,"line_start":555,"line_end":555,"column_start":5,"column_end":8},"name":"MM3","qualname":"::arch::X86_64::MM3","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4283},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27786,"byte_end":27789,"line_start":556,"line_end":556,"column_start":5,"column_end":8},"name":"MM4","qualname":"::arch::X86_64::MM4","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4284},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27809,"byte_end":27812,"line_start":557,"line_end":557,"column_start":5,"column_end":8},"name":"MM5","qualname":"::arch::X86_64::MM5","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4285},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27832,"byte_end":27835,"line_start":558,"line_end":558,"column_start":5,"column_end":8},"name":"MM6","qualname":"::arch::X86_64::MM6","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4286},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27855,"byte_end":27858,"line_start":559,"line_end":559,"column_start":5,"column_end":8},"name":"MM7","qualname":"::arch::X86_64::MM7","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4287},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27879,"byte_end":27885,"line_start":561,"line_end":561,"column_start":5,"column_end":11},"name":"RFLAGS","qualname":"::arch::X86_64::RFLAGS","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4288},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27908,"byte_end":27910,"line_start":562,"line_end":562,"column_start":5,"column_end":7},"name":"ES","qualname":"::arch::X86_64::ES","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4289},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27929,"byte_end":27931,"line_start":563,"line_end":563,"column_start":5,"column_end":7},"name":"CS","qualname":"::arch::X86_64::CS","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4290},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27950,"byte_end":27952,"line_start":564,"line_end":564,"column_start":5,"column_end":7},"name":"SS","qualname":"::arch::X86_64::SS","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4291},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27971,"byte_end":27973,"line_start":565,"line_end":565,"column_start":5,"column_end":7},"name":"DS","qualname":"::arch::X86_64::DS","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4292},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":27992,"byte_end":27994,"line_start":566,"line_end":566,"column_start":5,"column_end":7},"name":"FS","qualname":"::arch::X86_64::FS","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4293},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28013,"byte_end":28015,"line_start":567,"line_end":567,"column_start":5,"column_end":7},"name":"GS","qualname":"::arch::X86_64::GS","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4294},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28035,"byte_end":28042,"line_start":569,"line_end":569,"column_start":5,"column_end":12},"name":"FS_BASE","qualname":"::arch::X86_64::FS_BASE","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4295},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28066,"byte_end":28073,"line_start":570,"line_end":570,"column_start":5,"column_end":12},"name":"GS_BASE","qualname":"::arch::X86_64::GS_BASE","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4296},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28098,"byte_end":28100,"line_start":572,"line_end":572,"column_start":5,"column_end":7},"name":"TR","qualname":"::arch::X86_64::TR","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4297},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28119,"byte_end":28123,"line_start":573,"line_end":573,"column_start":5,"column_end":9},"name":"LDTR","qualname":"::arch::X86_64::LDTR","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4298},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28144,"byte_end":28149,"line_start":574,"line_end":574,"column_start":5,"column_end":10},"name":"MXCSR","qualname":"::arch::X86_64::MXCSR","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4299},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28171,"byte_end":28174,"line_start":575,"line_end":575,"column_start":5,"column_end":8},"name":"FCW","qualname":"::arch::X86_64::FCW","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4300},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28194,"byte_end":28197,"line_start":576,"line_end":576,"column_start":5,"column_end":8},"name":"FSW","qualname":"::arch::X86_64::FSW","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4301},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28218,"byte_end":28223,"line_start":578,"line_end":578,"column_start":5,"column_end":10},"name":"XMM16","qualname":"::arch::X86_64::XMM16","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4302},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28245,"byte_end":28250,"line_start":579,"line_end":579,"column_start":5,"column_end":10},"name":"XMM17","qualname":"::arch::X86_64::XMM17","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4303},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28272,"byte_end":28277,"line_start":580,"line_end":580,"column_start":5,"column_end":10},"name":"XMM18","qualname":"::arch::X86_64::XMM18","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4304},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28299,"byte_end":28304,"line_start":581,"line_end":581,"column_start":5,"column_end":10},"name":"XMM19","qualname":"::arch::X86_64::XMM19","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4305},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28326,"byte_end":28331,"line_start":582,"line_end":582,"column_start":5,"column_end":10},"name":"XMM20","qualname":"::arch::X86_64::XMM20","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4306},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28353,"byte_end":28358,"line_start":583,"line_end":583,"column_start":5,"column_end":10},"name":"XMM21","qualname":"::arch::X86_64::XMM21","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4307},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28380,"byte_end":28385,"line_start":584,"line_end":584,"column_start":5,"column_end":10},"name":"XMM22","qualname":"::arch::X86_64::XMM22","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4308},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28407,"byte_end":28412,"line_start":585,"line_end":585,"column_start":5,"column_end":10},"name":"XMM23","qualname":"::arch::X86_64::XMM23","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4309},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28434,"byte_end":28439,"line_start":586,"line_end":586,"column_start":5,"column_end":10},"name":"XMM24","qualname":"::arch::X86_64::XMM24","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4310},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28461,"byte_end":28466,"line_start":587,"line_end":587,"column_start":5,"column_end":10},"name":"XMM25","qualname":"::arch::X86_64::XMM25","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4311},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28488,"byte_end":28493,"line_start":588,"line_end":588,"column_start":5,"column_end":10},"name":"XMM26","qualname":"::arch::X86_64::XMM26","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4312},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28515,"byte_end":28520,"line_start":589,"line_end":589,"column_start":5,"column_end":10},"name":"XMM27","qualname":"::arch::X86_64::XMM27","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4313},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28542,"byte_end":28547,"line_start":590,"line_end":590,"column_start":5,"column_end":10},"name":"XMM28","qualname":"::arch::X86_64::XMM28","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4314},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28569,"byte_end":28574,"line_start":591,"line_end":591,"column_start":5,"column_end":10},"name":"XMM29","qualname":"::arch::X86_64::XMM29","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4315},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28596,"byte_end":28601,"line_start":592,"line_end":592,"column_start":5,"column_end":10},"name":"XMM30","qualname":"::arch::X86_64::XMM30","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4316},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28623,"byte_end":28628,"line_start":593,"line_end":593,"column_start":5,"column_end":10},"name":"XMM31","qualname":"::arch::X86_64::XMM31","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4317},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28651,"byte_end":28653,"line_start":595,"line_end":595,"column_start":5,"column_end":7},"name":"K0","qualname":"::arch::X86_64::K0","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4318},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28673,"byte_end":28675,"line_start":596,"line_end":596,"column_start":5,"column_end":7},"name":"K1","qualname":"::arch::X86_64::K1","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4319},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28695,"byte_end":28697,"line_start":597,"line_end":597,"column_start":5,"column_end":7},"name":"K2","qualname":"::arch::X86_64::K2","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4320},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28717,"byte_end":28719,"line_start":598,"line_end":598,"column_start":5,"column_end":7},"name":"K3","qualname":"::arch::X86_64::K3","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4321},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28739,"byte_end":28741,"line_start":599,"line_end":599,"column_start":5,"column_end":7},"name":"K4","qualname":"::arch::X86_64::K4","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4322},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28761,"byte_end":28763,"line_start":600,"line_end":600,"column_start":5,"column_end":7},"name":"K5","qualname":"::arch::X86_64::K5","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4323},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28783,"byte_end":28785,"line_start":601,"line_end":601,"column_start":5,"column_end":7},"name":"K6","qualname":"::arch::X86_64::K6","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4324},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/arch.rs","byte_start":28805,"byte_end":28807,"line_start":602,"line_end":602,"column_start":5,"column_end":7},"name":"K7","qualname":"::arch::X86_64::K7","value":"Register","parent":{"krate":0,"index":4237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":39},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"constants","qualname":"::constants","value":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":4339},{"krate":0,"index":4342},{"krate":0,"index":4344},{"krate":0,"index":4346},{"krate":0,"index":4347},{"krate":0,"index":4348},{"krate":0,"index":4351},{"krate":0,"index":4352},{"krate":0,"index":4354},{"krate":0,"index":4357},{"krate":0,"index":4359},{"krate":0,"index":4328},{"krate":0,"index":4329},{"krate":0,"index":4330},{"krate":0,"index":4331},{"krate":0,"index":4332},{"krate":0,"index":4333},{"krate":0,"index":4334},{"krate":0,"index":4335},{"krate":0,"index":4337},{"krate":0,"index":4373},{"krate":0,"index":4376},{"krate":0,"index":4378},{"krate":0,"index":4380},{"krate":0,"index":4381},{"krate":0,"index":4382},{"krate":0,"index":4385},{"krate":0,"index":4386},{"krate":0,"index":4388},{"krate":0,"index":4391},{"krate":0,"index":4393},{"krate":0,"index":4361},{"krate":0,"index":4362},{"krate":0,"index":4363},{"krate":0,"index":4364},{"krate":0,"index":4365},{"krate":0,"index":4366},{"krate":0,"index":4367},{"krate":0,"index":4368},{"krate":0,"index":4369},{"krate":0,"index":4371},{"krate":0,"index":4407},{"krate":0,"index":4410},{"krate":0,"index":4412},{"krate":0,"index":4414},{"krate":0,"index":4415},{"krate":0,"index":4416},{"krate":0,"index":4419},{"krate":0,"index":4420},{"krate":0,"index":4422},{"krate":0,"index":4425},{"krate":0,"index":4427},{"krate":0,"index":4395},{"krate":0,"index":4396},{"krate":0,"index":4397},{"krate":0,"index":4398},{"krate":0,"index":4399},{"krate":0,"index":4400},{"krate":0,"index":4401},{"krate":0,"index":4402},{"krate":0,"index":4403},{"krate":0,"index":4405},{"krate":0,"index":4465},{"krate":0,"index":4468},{"krate":0,"index":4470},{"krate":0,"index":4472},{"krate":0,"index":4473},{"krate":0,"index":4474},{"krate":0,"index":4477},{"krate":0,"index":4478},{"krate":0,"index":4480},{"krate":0,"index":4483},{"krate":0,"index":4485},{"krate":0,"index":4429},{"krate":0,"index":4430},{"krate":0,"index":4431},{"krate":0,"index":4432},{"krate":0,"index":4433},{"krate":0,"index":4434},{"krate":0,"index":4435},{"krate":0,"index":4436},{"krate":0,"index":4437},{"krate":0,"index":4438},{"krate":0,"index":4439},{"krate":0,"index":4440},{"krate":0,"index":4441},{"krate":0,"index":4442},{"krate":0,"index":4443},{"krate":0,"index":4444},{"krate":0,"index":4445},{"krate":0,"index":4446},{"krate":0,"index":4447},{"krate":0,"index":4448},{"krate":0,"index":4449},{"krate":0,"index":4450},{"krate":0,"index":4451},{"krate":0,"index":4452},{"krate":0,"index":4453},{"krate":0,"index":4454},{"krate":0,"index":4455},{"krate":0,"index":4456},{"krate":0,"index":4457},{"krate":0,"index":4458},{"krate":0,"index":4459},{"krate":0,"index":4460},{"krate":0,"index":4461},{"krate":0,"index":4463},{"krate":0,"index":4493},{"krate":0,"index":4496},{"krate":0,"index":4498},{"krate":0,"index":4500},{"krate":0,"index":4501},{"krate":0,"index":4502},{"krate":0,"index":4505},{"krate":0,"index":4506},{"krate":0,"index":4508},{"krate":0,"index":4511},{"krate":0,"index":4513},{"krate":0,"index":4487},{"krate":0,"index":4488},{"krate":0,"index":4489},{"krate":0,"index":4491},{"krate":0,"index":4632},{"krate":0,"index":4635},{"krate":0,"index":4637},{"krate":0,"index":4639},{"krate":0,"index":4640},{"krate":0,"index":4641},{"krate":0,"index":4644},{"krate":0,"index":4645},{"krate":0,"index":4647},{"krate":0,"index":4650},{"krate":0,"index":4652},{"krate":0,"index":4515},{"krate":0,"index":4516},{"krate":0,"index":4517},{"krate":0,"index":4518},{"krate":0,"index":4519},{"krate":0,"index":4520},{"krate":0,"index":4521},{"krate":0,"index":4522},{"krate":0,"index":4523},{"krate":0,"index":4524},{"krate":0,"index":4525},{"krate":0,"index":4526},{"krate":0,"index":4527},{"krate":0,"index":4528},{"krate":0,"index":4529},{"krate":0,"index":4530},{"krate":0,"index":4531},{"krate":0,"index":4532},{"krate":0,"index":4533},{"krate":0,"index":4534},{"krate":0,"index":4535},{"krate":0,"index":4536},{"krate":0,"index":4537},{"krate":0,"index":4538},{"krate":0,"index":4539},{"krate":0,"index":4540},{"krate":0,"index":4541},{"krate":0,"index":4542},{"krate":0,"index":4543},{"krate":0,"index":4544},{"krate":0,"index":4545},{"krate":0,"index":4546},{"krate":0,"index":4547},{"krate":0,"index":4548},{"krate":0,"index":4549},{"krate":0,"index":4550},{"krate":0,"index":4551},{"krate":0,"index":4552},{"krate":0,"index":4553},{"krate":0,"index":4554},{"krate":0,"index":4555},{"krate":0,"index":4556},{"krate":0,"index":4557},{"krate":0,"index":4558},{"krate":0,"index":4559},{"krate":0,"index":4560},{"krate":0,"index":4561},{"krate":0,"index":4562},{"krate":0,"index":4563},{"krate":0,"index":4564},{"krate":0,"index":4565},{"krate":0,"index":4566},{"krate":0,"index":4567},{"krate":0,"index":4568},{"krate":0,"index":4569},{"krate":0,"index":4570},{"krate":0,"index":4571},{"krate":0,"index":4572},{"krate":0,"index":4573},{"krate":0,"index":4574},{"krate":0,"index":4575},{"krate":0,"index":4576},{"krate":0,"index":4577},{"krate":0,"index":4578},{"krate":0,"index":4579},{"krate":0,"index":4580},{"krate":0,"index":4581},{"krate":0,"index":4582},{"krate":0,"index":4583},{"krate":0,"index":4584},{"krate":0,"index":4585},{"krate":0,"index":4586},{"krate":0,"index":4587},{"krate":0,"index":4588},{"krate":0,"index":4589},{"krate":0,"index":4590},{"krate":0,"index":4591},{"krate":0,"index":4592},{"krate":0,"index":4593},{"krate":0,"index":4594},{"krate":0,"index":4595},{"krate":0,"index":4596},{"krate":0,"index":4597},{"krate":0,"index":4598},{"krate":0,"index":4599},{"krate":0,"index":4600},{"krate":0,"index":4601},{"krate":0,"index":4602},{"krate":0,"index":4603},{"krate":0,"index":4604},{"krate":0,"index":4605},{"krate":0,"index":4606},{"krate":0,"index":4607},{"krate":0,"index":4608},{"krate":0,"index":4609},{"krate":0,"index":4610},{"krate":0,"index":4611},{"krate":0,"index":4612},{"krate":0,"index":4613},{"krate":0,"index":4614},{"krate":0,"index":4615},{"krate":0,"index":4616},{"krate":0,"index":4617},{"krate":0,"index":4618},{"krate":0,"index":4619},{"krate":0,"index":4620},{"krate":0,"index":4621},{"krate":0,"index":4622},{"krate":0,"index":4623},{"krate":0,"index":4624},{"krate":0,"index":4625},{"krate":0,"index":4626},{"krate":0,"index":4627},{"krate":0,"index":4628},{"krate":0,"index":4630},{"krate":0,"index":4923},{"krate":0,"index":4926},{"krate":0,"index":4928},{"krate":0,"index":4930},{"krate":0,"index":4931},{"krate":0,"index":4932},{"krate":0,"index":4935},{"krate":0,"index":4936},{"krate":0,"index":4938},{"krate":0,"index":4941},{"krate":0,"index":4943},{"krate":0,"index":4654},{"krate":0,"index":4655},{"krate":0,"index":4656},{"krate":0,"index":4657},{"krate":0,"index":4658},{"krate":0,"index":4659},{"krate":0,"index":4660},{"krate":0,"index":4661},{"krate":0,"index":4662},{"krate":0,"index":4663},{"krate":0,"index":4664},{"krate":0,"index":4665},{"krate":0,"index":4666},{"krate":0,"index":4667},{"krate":0,"index":4668},{"krate":0,"index":4669},{"krate":0,"index":4670},{"krate":0,"index":4671},{"krate":0,"index":4672},{"krate":0,"index":4673},{"krate":0,"index":4674},{"krate":0,"index":4675},{"krate":0,"index":4676},{"krate":0,"index":4677},{"krate":0,"index":4678},{"krate":0,"index":4679},{"krate":0,"index":4680},{"krate":0,"index":4681},{"krate":0,"index":4682},{"krate":0,"index":4683},{"krate":0,"index":4684},{"krate":0,"index":4685},{"krate":0,"index":4686},{"krate":0,"index":4687},{"krate":0,"index":4688},{"krate":0,"index":4689},{"krate":0,"index":4690},{"krate":0,"index":4691},{"krate":0,"index":4692},{"krate":0,"index":4693},{"krate":0,"index":4694},{"krate":0,"index":4695},{"krate":0,"index":4696},{"krate":0,"index":4697},{"krate":0,"index":4698},{"krate":0,"index":4699},{"krate":0,"index":4700},{"krate":0,"index":4701},{"krate":0,"index":4702},{"krate":0,"index":4703},{"krate":0,"index":4704},{"krate":0,"index":4705},{"krate":0,"index":4706},{"krate":0,"index":4707},{"krate":0,"index":4708},{"krate":0,"index":4709},{"krate":0,"index":4710},{"krate":0,"index":4711},{"krate":0,"index":4712},{"krate":0,"index":4713},{"krate":0,"index":4714},{"krate":0,"index":4715},{"krate":0,"index":4716},{"krate":0,"index":4717},{"krate":0,"index":4718},{"krate":0,"index":4719},{"krate":0,"index":4720},{"krate":0,"index":4721},{"krate":0,"index":4722},{"krate":0,"index":4723},{"krate":0,"index":4724},{"krate":0,"index":4725},{"krate":0,"index":4726},{"krate":0,"index":4727},{"krate":0,"index":4728},{"krate":0,"index":4729},{"krate":0,"index":4730},{"krate":0,"index":4731},{"krate":0,"index":4732},{"krate":0,"index":4733},{"krate":0,"index":4734},{"krate":0,"index":4735},{"krate":0,"index":4736},{"krate":0,"index":4737},{"krate":0,"index":4738},{"krate":0,"index":4739},{"krate":0,"index":4740},{"krate":0,"index":4741},{"krate":0,"index":4742},{"krate":0,"index":4743},{"krate":0,"index":4744},{"krate":0,"index":4745},{"krate":0,"index":4746},{"krate":0,"index":4747},{"krate":0,"index":4748},{"krate":0,"index":4749},{"krate":0,"index":4750},{"krate":0,"index":4751},{"krate":0,"index":4752},{"krate":0,"index":4753},{"krate":0,"index":4754},{"krate":0,"index":4755},{"krate":0,"index":4756},{"krate":0,"index":4757},{"krate":0,"index":4758},{"krate":0,"index":4759},{"krate":0,"index":4760},{"krate":0,"index":4761},{"krate":0,"index":4762},{"krate":0,"index":4763},{"krate":0,"index":4764},{"krate":0,"index":4765},{"krate":0,"index":4766},{"krate":0,"index":4767},{"krate":0,"index":4768},{"krate":0,"index":4769},{"krate":0,"index":4770},{"krate":0,"index":4771},{"krate":0,"index":4772},{"krate":0,"index":4773},{"krate":0,"index":4774},{"krate":0,"index":4775},{"krate":0,"index":4776},{"krate":0,"index":4777},{"krate":0,"index":4778},{"krate":0,"index":4779},{"krate":0,"index":4780},{"krate":0,"index":4781},{"krate":0,"index":4782},{"krate":0,"index":4783},{"krate":0,"index":4784},{"krate":0,"index":4785},{"krate":0,"index":4786},{"krate":0,"index":4787},{"krate":0,"index":4788},{"krate":0,"index":4789},{"krate":0,"index":4790},{"krate":0,"index":4791},{"krate":0,"index":4792},{"krate":0,"index":4793},{"krate":0,"index":4794},{"krate":0,"index":4795},{"krate":0,"index":4796},{"krate":0,"index":4797},{"krate":0,"index":4798},{"krate":0,"index":4799},{"krate":0,"index":4800},{"krate":0,"index":4801},{"krate":0,"index":4802},{"krate":0,"index":4803},{"krate":0,"index":4804},{"krate":0,"index":4805},{"krate":0,"index":4806},{"krate":0,"index":4807},{"krate":0,"index":4808},{"krate":0,"index":4809},{"krate":0,"index":4810},{"krate":0,"index":4811},{"krate":0,"index":4812},{"krate":0,"index":4813},{"krate":0,"index":4814},{"krate":0,"index":4815},{"krate":0,"index":4816},{"krate":0,"index":4817},{"krate":0,"index":4818},{"krate":0,"index":4819},{"krate":0,"index":4820},{"krate":0,"index":4821},{"krate":0,"index":4822},{"krate":0,"index":4823},{"krate":0,"index":4824},{"krate":0,"index":4825},{"krate":0,"index":4826},{"krate":0,"index":4827},{"krate":0,"index":4828},{"krate":0,"index":4829},{"krate":0,"index":4830},{"krate":0,"index":4831},{"krate":0,"index":4832},{"krate":0,"index":4833},{"krate":0,"index":4834},{"krate":0,"index":4835},{"krate":0,"index":4836},{"krate":0,"index":4837},{"krate":0,"index":4838},{"krate":0,"index":4839},{"krate":0,"index":4840},{"krate":0,"index":4841},{"krate":0,"index":4842},{"krate":0,"index":4843},{"krate":0,"index":4844},{"krate":0,"index":4845},{"krate":0,"index":4846},{"krate":0,"index":4847},{"krate":0,"index":4848},{"krate":0,"index":4849},{"krate":0,"index":4850},{"krate":0,"index":4851},{"krate":0,"index":4852},{"krate":0,"index":4853},{"krate":0,"index":4854},{"krate":0,"index":4855},{"krate":0,"index":4856},{"krate":0,"index":4857},{"krate":0,"index":4858},{"krate":0,"index":4859},{"krate":0,"index":4860},{"krate":0,"index":4861},{"krate":0,"index":4862},{"krate":0,"index":4863},{"krate":0,"index":4864},{"krate":0,"index":4865},{"krate":0,"index":4866},{"krate":0,"index":4867},{"krate":0,"index":4868},{"krate":0,"index":4869},{"krate":0,"index":4870},{"krate":0,"index":4871},{"krate":0,"index":4872},{"krate":0,"index":4873},{"krate":0,"index":4874},{"krate":0,"index":4875},{"krate":0,"index":4876},{"krate":0,"index":4877},{"krate":0,"index":4878},{"krate":0,"index":4879},{"krate":0,"index":4880},{"krate":0,"index":4881},{"krate":0,"index":4882},{"krate":0,"index":4883},{"krate":0,"index":4884},{"krate":0,"index":4885},{"krate":0,"index":4886},{"krate":0,"index":4887},{"krate":0,"index":4888},{"krate":0,"index":4889},{"krate":0,"index":4890},{"krate":0,"index":4891},{"krate":0,"index":4892},{"krate":0,"index":4893},{"krate":0,"index":4894},{"krate":0,"index":4895},{"krate":0,"index":4896},{"krate":0,"index":4897},{"krate":0,"index":4898},{"krate":0,"index":4899},{"krate":0,"index":4900},{"krate":0,"index":4901},{"krate":0,"index":4902},{"krate":0,"index":4903},{"krate":0,"index":4904},{"krate":0,"index":4905},{"krate":0,"index":4906},{"krate":0,"index":4907},{"krate":0,"index":4908},{"krate":0,"index":4909},{"krate":0,"index":4910},{"krate":0,"index":4911},{"krate":0,"index":4912},{"krate":0,"index":4913},{"krate":0,"index":4914},{"krate":0,"index":4915},{"krate":0,"index":4916},{"krate":0,"index":4917},{"krate":0,"index":4918},{"krate":0,"index":4919},{"krate":0,"index":4921},{"krate":0,"index":4997},{"krate":0,"index":5000},{"krate":0,"index":5002},{"krate":0,"index":5004},{"krate":0,"index":5005},{"krate":0,"index":5006},{"krate":0,"index":5009},{"krate":0,"index":5010},{"krate":0,"index":5012},{"krate":0,"index":5015},{"krate":0,"index":5017},{"krate":0,"index":4945},{"krate":0,"index":4946},{"krate":0,"index":4947},{"krate":0,"index":4948},{"krate":0,"index":4949},{"krate":0,"index":4950},{"krate":0,"index":4951},{"krate":0,"index":4952},{"krate":0,"index":4953},{"krate":0,"index":4954},{"krate":0,"index":4955},{"krate":0,"index":4956},{"krate":0,"index":4957},{"krate":0,"index":4958},{"krate":0,"index":4959},{"krate":0,"index":4960},{"krate":0,"index":4961},{"krate":0,"index":4962},{"krate":0,"index":4963},{"krate":0,"index":4964},{"krate":0,"index":4965},{"krate":0,"index":4966},{"krate":0,"index":4967},{"krate":0,"index":4968},{"krate":0,"index":4969},{"krate":0,"index":4970},{"krate":0,"index":4971},{"krate":0,"index":4972},{"krate":0,"index":4973},{"krate":0,"index":4974},{"krate":0,"index":4975},{"krate":0,"index":4976},{"krate":0,"index":4977},{"krate":0,"index":4978},{"krate":0,"index":4979},{"krate":0,"index":4980},{"krate":0,"index":4981},{"krate":0,"index":4982},{"krate":0,"index":4983},{"krate":0,"index":4984},{"krate":0,"index":4985},{"krate":0,"index":4986},{"krate":0,"index":4987},{"krate":0,"index":4988},{"krate":0,"index":4989},{"krate":0,"index":4990},{"krate":0,"index":4991},{"krate":0,"index":4992},{"krate":0,"index":4993},{"krate":0,"index":4995},{"krate":0,"index":5043},{"krate":0,"index":5046},{"krate":0,"index":5048},{"krate":0,"index":5050},{"krate":0,"index":5051},{"krate":0,"index":5052},{"krate":0,"index":5055},{"krate":0,"index":5056},{"krate":0,"index":5058},{"krate":0,"index":5061},{"krate":0,"index":5063},{"krate":0,"index":5019},{"krate":0,"index":5020},{"krate":0,"index":5021},{"krate":0,"index":5022},{"krate":0,"index":5023},{"krate":0,"index":5024},{"krate":0,"index":5025},{"krate":0,"index":5026},{"krate":0,"index":5027},{"krate":0,"index":5028},{"krate":0,"index":5029},{"krate":0,"index":5030},{"krate":0,"index":5031},{"krate":0,"index":5032},{"krate":0,"index":5033},{"krate":0,"index":5034},{"krate":0,"index":5035},{"krate":0,"index":5036},{"krate":0,"index":5037},{"krate":0,"index":5038},{"krate":0,"index":5039},{"krate":0,"index":5041},{"krate":0,"index":5079},{"krate":0,"index":5082},{"krate":0,"index":5084},{"krate":0,"index":5086},{"krate":0,"index":5087},{"krate":0,"index":5088},{"krate":0,"index":5091},{"krate":0,"index":5092},{"krate":0,"index":5094},{"krate":0,"index":5097},{"krate":0,"index":5099},{"krate":0,"index":5065},{"krate":0,"index":5066},{"krate":0,"index":5067},{"krate":0,"index":5068},{"krate":0,"index":5069},{"krate":0,"index":5070},{"krate":0,"index":5071},{"krate":0,"index":5072},{"krate":0,"index":5073},{"krate":0,"index":5074},{"krate":0,"index":5075},{"krate":0,"index":5077},{"krate":0,"index":5110},{"krate":0,"index":5113},{"krate":0,"index":5115},{"krate":0,"index":5117},{"krate":0,"index":5118},{"krate":0,"index":5119},{"krate":0,"index":5122},{"krate":0,"index":5123},{"krate":0,"index":5125},{"krate":0,"index":5128},{"krate":0,"index":5130},{"krate":0,"index":5101},{"krate":0,"index":5102},{"krate":0,"index":5103},{"krate":0,"index":5104},{"krate":0,"index":5105},{"krate":0,"index":5106},{"krate":0,"index":5108},{"krate":0,"index":5141},{"krate":0,"index":5144},{"krate":0,"index":5146},{"krate":0,"index":5148},{"krate":0,"index":5149},{"krate":0,"index":5150},{"krate":0,"index":5153},{"krate":0,"index":5154},{"krate":0,"index":5156},{"krate":0,"index":5159},{"krate":0,"index":5161},{"krate":0,"index":5132},{"krate":0,"index":5133},{"krate":0,"index":5134},{"krate":0,"index":5135},{"krate":0,"index":5136},{"krate":0,"index":5137},{"krate":0,"index":5139},{"krate":0,"index":5170},{"krate":0,"index":5173},{"krate":0,"index":5175},{"krate":0,"index":5177},{"krate":0,"index":5178},{"krate":0,"index":5179},{"krate":0,"index":5182},{"krate":0,"index":5183},{"krate":0,"index":5185},{"krate":0,"index":5188},{"krate":0,"index":5190},{"krate":0,"index":5163},{"krate":0,"index":5164},{"krate":0,"index":5165},{"krate":0,"index":5166},{"krate":0,"index":5168},{"krate":0,"index":5199},{"krate":0,"index":5202},{"krate":0,"index":5204},{"krate":0,"index":5206},{"krate":0,"index":5207},{"krate":0,"index":5208},{"krate":0,"index":5211},{"krate":0,"index":5212},{"krate":0,"index":5214},{"krate":0,"index":5217},{"krate":0,"index":5219},{"krate":0,"index":5192},{"krate":0,"index":5193},{"krate":0,"index":5194},{"krate":0,"index":5195},{"krate":0,"index":5197},{"krate":0,"index":5228},{"krate":0,"index":5231},{"krate":0,"index":5233},{"krate":0,"index":5235},{"krate":0,"index":5236},{"krate":0,"index":5237},{"krate":0,"index":5240},{"krate":0,"index":5241},{"krate":0,"index":5243},{"krate":0,"index":5246},{"krate":0,"index":5248},{"krate":0,"index":5221},{"krate":0,"index":5222},{"krate":0,"index":5223},{"krate":0,"index":5224},{"krate":0,"index":5226},{"krate":0,"index":5307},{"krate":0,"index":5310},{"krate":0,"index":5312},{"krate":0,"index":5314},{"krate":0,"index":5315},{"krate":0,"index":5316},{"krate":0,"index":5319},{"krate":0,"index":5320},{"krate":0,"index":5322},{"krate":0,"index":5325},{"krate":0,"index":5327},{"krate":0,"index":5250},{"krate":0,"index":5251},{"krate":0,"index":5252},{"krate":0,"index":5253},{"krate":0,"index":5254},{"krate":0,"index":5255},{"krate":0,"index":5256},{"krate":0,"index":5257},{"krate":0,"index":5258},{"krate":0,"index":5259},{"krate":0,"index":5260},{"krate":0,"index":5261},{"krate":0,"index":5262},{"krate":0,"index":5263},{"krate":0,"index":5264},{"krate":0,"index":5265},{"krate":0,"index":5266},{"krate":0,"index":5267},{"krate":0,"index":5268},{"krate":0,"index":5269},{"krate":0,"index":5270},{"krate":0,"index":5271},{"krate":0,"index":5272},{"krate":0,"index":5273},{"krate":0,"index":5274},{"krate":0,"index":5275},{"krate":0,"index":5276},{"krate":0,"index":5277},{"krate":0,"index":5278},{"krate":0,"index":5279},{"krate":0,"index":5280},{"krate":0,"index":5281},{"krate":0,"index":5282},{"krate":0,"index":5283},{"krate":0,"index":5284},{"krate":0,"index":5285},{"krate":0,"index":5286},{"krate":0,"index":5287},{"krate":0,"index":5288},{"krate":0,"index":5289},{"krate":0,"index":5290},{"krate":0,"index":5291},{"krate":0,"index":5292},{"krate":0,"index":5293},{"krate":0,"index":5294},{"krate":0,"index":5295},{"krate":0,"index":5296},{"krate":0,"index":5297},{"krate":0,"index":5298},{"krate":0,"index":5299},{"krate":0,"index":5300},{"krate":0,"index":5301},{"krate":0,"index":5302},{"krate":0,"index":5303},{"krate":0,"index":5305},{"krate":0,"index":44},{"krate":0,"index":5334},{"krate":0,"index":5337},{"krate":0,"index":5339},{"krate":0,"index":5341},{"krate":0,"index":5342},{"krate":0,"index":5343},{"krate":0,"index":5346},{"krate":0,"index":5347},{"krate":0,"index":5349},{"krate":0,"index":5352},{"krate":0,"index":5354},{"krate":0,"index":5329},{"krate":0,"index":5330},{"krate":0,"index":5332},{"krate":0,"index":5364},{"krate":0,"index":5367},{"krate":0,"index":5369},{"krate":0,"index":5371},{"krate":0,"index":5372},{"krate":0,"index":5373},{"krate":0,"index":5376},{"krate":0,"index":5377},{"krate":0,"index":5379},{"krate":0,"index":5382},{"krate":0,"index":5384},{"krate":0,"index":5356},{"krate":0,"index":5357},{"krate":0,"index":5358},{"krate":0,"index":5359},{"krate":0,"index":5360},{"krate":0,"index":5362},{"krate":0,"index":5397},{"krate":0,"index":5400},{"krate":0,"index":5402},{"krate":0,"index":5404},{"krate":0,"index":5405},{"krate":0,"index":5406},{"krate":0,"index":5409},{"krate":0,"index":5410},{"krate":0,"index":5412},{"krate":0,"index":5415},{"krate":0,"index":5417},{"krate":0,"index":5386},{"krate":0,"index":5387},{"krate":0,"index":5388},{"krate":0,"index":5389},{"krate":0,"index":5390},{"krate":0,"index":5391},{"krate":0,"index":5392},{"krate":0,"index":5393},{"krate":0,"index":5395},{"krate":0,"index":5427},{"krate":0,"index":5430},{"krate":0,"index":5432},{"krate":0,"index":5434},{"krate":0,"index":5435},{"krate":0,"index":5436},{"krate":0,"index":5439},{"krate":0,"index":5440},{"krate":0,"index":5442},{"krate":0,"index":5445},{"krate":0,"index":5447},{"krate":0,"index":5419},{"krate":0,"index":5420},{"krate":0,"index":5421},{"krate":0,"index":5422},{"krate":0,"index":5423},{"krate":0,"index":5425},{"krate":0,"index":5455},{"krate":0,"index":5458},{"krate":0,"index":5460},{"krate":0,"index":5462},{"krate":0,"index":5463},{"krate":0,"index":5464},{"krate":0,"index":5467},{"krate":0,"index":5468},{"krate":0,"index":5470},{"krate":0,"index":5473},{"krate":0,"index":5475},{"krate":0,"index":5449},{"krate":0,"index":5450},{"krate":0,"index":5451},{"krate":0,"index":5453},{"krate":0,"index":5483},{"krate":0,"index":5486},{"krate":0,"index":5488},{"krate":0,"index":5490},{"krate":0,"index":5491},{"krate":0,"index":5492},{"krate":0,"index":5495},{"krate":0,"index":5496},{"krate":0,"index":5498},{"krate":0,"index":5501},{"krate":0,"index":5503},{"krate":0,"index":5477},{"krate":0,"index":5478},{"krate":0,"index":5479},{"krate":0,"index":5481},{"krate":0,"index":5516},{"krate":0,"index":5519},{"krate":0,"index":5521},{"krate":0,"index":5523},{"krate":0,"index":5524},{"krate":0,"index":5525},{"krate":0,"index":5528},{"krate":0,"index":5529},{"krate":0,"index":5531},{"krate":0,"index":5534},{"krate":0,"index":5536},{"krate":0,"index":5505},{"krate":0,"index":5506},{"krate":0,"index":5507},{"krate":0,"index":5508},{"krate":0,"index":5509},{"krate":0,"index":5510},{"krate":0,"index":5511},{"krate":0,"index":5512},{"krate":0,"index":5514},{"krate":0,"index":5545},{"krate":0,"index":5548},{"krate":0,"index":5550},{"krate":0,"index":5552},{"krate":0,"index":5553},{"krate":0,"index":5554},{"krate":0,"index":5557},{"krate":0,"index":5558},{"krate":0,"index":5560},{"krate":0,"index":5563},{"krate":0,"index":5565},{"krate":0,"index":5538},{"krate":0,"index":5539},{"krate":0,"index":5540},{"krate":0,"index":5541},{"krate":0,"index":5543},{"krate":0,"index":5583},{"krate":0,"index":5586},{"krate":0,"index":5588},{"krate":0,"index":5590},{"krate":0,"index":5591},{"krate":0,"index":5592},{"krate":0,"index":5595},{"krate":0,"index":5596},{"krate":0,"index":5598},{"krate":0,"index":5601},{"krate":0,"index":5603},{"krate":0,"index":5567},{"krate":0,"index":5568},{"krate":0,"index":5569},{"krate":0,"index":5570},{"krate":0,"index":5571},{"krate":0,"index":5572},{"krate":0,"index":5573},{"krate":0,"index":5574},{"krate":0,"index":5575},{"krate":0,"index":5576},{"krate":0,"index":5577},{"krate":0,"index":5578},{"krate":0,"index":5579},{"krate":0,"index":5581},{"krate":0,"index":5615},{"krate":0,"index":5618},{"krate":0,"index":5620},{"krate":0,"index":5622},{"krate":0,"index":5623},{"krate":0,"index":5624},{"krate":0,"index":5627},{"krate":0,"index":5628},{"krate":0,"index":5630},{"krate":0,"index":5633},{"krate":0,"index":5635},{"krate":0,"index":5605},{"krate":0,"index":5606},{"krate":0,"index":5607},{"krate":0,"index":5608},{"krate":0,"index":5609},{"krate":0,"index":5610},{"krate":0,"index":5611},{"krate":0,"index":5613},{"krate":0,"index":5648},{"krate":0,"index":5651},{"krate":0,"index":5653},{"krate":0,"index":5655},{"krate":0,"index":5656},{"krate":0,"index":5657},{"krate":0,"index":5660},{"krate":0,"index":5661},{"krate":0,"index":5663},{"krate":0,"index":5666},{"krate":0,"index":5668},{"krate":0,"index":5637},{"krate":0,"index":5638},{"krate":0,"index":5639},{"krate":0,"index":5640},{"krate":0,"index":5641},{"krate":0,"index":5642},{"krate":0,"index":5643},{"krate":0,"index":5644},{"krate":0,"index":5646},{"krate":0,"index":5688},{"krate":0,"index":5691},{"krate":0,"index":5693},{"krate":0,"index":5695},{"krate":0,"index":5696},{"krate":0,"index":5697},{"krate":0,"index":5700},{"krate":0,"index":5701},{"krate":0,"index":5703},{"krate":0,"index":5706},{"krate":0,"index":5708},{"krate":0,"index":5670},{"krate":0,"index":5671},{"krate":0,"index":5672},{"krate":0,"index":5673},{"krate":0,"index":5674},{"krate":0,"index":5675},{"krate":0,"index":5676},{"krate":0,"index":5677},{"krate":0,"index":5678},{"krate":0,"index":5679},{"krate":0,"index":5680},{"krate":0,"index":5681},{"krate":0,"index":5682},{"krate":0,"index":5683},{"krate":0,"index":5684},{"krate":0,"index":5686},{"krate":0,"index":5722},{"krate":0,"index":5725},{"krate":0,"index":5727},{"krate":0,"index":5729},{"krate":0,"index":5730},{"krate":0,"index":5731},{"krate":0,"index":5734},{"krate":0,"index":5735},{"krate":0,"index":5737},{"krate":0,"index":5740},{"krate":0,"index":5742},{"krate":0,"index":5710},{"krate":0,"index":5711},{"krate":0,"index":5712},{"krate":0,"index":5713},{"krate":0,"index":5714},{"krate":0,"index":5715},{"krate":0,"index":5716},{"krate":0,"index":5717},{"krate":0,"index":5718},{"krate":0,"index":5720},{"krate":0,"index":5924},{"krate":0,"index":5927},{"krate":0,"index":5929},{"krate":0,"index":5931},{"krate":0,"index":5932},{"krate":0,"index":5933},{"krate":0,"index":5936},{"krate":0,"index":5937},{"krate":0,"index":5939},{"krate":0,"index":5942},{"krate":0,"index":5944},{"krate":0,"index":5744},{"krate":0,"index":5745},{"krate":0,"index":5746},{"krate":0,"index":5747},{"krate":0,"index":5748},{"krate":0,"index":5749},{"krate":0,"index":5750},{"krate":0,"index":5751},{"krate":0,"index":5752},{"krate":0,"index":5753},{"krate":0,"index":5754},{"krate":0,"index":5755},{"krate":0,"index":5756},{"krate":0,"index":5757},{"krate":0,"index":5758},{"krate":0,"index":5759},{"krate":0,"index":5760},{"krate":0,"index":5761},{"krate":0,"index":5762},{"krate":0,"index":5763},{"krate":0,"index":5764},{"krate":0,"index":5765},{"krate":0,"index":5766},{"krate":0,"index":5767},{"krate":0,"index":5768},{"krate":0,"index":5769},{"krate":0,"index":5770},{"krate":0,"index":5771},{"krate":0,"index":5772},{"krate":0,"index":5773},{"krate":0,"index":5774},{"krate":0,"index":5775},{"krate":0,"index":5776},{"krate":0,"index":5777},{"krate":0,"index":5778},{"krate":0,"index":5779},{"krate":0,"index":5780},{"krate":0,"index":5781},{"krate":0,"index":5782},{"krate":0,"index":5783},{"krate":0,"index":5784},{"krate":0,"index":5785},{"krate":0,"index":5786},{"krate":0,"index":5787},{"krate":0,"index":5788},{"krate":0,"index":5789},{"krate":0,"index":5790},{"krate":0,"index":5791},{"krate":0,"index":5792},{"krate":0,"index":5793},{"krate":0,"index":5794},{"krate":0,"index":5795},{"krate":0,"index":5796},{"krate":0,"index":5797},{"krate":0,"index":5798},{"krate":0,"index":5799},{"krate":0,"index":5800},{"krate":0,"index":5801},{"krate":0,"index":5802},{"krate":0,"index":5803},{"krate":0,"index":5804},{"krate":0,"index":5805},{"krate":0,"index":5806},{"krate":0,"index":5807},{"krate":0,"index":5808},{"krate":0,"index":5809},{"krate":0,"index":5810},{"krate":0,"index":5811},{"krate":0,"index":5812},{"krate":0,"index":5813},{"krate":0,"index":5814},{"krate":0,"index":5815},{"krate":0,"index":5816},{"krate":0,"index":5817},{"krate":0,"index":5818},{"krate":0,"index":5819},{"krate":0,"index":5820},{"krate":0,"index":5821},{"krate":0,"index":5822},{"krate":0,"index":5823},{"krate":0,"index":5824},{"krate":0,"index":5825},{"krate":0,"index":5826},{"krate":0,"index":5827},{"krate":0,"index":5828},{"krate":0,"index":5829},{"krate":0,"index":5830},{"krate":0,"index":5831},{"krate":0,"index":5832},{"krate":0,"index":5833},{"krate":0,"index":5834},{"krate":0,"index":5835},{"krate":0,"index":5836},{"krate":0,"index":5837},{"krate":0,"index":5838},{"krate":0,"index":5839},{"krate":0,"index":5840},{"krate":0,"index":5841},{"krate":0,"index":5842},{"krate":0,"index":5843},{"krate":0,"index":5844},{"krate":0,"index":5845},{"krate":0,"index":5846},{"krate":0,"index":5847},{"krate":0,"index":5848},{"krate":0,"index":5849},{"krate":0,"index":5850},{"krate":0,"index":5851},{"krate":0,"index":5852},{"krate":0,"index":5853},{"krate":0,"index":5854},{"krate":0,"index":5855},{"krate":0,"index":5856},{"krate":0,"index":5857},{"krate":0,"index":5858},{"krate":0,"index":5859},{"krate":0,"index":5860},{"krate":0,"index":5861},{"krate":0,"index":5862},{"krate":0,"index":5863},{"krate":0,"index":5864},{"krate":0,"index":5865},{"krate":0,"index":5866},{"krate":0,"index":5867},{"krate":0,"index":5868},{"krate":0,"index":5869},{"krate":0,"index":5870},{"krate":0,"index":5871},{"krate":0,"index":5872},{"krate":0,"index":5873},{"krate":0,"index":5874},{"krate":0,"index":5875},{"krate":0,"index":5876},{"krate":0,"index":5877},{"krate":0,"index":5878},{"krate":0,"index":5879},{"krate":0,"index":5880},{"krate":0,"index":5881},{"krate":0,"index":5882},{"krate":0,"index":5883},{"krate":0,"index":5884},{"krate":0,"index":5885},{"krate":0,"index":5886},{"krate":0,"index":5887},{"krate":0,"index":5888},{"krate":0,"index":5889},{"krate":0,"index":5890},{"krate":0,"index":5891},{"krate":0,"index":5892},{"krate":0,"index":5893},{"krate":0,"index":5894},{"krate":0,"index":5895},{"krate":0,"index":5896},{"krate":0,"index":5897},{"krate":0,"index":5898},{"krate":0,"index":5899},{"krate":0,"index":5900},{"krate":0,"index":5901},{"krate":0,"index":5902},{"krate":0,"index":5903},{"krate":0,"index":5904},{"krate":0,"index":5905},{"krate":0,"index":5906},{"krate":0,"index":5907},{"krate":0,"index":5908},{"krate":0,"index":5909},{"krate":0,"index":5910},{"krate":0,"index":5911},{"krate":0,"index":5912},{"krate":0,"index":5913},{"krate":0,"index":5914},{"krate":0,"index":5915},{"krate":0,"index":5916},{"krate":0,"index":5917},{"krate":0,"index":5918},{"krate":0,"index":5919},{"krate":0,"index":5920},{"krate":0,"index":5922},{"krate":0,"index":5966},{"krate":0,"index":5969},{"krate":0,"index":5971},{"krate":0,"index":5973},{"krate":0,"index":5974},{"krate":0,"index":5975},{"krate":0,"index":5978},{"krate":0,"index":5979},{"krate":0,"index":5981},{"krate":0,"index":5984},{"krate":0,"index":5986},{"krate":0,"index":5946},{"krate":0,"index":5947},{"krate":0,"index":5948},{"krate":0,"index":5949},{"krate":0,"index":5950},{"krate":0,"index":5951},{"krate":0,"index":5952},{"krate":0,"index":5953},{"krate":0,"index":5954},{"krate":0,"index":5955},{"krate":0,"index":5956},{"krate":0,"index":5957},{"krate":0,"index":5958},{"krate":0,"index":5959},{"krate":0,"index":5960},{"krate":0,"index":5961},{"krate":0,"index":5962},{"krate":0,"index":5964},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48}],"decl_id":null,"docs":" Constant definitions.","sig":null,"attributes":[{"value":"/ Constant definitions.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":29563,"byte_end":29588,"line_start":18,"line_end":18,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":29589,"byte_end":29592,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The DWARF spec's `DW_AT_*` type is represented as `struct DwAt(u16)`,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":29593,"byte_end":29666,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ `DW_FORM_*` as `DwForm(u16)`, etc.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":29667,"byte_end":29705,"line_start":21,"line_end":21,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":29706,"byte_end":29709,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ There are also exported const definitions for each constant.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":29710,"byte_end":29774,"line_start":23,"line_end":23,"column_start":1,"column_end":65}},{"value":"allow(non_upper_case_globals)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":29776,"byte_end":29809,"line_start":25,"line_end":25,"column_start":1,"column_end":34}},{"value":"allow(missing_docs)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":29810,"byte_end":29833,"line_start":26,"line_end":26,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":4339},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32005,"byte_end":32011,"line_start":104,"line_end":104,"column_start":1,"column_end":7},"name":"DwSect","qualname":"::constants::DwSect","value":"","parent":null,"children":[],"decl_id":null,"docs":" The section type field in a `.dwp` unit index.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4328},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32023,"byte_end":32035,"line_start":105,"line_end":105,"column_start":5,"column_end":17},"name":"DW_SECT_INFO","qualname":"::constants::DW_SECT_INFO","value":"DwSect","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4329},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32045,"byte_end":32059,"line_start":106,"line_end":106,"column_start":5,"column_end":19},"name":"DW_SECT_ABBREV","qualname":"::constants::DW_SECT_ABBREV","value":"DwSect","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4330},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32069,"byte_end":32081,"line_start":107,"line_end":107,"column_start":5,"column_end":17},"name":"DW_SECT_LINE","qualname":"::constants::DW_SECT_LINE","value":"DwSect","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4331},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32091,"byte_end":32107,"line_start":108,"line_end":108,"column_start":5,"column_end":21},"name":"DW_SECT_LOCLISTS","qualname":"::constants::DW_SECT_LOCLISTS","value":"DwSect","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4332},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32117,"byte_end":32136,"line_start":109,"line_end":109,"column_start":5,"column_end":24},"name":"DW_SECT_STR_OFFSETS","qualname":"::constants::DW_SECT_STR_OFFSETS","value":"DwSect","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4333},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32146,"byte_end":32159,"line_start":110,"line_end":110,"column_start":5,"column_end":18},"name":"DW_SECT_MACRO","qualname":"::constants::DW_SECT_MACRO","value":"DwSect","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4334},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32169,"byte_end":32185,"line_start":111,"line_end":111,"column_start":5,"column_end":21},"name":"DW_SECT_RNGLISTS","qualname":"::constants::DW_SECT_RNGLISTS","value":"DwSect","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4373},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32267,"byte_end":32275,"line_start":116,"line_end":116,"column_start":1,"column_end":9},"name":"DwSectV2","qualname":"::constants::DwSectV2","value":"","parent":null,"children":[],"decl_id":null,"docs":" The section type field in a `.dwp` unit index with version 2.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4361},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32287,"byte_end":32302,"line_start":117,"line_end":117,"column_start":5,"column_end":20},"name":"DW_SECT_V2_INFO","qualname":"::constants::DW_SECT_V2_INFO","value":"DwSectV2","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4362},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32312,"byte_end":32328,"line_start":118,"line_end":118,"column_start":5,"column_end":21},"name":"DW_SECT_V2_TYPES","qualname":"::constants::DW_SECT_V2_TYPES","value":"DwSectV2","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4363},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32338,"byte_end":32355,"line_start":119,"line_end":119,"column_start":5,"column_end":22},"name":"DW_SECT_V2_ABBREV","qualname":"::constants::DW_SECT_V2_ABBREV","value":"DwSectV2","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4364},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32365,"byte_end":32380,"line_start":120,"line_end":120,"column_start":5,"column_end":20},"name":"DW_SECT_V2_LINE","qualname":"::constants::DW_SECT_V2_LINE","value":"DwSectV2","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4365},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32390,"byte_end":32404,"line_start":121,"line_end":121,"column_start":5,"column_end":19},"name":"DW_SECT_V2_LOC","qualname":"::constants::DW_SECT_V2_LOC","value":"DwSectV2","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4366},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32414,"byte_end":32436,"line_start":122,"line_end":122,"column_start":5,"column_end":27},"name":"DW_SECT_V2_STR_OFFSETS","qualname":"::constants::DW_SECT_V2_STR_OFFSETS","value":"DwSectV2","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4367},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32446,"byte_end":32464,"line_start":123,"line_end":123,"column_start":5,"column_end":23},"name":"DW_SECT_V2_MACINFO","qualname":"::constants::DW_SECT_V2_MACINFO","value":"DwSectV2","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4368},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32474,"byte_end":32490,"line_start":124,"line_end":124,"column_start":5,"column_end":21},"name":"DW_SECT_V2_MACRO","qualname":"::constants::DW_SECT_V2_MACRO","value":"DwSectV2","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4407},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32586,"byte_end":32590,"line_start":131,"line_end":131,"column_start":1,"column_end":5},"name":"DwUt","qualname":"::constants::DwUt","value":"","parent":null,"children":[],"decl_id":null,"docs":" The unit type field in a unit header.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4395},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32601,"byte_end":32614,"line_start":132,"line_end":132,"column_start":5,"column_end":18},"name":"DW_UT_compile","qualname":"::constants::DW_UT_compile","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4396},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32627,"byte_end":32637,"line_start":133,"line_end":133,"column_start":5,"column_end":15},"name":"DW_UT_type","qualname":"::constants::DW_UT_type","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4397},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32650,"byte_end":32663,"line_start":134,"line_end":134,"column_start":5,"column_end":18},"name":"DW_UT_partial","qualname":"::constants::DW_UT_partial","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4398},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32676,"byte_end":32690,"line_start":135,"line_end":135,"column_start":5,"column_end":19},"name":"DW_UT_skeleton","qualname":"::constants::DW_UT_skeleton","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4399},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32703,"byte_end":32722,"line_start":136,"line_end":136,"column_start":5,"column_end":24},"name":"DW_UT_split_compile","qualname":"::constants::DW_UT_split_compile","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4400},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32735,"byte_end":32751,"line_start":137,"line_end":137,"column_start":5,"column_end":21},"name":"DW_UT_split_type","qualname":"::constants::DW_UT_split_type","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4401},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32764,"byte_end":32777,"line_start":138,"line_end":138,"column_start":5,"column_end":18},"name":"DW_UT_lo_user","qualname":"::constants::DW_UT_lo_user","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4402},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":32790,"byte_end":32803,"line_start":139,"line_end":139,"column_start":5,"column_end":18},"name":"DW_UT_hi_user","qualname":"::constants::DW_UT_hi_user","value":"DwUt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4465},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33200,"byte_end":33205,"line_start":150,"line_end":150,"column_start":1,"column_end":6},"name":"DwCfa","qualname":"::constants::DwCfa","value":"","parent":null,"children":[],"decl_id":null,"docs":" The opcode for a call frame instruction.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4429},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33216,"byte_end":33234,"line_start":151,"line_end":151,"column_start":5,"column_end":23},"name":"DW_CFA_advance_loc","qualname":"::constants::DW_CFA_advance_loc","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4430},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33252,"byte_end":33265,"line_start":152,"line_end":152,"column_start":5,"column_end":18},"name":"DW_CFA_offset","qualname":"::constants::DW_CFA_offset","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4431},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33283,"byte_end":33297,"line_start":153,"line_end":153,"column_start":5,"column_end":19},"name":"DW_CFA_restore","qualname":"::constants::DW_CFA_restore","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4432},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33315,"byte_end":33325,"line_start":154,"line_end":154,"column_start":5,"column_end":15},"name":"DW_CFA_nop","qualname":"::constants::DW_CFA_nop","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4433},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33335,"byte_end":33349,"line_start":155,"line_end":155,"column_start":5,"column_end":19},"name":"DW_CFA_set_loc","qualname":"::constants::DW_CFA_set_loc","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4434},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33362,"byte_end":33381,"line_start":156,"line_end":156,"column_start":5,"column_end":24},"name":"DW_CFA_advance_loc1","qualname":"::constants::DW_CFA_advance_loc1","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4435},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33394,"byte_end":33413,"line_start":157,"line_end":157,"column_start":5,"column_end":24},"name":"DW_CFA_advance_loc2","qualname":"::constants::DW_CFA_advance_loc2","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4436},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33426,"byte_end":33445,"line_start":158,"line_end":158,"column_start":5,"column_end":24},"name":"DW_CFA_advance_loc4","qualname":"::constants::DW_CFA_advance_loc4","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4437},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33458,"byte_end":33480,"line_start":159,"line_end":159,"column_start":5,"column_end":27},"name":"DW_CFA_offset_extended","qualname":"::constants::DW_CFA_offset_extended","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4438},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33493,"byte_end":33516,"line_start":160,"line_end":160,"column_start":5,"column_end":28},"name":"DW_CFA_restore_extended","qualname":"::constants::DW_CFA_restore_extended","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4439},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33529,"byte_end":33545,"line_start":161,"line_end":161,"column_start":5,"column_end":21},"name":"DW_CFA_undefined","qualname":"::constants::DW_CFA_undefined","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4440},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33558,"byte_end":33575,"line_start":162,"line_end":162,"column_start":5,"column_end":22},"name":"DW_CFA_same_value","qualname":"::constants::DW_CFA_same_value","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4441},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33588,"byte_end":33603,"line_start":163,"line_end":163,"column_start":5,"column_end":20},"name":"DW_CFA_register","qualname":"::constants::DW_CFA_register","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4442},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33616,"byte_end":33637,"line_start":164,"line_end":164,"column_start":5,"column_end":26},"name":"DW_CFA_remember_state","qualname":"::constants::DW_CFA_remember_state","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4443},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33650,"byte_end":33670,"line_start":165,"line_end":165,"column_start":5,"column_end":25},"name":"DW_CFA_restore_state","qualname":"::constants::DW_CFA_restore_state","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4444},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33683,"byte_end":33697,"line_start":166,"line_end":166,"column_start":5,"column_end":19},"name":"DW_CFA_def_cfa","qualname":"::constants::DW_CFA_def_cfa","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4445},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33710,"byte_end":33733,"line_start":167,"line_end":167,"column_start":5,"column_end":28},"name":"DW_CFA_def_cfa_register","qualname":"::constants::DW_CFA_def_cfa_register","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4446},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33746,"byte_end":33767,"line_start":168,"line_end":168,"column_start":5,"column_end":26},"name":"DW_CFA_def_cfa_offset","qualname":"::constants::DW_CFA_def_cfa_offset","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4447},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33780,"byte_end":33805,"line_start":169,"line_end":169,"column_start":5,"column_end":30},"name":"DW_CFA_def_cfa_expression","qualname":"::constants::DW_CFA_def_cfa_expression","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4448},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33818,"byte_end":33835,"line_start":170,"line_end":170,"column_start":5,"column_end":22},"name":"DW_CFA_expression","qualname":"::constants::DW_CFA_expression","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4449},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33848,"byte_end":33873,"line_start":171,"line_end":171,"column_start":5,"column_end":30},"name":"DW_CFA_offset_extended_sf","qualname":"::constants::DW_CFA_offset_extended_sf","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4450},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33886,"byte_end":33903,"line_start":172,"line_end":172,"column_start":5,"column_end":22},"name":"DW_CFA_def_cfa_sf","qualname":"::constants::DW_CFA_def_cfa_sf","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4451},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33916,"byte_end":33940,"line_start":173,"line_end":173,"column_start":5,"column_end":29},"name":"DW_CFA_def_cfa_offset_sf","qualname":"::constants::DW_CFA_def_cfa_offset_sf","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4452},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33953,"byte_end":33970,"line_start":174,"line_end":174,"column_start":5,"column_end":22},"name":"DW_CFA_val_offset","qualname":"::constants::DW_CFA_val_offset","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4453},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":33983,"byte_end":34003,"line_start":175,"line_end":175,"column_start":5,"column_end":25},"name":"DW_CFA_val_offset_sf","qualname":"::constants::DW_CFA_val_offset_sf","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4454},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34016,"byte_end":34037,"line_start":176,"line_end":176,"column_start":5,"column_end":26},"name":"DW_CFA_val_expression","qualname":"::constants::DW_CFA_val_expression","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4455},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34051,"byte_end":34065,"line_start":178,"line_end":178,"column_start":5,"column_end":19},"name":"DW_CFA_lo_user","qualname":"::constants::DW_CFA_lo_user","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4456},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34078,"byte_end":34092,"line_start":179,"line_end":179,"column_start":5,"column_end":19},"name":"DW_CFA_hi_user","qualname":"::constants::DW_CFA_hi_user","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4457},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34106,"byte_end":34130,"line_start":181,"line_end":181,"column_start":5,"column_end":29},"name":"DW_CFA_MIPS_advance_loc8","qualname":"::constants::DW_CFA_MIPS_advance_loc8","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4458},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34143,"byte_end":34165,"line_start":182,"line_end":182,"column_start":5,"column_end":27},"name":"DW_CFA_GNU_window_save","qualname":"::constants::DW_CFA_GNU_window_save","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4459},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34178,"byte_end":34198,"line_start":183,"line_end":183,"column_start":5,"column_end":25},"name":"DW_CFA_GNU_args_size","qualname":"::constants::DW_CFA_GNU_args_size","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4460},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34211,"byte_end":34246,"line_start":184,"line_end":184,"column_start":5,"column_end":40},"name":"DW_CFA_GNU_negative_offset_extended","qualname":"::constants::DW_CFA_GNU_negative_offset_extended","value":"DwCfa","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4493},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34361,"byte_end":34371,"line_start":191,"line_end":191,"column_start":1,"column_end":11},"name":"DwChildren","qualname":"::constants::DwChildren","value":"","parent":null,"children":[],"decl_id":null,"docs":" The child determination encodings for DIE attributes.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4487},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34382,"byte_end":34396,"line_start":192,"line_end":192,"column_start":5,"column_end":19},"name":"DW_CHILDREN_no","qualname":"::constants::DW_CHILDREN_no","value":"DwChildren","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4488},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34406,"byte_end":34421,"line_start":193,"line_end":193,"column_start":5,"column_end":20},"name":"DW_CHILDREN_yes","qualname":"::constants::DW_CHILDREN_yes","value":"DwChildren","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4632},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34517,"byte_end":34522,"line_start":200,"line_end":200,"column_start":1,"column_end":6},"name":"DwTag","qualname":"::constants::DwTag","value":"","parent":null,"children":[],"decl_id":null,"docs":" The tag encodings for DIE attributes.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4515},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34534,"byte_end":34545,"line_start":201,"line_end":201,"column_start":5,"column_end":16},"name":"DW_TAG_null","qualname":"::constants::DW_TAG_null","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4516},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34559,"byte_end":34576,"line_start":203,"line_end":203,"column_start":5,"column_end":22},"name":"DW_TAG_array_type","qualname":"::constants::DW_TAG_array_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4517},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34589,"byte_end":34606,"line_start":204,"line_end":204,"column_start":5,"column_end":22},"name":"DW_TAG_class_type","qualname":"::constants::DW_TAG_class_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4518},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34619,"byte_end":34637,"line_start":205,"line_end":205,"column_start":5,"column_end":23},"name":"DW_TAG_entry_point","qualname":"::constants::DW_TAG_entry_point","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4519},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34650,"byte_end":34673,"line_start":206,"line_end":206,"column_start":5,"column_end":28},"name":"DW_TAG_enumeration_type","qualname":"::constants::DW_TAG_enumeration_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4520},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34686,"byte_end":34709,"line_start":207,"line_end":207,"column_start":5,"column_end":28},"name":"DW_TAG_formal_parameter","qualname":"::constants::DW_TAG_formal_parameter","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4521},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34722,"byte_end":34749,"line_start":208,"line_end":208,"column_start":5,"column_end":32},"name":"DW_TAG_imported_declaration","qualname":"::constants::DW_TAG_imported_declaration","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4522},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34762,"byte_end":34774,"line_start":209,"line_end":209,"column_start":5,"column_end":17},"name":"DW_TAG_label","qualname":"::constants::DW_TAG_label","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4523},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34787,"byte_end":34807,"line_start":210,"line_end":210,"column_start":5,"column_end":25},"name":"DW_TAG_lexical_block","qualname":"::constants::DW_TAG_lexical_block","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4524},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34820,"byte_end":34833,"line_start":211,"line_end":211,"column_start":5,"column_end":18},"name":"DW_TAG_member","qualname":"::constants::DW_TAG_member","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4525},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34846,"byte_end":34865,"line_start":212,"line_end":212,"column_start":5,"column_end":24},"name":"DW_TAG_pointer_type","qualname":"::constants::DW_TAG_pointer_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4526},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34878,"byte_end":34899,"line_start":213,"line_end":213,"column_start":5,"column_end":26},"name":"DW_TAG_reference_type","qualname":"::constants::DW_TAG_reference_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4527},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34912,"byte_end":34931,"line_start":214,"line_end":214,"column_start":5,"column_end":24},"name":"DW_TAG_compile_unit","qualname":"::constants::DW_TAG_compile_unit","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4528},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34944,"byte_end":34962,"line_start":215,"line_end":215,"column_start":5,"column_end":23},"name":"DW_TAG_string_type","qualname":"::constants::DW_TAG_string_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4529},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":34975,"byte_end":34996,"line_start":216,"line_end":216,"column_start":5,"column_end":26},"name":"DW_TAG_structure_type","qualname":"::constants::DW_TAG_structure_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4530},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35009,"byte_end":35031,"line_start":217,"line_end":217,"column_start":5,"column_end":27},"name":"DW_TAG_subroutine_type","qualname":"::constants::DW_TAG_subroutine_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4531},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35044,"byte_end":35058,"line_start":218,"line_end":218,"column_start":5,"column_end":19},"name":"DW_TAG_typedef","qualname":"::constants::DW_TAG_typedef","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4532},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35071,"byte_end":35088,"line_start":219,"line_end":219,"column_start":5,"column_end":22},"name":"DW_TAG_union_type","qualname":"::constants::DW_TAG_union_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4533},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35101,"byte_end":35130,"line_start":220,"line_end":220,"column_start":5,"column_end":34},"name":"DW_TAG_unspecified_parameters","qualname":"::constants::DW_TAG_unspecified_parameters","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4534},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35143,"byte_end":35157,"line_start":221,"line_end":221,"column_start":5,"column_end":19},"name":"DW_TAG_variant","qualname":"::constants::DW_TAG_variant","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4535},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35170,"byte_end":35189,"line_start":222,"line_end":222,"column_start":5,"column_end":24},"name":"DW_TAG_common_block","qualname":"::constants::DW_TAG_common_block","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4536},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35202,"byte_end":35225,"line_start":223,"line_end":223,"column_start":5,"column_end":28},"name":"DW_TAG_common_inclusion","qualname":"::constants::DW_TAG_common_inclusion","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4537},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35238,"byte_end":35256,"line_start":224,"line_end":224,"column_start":5,"column_end":23},"name":"DW_TAG_inheritance","qualname":"::constants::DW_TAG_inheritance","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4538},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35269,"byte_end":35294,"line_start":225,"line_end":225,"column_start":5,"column_end":30},"name":"DW_TAG_inlined_subroutine","qualname":"::constants::DW_TAG_inlined_subroutine","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4539},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35307,"byte_end":35320,"line_start":226,"line_end":226,"column_start":5,"column_end":18},"name":"DW_TAG_module","qualname":"::constants::DW_TAG_module","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4540},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35333,"byte_end":35358,"line_start":227,"line_end":227,"column_start":5,"column_end":30},"name":"DW_TAG_ptr_to_member_type","qualname":"::constants::DW_TAG_ptr_to_member_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4541},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35371,"byte_end":35386,"line_start":228,"line_end":228,"column_start":5,"column_end":20},"name":"DW_TAG_set_type","qualname":"::constants::DW_TAG_set_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4542},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35399,"byte_end":35419,"line_start":229,"line_end":229,"column_start":5,"column_end":25},"name":"DW_TAG_subrange_type","qualname":"::constants::DW_TAG_subrange_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4543},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35432,"byte_end":35448,"line_start":230,"line_end":230,"column_start":5,"column_end":21},"name":"DW_TAG_with_stmt","qualname":"::constants::DW_TAG_with_stmt","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4544},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35461,"byte_end":35486,"line_start":231,"line_end":231,"column_start":5,"column_end":30},"name":"DW_TAG_access_declaration","qualname":"::constants::DW_TAG_access_declaration","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4545},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35499,"byte_end":35515,"line_start":232,"line_end":232,"column_start":5,"column_end":21},"name":"DW_TAG_base_type","qualname":"::constants::DW_TAG_base_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4546},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35528,"byte_end":35546,"line_start":233,"line_end":233,"column_start":5,"column_end":23},"name":"DW_TAG_catch_block","qualname":"::constants::DW_TAG_catch_block","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4547},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35559,"byte_end":35576,"line_start":234,"line_end":234,"column_start":5,"column_end":22},"name":"DW_TAG_const_type","qualname":"::constants::DW_TAG_const_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4548},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35589,"byte_end":35604,"line_start":235,"line_end":235,"column_start":5,"column_end":20},"name":"DW_TAG_constant","qualname":"::constants::DW_TAG_constant","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4549},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35617,"byte_end":35634,"line_start":236,"line_end":236,"column_start":5,"column_end":22},"name":"DW_TAG_enumerator","qualname":"::constants::DW_TAG_enumerator","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4550},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35647,"byte_end":35663,"line_start":237,"line_end":237,"column_start":5,"column_end":21},"name":"DW_TAG_file_type","qualname":"::constants::DW_TAG_file_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4551},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35676,"byte_end":35689,"line_start":238,"line_end":238,"column_start":5,"column_end":18},"name":"DW_TAG_friend","qualname":"::constants::DW_TAG_friend","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4552},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35702,"byte_end":35717,"line_start":239,"line_end":239,"column_start":5,"column_end":20},"name":"DW_TAG_namelist","qualname":"::constants::DW_TAG_namelist","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4553},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35730,"byte_end":35750,"line_start":240,"line_end":240,"column_start":5,"column_end":25},"name":"DW_TAG_namelist_item","qualname":"::constants::DW_TAG_namelist_item","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4554},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35763,"byte_end":35781,"line_start":241,"line_end":241,"column_start":5,"column_end":23},"name":"DW_TAG_packed_type","qualname":"::constants::DW_TAG_packed_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4555},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35794,"byte_end":35811,"line_start":242,"line_end":242,"column_start":5,"column_end":22},"name":"DW_TAG_subprogram","qualname":"::constants::DW_TAG_subprogram","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4556},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35824,"byte_end":35854,"line_start":243,"line_end":243,"column_start":5,"column_end":35},"name":"DW_TAG_template_type_parameter","qualname":"::constants::DW_TAG_template_type_parameter","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4557},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35867,"byte_end":35898,"line_start":244,"line_end":244,"column_start":5,"column_end":36},"name":"DW_TAG_template_value_parameter","qualname":"::constants::DW_TAG_template_value_parameter","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4558},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35911,"byte_end":35929,"line_start":245,"line_end":245,"column_start":5,"column_end":23},"name":"DW_TAG_thrown_type","qualname":"::constants::DW_TAG_thrown_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4559},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35942,"byte_end":35958,"line_start":246,"line_end":246,"column_start":5,"column_end":21},"name":"DW_TAG_try_block","qualname":"::constants::DW_TAG_try_block","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4560},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":35971,"byte_end":35990,"line_start":247,"line_end":247,"column_start":5,"column_end":24},"name":"DW_TAG_variant_part","qualname":"::constants::DW_TAG_variant_part","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4561},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36003,"byte_end":36018,"line_start":248,"line_end":248,"column_start":5,"column_end":20},"name":"DW_TAG_variable","qualname":"::constants::DW_TAG_variable","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4562},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36031,"byte_end":36051,"line_start":249,"line_end":249,"column_start":5,"column_end":25},"name":"DW_TAG_volatile_type","qualname":"::constants::DW_TAG_volatile_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4563},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36077,"byte_end":36099,"line_start":252,"line_end":252,"column_start":5,"column_end":27},"name":"DW_TAG_dwarf_procedure","qualname":"::constants::DW_TAG_dwarf_procedure","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4564},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36112,"byte_end":36132,"line_start":253,"line_end":253,"column_start":5,"column_end":25},"name":"DW_TAG_restrict_type","qualname":"::constants::DW_TAG_restrict_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4565},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36145,"byte_end":36166,"line_start":254,"line_end":254,"column_start":5,"column_end":26},"name":"DW_TAG_interface_type","qualname":"::constants::DW_TAG_interface_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4566},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36179,"byte_end":36195,"line_start":255,"line_end":255,"column_start":5,"column_end":21},"name":"DW_TAG_namespace","qualname":"::constants::DW_TAG_namespace","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4567},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36208,"byte_end":36230,"line_start":256,"line_end":256,"column_start":5,"column_end":27},"name":"DW_TAG_imported_module","qualname":"::constants::DW_TAG_imported_module","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4568},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36243,"byte_end":36266,"line_start":257,"line_end":257,"column_start":5,"column_end":28},"name":"DW_TAG_unspecified_type","qualname":"::constants::DW_TAG_unspecified_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4569},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36279,"byte_end":36298,"line_start":258,"line_end":258,"column_start":5,"column_end":24},"name":"DW_TAG_partial_unit","qualname":"::constants::DW_TAG_partial_unit","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4570},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36311,"byte_end":36331,"line_start":259,"line_end":259,"column_start":5,"column_end":25},"name":"DW_TAG_imported_unit","qualname":"::constants::DW_TAG_imported_unit","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4571},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36344,"byte_end":36360,"line_start":260,"line_end":260,"column_start":5,"column_end":21},"name":"DW_TAG_condition","qualname":"::constants::DW_TAG_condition","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4572},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36373,"byte_end":36391,"line_start":261,"line_end":261,"column_start":5,"column_end":23},"name":"DW_TAG_shared_type","qualname":"::constants::DW_TAG_shared_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4573},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36417,"byte_end":36433,"line_start":264,"line_end":264,"column_start":5,"column_end":21},"name":"DW_TAG_type_unit","qualname":"::constants::DW_TAG_type_unit","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4574},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36446,"byte_end":36474,"line_start":265,"line_end":265,"column_start":5,"column_end":33},"name":"DW_TAG_rvalue_reference_type","qualname":"::constants::DW_TAG_rvalue_reference_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4575},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36487,"byte_end":36508,"line_start":266,"line_end":266,"column_start":5,"column_end":26},"name":"DW_TAG_template_alias","qualname":"::constants::DW_TAG_template_alias","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4576},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36534,"byte_end":36553,"line_start":269,"line_end":269,"column_start":5,"column_end":24},"name":"DW_TAG_coarray_type","qualname":"::constants::DW_TAG_coarray_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4577},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36566,"byte_end":36589,"line_start":270,"line_end":270,"column_start":5,"column_end":28},"name":"DW_TAG_generic_subrange","qualname":"::constants::DW_TAG_generic_subrange","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4578},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36602,"byte_end":36621,"line_start":271,"line_end":271,"column_start":5,"column_end":24},"name":"DW_TAG_dynamic_type","qualname":"::constants::DW_TAG_dynamic_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4579},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36634,"byte_end":36652,"line_start":272,"line_end":272,"column_start":5,"column_end":23},"name":"DW_TAG_atomic_type","qualname":"::constants::DW_TAG_atomic_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4580},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36665,"byte_end":36681,"line_start":273,"line_end":273,"column_start":5,"column_end":21},"name":"DW_TAG_call_site","qualname":"::constants::DW_TAG_call_site","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4581},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36694,"byte_end":36720,"line_start":274,"line_end":274,"column_start":5,"column_end":31},"name":"DW_TAG_call_site_parameter","qualname":"::constants::DW_TAG_call_site_parameter","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4582},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36733,"byte_end":36753,"line_start":275,"line_end":275,"column_start":5,"column_end":25},"name":"DW_TAG_skeleton_unit","qualname":"::constants::DW_TAG_skeleton_unit","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4583},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36766,"byte_end":36787,"line_start":276,"line_end":276,"column_start":5,"column_end":26},"name":"DW_TAG_immutable_type","qualname":"::constants::DW_TAG_immutable_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4584},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36801,"byte_end":36815,"line_start":278,"line_end":278,"column_start":5,"column_end":19},"name":"DW_TAG_lo_user","qualname":"::constants::DW_TAG_lo_user","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4585},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36830,"byte_end":36844,"line_start":279,"line_end":279,"column_start":5,"column_end":19},"name":"DW_TAG_hi_user","qualname":"::constants::DW_TAG_hi_user","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4586},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36884,"byte_end":36900,"line_start":282,"line_end":282,"column_start":5,"column_end":21},"name":"DW_TAG_MIPS_loop","qualname":"::constants::DW_TAG_MIPS_loop","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4587},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36934,"byte_end":36960,"line_start":285,"line_end":285,"column_start":5,"column_end":31},"name":"DW_TAG_HP_array_descriptor","qualname":"::constants::DW_TAG_HP_array_descriptor","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4588},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":36975,"byte_end":36996,"line_start":286,"line_end":286,"column_start":5,"column_end":26},"name":"DW_TAG_HP_Bliss_field","qualname":"::constants::DW_TAG_HP_Bliss_field","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4589},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37011,"byte_end":37036,"line_start":287,"line_end":287,"column_start":5,"column_end":30},"name":"DW_TAG_HP_Bliss_field_set","qualname":"::constants::DW_TAG_HP_Bliss_field_set","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4590},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37071,"byte_end":37090,"line_start":290,"line_end":290,"column_start":5,"column_end":24},"name":"DW_TAG_format_label","qualname":"::constants::DW_TAG_format_label","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4591},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37105,"byte_end":37129,"line_start":291,"line_end":291,"column_start":5,"column_end":29},"name":"DW_TAG_function_template","qualname":"::constants::DW_TAG_function_template","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4592},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37144,"byte_end":37165,"line_start":292,"line_end":292,"column_start":5,"column_end":26},"name":"DW_TAG_class_template","qualname":"::constants::DW_TAG_class_template","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4593},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37180,"byte_end":37196,"line_start":293,"line_end":293,"column_start":5,"column_end":21},"name":"DW_TAG_GNU_BINCL","qualname":"::constants::DW_TAG_GNU_BINCL","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4594},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37211,"byte_end":37227,"line_start":294,"line_end":294,"column_start":5,"column_end":21},"name":"DW_TAG_GNU_EINCL","qualname":"::constants::DW_TAG_GNU_EINCL","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4595},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37242,"byte_end":37276,"line_start":295,"line_end":295,"column_start":5,"column_end":39},"name":"DW_TAG_GNU_template_template_param","qualname":"::constants::DW_TAG_GNU_template_template_param","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4596},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37291,"byte_end":37325,"line_start":296,"line_end":296,"column_start":5,"column_end":39},"name":"DW_TAG_GNU_template_parameter_pack","qualname":"::constants::DW_TAG_GNU_template_parameter_pack","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4597},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37340,"byte_end":37372,"line_start":297,"line_end":297,"column_start":5,"column_end":37},"name":"DW_TAG_GNU_formal_parameter_pack","qualname":"::constants::DW_TAG_GNU_formal_parameter_pack","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4598},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37387,"byte_end":37407,"line_start":298,"line_end":298,"column_start":5,"column_end":25},"name":"DW_TAG_GNU_call_site","qualname":"::constants::DW_TAG_GNU_call_site","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4599},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37422,"byte_end":37452,"line_start":299,"line_end":299,"column_start":5,"column_end":35},"name":"DW_TAG_GNU_call_site_parameter","qualname":"::constants::DW_TAG_GNU_call_site_parameter","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4600},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37468,"byte_end":37489,"line_start":301,"line_end":301,"column_start":5,"column_end":26},"name":"DW_TAG_APPLE_property","qualname":"::constants::DW_TAG_APPLE_property","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4601},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37524,"byte_end":37552,"line_start":304,"line_end":304,"column_start":5,"column_end":33},"name":"DW_TAG_SUN_function_template","qualname":"::constants::DW_TAG_SUN_function_template","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4602},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37567,"byte_end":37592,"line_start":305,"line_end":305,"column_start":5,"column_end":30},"name":"DW_TAG_SUN_class_template","qualname":"::constants::DW_TAG_SUN_class_template","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4603},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37607,"byte_end":37633,"line_start":306,"line_end":306,"column_start":5,"column_end":31},"name":"DW_TAG_SUN_struct_template","qualname":"::constants::DW_TAG_SUN_struct_template","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4604},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37648,"byte_end":37673,"line_start":307,"line_end":307,"column_start":5,"column_end":30},"name":"DW_TAG_SUN_union_template","qualname":"::constants::DW_TAG_SUN_union_template","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4605},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37688,"byte_end":37719,"line_start":308,"line_end":308,"column_start":5,"column_end":36},"name":"DW_TAG_SUN_indirect_inheritance","qualname":"::constants::DW_TAG_SUN_indirect_inheritance","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4606},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37734,"byte_end":37754,"line_start":309,"line_end":309,"column_start":5,"column_end":25},"name":"DW_TAG_SUN_codeflags","qualname":"::constants::DW_TAG_SUN_codeflags","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4607},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37769,"byte_end":37790,"line_start":310,"line_end":310,"column_start":5,"column_end":26},"name":"DW_TAG_SUN_memop_info","qualname":"::constants::DW_TAG_SUN_memop_info","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4608},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37805,"byte_end":37830,"line_start":311,"line_end":311,"column_start":5,"column_end":30},"name":"DW_TAG_SUN_omp_child_func","qualname":"::constants::DW_TAG_SUN_omp_child_func","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4609},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37845,"byte_end":37871,"line_start":312,"line_end":312,"column_start":5,"column_end":31},"name":"DW_TAG_SUN_rtti_descriptor","qualname":"::constants::DW_TAG_SUN_rtti_descriptor","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4610},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37886,"byte_end":37906,"line_start":313,"line_end":313,"column_start":5,"column_end":25},"name":"DW_TAG_SUN_dtor_info","qualname":"::constants::DW_TAG_SUN_dtor_info","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4611},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37921,"byte_end":37936,"line_start":314,"line_end":314,"column_start":5,"column_end":20},"name":"DW_TAG_SUN_dtor","qualname":"::constants::DW_TAG_SUN_dtor","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4612},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37951,"byte_end":37975,"line_start":315,"line_end":315,"column_start":5,"column_end":29},"name":"DW_TAG_SUN_f90_interface","qualname":"::constants::DW_TAG_SUN_f90_interface","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4613},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":37990,"byte_end":38022,"line_start":316,"line_end":316,"column_start":5,"column_end":37},"name":"DW_TAG_SUN_fortran_vax_structure","qualname":"::constants::DW_TAG_SUN_fortran_vax_structure","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4614},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":38060,"byte_end":38083,"line_start":319,"line_end":319,"column_start":5,"column_end":28},"name":"DW_TAG_ALTIUM_circ_type","qualname":"::constants::DW_TAG_ALTIUM_circ_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4615},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":38098,"byte_end":38125,"line_start":320,"line_end":320,"column_start":5,"column_end":32},"name":"DW_TAG_ALTIUM_mwa_circ_type","qualname":"::constants::DW_TAG_ALTIUM_mwa_circ_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4616},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":38140,"byte_end":38168,"line_start":321,"line_end":321,"column_start":5,"column_end":33},"name":"DW_TAG_ALTIUM_rev_carry_type","qualname":"::constants::DW_TAG_ALTIUM_rev_carry_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4617},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":38183,"byte_end":38200,"line_start":322,"line_end":322,"column_start":5,"column_end":22},"name":"DW_TAG_ALTIUM_rom","qualname":"::constants::DW_TAG_ALTIUM_rom","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4618},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":38239,"byte_end":38261,"line_start":325,"line_end":325,"column_start":5,"column_end":27},"name":"DW_TAG_upc_shared_type","qualname":"::constants::DW_TAG_upc_shared_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4619},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":38276,"byte_end":38298,"line_start":326,"line_end":326,"column_start":5,"column_end":27},"name":"DW_TAG_upc_strict_type","qualname":"::constants::DW_TAG_upc_strict_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4620},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":38313,"byte_end":38336,"line_start":327,"line_end":327,"column_start":5,"column_end":28},"name":"DW_TAG_upc_relaxed_type","qualname":"::constants::DW_TAG_upc_relaxed_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4621},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":38392,"byte_end":38413,"line_start":330,"line_end":330,"column_start":5,"column_end":26},"name":"DW_TAG_PGI_kanji_type","qualname":"::constants::DW_TAG_PGI_kanji_type","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4622},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":38428,"byte_end":38454,"line_start":331,"line_end":331,"column_start":5,"column_end":31},"name":"DW_TAG_PGI_interface_block","qualname":"::constants::DW_TAG_PGI_interface_block","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4623},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":38493,"byte_end":38516,"line_start":334,"line_end":334,"column_start":5,"column_end":28},"name":"DW_TAG_BORLAND_property","qualname":"::constants::DW_TAG_BORLAND_property","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4624},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":38531,"byte_end":38559,"line_start":335,"line_end":335,"column_start":5,"column_end":33},"name":"DW_TAG_BORLAND_Delphi_string","qualname":"::constants::DW_TAG_BORLAND_Delphi_string","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4625},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":38574,"byte_end":38609,"line_start":336,"line_end":336,"column_start":5,"column_end":40},"name":"DW_TAG_BORLAND_Delphi_dynamic_array","qualname":"::constants::DW_TAG_BORLAND_Delphi_dynamic_array","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4626},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":38624,"byte_end":38649,"line_start":337,"line_end":337,"column_start":5,"column_end":30},"name":"DW_TAG_BORLAND_Delphi_set","qualname":"::constants::DW_TAG_BORLAND_Delphi_set","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4627},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":38664,"byte_end":38693,"line_start":338,"line_end":338,"column_start":5,"column_end":34},"name":"DW_TAG_BORLAND_Delphi_variant","qualname":"::constants::DW_TAG_BORLAND_Delphi_variant","value":"DwTag","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4923},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":38800,"byte_end":38804,"line_start":345,"line_end":345,"column_start":1,"column_end":5},"name":"DwAt","qualname":"::constants::DwAt","value":"","parent":null,"children":[],"decl_id":null,"docs":" The attribute encodings for DIE attributes.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4654},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":38816,"byte_end":38826,"line_start":346,"line_end":346,"column_start":5,"column_end":15},"name":"DW_AT_null","qualname":"::constants::DW_AT_null","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4655},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":38840,"byte_end":38853,"line_start":348,"line_end":348,"column_start":5,"column_end":18},"name":"DW_AT_sibling","qualname":"::constants::DW_AT_sibling","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4656},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":38866,"byte_end":38880,"line_start":349,"line_end":349,"column_start":5,"column_end":19},"name":"DW_AT_location","qualname":"::constants::DW_AT_location","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4657},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":38893,"byte_end":38903,"line_start":350,"line_end":350,"column_start":5,"column_end":15},"name":"DW_AT_name","qualname":"::constants::DW_AT_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4658},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":38916,"byte_end":38930,"line_start":351,"line_end":351,"column_start":5,"column_end":19},"name":"DW_AT_ordering","qualname":"::constants::DW_AT_ordering","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4659},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":38943,"byte_end":38958,"line_start":352,"line_end":352,"column_start":5,"column_end":20},"name":"DW_AT_byte_size","qualname":"::constants::DW_AT_byte_size","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4660},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":38971,"byte_end":38987,"line_start":353,"line_end":353,"column_start":5,"column_end":21},"name":"DW_AT_bit_offset","qualname":"::constants::DW_AT_bit_offset","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4661},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39000,"byte_end":39014,"line_start":354,"line_end":354,"column_start":5,"column_end":19},"name":"DW_AT_bit_size","qualname":"::constants::DW_AT_bit_size","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4662},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39027,"byte_end":39042,"line_start":355,"line_end":355,"column_start":5,"column_end":20},"name":"DW_AT_stmt_list","qualname":"::constants::DW_AT_stmt_list","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4663},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39055,"byte_end":39067,"line_start":356,"line_end":356,"column_start":5,"column_end":17},"name":"DW_AT_low_pc","qualname":"::constants::DW_AT_low_pc","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4664},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39080,"byte_end":39093,"line_start":357,"line_end":357,"column_start":5,"column_end":18},"name":"DW_AT_high_pc","qualname":"::constants::DW_AT_high_pc","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4665},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39106,"byte_end":39120,"line_start":358,"line_end":358,"column_start":5,"column_end":19},"name":"DW_AT_language","qualname":"::constants::DW_AT_language","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4666},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39133,"byte_end":39144,"line_start":359,"line_end":359,"column_start":5,"column_end":16},"name":"DW_AT_discr","qualname":"::constants::DW_AT_discr","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4667},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39157,"byte_end":39174,"line_start":360,"line_end":360,"column_start":5,"column_end":22},"name":"DW_AT_discr_value","qualname":"::constants::DW_AT_discr_value","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4668},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39187,"byte_end":39203,"line_start":361,"line_end":361,"column_start":5,"column_end":21},"name":"DW_AT_visibility","qualname":"::constants::DW_AT_visibility","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4669},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39216,"byte_end":39228,"line_start":362,"line_end":362,"column_start":5,"column_end":17},"name":"DW_AT_import","qualname":"::constants::DW_AT_import","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4670},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39241,"byte_end":39260,"line_start":363,"line_end":363,"column_start":5,"column_end":24},"name":"DW_AT_string_length","qualname":"::constants::DW_AT_string_length","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4671},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39273,"byte_end":39295,"line_start":364,"line_end":364,"column_start":5,"column_end":27},"name":"DW_AT_common_reference","qualname":"::constants::DW_AT_common_reference","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4672},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39308,"byte_end":39322,"line_start":365,"line_end":365,"column_start":5,"column_end":19},"name":"DW_AT_comp_dir","qualname":"::constants::DW_AT_comp_dir","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4673},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39335,"byte_end":39352,"line_start":366,"line_end":366,"column_start":5,"column_end":22},"name":"DW_AT_const_value","qualname":"::constants::DW_AT_const_value","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4674},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39365,"byte_end":39386,"line_start":367,"line_end":367,"column_start":5,"column_end":26},"name":"DW_AT_containing_type","qualname":"::constants::DW_AT_containing_type","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4675},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39399,"byte_end":39418,"line_start":368,"line_end":368,"column_start":5,"column_end":24},"name":"DW_AT_default_value","qualname":"::constants::DW_AT_default_value","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4676},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39431,"byte_end":39443,"line_start":369,"line_end":369,"column_start":5,"column_end":17},"name":"DW_AT_inline","qualname":"::constants::DW_AT_inline","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4677},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39456,"byte_end":39473,"line_start":370,"line_end":370,"column_start":5,"column_end":22},"name":"DW_AT_is_optional","qualname":"::constants::DW_AT_is_optional","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4678},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39486,"byte_end":39503,"line_start":371,"line_end":371,"column_start":5,"column_end":22},"name":"DW_AT_lower_bound","qualname":"::constants::DW_AT_lower_bound","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4679},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39516,"byte_end":39530,"line_start":372,"line_end":372,"column_start":5,"column_end":19},"name":"DW_AT_producer","qualname":"::constants::DW_AT_producer","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4680},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39543,"byte_end":39559,"line_start":373,"line_end":373,"column_start":5,"column_end":21},"name":"DW_AT_prototyped","qualname":"::constants::DW_AT_prototyped","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4681},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39572,"byte_end":39589,"line_start":374,"line_end":374,"column_start":5,"column_end":22},"name":"DW_AT_return_addr","qualname":"::constants::DW_AT_return_addr","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4682},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39602,"byte_end":39619,"line_start":375,"line_end":375,"column_start":5,"column_end":22},"name":"DW_AT_start_scope","qualname":"::constants::DW_AT_start_scope","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4683},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39632,"byte_end":39648,"line_start":376,"line_end":376,"column_start":5,"column_end":21},"name":"DW_AT_bit_stride","qualname":"::constants::DW_AT_bit_stride","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4684},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39661,"byte_end":39678,"line_start":377,"line_end":377,"column_start":5,"column_end":22},"name":"DW_AT_upper_bound","qualname":"::constants::DW_AT_upper_bound","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4685},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39691,"byte_end":39712,"line_start":378,"line_end":378,"column_start":5,"column_end":26},"name":"DW_AT_abstract_origin","qualname":"::constants::DW_AT_abstract_origin","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4686},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39725,"byte_end":39744,"line_start":379,"line_end":379,"column_start":5,"column_end":24},"name":"DW_AT_accessibility","qualname":"::constants::DW_AT_accessibility","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4687},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39757,"byte_end":39776,"line_start":380,"line_end":380,"column_start":5,"column_end":24},"name":"DW_AT_address_class","qualname":"::constants::DW_AT_address_class","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4688},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39789,"byte_end":39805,"line_start":381,"line_end":381,"column_start":5,"column_end":21},"name":"DW_AT_artificial","qualname":"::constants::DW_AT_artificial","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4689},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39818,"byte_end":39834,"line_start":382,"line_end":382,"column_start":5,"column_end":21},"name":"DW_AT_base_types","qualname":"::constants::DW_AT_base_types","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4690},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39847,"byte_end":39871,"line_start":383,"line_end":383,"column_start":5,"column_end":29},"name":"DW_AT_calling_convention","qualname":"::constants::DW_AT_calling_convention","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4691},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39884,"byte_end":39895,"line_start":384,"line_end":384,"column_start":5,"column_end":16},"name":"DW_AT_count","qualname":"::constants::DW_AT_count","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4692},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39908,"byte_end":39934,"line_start":385,"line_end":385,"column_start":5,"column_end":31},"name":"DW_AT_data_member_location","qualname":"::constants::DW_AT_data_member_location","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4693},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39947,"byte_end":39964,"line_start":386,"line_end":386,"column_start":5,"column_end":22},"name":"DW_AT_decl_column","qualname":"::constants::DW_AT_decl_column","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4694},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":39977,"byte_end":39992,"line_start":387,"line_end":387,"column_start":5,"column_end":20},"name":"DW_AT_decl_file","qualname":"::constants::DW_AT_decl_file","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4695},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40005,"byte_end":40020,"line_start":388,"line_end":388,"column_start":5,"column_end":20},"name":"DW_AT_decl_line","qualname":"::constants::DW_AT_decl_line","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4696},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40033,"byte_end":40050,"line_start":389,"line_end":389,"column_start":5,"column_end":22},"name":"DW_AT_declaration","qualname":"::constants::DW_AT_declaration","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4697},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40063,"byte_end":40079,"line_start":390,"line_end":390,"column_start":5,"column_end":21},"name":"DW_AT_discr_list","qualname":"::constants::DW_AT_discr_list","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4698},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40092,"byte_end":40106,"line_start":391,"line_end":391,"column_start":5,"column_end":19},"name":"DW_AT_encoding","qualname":"::constants::DW_AT_encoding","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4699},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40119,"byte_end":40133,"line_start":392,"line_end":392,"column_start":5,"column_end":19},"name":"DW_AT_external","qualname":"::constants::DW_AT_external","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4700},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40146,"byte_end":40162,"line_start":393,"line_end":393,"column_start":5,"column_end":21},"name":"DW_AT_frame_base","qualname":"::constants::DW_AT_frame_base","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4701},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40175,"byte_end":40187,"line_start":394,"line_end":394,"column_start":5,"column_end":17},"name":"DW_AT_friend","qualname":"::constants::DW_AT_friend","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4702},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40200,"byte_end":40221,"line_start":395,"line_end":395,"column_start":5,"column_end":26},"name":"DW_AT_identifier_case","qualname":"::constants::DW_AT_identifier_case","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4703},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40234,"byte_end":40250,"line_start":396,"line_end":396,"column_start":5,"column_end":21},"name":"DW_AT_macro_info","qualname":"::constants::DW_AT_macro_info","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4704},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40263,"byte_end":40282,"line_start":397,"line_end":397,"column_start":5,"column_end":24},"name":"DW_AT_namelist_item","qualname":"::constants::DW_AT_namelist_item","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4705},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40295,"byte_end":40309,"line_start":398,"line_end":398,"column_start":5,"column_end":19},"name":"DW_AT_priority","qualname":"::constants::DW_AT_priority","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4706},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40322,"byte_end":40335,"line_start":399,"line_end":399,"column_start":5,"column_end":18},"name":"DW_AT_segment","qualname":"::constants::DW_AT_segment","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4707},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40348,"byte_end":40367,"line_start":400,"line_end":400,"column_start":5,"column_end":24},"name":"DW_AT_specification","qualname":"::constants::DW_AT_specification","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4708},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40380,"byte_end":40397,"line_start":401,"line_end":401,"column_start":5,"column_end":22},"name":"DW_AT_static_link","qualname":"::constants::DW_AT_static_link","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4709},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40410,"byte_end":40420,"line_start":402,"line_end":402,"column_start":5,"column_end":15},"name":"DW_AT_type","qualname":"::constants::DW_AT_type","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4710},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40433,"byte_end":40451,"line_start":403,"line_end":403,"column_start":5,"column_end":23},"name":"DW_AT_use_location","qualname":"::constants::DW_AT_use_location","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4711},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40464,"byte_end":40488,"line_start":404,"line_end":404,"column_start":5,"column_end":29},"name":"DW_AT_variable_parameter","qualname":"::constants::DW_AT_variable_parameter","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4712},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40501,"byte_end":40517,"line_start":405,"line_end":405,"column_start":5,"column_end":21},"name":"DW_AT_virtuality","qualname":"::constants::DW_AT_virtuality","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4713},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40530,"byte_end":40556,"line_start":406,"line_end":406,"column_start":5,"column_end":31},"name":"DW_AT_vtable_elem_location","qualname":"::constants::DW_AT_vtable_elem_location","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4714},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40582,"byte_end":40597,"line_start":409,"line_end":409,"column_start":5,"column_end":20},"name":"DW_AT_allocated","qualname":"::constants::DW_AT_allocated","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4715},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40610,"byte_end":40626,"line_start":410,"line_end":410,"column_start":5,"column_end":21},"name":"DW_AT_associated","qualname":"::constants::DW_AT_associated","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4716},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40639,"byte_end":40658,"line_start":411,"line_end":411,"column_start":5,"column_end":24},"name":"DW_AT_data_location","qualname":"::constants::DW_AT_data_location","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4717},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40671,"byte_end":40688,"line_start":412,"line_end":412,"column_start":5,"column_end":22},"name":"DW_AT_byte_stride","qualname":"::constants::DW_AT_byte_stride","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4718},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40701,"byte_end":40715,"line_start":413,"line_end":413,"column_start":5,"column_end":19},"name":"DW_AT_entry_pc","qualname":"::constants::DW_AT_entry_pc","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4719},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40728,"byte_end":40742,"line_start":414,"line_end":414,"column_start":5,"column_end":19},"name":"DW_AT_use_UTF8","qualname":"::constants::DW_AT_use_UTF8","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4720},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40755,"byte_end":40770,"line_start":415,"line_end":415,"column_start":5,"column_end":20},"name":"DW_AT_extension","qualname":"::constants::DW_AT_extension","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4721},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40783,"byte_end":40795,"line_start":416,"line_end":416,"column_start":5,"column_end":17},"name":"DW_AT_ranges","qualname":"::constants::DW_AT_ranges","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4722},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40808,"byte_end":40824,"line_start":417,"line_end":417,"column_start":5,"column_end":21},"name":"DW_AT_trampoline","qualname":"::constants::DW_AT_trampoline","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4723},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40837,"byte_end":40854,"line_start":418,"line_end":418,"column_start":5,"column_end":22},"name":"DW_AT_call_column","qualname":"::constants::DW_AT_call_column","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4724},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40867,"byte_end":40882,"line_start":419,"line_end":419,"column_start":5,"column_end":20},"name":"DW_AT_call_file","qualname":"::constants::DW_AT_call_file","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4725},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40895,"byte_end":40910,"line_start":420,"line_end":420,"column_start":5,"column_end":20},"name":"DW_AT_call_line","qualname":"::constants::DW_AT_call_line","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4726},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40923,"byte_end":40940,"line_start":421,"line_end":421,"column_start":5,"column_end":22},"name":"DW_AT_description","qualname":"::constants::DW_AT_description","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4727},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40953,"byte_end":40971,"line_start":422,"line_end":422,"column_start":5,"column_end":23},"name":"DW_AT_binary_scale","qualname":"::constants::DW_AT_binary_scale","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4728},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":40984,"byte_end":41003,"line_start":423,"line_end":423,"column_start":5,"column_end":24},"name":"DW_AT_decimal_scale","qualname":"::constants::DW_AT_decimal_scale","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4729},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41016,"byte_end":41027,"line_start":424,"line_end":424,"column_start":5,"column_end":16},"name":"DW_AT_small","qualname":"::constants::DW_AT_small","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4730},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41040,"byte_end":41058,"line_start":425,"line_end":425,"column_start":5,"column_end":23},"name":"DW_AT_decimal_sign","qualname":"::constants::DW_AT_decimal_sign","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4731},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41071,"byte_end":41088,"line_start":426,"line_end":426,"column_start":5,"column_end":22},"name":"DW_AT_digit_count","qualname":"::constants::DW_AT_digit_count","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4732},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41101,"byte_end":41121,"line_start":427,"line_end":427,"column_start":5,"column_end":25},"name":"DW_AT_picture_string","qualname":"::constants::DW_AT_picture_string","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4733},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41134,"byte_end":41147,"line_start":428,"line_end":428,"column_start":5,"column_end":18},"name":"DW_AT_mutable","qualname":"::constants::DW_AT_mutable","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4734},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41160,"byte_end":41180,"line_start":429,"line_end":429,"column_start":5,"column_end":25},"name":"DW_AT_threads_scaled","qualname":"::constants::DW_AT_threads_scaled","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4735},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41193,"byte_end":41207,"line_start":430,"line_end":430,"column_start":5,"column_end":19},"name":"DW_AT_explicit","qualname":"::constants::DW_AT_explicit","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4736},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41220,"byte_end":41240,"line_start":431,"line_end":431,"column_start":5,"column_end":25},"name":"DW_AT_object_pointer","qualname":"::constants::DW_AT_object_pointer","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4737},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41253,"byte_end":41268,"line_start":432,"line_end":432,"column_start":5,"column_end":20},"name":"DW_AT_endianity","qualname":"::constants::DW_AT_endianity","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4738},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41281,"byte_end":41296,"line_start":433,"line_end":433,"column_start":5,"column_end":20},"name":"DW_AT_elemental","qualname":"::constants::DW_AT_elemental","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4739},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41309,"byte_end":41319,"line_start":434,"line_end":434,"column_start":5,"column_end":15},"name":"DW_AT_pure","qualname":"::constants::DW_AT_pure","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4740},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41332,"byte_end":41347,"line_start":435,"line_end":435,"column_start":5,"column_end":20},"name":"DW_AT_recursive","qualname":"::constants::DW_AT_recursive","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4741},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41373,"byte_end":41388,"line_start":438,"line_end":438,"column_start":5,"column_end":20},"name":"DW_AT_signature","qualname":"::constants::DW_AT_signature","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4742},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41401,"byte_end":41422,"line_start":439,"line_end":439,"column_start":5,"column_end":26},"name":"DW_AT_main_subprogram","qualname":"::constants::DW_AT_main_subprogram","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4743},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41435,"byte_end":41456,"line_start":440,"line_end":440,"column_start":5,"column_end":26},"name":"DW_AT_data_bit_offset","qualname":"::constants::DW_AT_data_bit_offset","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4744},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41469,"byte_end":41485,"line_start":441,"line_end":441,"column_start":5,"column_end":21},"name":"DW_AT_const_expr","qualname":"::constants::DW_AT_const_expr","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4745},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41498,"byte_end":41514,"line_start":442,"line_end":442,"column_start":5,"column_end":21},"name":"DW_AT_enum_class","qualname":"::constants::DW_AT_enum_class","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4746},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41527,"byte_end":41545,"line_start":443,"line_end":443,"column_start":5,"column_end":23},"name":"DW_AT_linkage_name","qualname":"::constants::DW_AT_linkage_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4747},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41571,"byte_end":41599,"line_start":446,"line_end":446,"column_start":5,"column_end":33},"name":"DW_AT_string_length_bit_size","qualname":"::constants::DW_AT_string_length_bit_size","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4748},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41612,"byte_end":41641,"line_start":447,"line_end":447,"column_start":5,"column_end":34},"name":"DW_AT_string_length_byte_size","qualname":"::constants::DW_AT_string_length_byte_size","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4749},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41654,"byte_end":41664,"line_start":448,"line_end":448,"column_start":5,"column_end":15},"name":"DW_AT_rank","qualname":"::constants::DW_AT_rank","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4750},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41677,"byte_end":41699,"line_start":449,"line_end":449,"column_start":5,"column_end":27},"name":"DW_AT_str_offsets_base","qualname":"::constants::DW_AT_str_offsets_base","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4751},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41712,"byte_end":41727,"line_start":450,"line_end":450,"column_start":5,"column_end":20},"name":"DW_AT_addr_base","qualname":"::constants::DW_AT_addr_base","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4752},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41740,"byte_end":41759,"line_start":451,"line_end":451,"column_start":5,"column_end":24},"name":"DW_AT_rnglists_base","qualname":"::constants::DW_AT_rnglists_base","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4753},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41772,"byte_end":41786,"line_start":452,"line_end":452,"column_start":5,"column_end":19},"name":"DW_AT_dwo_name","qualname":"::constants::DW_AT_dwo_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4754},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41799,"byte_end":41814,"line_start":453,"line_end":453,"column_start":5,"column_end":20},"name":"DW_AT_reference","qualname":"::constants::DW_AT_reference","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4755},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41827,"byte_end":41849,"line_start":454,"line_end":454,"column_start":5,"column_end":27},"name":"DW_AT_rvalue_reference","qualname":"::constants::DW_AT_rvalue_reference","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4756},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41862,"byte_end":41874,"line_start":455,"line_end":455,"column_start":5,"column_end":17},"name":"DW_AT_macros","qualname":"::constants::DW_AT_macros","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4757},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41887,"byte_end":41907,"line_start":456,"line_end":456,"column_start":5,"column_end":25},"name":"DW_AT_call_all_calls","qualname":"::constants::DW_AT_call_all_calls","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4758},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41920,"byte_end":41947,"line_start":457,"line_end":457,"column_start":5,"column_end":32},"name":"DW_AT_call_all_source_calls","qualname":"::constants::DW_AT_call_all_source_calls","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4759},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41960,"byte_end":41985,"line_start":458,"line_end":458,"column_start":5,"column_end":30},"name":"DW_AT_call_all_tail_calls","qualname":"::constants::DW_AT_call_all_tail_calls","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4760},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":41998,"byte_end":42018,"line_start":459,"line_end":459,"column_start":5,"column_end":25},"name":"DW_AT_call_return_pc","qualname":"::constants::DW_AT_call_return_pc","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4761},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42031,"byte_end":42047,"line_start":460,"line_end":460,"column_start":5,"column_end":21},"name":"DW_AT_call_value","qualname":"::constants::DW_AT_call_value","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4762},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42060,"byte_end":42077,"line_start":461,"line_end":461,"column_start":5,"column_end":22},"name":"DW_AT_call_origin","qualname":"::constants::DW_AT_call_origin","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4763},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42090,"byte_end":42110,"line_start":462,"line_end":462,"column_start":5,"column_end":25},"name":"DW_AT_call_parameter","qualname":"::constants::DW_AT_call_parameter","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4764},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42123,"byte_end":42136,"line_start":463,"line_end":463,"column_start":5,"column_end":18},"name":"DW_AT_call_pc","qualname":"::constants::DW_AT_call_pc","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4765},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42149,"byte_end":42169,"line_start":464,"line_end":464,"column_start":5,"column_end":25},"name":"DW_AT_call_tail_call","qualname":"::constants::DW_AT_call_tail_call","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4766},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42182,"byte_end":42199,"line_start":465,"line_end":465,"column_start":5,"column_end":22},"name":"DW_AT_call_target","qualname":"::constants::DW_AT_call_target","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4767},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42212,"byte_end":42239,"line_start":466,"line_end":466,"column_start":5,"column_end":32},"name":"DW_AT_call_target_clobbered","qualname":"::constants::DW_AT_call_target_clobbered","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4768},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42252,"byte_end":42276,"line_start":467,"line_end":467,"column_start":5,"column_end":29},"name":"DW_AT_call_data_location","qualname":"::constants::DW_AT_call_data_location","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4769},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42289,"byte_end":42310,"line_start":468,"line_end":468,"column_start":5,"column_end":26},"name":"DW_AT_call_data_value","qualname":"::constants::DW_AT_call_data_value","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4770},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42323,"byte_end":42337,"line_start":469,"line_end":469,"column_start":5,"column_end":19},"name":"DW_AT_noreturn","qualname":"::constants::DW_AT_noreturn","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4771},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42350,"byte_end":42365,"line_start":470,"line_end":470,"column_start":5,"column_end":20},"name":"DW_AT_alignment","qualname":"::constants::DW_AT_alignment","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4772},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42378,"byte_end":42398,"line_start":471,"line_end":471,"column_start":5,"column_end":25},"name":"DW_AT_export_symbols","qualname":"::constants::DW_AT_export_symbols","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4773},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42411,"byte_end":42424,"line_start":472,"line_end":472,"column_start":5,"column_end":18},"name":"DW_AT_deleted","qualname":"::constants::DW_AT_deleted","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4774},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42437,"byte_end":42452,"line_start":473,"line_end":473,"column_start":5,"column_end":20},"name":"DW_AT_defaulted","qualname":"::constants::DW_AT_defaulted","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4775},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42465,"byte_end":42484,"line_start":474,"line_end":474,"column_start":5,"column_end":24},"name":"DW_AT_loclists_base","qualname":"::constants::DW_AT_loclists_base","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4776},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42498,"byte_end":42511,"line_start":476,"line_end":476,"column_start":5,"column_end":18},"name":"DW_AT_lo_user","qualname":"::constants::DW_AT_lo_user","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4777},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42526,"byte_end":42539,"line_start":477,"line_end":477,"column_start":5,"column_end":18},"name":"DW_AT_hi_user","qualname":"::constants::DW_AT_hi_user","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4778},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42579,"byte_end":42593,"line_start":480,"line_end":480,"column_start":5,"column_end":19},"name":"DW_AT_MIPS_fde","qualname":"::constants::DW_AT_MIPS_fde","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4779},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42608,"byte_end":42629,"line_start":481,"line_end":481,"column_start":5,"column_end":26},"name":"DW_AT_MIPS_loop_begin","qualname":"::constants::DW_AT_MIPS_loop_begin","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4780},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42644,"byte_end":42670,"line_start":482,"line_end":482,"column_start":5,"column_end":31},"name":"DW_AT_MIPS_tail_loop_begin","qualname":"::constants::DW_AT_MIPS_tail_loop_begin","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4781},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42685,"byte_end":42708,"line_start":483,"line_end":483,"column_start":5,"column_end":28},"name":"DW_AT_MIPS_epilog_begin","qualname":"::constants::DW_AT_MIPS_epilog_begin","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4782},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42723,"byte_end":42752,"line_start":484,"line_end":484,"column_start":5,"column_end":34},"name":"DW_AT_MIPS_loop_unroll_factor","qualname":"::constants::DW_AT_MIPS_loop_unroll_factor","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4783},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42767,"byte_end":42801,"line_start":485,"line_end":485,"column_start":5,"column_end":39},"name":"DW_AT_MIPS_software_pipeline_depth","qualname":"::constants::DW_AT_MIPS_software_pipeline_depth","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4784},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42816,"byte_end":42839,"line_start":486,"line_end":486,"column_start":5,"column_end":28},"name":"DW_AT_MIPS_linkage_name","qualname":"::constants::DW_AT_MIPS_linkage_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4785},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42854,"byte_end":42871,"line_start":487,"line_end":487,"column_start":5,"column_end":22},"name":"DW_AT_MIPS_stride","qualname":"::constants::DW_AT_MIPS_stride","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4786},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42886,"byte_end":42910,"line_start":488,"line_end":488,"column_start":5,"column_end":29},"name":"DW_AT_MIPS_abstract_name","qualname":"::constants::DW_AT_MIPS_abstract_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4787},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42925,"byte_end":42948,"line_start":489,"line_end":489,"column_start":5,"column_end":28},"name":"DW_AT_MIPS_clone_origin","qualname":"::constants::DW_AT_MIPS_clone_origin","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4788},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":42963,"byte_end":42985,"line_start":490,"line_end":490,"column_start":5,"column_end":27},"name":"DW_AT_MIPS_has_inlines","qualname":"::constants::DW_AT_MIPS_has_inlines","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4789},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":43000,"byte_end":43022,"line_start":491,"line_end":491,"column_start":5,"column_end":27},"name":"DW_AT_MIPS_stride_byte","qualname":"::constants::DW_AT_MIPS_stride_byte","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4790},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":43037,"byte_end":43059,"line_start":492,"line_end":492,"column_start":5,"column_end":27},"name":"DW_AT_MIPS_stride_elem","qualname":"::constants::DW_AT_MIPS_stride_elem","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4791},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":43074,"byte_end":43097,"line_start":493,"line_end":493,"column_start":5,"column_end":28},"name":"DW_AT_MIPS_ptr_dopetype","qualname":"::constants::DW_AT_MIPS_ptr_dopetype","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4792},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":43112,"byte_end":43143,"line_start":494,"line_end":494,"column_start":5,"column_end":36},"name":"DW_AT_MIPS_allocatable_dopetype","qualname":"::constants::DW_AT_MIPS_allocatable_dopetype","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4793},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":43158,"byte_end":43191,"line_start":495,"line_end":495,"column_start":5,"column_end":38},"name":"DW_AT_MIPS_assumed_shape_dopetype","qualname":"::constants::DW_AT_MIPS_assumed_shape_dopetype","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4794},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":43322,"byte_end":43345,"line_start":499,"line_end":499,"column_start":5,"column_end":28},"name":"DW_AT_MIPS_assumed_size","qualname":"::constants::DW_AT_MIPS_assumed_size","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4795},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":43434,"byte_end":43458,"line_start":504,"line_end":504,"column_start":5,"column_end":29},"name":"DW_AT_INTEL_other_endian","qualname":"::constants::DW_AT_INTEL_other_endian","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4796},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":43492,"byte_end":43506,"line_start":507,"line_end":507,"column_start":5,"column_end":19},"name":"DW_AT_sf_names","qualname":"::constants::DW_AT_sf_names","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4797},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":43521,"byte_end":43535,"line_start":508,"line_end":508,"column_start":5,"column_end":19},"name":"DW_AT_src_info","qualname":"::constants::DW_AT_src_info","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4798},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":43550,"byte_end":43564,"line_start":509,"line_end":509,"column_start":5,"column_end":19},"name":"DW_AT_mac_info","qualname":"::constants::DW_AT_mac_info","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4799},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":43579,"byte_end":43595,"line_start":510,"line_end":510,"column_start":5,"column_end":21},"name":"DW_AT_src_coords","qualname":"::constants::DW_AT_src_coords","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4800},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":43610,"byte_end":43626,"line_start":511,"line_end":511,"column_start":5,"column_end":21},"name":"DW_AT_body_begin","qualname":"::constants::DW_AT_body_begin","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4801},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":43641,"byte_end":43655,"line_start":512,"line_end":512,"column_start":5,"column_end":19},"name":"DW_AT_body_end","qualname":"::constants::DW_AT_body_end","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4802},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":43670,"byte_end":43686,"line_start":513,"line_end":513,"column_start":5,"column_end":21},"name":"DW_AT_GNU_vector","qualname":"::constants::DW_AT_GNU_vector","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4803},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":43701,"byte_end":43721,"line_start":514,"line_end":514,"column_start":5,"column_end":25},"name":"DW_AT_GNU_guarded_by","qualname":"::constants::DW_AT_GNU_guarded_by","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4804},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":43736,"byte_end":43759,"line_start":515,"line_end":515,"column_start":5,"column_end":28},"name":"DW_AT_GNU_pt_guarded_by","qualname":"::constants::DW_AT_GNU_pt_guarded_by","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4805},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":43774,"byte_end":43791,"line_start":516,"line_end":516,"column_start":5,"column_end":22},"name":"DW_AT_GNU_guarded","qualname":"::constants::DW_AT_GNU_guarded","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4806},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":43806,"byte_end":43826,"line_start":517,"line_end":517,"column_start":5,"column_end":25},"name":"DW_AT_GNU_pt_guarded","qualname":"::constants::DW_AT_GNU_pt_guarded","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4807},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":43841,"byte_end":43865,"line_start":518,"line_end":518,"column_start":5,"column_end":29},"name":"DW_AT_GNU_locks_excluded","qualname":"::constants::DW_AT_GNU_locks_excluded","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4808},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":43880,"byte_end":43914,"line_start":519,"line_end":519,"column_start":5,"column_end":39},"name":"DW_AT_GNU_exclusive_locks_required","qualname":"::constants::DW_AT_GNU_exclusive_locks_required","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4809},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":43929,"byte_end":43960,"line_start":520,"line_end":520,"column_start":5,"column_end":36},"name":"DW_AT_GNU_shared_locks_required","qualname":"::constants::DW_AT_GNU_shared_locks_required","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4810},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":43975,"byte_end":43998,"line_start":521,"line_end":521,"column_start":5,"column_end":28},"name":"DW_AT_GNU_odr_signature","qualname":"::constants::DW_AT_GNU_odr_signature","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4811},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44013,"byte_end":44036,"line_start":522,"line_end":522,"column_start":5,"column_end":28},"name":"DW_AT_GNU_template_name","qualname":"::constants::DW_AT_GNU_template_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4812},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44051,"byte_end":44076,"line_start":523,"line_end":523,"column_start":5,"column_end":30},"name":"DW_AT_GNU_call_site_value","qualname":"::constants::DW_AT_GNU_call_site_value","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4813},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44091,"byte_end":44121,"line_start":524,"line_end":524,"column_start":5,"column_end":35},"name":"DW_AT_GNU_call_site_data_value","qualname":"::constants::DW_AT_GNU_call_site_data_value","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4814},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44136,"byte_end":44162,"line_start":525,"line_end":525,"column_start":5,"column_end":31},"name":"DW_AT_GNU_call_site_target","qualname":"::constants::DW_AT_GNU_call_site_target","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4815},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44177,"byte_end":44213,"line_start":526,"line_end":526,"column_start":5,"column_end":41},"name":"DW_AT_GNU_call_site_target_clobbered","qualname":"::constants::DW_AT_GNU_call_site_target_clobbered","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4816},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44228,"byte_end":44247,"line_start":527,"line_end":527,"column_start":5,"column_end":24},"name":"DW_AT_GNU_tail_call","qualname":"::constants::DW_AT_GNU_tail_call","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4817},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44262,"byte_end":44291,"line_start":528,"line_end":528,"column_start":5,"column_end":34},"name":"DW_AT_GNU_all_tail_call_sites","qualname":"::constants::DW_AT_GNU_all_tail_call_sites","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4818},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44306,"byte_end":44330,"line_start":529,"line_end":529,"column_start":5,"column_end":29},"name":"DW_AT_GNU_all_call_sites","qualname":"::constants::DW_AT_GNU_all_call_sites","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4819},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44345,"byte_end":44376,"line_start":530,"line_end":530,"column_start":5,"column_end":36},"name":"DW_AT_GNU_all_source_call_sites","qualname":"::constants::DW_AT_GNU_all_source_call_sites","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4820},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44391,"byte_end":44407,"line_start":531,"line_end":531,"column_start":5,"column_end":21},"name":"DW_AT_GNU_macros","qualname":"::constants::DW_AT_GNU_macros","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4821},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44459,"byte_end":44477,"line_start":534,"line_end":534,"column_start":5,"column_end":23},"name":"DW_AT_GNU_dwo_name","qualname":"::constants::DW_AT_GNU_dwo_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4822},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44492,"byte_end":44508,"line_start":535,"line_end":535,"column_start":5,"column_end":21},"name":"DW_AT_GNU_dwo_id","qualname":"::constants::DW_AT_GNU_dwo_id","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4823},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44523,"byte_end":44544,"line_start":536,"line_end":536,"column_start":5,"column_end":26},"name":"DW_AT_GNU_ranges_base","qualname":"::constants::DW_AT_GNU_ranges_base","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4824},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44559,"byte_end":44578,"line_start":537,"line_end":537,"column_start":5,"column_end":24},"name":"DW_AT_GNU_addr_base","qualname":"::constants::DW_AT_GNU_addr_base","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4825},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44593,"byte_end":44611,"line_start":538,"line_end":538,"column_start":5,"column_end":23},"name":"DW_AT_GNU_pubnames","qualname":"::constants::DW_AT_GNU_pubnames","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4826},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44626,"byte_end":44644,"line_start":539,"line_end":539,"column_start":5,"column_end":23},"name":"DW_AT_GNU_pubtypes","qualname":"::constants::DW_AT_GNU_pubtypes","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4827},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44659,"byte_end":44682,"line_start":540,"line_end":540,"column_start":5,"column_end":28},"name":"DW_AT_GNU_discriminator","qualname":"::constants::DW_AT_GNU_discriminator","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4828},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44697,"byte_end":44715,"line_start":541,"line_end":541,"column_start":5,"column_end":23},"name":"DW_AT_GNU_locviews","qualname":"::constants::DW_AT_GNU_locviews","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4829},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44730,"byte_end":44750,"line_start":542,"line_end":542,"column_start":5,"column_end":25},"name":"DW_AT_GNU_entry_view","qualname":"::constants::DW_AT_GNU_entry_view","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4830},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44849,"byte_end":44867,"line_start":548,"line_end":548,"column_start":5,"column_end":23},"name":"DW_AT_SUN_template","qualname":"::constants::DW_AT_SUN_template","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4831},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44882,"byte_end":44901,"line_start":549,"line_end":549,"column_start":5,"column_end":24},"name":"DW_AT_SUN_alignment","qualname":"::constants::DW_AT_SUN_alignment","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4832},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44916,"byte_end":44932,"line_start":550,"line_end":550,"column_start":5,"column_end":21},"name":"DW_AT_SUN_vtable","qualname":"::constants::DW_AT_SUN_vtable","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4833},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44947,"byte_end":44972,"line_start":551,"line_end":551,"column_start":5,"column_end":30},"name":"DW_AT_SUN_count_guarantee","qualname":"::constants::DW_AT_SUN_count_guarantee","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4834},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":44987,"byte_end":45009,"line_start":552,"line_end":552,"column_start":5,"column_end":27},"name":"DW_AT_SUN_command_line","qualname":"::constants::DW_AT_SUN_command_line","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4835},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45024,"byte_end":45039,"line_start":553,"line_end":553,"column_start":5,"column_end":20},"name":"DW_AT_SUN_vbase","qualname":"::constants::DW_AT_SUN_vbase","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4836},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45054,"byte_end":45079,"line_start":554,"line_end":554,"column_start":5,"column_end":30},"name":"DW_AT_SUN_compile_options","qualname":"::constants::DW_AT_SUN_compile_options","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4837},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45094,"byte_end":45112,"line_start":555,"line_end":555,"column_start":5,"column_end":23},"name":"DW_AT_SUN_language","qualname":"::constants::DW_AT_SUN_language","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4838},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45127,"byte_end":45149,"line_start":556,"line_end":556,"column_start":5,"column_end":27},"name":"DW_AT_SUN_browser_file","qualname":"::constants::DW_AT_SUN_browser_file","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4839},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45164,"byte_end":45184,"line_start":557,"line_end":557,"column_start":5,"column_end":25},"name":"DW_AT_SUN_vtable_abi","qualname":"::constants::DW_AT_SUN_vtable_abi","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4840},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45199,"byte_end":45221,"line_start":558,"line_end":558,"column_start":5,"column_end":27},"name":"DW_AT_SUN_func_offsets","qualname":"::constants::DW_AT_SUN_func_offsets","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4841},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45236,"byte_end":45253,"line_start":559,"line_end":559,"column_start":5,"column_end":22},"name":"DW_AT_SUN_cf_kind","qualname":"::constants::DW_AT_SUN_cf_kind","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4842},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45268,"byte_end":45290,"line_start":560,"line_end":560,"column_start":5,"column_end":27},"name":"DW_AT_SUN_vtable_index","qualname":"::constants::DW_AT_SUN_vtable_index","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4843},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45305,"byte_end":45329,"line_start":561,"line_end":561,"column_start":5,"column_end":29},"name":"DW_AT_SUN_omp_tpriv_addr","qualname":"::constants::DW_AT_SUN_omp_tpriv_addr","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4844},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45344,"byte_end":45368,"line_start":562,"line_end":562,"column_start":5,"column_end":29},"name":"DW_AT_SUN_omp_child_func","qualname":"::constants::DW_AT_SUN_omp_child_func","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4845},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45383,"byte_end":45404,"line_start":563,"line_end":563,"column_start":5,"column_end":26},"name":"DW_AT_SUN_func_offset","qualname":"::constants::DW_AT_SUN_func_offset","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4846},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45419,"byte_end":45443,"line_start":564,"line_end":564,"column_start":5,"column_end":29},"name":"DW_AT_SUN_memop_type_ref","qualname":"::constants::DW_AT_SUN_memop_type_ref","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4847},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45458,"byte_end":45478,"line_start":565,"line_end":565,"column_start":5,"column_end":25},"name":"DW_AT_SUN_profile_id","qualname":"::constants::DW_AT_SUN_profile_id","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4848},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45493,"byte_end":45518,"line_start":566,"line_end":566,"column_start":5,"column_end":30},"name":"DW_AT_SUN_memop_signature","qualname":"::constants::DW_AT_SUN_memop_signature","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4849},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45533,"byte_end":45550,"line_start":567,"line_end":567,"column_start":5,"column_end":22},"name":"DW_AT_SUN_obj_dir","qualname":"::constants::DW_AT_SUN_obj_dir","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4850},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45565,"byte_end":45583,"line_start":568,"line_end":568,"column_start":5,"column_end":23},"name":"DW_AT_SUN_obj_file","qualname":"::constants::DW_AT_SUN_obj_file","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4851},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45598,"byte_end":45621,"line_start":569,"line_end":569,"column_start":5,"column_end":28},"name":"DW_AT_SUN_original_name","qualname":"::constants::DW_AT_SUN_original_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4852},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45636,"byte_end":45663,"line_start":570,"line_end":570,"column_start":5,"column_end":32},"name":"DW_AT_SUN_hwcprof_signature","qualname":"::constants::DW_AT_SUN_hwcprof_signature","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4853},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45678,"byte_end":45702,"line_start":571,"line_end":571,"column_start":5,"column_end":29},"name":"DW_AT_SUN_amd64_parmdump","qualname":"::constants::DW_AT_SUN_amd64_parmdump","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4854},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45717,"byte_end":45741,"line_start":572,"line_end":572,"column_start":5,"column_end":29},"name":"DW_AT_SUN_part_link_name","qualname":"::constants::DW_AT_SUN_part_link_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4855},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45756,"byte_end":45775,"line_start":573,"line_end":573,"column_start":5,"column_end":24},"name":"DW_AT_SUN_link_name","qualname":"::constants::DW_AT_SUN_link_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4856},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45790,"byte_end":45815,"line_start":574,"line_end":574,"column_start":5,"column_end":30},"name":"DW_AT_SUN_pass_with_const","qualname":"::constants::DW_AT_SUN_pass_with_const","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4857},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45830,"byte_end":45857,"line_start":575,"line_end":575,"column_start":5,"column_end":32},"name":"DW_AT_SUN_return_with_const","qualname":"::constants::DW_AT_SUN_return_with_const","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4858},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45872,"byte_end":45896,"line_start":576,"line_end":576,"column_start":5,"column_end":29},"name":"DW_AT_SUN_import_by_name","qualname":"::constants::DW_AT_SUN_import_by_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4859},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45911,"byte_end":45932,"line_start":577,"line_end":577,"column_start":5,"column_end":26},"name":"DW_AT_SUN_f90_pointer","qualname":"::constants::DW_AT_SUN_f90_pointer","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4860},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45947,"byte_end":45968,"line_start":578,"line_end":578,"column_start":5,"column_end":26},"name":"DW_AT_SUN_pass_by_ref","qualname":"::constants::DW_AT_SUN_pass_by_ref","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4861},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":45983,"byte_end":46008,"line_start":579,"line_end":579,"column_start":5,"column_end":30},"name":"DW_AT_SUN_f90_allocatable","qualname":"::constants::DW_AT_SUN_f90_allocatable","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4862},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46023,"byte_end":46056,"line_start":580,"line_end":580,"column_start":5,"column_end":38},"name":"DW_AT_SUN_f90_assumed_shape_array","qualname":"::constants::DW_AT_SUN_f90_assumed_shape_array","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4863},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46071,"byte_end":46086,"line_start":581,"line_end":581,"column_start":5,"column_end":20},"name":"DW_AT_SUN_c_vla","qualname":"::constants::DW_AT_SUN_c_vla","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4864},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46101,"byte_end":46127,"line_start":582,"line_end":582,"column_start":5,"column_end":31},"name":"DW_AT_SUN_return_value_ptr","qualname":"::constants::DW_AT_SUN_return_value_ptr","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4865},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46142,"byte_end":46162,"line_start":583,"line_end":583,"column_start":5,"column_end":25},"name":"DW_AT_SUN_dtor_start","qualname":"::constants::DW_AT_SUN_dtor_start","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4866},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46177,"byte_end":46198,"line_start":584,"line_end":584,"column_start":5,"column_end":26},"name":"DW_AT_SUN_dtor_length","qualname":"::constants::DW_AT_SUN_dtor_length","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4867},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46213,"byte_end":46241,"line_start":585,"line_end":585,"column_start":5,"column_end":33},"name":"DW_AT_SUN_dtor_state_initial","qualname":"::constants::DW_AT_SUN_dtor_state_initial","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4868},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46256,"byte_end":46282,"line_start":586,"line_end":586,"column_start":5,"column_end":31},"name":"DW_AT_SUN_dtor_state_final","qualname":"::constants::DW_AT_SUN_dtor_state_final","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4869},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46297,"byte_end":46324,"line_start":587,"line_end":587,"column_start":5,"column_end":32},"name":"DW_AT_SUN_dtor_state_deltas","qualname":"::constants::DW_AT_SUN_dtor_state_deltas","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4870},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46339,"byte_end":46364,"line_start":588,"line_end":588,"column_start":5,"column_end":30},"name":"DW_AT_SUN_import_by_lname","qualname":"::constants::DW_AT_SUN_import_by_lname","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4871},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46379,"byte_end":46401,"line_start":589,"line_end":589,"column_start":5,"column_end":27},"name":"DW_AT_SUN_f90_use_only","qualname":"::constants::DW_AT_SUN_f90_use_only","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4872},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46416,"byte_end":46439,"line_start":590,"line_end":590,"column_start":5,"column_end":28},"name":"DW_AT_SUN_namelist_spec","qualname":"::constants::DW_AT_SUN_namelist_spec","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4873},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46454,"byte_end":46481,"line_start":591,"line_end":591,"column_start":5,"column_end":32},"name":"DW_AT_SUN_is_omp_child_func","qualname":"::constants::DW_AT_SUN_is_omp_child_func","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4874},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46496,"byte_end":46524,"line_start":592,"line_end":592,"column_start":5,"column_end":33},"name":"DW_AT_SUN_fortran_main_alias","qualname":"::constants::DW_AT_SUN_fortran_main_alias","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4875},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46539,"byte_end":46562,"line_start":593,"line_end":593,"column_start":5,"column_end":28},"name":"DW_AT_SUN_fortran_based","qualname":"::constants::DW_AT_SUN_fortran_based","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4876},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46578,"byte_end":46598,"line_start":595,"line_end":595,"column_start":5,"column_end":25},"name":"DW_AT_ALTIUM_loclist","qualname":"::constants::DW_AT_ALTIUM_loclist","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4877},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46614,"byte_end":46645,"line_start":597,"line_end":597,"column_start":5,"column_end":36},"name":"DW_AT_use_GNAT_descriptive_type","qualname":"::constants::DW_AT_use_GNAT_descriptive_type","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4878},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46660,"byte_end":46687,"line_start":598,"line_end":598,"column_start":5,"column_end":32},"name":"DW_AT_GNAT_descriptive_type","qualname":"::constants::DW_AT_GNAT_descriptive_type","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4879},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46702,"byte_end":46721,"line_start":599,"line_end":599,"column_start":5,"column_end":24},"name":"DW_AT_GNU_numerator","qualname":"::constants::DW_AT_GNU_numerator","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4880},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46736,"byte_end":46757,"line_start":600,"line_end":600,"column_start":5,"column_end":26},"name":"DW_AT_GNU_denominator","qualname":"::constants::DW_AT_GNU_denominator","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4881},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46772,"byte_end":46786,"line_start":601,"line_end":601,"column_start":5,"column_end":19},"name":"DW_AT_GNU_bias","qualname":"::constants::DW_AT_GNU_bias","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4882},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46802,"byte_end":46826,"line_start":603,"line_end":603,"column_start":5,"column_end":29},"name":"DW_AT_upc_threads_scaled","qualname":"::constants::DW_AT_upc_threads_scaled","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4883},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46882,"byte_end":46897,"line_start":606,"line_end":606,"column_start":5,"column_end":20},"name":"DW_AT_PGI_lbase","qualname":"::constants::DW_AT_PGI_lbase","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4884},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46912,"byte_end":46929,"line_start":607,"line_end":607,"column_start":5,"column_end":22},"name":"DW_AT_PGI_soffset","qualname":"::constants::DW_AT_PGI_soffset","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4885},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":46944,"byte_end":46961,"line_start":608,"line_end":608,"column_start":5,"column_end":22},"name":"DW_AT_PGI_lstride","qualname":"::constants::DW_AT_PGI_lstride","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4886},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":47000,"byte_end":47027,"line_start":611,"line_end":611,"column_start":5,"column_end":32},"name":"DW_AT_BORLAND_property_read","qualname":"::constants::DW_AT_BORLAND_property_read","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4887},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":47042,"byte_end":47070,"line_start":612,"line_end":612,"column_start":5,"column_end":33},"name":"DW_AT_BORLAND_property_write","qualname":"::constants::DW_AT_BORLAND_property_write","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4888},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":47085,"byte_end":47118,"line_start":613,"line_end":613,"column_start":5,"column_end":38},"name":"DW_AT_BORLAND_property_implements","qualname":"::constants::DW_AT_BORLAND_property_implements","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4889},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":47133,"byte_end":47161,"line_start":614,"line_end":614,"column_start":5,"column_end":33},"name":"DW_AT_BORLAND_property_index","qualname":"::constants::DW_AT_BORLAND_property_index","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4890},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":47176,"byte_end":47206,"line_start":615,"line_end":615,"column_start":5,"column_end":35},"name":"DW_AT_BORLAND_property_default","qualname":"::constants::DW_AT_BORLAND_property_default","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4891},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":47221,"byte_end":47246,"line_start":616,"line_end":616,"column_start":5,"column_end":30},"name":"DW_AT_BORLAND_Delphi_unit","qualname":"::constants::DW_AT_BORLAND_Delphi_unit","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4892},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":47261,"byte_end":47287,"line_start":617,"line_end":617,"column_start":5,"column_end":31},"name":"DW_AT_BORLAND_Delphi_class","qualname":"::constants::DW_AT_BORLAND_Delphi_class","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4893},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":47302,"byte_end":47329,"line_start":618,"line_end":618,"column_start":5,"column_end":32},"name":"DW_AT_BORLAND_Delphi_record","qualname":"::constants::DW_AT_BORLAND_Delphi_record","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4894},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":47344,"byte_end":47374,"line_start":619,"line_end":619,"column_start":5,"column_end":35},"name":"DW_AT_BORLAND_Delphi_metaclass","qualname":"::constants::DW_AT_BORLAND_Delphi_metaclass","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4895},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":47389,"byte_end":47421,"line_start":620,"line_end":620,"column_start":5,"column_end":37},"name":"DW_AT_BORLAND_Delphi_constructor","qualname":"::constants::DW_AT_BORLAND_Delphi_constructor","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4896},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":47436,"byte_end":47467,"line_start":621,"line_end":621,"column_start":5,"column_end":36},"name":"DW_AT_BORLAND_Delphi_destructor","qualname":"::constants::DW_AT_BORLAND_Delphi_destructor","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4897},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":47482,"byte_end":47519,"line_start":622,"line_end":622,"column_start":5,"column_end":42},"name":"DW_AT_BORLAND_Delphi_anonymous_method","qualname":"::constants::DW_AT_BORLAND_Delphi_anonymous_method","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4898},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":47534,"byte_end":47564,"line_start":623,"line_end":623,"column_start":5,"column_end":35},"name":"DW_AT_BORLAND_Delphi_interface","qualname":"::constants::DW_AT_BORLAND_Delphi_interface","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4899},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":47579,"byte_end":47603,"line_start":624,"line_end":624,"column_start":5,"column_end":29},"name":"DW_AT_BORLAND_Delphi_ABI","qualname":"::constants::DW_AT_BORLAND_Delphi_ABI","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4900},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":47618,"byte_end":47645,"line_start":625,"line_end":625,"column_start":5,"column_end":32},"name":"DW_AT_BORLAND_Delphi_return","qualname":"::constants::DW_AT_BORLAND_Delphi_return","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4901},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":47660,"byte_end":47689,"line_start":626,"line_end":626,"column_start":5,"column_end":34},"name":"DW_AT_BORLAND_Delphi_frameptr","qualname":"::constants::DW_AT_BORLAND_Delphi_frameptr","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4902},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":47704,"byte_end":47725,"line_start":627,"line_end":627,"column_start":5,"column_end":26},"name":"DW_AT_BORLAND_closure","qualname":"::constants::DW_AT_BORLAND_closure","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4903},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":47769,"byte_end":47792,"line_start":630,"line_end":630,"column_start":5,"column_end":28},"name":"DW_AT_LLVM_include_path","qualname":"::constants::DW_AT_LLVM_include_path","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4904},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":47807,"byte_end":47831,"line_start":631,"line_end":631,"column_start":5,"column_end":29},"name":"DW_AT_LLVM_config_macros","qualname":"::constants::DW_AT_LLVM_config_macros","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4905},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":47846,"byte_end":47865,"line_start":632,"line_end":632,"column_start":5,"column_end":24},"name":"DW_AT_LLVM_isysroot","qualname":"::constants::DW_AT_LLVM_isysroot","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4906},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":47902,"byte_end":47923,"line_start":635,"line_end":635,"column_start":5,"column_end":26},"name":"DW_AT_APPLE_optimized","qualname":"::constants::DW_AT_APPLE_optimized","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4907},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":47938,"byte_end":47955,"line_start":636,"line_end":636,"column_start":5,"column_end":22},"name":"DW_AT_APPLE_flags","qualname":"::constants::DW_AT_APPLE_flags","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4908},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":47970,"byte_end":47985,"line_start":637,"line_end":637,"column_start":5,"column_end":20},"name":"DW_AT_APPLE_isa","qualname":"::constants::DW_AT_APPLE_isa","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4909},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48000,"byte_end":48017,"line_start":638,"line_end":638,"column_start":5,"column_end":22},"name":"DW_AT_APPLE_block","qualname":"::constants::DW_AT_APPLE_block","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4910},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48032,"byte_end":48062,"line_start":639,"line_end":639,"column_start":5,"column_end":35},"name":"DW_AT_APPLE_major_runtime_vers","qualname":"::constants::DW_AT_APPLE_major_runtime_vers","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4911},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48077,"byte_end":48102,"line_start":640,"line_end":640,"column_start":5,"column_end":30},"name":"DW_AT_APPLE_runtime_class","qualname":"::constants::DW_AT_APPLE_runtime_class","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4912},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48117,"byte_end":48143,"line_start":641,"line_end":641,"column_start":5,"column_end":31},"name":"DW_AT_APPLE_omit_frame_ptr","qualname":"::constants::DW_AT_APPLE_omit_frame_ptr","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4913},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48158,"byte_end":48183,"line_start":642,"line_end":642,"column_start":5,"column_end":30},"name":"DW_AT_APPLE_property_name","qualname":"::constants::DW_AT_APPLE_property_name","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4914},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48198,"byte_end":48225,"line_start":643,"line_end":643,"column_start":5,"column_end":32},"name":"DW_AT_APPLE_property_getter","qualname":"::constants::DW_AT_APPLE_property_getter","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4915},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48240,"byte_end":48267,"line_start":644,"line_end":644,"column_start":5,"column_end":32},"name":"DW_AT_APPLE_property_setter","qualname":"::constants::DW_AT_APPLE_property_setter","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4916},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48282,"byte_end":48312,"line_start":645,"line_end":645,"column_start":5,"column_end":35},"name":"DW_AT_APPLE_property_attribute","qualname":"::constants::DW_AT_APPLE_property_attribute","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4917},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48327,"byte_end":48357,"line_start":646,"line_end":646,"column_start":5,"column_end":35},"name":"DW_AT_APPLE_objc_complete_type","qualname":"::constants::DW_AT_APPLE_objc_complete_type","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4918},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48372,"byte_end":48392,"line_start":647,"line_end":647,"column_start":5,"column_end":25},"name":"DW_AT_APPLE_property","qualname":"::constants::DW_AT_APPLE_property","value":"DwAt","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4997},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48503,"byte_end":48509,"line_start":654,"line_end":654,"column_start":1,"column_end":7},"name":"DwForm","qualname":"::constants::DwForm","value":"","parent":null,"children":[],"decl_id":null,"docs":" The attribute form encodings for DIE attributes.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4945},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48521,"byte_end":48533,"line_start":655,"line_end":655,"column_start":5,"column_end":17},"name":"DW_FORM_null","qualname":"::constants::DW_FORM_null","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4946},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48547,"byte_end":48559,"line_start":657,"line_end":657,"column_start":5,"column_end":17},"name":"DW_FORM_addr","qualname":"::constants::DW_FORM_addr","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4947},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48572,"byte_end":48586,"line_start":658,"line_end":658,"column_start":5,"column_end":19},"name":"DW_FORM_block2","qualname":"::constants::DW_FORM_block2","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4948},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48599,"byte_end":48613,"line_start":659,"line_end":659,"column_start":5,"column_end":19},"name":"DW_FORM_block4","qualname":"::constants::DW_FORM_block4","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4949},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48626,"byte_end":48639,"line_start":660,"line_end":660,"column_start":5,"column_end":18},"name":"DW_FORM_data2","qualname":"::constants::DW_FORM_data2","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4950},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48652,"byte_end":48665,"line_start":661,"line_end":661,"column_start":5,"column_end":18},"name":"DW_FORM_data4","qualname":"::constants::DW_FORM_data4","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4951},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48678,"byte_end":48691,"line_start":662,"line_end":662,"column_start":5,"column_end":18},"name":"DW_FORM_data8","qualname":"::constants::DW_FORM_data8","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4952},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48704,"byte_end":48718,"line_start":663,"line_end":663,"column_start":5,"column_end":19},"name":"DW_FORM_string","qualname":"::constants::DW_FORM_string","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4953},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48731,"byte_end":48744,"line_start":664,"line_end":664,"column_start":5,"column_end":18},"name":"DW_FORM_block","qualname":"::constants::DW_FORM_block","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4954},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48757,"byte_end":48771,"line_start":665,"line_end":665,"column_start":5,"column_end":19},"name":"DW_FORM_block1","qualname":"::constants::DW_FORM_block1","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4955},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48784,"byte_end":48797,"line_start":666,"line_end":666,"column_start":5,"column_end":18},"name":"DW_FORM_data1","qualname":"::constants::DW_FORM_data1","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4956},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48810,"byte_end":48822,"line_start":667,"line_end":667,"column_start":5,"column_end":17},"name":"DW_FORM_flag","qualname":"::constants::DW_FORM_flag","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4957},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48835,"byte_end":48848,"line_start":668,"line_end":668,"column_start":5,"column_end":18},"name":"DW_FORM_sdata","qualname":"::constants::DW_FORM_sdata","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4958},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48861,"byte_end":48873,"line_start":669,"line_end":669,"column_start":5,"column_end":17},"name":"DW_FORM_strp","qualname":"::constants::DW_FORM_strp","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4959},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48886,"byte_end":48899,"line_start":670,"line_end":670,"column_start":5,"column_end":18},"name":"DW_FORM_udata","qualname":"::constants::DW_FORM_udata","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4960},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48912,"byte_end":48928,"line_start":671,"line_end":671,"column_start":5,"column_end":21},"name":"DW_FORM_ref_addr","qualname":"::constants::DW_FORM_ref_addr","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4961},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48941,"byte_end":48953,"line_start":672,"line_end":672,"column_start":5,"column_end":17},"name":"DW_FORM_ref1","qualname":"::constants::DW_FORM_ref1","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4962},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48966,"byte_end":48978,"line_start":673,"line_end":673,"column_start":5,"column_end":17},"name":"DW_FORM_ref2","qualname":"::constants::DW_FORM_ref2","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4963},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":48991,"byte_end":49003,"line_start":674,"line_end":674,"column_start":5,"column_end":17},"name":"DW_FORM_ref4","qualname":"::constants::DW_FORM_ref4","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4964},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49016,"byte_end":49028,"line_start":675,"line_end":675,"column_start":5,"column_end":17},"name":"DW_FORM_ref8","qualname":"::constants::DW_FORM_ref8","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4965},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49041,"byte_end":49058,"line_start":676,"line_end":676,"column_start":5,"column_end":22},"name":"DW_FORM_ref_udata","qualname":"::constants::DW_FORM_ref_udata","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4966},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49071,"byte_end":49087,"line_start":677,"line_end":677,"column_start":5,"column_end":21},"name":"DW_FORM_indirect","qualname":"::constants::DW_FORM_indirect","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4967},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49113,"byte_end":49131,"line_start":680,"line_end":680,"column_start":5,"column_end":23},"name":"DW_FORM_sec_offset","qualname":"::constants::DW_FORM_sec_offset","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4968},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49144,"byte_end":49159,"line_start":681,"line_end":681,"column_start":5,"column_end":20},"name":"DW_FORM_exprloc","qualname":"::constants::DW_FORM_exprloc","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4969},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49172,"byte_end":49192,"line_start":682,"line_end":682,"column_start":5,"column_end":25},"name":"DW_FORM_flag_present","qualname":"::constants::DW_FORM_flag_present","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4970},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49205,"byte_end":49221,"line_start":683,"line_end":683,"column_start":5,"column_end":21},"name":"DW_FORM_ref_sig8","qualname":"::constants::DW_FORM_ref_sig8","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4971},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49247,"byte_end":49259,"line_start":686,"line_end":686,"column_start":5,"column_end":17},"name":"DW_FORM_strx","qualname":"::constants::DW_FORM_strx","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4972},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49272,"byte_end":49285,"line_start":687,"line_end":687,"column_start":5,"column_end":18},"name":"DW_FORM_addrx","qualname":"::constants::DW_FORM_addrx","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4973},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49298,"byte_end":49314,"line_start":688,"line_end":688,"column_start":5,"column_end":21},"name":"DW_FORM_ref_sup4","qualname":"::constants::DW_FORM_ref_sup4","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4974},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49327,"byte_end":49343,"line_start":689,"line_end":689,"column_start":5,"column_end":21},"name":"DW_FORM_strp_sup","qualname":"::constants::DW_FORM_strp_sup","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4975},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49356,"byte_end":49370,"line_start":690,"line_end":690,"column_start":5,"column_end":19},"name":"DW_FORM_data16","qualname":"::constants::DW_FORM_data16","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4976},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49383,"byte_end":49400,"line_start":691,"line_end":691,"column_start":5,"column_end":22},"name":"DW_FORM_line_strp","qualname":"::constants::DW_FORM_line_strp","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4977},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49413,"byte_end":49435,"line_start":692,"line_end":692,"column_start":5,"column_end":27},"name":"DW_FORM_implicit_const","qualname":"::constants::DW_FORM_implicit_const","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4978},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49448,"byte_end":49464,"line_start":693,"line_end":693,"column_start":5,"column_end":21},"name":"DW_FORM_loclistx","qualname":"::constants::DW_FORM_loclistx","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4979},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49477,"byte_end":49493,"line_start":694,"line_end":694,"column_start":5,"column_end":21},"name":"DW_FORM_rnglistx","qualname":"::constants::DW_FORM_rnglistx","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4980},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49506,"byte_end":49522,"line_start":695,"line_end":695,"column_start":5,"column_end":21},"name":"DW_FORM_ref_sup8","qualname":"::constants::DW_FORM_ref_sup8","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4981},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49535,"byte_end":49548,"line_start":696,"line_end":696,"column_start":5,"column_end":18},"name":"DW_FORM_strx1","qualname":"::constants::DW_FORM_strx1","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4982},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49561,"byte_end":49574,"line_start":697,"line_end":697,"column_start":5,"column_end":18},"name":"DW_FORM_strx2","qualname":"::constants::DW_FORM_strx2","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4983},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49587,"byte_end":49600,"line_start":698,"line_end":698,"column_start":5,"column_end":18},"name":"DW_FORM_strx3","qualname":"::constants::DW_FORM_strx3","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4984},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49613,"byte_end":49626,"line_start":699,"line_end":699,"column_start":5,"column_end":18},"name":"DW_FORM_strx4","qualname":"::constants::DW_FORM_strx4","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4985},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49639,"byte_end":49653,"line_start":700,"line_end":700,"column_start":5,"column_end":19},"name":"DW_FORM_addrx1","qualname":"::constants::DW_FORM_addrx1","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4986},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49666,"byte_end":49680,"line_start":701,"line_end":701,"column_start":5,"column_end":19},"name":"DW_FORM_addrx2","qualname":"::constants::DW_FORM_addrx2","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4987},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49693,"byte_end":49707,"line_start":702,"line_end":702,"column_start":5,"column_end":19},"name":"DW_FORM_addrx3","qualname":"::constants::DW_FORM_addrx3","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4988},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49720,"byte_end":49734,"line_start":703,"line_end":703,"column_start":5,"column_end":19},"name":"DW_FORM_addrx4","qualname":"::constants::DW_FORM_addrx4","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4989},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49783,"byte_end":49805,"line_start":706,"line_end":706,"column_start":5,"column_end":27},"name":"DW_FORM_GNU_addr_index","qualname":"::constants::DW_FORM_GNU_addr_index","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4990},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49820,"byte_end":49841,"line_start":707,"line_end":707,"column_start":5,"column_end":26},"name":"DW_FORM_GNU_str_index","qualname":"::constants::DW_FORM_GNU_str_index","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4991},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49918,"byte_end":49937,"line_start":710,"line_end":710,"column_start":5,"column_end":24},"name":"DW_FORM_GNU_ref_alt","qualname":"::constants::DW_FORM_GNU_ref_alt","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":4992},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":49952,"byte_end":49972,"line_start":711,"line_end":711,"column_start":5,"column_end":25},"name":"DW_FORM_GNU_strp_alt","qualname":"::constants::DW_FORM_GNU_strp_alt","value":"DwForm","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5043},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50104,"byte_end":50109,"line_start":718,"line_end":718,"column_start":1,"column_end":6},"name":"DwAte","qualname":"::constants::DwAte","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_encoding` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5019},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50120,"byte_end":50134,"line_start":719,"line_end":719,"column_start":5,"column_end":19},"name":"DW_ATE_address","qualname":"::constants::DW_ATE_address","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5020},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50147,"byte_end":50161,"line_start":720,"line_end":720,"column_start":5,"column_end":19},"name":"DW_ATE_boolean","qualname":"::constants::DW_ATE_boolean","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5021},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50174,"byte_end":50194,"line_start":721,"line_end":721,"column_start":5,"column_end":25},"name":"DW_ATE_complex_float","qualname":"::constants::DW_ATE_complex_float","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5022},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50207,"byte_end":50219,"line_start":722,"line_end":722,"column_start":5,"column_end":17},"name":"DW_ATE_float","qualname":"::constants::DW_ATE_float","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5023},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50232,"byte_end":50245,"line_start":723,"line_end":723,"column_start":5,"column_end":18},"name":"DW_ATE_signed","qualname":"::constants::DW_ATE_signed","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5024},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50258,"byte_end":50276,"line_start":724,"line_end":724,"column_start":5,"column_end":23},"name":"DW_ATE_signed_char","qualname":"::constants::DW_ATE_signed_char","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5025},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50289,"byte_end":50304,"line_start":725,"line_end":725,"column_start":5,"column_end":20},"name":"DW_ATE_unsigned","qualname":"::constants::DW_ATE_unsigned","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5026},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50317,"byte_end":50337,"line_start":726,"line_end":726,"column_start":5,"column_end":25},"name":"DW_ATE_unsigned_char","qualname":"::constants::DW_ATE_unsigned_char","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5027},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50363,"byte_end":50385,"line_start":729,"line_end":729,"column_start":5,"column_end":27},"name":"DW_ATE_imaginary_float","qualname":"::constants::DW_ATE_imaginary_float","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5028},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50398,"byte_end":50419,"line_start":730,"line_end":730,"column_start":5,"column_end":26},"name":"DW_ATE_packed_decimal","qualname":"::constants::DW_ATE_packed_decimal","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5029},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50432,"byte_end":50453,"line_start":731,"line_end":731,"column_start":5,"column_end":26},"name":"DW_ATE_numeric_string","qualname":"::constants::DW_ATE_numeric_string","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5030},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50466,"byte_end":50479,"line_start":732,"line_end":732,"column_start":5,"column_end":18},"name":"DW_ATE_edited","qualname":"::constants::DW_ATE_edited","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5031},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50492,"byte_end":50511,"line_start":733,"line_end":733,"column_start":5,"column_end":24},"name":"DW_ATE_signed_fixed","qualname":"::constants::DW_ATE_signed_fixed","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5032},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50524,"byte_end":50545,"line_start":734,"line_end":734,"column_start":5,"column_end":26},"name":"DW_ATE_unsigned_fixed","qualname":"::constants::DW_ATE_unsigned_fixed","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5033},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50558,"byte_end":50578,"line_start":735,"line_end":735,"column_start":5,"column_end":25},"name":"DW_ATE_decimal_float","qualname":"::constants::DW_ATE_decimal_float","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5034},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50605,"byte_end":50615,"line_start":738,"line_end":738,"column_start":5,"column_end":15},"name":"DW_ATE_UTF","qualname":"::constants::DW_ATE_UTF","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5035},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50628,"byte_end":50638,"line_start":739,"line_end":739,"column_start":5,"column_end":15},"name":"DW_ATE_UCS","qualname":"::constants::DW_ATE_UCS","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5036},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50651,"byte_end":50663,"line_start":740,"line_end":740,"column_start":5,"column_end":17},"name":"DW_ATE_ASCII","qualname":"::constants::DW_ATE_ASCII","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5037},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50677,"byte_end":50691,"line_start":742,"line_end":742,"column_start":5,"column_end":19},"name":"DW_ATE_lo_user","qualname":"::constants::DW_ATE_lo_user","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5038},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50704,"byte_end":50718,"line_start":743,"line_end":743,"column_start":5,"column_end":19},"name":"DW_ATE_hi_user","qualname":"::constants::DW_ATE_hi_user","value":"DwAte","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5079},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50842,"byte_end":50847,"line_start":750,"line_end":750,"column_start":1,"column_end":6},"name":"DwLle","qualname":"::constants::DwLle","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in location list entries.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5065},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50858,"byte_end":50876,"line_start":751,"line_end":751,"column_start":5,"column_end":23},"name":"DW_LLE_end_of_list","qualname":"::constants::DW_LLE_end_of_list","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5066},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50889,"byte_end":50909,"line_start":752,"line_end":752,"column_start":5,"column_end":25},"name":"DW_LLE_base_addressx","qualname":"::constants::DW_LLE_base_addressx","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5067},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50922,"byte_end":50940,"line_start":753,"line_end":753,"column_start":5,"column_end":23},"name":"DW_LLE_startx_endx","qualname":"::constants::DW_LLE_startx_endx","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5068},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50953,"byte_end":50973,"line_start":754,"line_end":754,"column_start":5,"column_end":25},"name":"DW_LLE_startx_length","qualname":"::constants::DW_LLE_startx_length","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5069},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":50986,"byte_end":51004,"line_start":755,"line_end":755,"column_start":5,"column_end":23},"name":"DW_LLE_offset_pair","qualname":"::constants::DW_LLE_offset_pair","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5070},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":51017,"byte_end":51040,"line_start":756,"line_end":756,"column_start":5,"column_end":28},"name":"DW_LLE_default_location","qualname":"::constants::DW_LLE_default_location","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5071},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":51053,"byte_end":51072,"line_start":757,"line_end":757,"column_start":5,"column_end":24},"name":"DW_LLE_base_address","qualname":"::constants::DW_LLE_base_address","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5072},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":51085,"byte_end":51101,"line_start":758,"line_end":758,"column_start":5,"column_end":21},"name":"DW_LLE_start_end","qualname":"::constants::DW_LLE_start_end","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5073},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":51114,"byte_end":51133,"line_start":759,"line_end":759,"column_start":5,"column_end":24},"name":"DW_LLE_start_length","qualname":"::constants::DW_LLE_start_length","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5074},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":51146,"byte_end":51166,"line_start":760,"line_end":760,"column_start":5,"column_end":25},"name":"DW_LLE_GNU_view_pair","qualname":"::constants::DW_LLE_GNU_view_pair","value":"DwLle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5110},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":51301,"byte_end":51305,"line_start":767,"line_end":767,"column_start":1,"column_end":5},"name":"DwDs","qualname":"::constants::DwDs","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_decimal_sign` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5101},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":51316,"byte_end":51330,"line_start":768,"line_end":768,"column_start":5,"column_end":19},"name":"DW_DS_unsigned","qualname":"::constants::DW_DS_unsigned","value":"DwDs","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5102},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":51343,"byte_end":51366,"line_start":769,"line_end":769,"column_start":5,"column_end":28},"name":"DW_DS_leading_overpunch","qualname":"::constants::DW_DS_leading_overpunch","value":"DwDs","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5103},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":51379,"byte_end":51403,"line_start":770,"line_end":770,"column_start":5,"column_end":29},"name":"DW_DS_trailing_overpunch","qualname":"::constants::DW_DS_trailing_overpunch","value":"DwDs","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5104},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":51416,"byte_end":51438,"line_start":771,"line_end":771,"column_start":5,"column_end":27},"name":"DW_DS_leading_separate","qualname":"::constants::DW_DS_leading_separate","value":"DwDs","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5105},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":51451,"byte_end":51474,"line_start":772,"line_end":772,"column_start":5,"column_end":28},"name":"DW_DS_trailing_separate","qualname":"::constants::DW_DS_trailing_separate","value":"DwDs","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5141},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":51606,"byte_end":51611,"line_start":779,"line_end":779,"column_start":1,"column_end":6},"name":"DwEnd","qualname":"::constants::DwEnd","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_endianity` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5132},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":51622,"byte_end":51636,"line_start":780,"line_end":780,"column_start":5,"column_end":19},"name":"DW_END_default","qualname":"::constants::DW_END_default","value":"DwEnd","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5133},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":51649,"byte_end":51659,"line_start":781,"line_end":781,"column_start":5,"column_end":15},"name":"DW_END_big","qualname":"::constants::DW_END_big","value":"DwEnd","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5134},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":51672,"byte_end":51685,"line_start":782,"line_end":782,"column_start":5,"column_end":18},"name":"DW_END_little","qualname":"::constants::DW_END_little","value":"DwEnd","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5135},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":51698,"byte_end":51712,"line_start":783,"line_end":783,"column_start":5,"column_end":19},"name":"DW_END_lo_user","qualname":"::constants::DW_END_lo_user","value":"DwEnd","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5136},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":51725,"byte_end":51739,"line_start":784,"line_end":784,"column_start":5,"column_end":19},"name":"DW_END_hi_user","qualname":"::constants::DW_END_hi_user","value":"DwEnd","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5170},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":51875,"byte_end":51883,"line_start":791,"line_end":791,"column_start":1,"column_end":9},"name":"DwAccess","qualname":"::constants::DwAccess","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_accessibility` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5163},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":51894,"byte_end":51910,"line_start":792,"line_end":792,"column_start":5,"column_end":21},"name":"DW_ACCESS_public","qualname":"::constants::DW_ACCESS_public","value":"DwAccess","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5164},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":51923,"byte_end":51942,"line_start":793,"line_end":793,"column_start":5,"column_end":24},"name":"DW_ACCESS_protected","qualname":"::constants::DW_ACCESS_protected","value":"DwAccess","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5165},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":51955,"byte_end":51972,"line_start":794,"line_end":794,"column_start":5,"column_end":22},"name":"DW_ACCESS_private","qualname":"::constants::DW_ACCESS_private","value":"DwAccess","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5199},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52106,"byte_end":52111,"line_start":801,"line_end":801,"column_start":1,"column_end":6},"name":"DwVis","qualname":"::constants::DwVis","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_visibility` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5192},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52122,"byte_end":52134,"line_start":802,"line_end":802,"column_start":5,"column_end":17},"name":"DW_VIS_local","qualname":"::constants::DW_VIS_local","value":"DwVis","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5193},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52147,"byte_end":52162,"line_start":803,"line_end":803,"column_start":5,"column_end":20},"name":"DW_VIS_exported","qualname":"::constants::DW_VIS_exported","value":"DwVis","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5194},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52175,"byte_end":52191,"line_start":804,"line_end":804,"column_start":5,"column_end":21},"name":"DW_VIS_qualified","qualname":"::constants::DW_VIS_qualified","value":"DwVis","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5228},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52325,"byte_end":52337,"line_start":811,"line_end":811,"column_start":1,"column_end":13},"name":"DwVirtuality","qualname":"::constants::DwVirtuality","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_virtuality` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5221},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52348,"byte_end":52366,"line_start":812,"line_end":812,"column_start":5,"column_end":23},"name":"DW_VIRTUALITY_none","qualname":"::constants::DW_VIRTUALITY_none","value":"DwVirtuality","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5222},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52379,"byte_end":52400,"line_start":813,"line_end":813,"column_start":5,"column_end":26},"name":"DW_VIRTUALITY_virtual","qualname":"::constants::DW_VIRTUALITY_virtual","value":"DwVirtuality","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5223},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52413,"byte_end":52439,"line_start":814,"line_end":814,"column_start":5,"column_end":31},"name":"DW_VIRTUALITY_pure_virtual","qualname":"::constants::DW_VIRTUALITY_pure_virtual","value":"DwVirtuality","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5307},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52571,"byte_end":52577,"line_start":821,"line_end":821,"column_start":1,"column_end":7},"name":"DwLang","qualname":"::constants::DwLang","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_language` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5250},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52589,"byte_end":52600,"line_start":822,"line_end":822,"column_start":5,"column_end":16},"name":"DW_LANG_C89","qualname":"::constants::DW_LANG_C89","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5251},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52615,"byte_end":52624,"line_start":823,"line_end":823,"column_start":5,"column_end":14},"name":"DW_LANG_C","qualname":"::constants::DW_LANG_C","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5252},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52639,"byte_end":52652,"line_start":824,"line_end":824,"column_start":5,"column_end":18},"name":"DW_LANG_Ada83","qualname":"::constants::DW_LANG_Ada83","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5253},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52667,"byte_end":52686,"line_start":825,"line_end":825,"column_start":5,"column_end":24},"name":"DW_LANG_C_plus_plus","qualname":"::constants::DW_LANG_C_plus_plus","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5254},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52701,"byte_end":52716,"line_start":826,"line_end":826,"column_start":5,"column_end":20},"name":"DW_LANG_Cobol74","qualname":"::constants::DW_LANG_Cobol74","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5255},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52731,"byte_end":52746,"line_start":827,"line_end":827,"column_start":5,"column_end":20},"name":"DW_LANG_Cobol85","qualname":"::constants::DW_LANG_Cobol85","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5256},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52761,"byte_end":52778,"line_start":828,"line_end":828,"column_start":5,"column_end":22},"name":"DW_LANG_Fortran77","qualname":"::constants::DW_LANG_Fortran77","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5257},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52793,"byte_end":52810,"line_start":829,"line_end":829,"column_start":5,"column_end":22},"name":"DW_LANG_Fortran90","qualname":"::constants::DW_LANG_Fortran90","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5258},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52825,"byte_end":52841,"line_start":830,"line_end":830,"column_start":5,"column_end":21},"name":"DW_LANG_Pascal83","qualname":"::constants::DW_LANG_Pascal83","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5259},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52856,"byte_end":52871,"line_start":831,"line_end":831,"column_start":5,"column_end":20},"name":"DW_LANG_Modula2","qualname":"::constants::DW_LANG_Modula2","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5260},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52886,"byte_end":52898,"line_start":832,"line_end":832,"column_start":5,"column_end":17},"name":"DW_LANG_Java","qualname":"::constants::DW_LANG_Java","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5261},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52913,"byte_end":52924,"line_start":833,"line_end":833,"column_start":5,"column_end":16},"name":"DW_LANG_C99","qualname":"::constants::DW_LANG_C99","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5262},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52939,"byte_end":52952,"line_start":834,"line_end":834,"column_start":5,"column_end":18},"name":"DW_LANG_Ada95","qualname":"::constants::DW_LANG_Ada95","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5263},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52967,"byte_end":52984,"line_start":835,"line_end":835,"column_start":5,"column_end":22},"name":"DW_LANG_Fortran95","qualname":"::constants::DW_LANG_Fortran95","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5264},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":52999,"byte_end":53010,"line_start":836,"line_end":836,"column_start":5,"column_end":16},"name":"DW_LANG_PLI","qualname":"::constants::DW_LANG_PLI","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5265},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53025,"byte_end":53037,"line_start":837,"line_end":837,"column_start":5,"column_end":17},"name":"DW_LANG_ObjC","qualname":"::constants::DW_LANG_ObjC","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5266},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53052,"byte_end":53074,"line_start":838,"line_end":838,"column_start":5,"column_end":27},"name":"DW_LANG_ObjC_plus_plus","qualname":"::constants::DW_LANG_ObjC_plus_plus","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5267},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53089,"byte_end":53100,"line_start":839,"line_end":839,"column_start":5,"column_end":16},"name":"DW_LANG_UPC","qualname":"::constants::DW_LANG_UPC","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5268},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53115,"byte_end":53124,"line_start":840,"line_end":840,"column_start":5,"column_end":14},"name":"DW_LANG_D","qualname":"::constants::DW_LANG_D","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5269},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53139,"byte_end":53153,"line_start":841,"line_end":841,"column_start":5,"column_end":19},"name":"DW_LANG_Python","qualname":"::constants::DW_LANG_Python","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5270},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53168,"byte_end":53182,"line_start":842,"line_end":842,"column_start":5,"column_end":19},"name":"DW_LANG_OpenCL","qualname":"::constants::DW_LANG_OpenCL","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5271},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53197,"byte_end":53207,"line_start":843,"line_end":843,"column_start":5,"column_end":15},"name":"DW_LANG_Go","qualname":"::constants::DW_LANG_Go","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5272},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53222,"byte_end":53237,"line_start":844,"line_end":844,"column_start":5,"column_end":20},"name":"DW_LANG_Modula3","qualname":"::constants::DW_LANG_Modula3","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5273},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53252,"byte_end":53267,"line_start":845,"line_end":845,"column_start":5,"column_end":20},"name":"DW_LANG_Haskell","qualname":"::constants::DW_LANG_Haskell","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5274},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53282,"byte_end":53304,"line_start":846,"line_end":846,"column_start":5,"column_end":27},"name":"DW_LANG_C_plus_plus_03","qualname":"::constants::DW_LANG_C_plus_plus_03","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5275},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53319,"byte_end":53341,"line_start":847,"line_end":847,"column_start":5,"column_end":27},"name":"DW_LANG_C_plus_plus_11","qualname":"::constants::DW_LANG_C_plus_plus_11","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5276},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53356,"byte_end":53369,"line_start":848,"line_end":848,"column_start":5,"column_end":18},"name":"DW_LANG_OCaml","qualname":"::constants::DW_LANG_OCaml","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5277},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53384,"byte_end":53396,"line_start":849,"line_end":849,"column_start":5,"column_end":17},"name":"DW_LANG_Rust","qualname":"::constants::DW_LANG_Rust","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5278},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53411,"byte_end":53422,"line_start":850,"line_end":850,"column_start":5,"column_end":16},"name":"DW_LANG_C11","qualname":"::constants::DW_LANG_C11","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5279},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53437,"byte_end":53450,"line_start":851,"line_end":851,"column_start":5,"column_end":18},"name":"DW_LANG_Swift","qualname":"::constants::DW_LANG_Swift","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5280},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53465,"byte_end":53478,"line_start":852,"line_end":852,"column_start":5,"column_end":18},"name":"DW_LANG_Julia","qualname":"::constants::DW_LANG_Julia","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5281},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53493,"byte_end":53506,"line_start":853,"line_end":853,"column_start":5,"column_end":18},"name":"DW_LANG_Dylan","qualname":"::constants::DW_LANG_Dylan","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5282},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53521,"byte_end":53543,"line_start":854,"line_end":854,"column_start":5,"column_end":27},"name":"DW_LANG_C_plus_plus_14","qualname":"::constants::DW_LANG_C_plus_plus_14","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5283},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53558,"byte_end":53575,"line_start":855,"line_end":855,"column_start":5,"column_end":22},"name":"DW_LANG_Fortran03","qualname":"::constants::DW_LANG_Fortran03","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5284},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53590,"byte_end":53607,"line_start":856,"line_end":856,"column_start":5,"column_end":22},"name":"DW_LANG_Fortran08","qualname":"::constants::DW_LANG_Fortran08","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5285},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53622,"byte_end":53642,"line_start":857,"line_end":857,"column_start":5,"column_end":25},"name":"DW_LANG_RenderScript","qualname":"::constants::DW_LANG_RenderScript","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5286},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53657,"byte_end":53670,"line_start":858,"line_end":858,"column_start":5,"column_end":18},"name":"DW_LANG_BLISS","qualname":"::constants::DW_LANG_BLISS","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5287},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53685,"byte_end":53699,"line_start":859,"line_end":859,"column_start":5,"column_end":19},"name":"DW_LANG_Kotlin","qualname":"::constants::DW_LANG_Kotlin","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5288},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53714,"byte_end":53725,"line_start":860,"line_end":860,"column_start":5,"column_end":16},"name":"DW_LANG_Zig","qualname":"::constants::DW_LANG_Zig","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5289},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53740,"byte_end":53755,"line_start":861,"line_end":861,"column_start":5,"column_end":20},"name":"DW_LANG_Crystal","qualname":"::constants::DW_LANG_Crystal","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5290},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53770,"byte_end":53792,"line_start":862,"line_end":862,"column_start":5,"column_end":27},"name":"DW_LANG_C_plus_plus_17","qualname":"::constants::DW_LANG_C_plus_plus_17","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5291},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53807,"byte_end":53829,"line_start":863,"line_end":863,"column_start":5,"column_end":27},"name":"DW_LANG_C_plus_plus_20","qualname":"::constants::DW_LANG_C_plus_plus_20","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5292},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53844,"byte_end":53855,"line_start":864,"line_end":864,"column_start":5,"column_end":16},"name":"DW_LANG_C17","qualname":"::constants::DW_LANG_C17","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5293},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53870,"byte_end":53887,"line_start":865,"line_end":865,"column_start":5,"column_end":22},"name":"DW_LANG_Fortran18","qualname":"::constants::DW_LANG_Fortran18","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5294},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53902,"byte_end":53917,"line_start":866,"line_end":866,"column_start":5,"column_end":20},"name":"DW_LANG_Ada2005","qualname":"::constants::DW_LANG_Ada2005","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5295},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53932,"byte_end":53947,"line_start":867,"line_end":867,"column_start":5,"column_end":20},"name":"DW_LANG_Ada2012","qualname":"::constants::DW_LANG_Ada2012","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5296},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53963,"byte_end":53978,"line_start":869,"line_end":869,"column_start":5,"column_end":20},"name":"DW_LANG_lo_user","qualname":"::constants::DW_LANG_lo_user","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5297},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":53993,"byte_end":54008,"line_start":870,"line_end":870,"column_start":5,"column_end":20},"name":"DW_LANG_hi_user","qualname":"::constants::DW_LANG_hi_user","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5298},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":54024,"byte_end":54046,"line_start":872,"line_end":872,"column_start":5,"column_end":27},"name":"DW_LANG_Mips_Assembler","qualname":"::constants::DW_LANG_Mips_Assembler","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5299},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":54061,"byte_end":54088,"line_start":873,"line_end":873,"column_start":5,"column_end":32},"name":"DW_LANG_GOOGLE_RenderScript","qualname":"::constants::DW_LANG_GOOGLE_RenderScript","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5300},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":54103,"byte_end":54124,"line_start":874,"line_end":874,"column_start":5,"column_end":26},"name":"DW_LANG_SUN_Assembler","qualname":"::constants::DW_LANG_SUN_Assembler","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5301},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":54139,"byte_end":54163,"line_start":875,"line_end":875,"column_start":5,"column_end":29},"name":"DW_LANG_ALTIUM_Assembler","qualname":"::constants::DW_LANG_ALTIUM_Assembler","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5302},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":54178,"byte_end":54200,"line_start":876,"line_end":876,"column_start":5,"column_end":27},"name":"DW_LANG_BORLAND_Delphi","qualname":"::constants::DW_LANG_BORLAND_Delphi","value":"DwLang","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":54302,"byte_end":54321,"line_start":881,"line_end":881,"column_start":12,"column_end":31},"name":"default_lower_bound","qualname":"<DwLang>::default_lower_bound","value":"pub fn default_lower_bound(Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the default DW_AT_lower_bound for this language.\n","sig":null,"attributes":[{"value":"/ Get the default DW_AT_lower_bound for this language.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":54234,"byte_end":54290,"line_start":880,"line_end":880,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":5334},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":55589,"byte_end":55595,"line_start":920,"line_end":920,"column_start":1,"column_end":7},"name":"DwAddr","qualname":"::constants::DwAddr","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_address_class` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5329},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":55607,"byte_end":55619,"line_start":921,"line_end":921,"column_start":5,"column_end":17},"name":"DW_ADDR_none","qualname":"::constants::DW_ADDR_none","value":"DwAddr","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5364},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":55758,"byte_end":55762,"line_start":928,"line_end":928,"column_start":1,"column_end":5},"name":"DwId","qualname":"::constants::DwId","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_identifier_case` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5356},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":55773,"byte_end":55793,"line_start":929,"line_end":929,"column_start":5,"column_end":25},"name":"DW_ID_case_sensitive","qualname":"::constants::DW_ID_case_sensitive","value":"DwId","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5357},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":55806,"byte_end":55819,"line_start":930,"line_end":930,"column_start":5,"column_end":18},"name":"DW_ID_up_case","qualname":"::constants::DW_ID_up_case","value":"DwId","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5358},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":55832,"byte_end":55847,"line_start":931,"line_end":931,"column_start":5,"column_end":20},"name":"DW_ID_down_case","qualname":"::constants::DW_ID_down_case","value":"DwId","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5359},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":55860,"byte_end":55882,"line_start":932,"line_end":932,"column_start":5,"column_end":27},"name":"DW_ID_case_insensitive","qualname":"::constants::DW_ID_case_insensitive","value":"DwId","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5397},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":56024,"byte_end":56028,"line_start":939,"line_end":939,"column_start":1,"column_end":5},"name":"DwCc","qualname":"::constants::DwCc","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_calling_convention` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5386},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":56039,"byte_end":56051,"line_start":940,"line_end":940,"column_start":5,"column_end":17},"name":"DW_CC_normal","qualname":"::constants::DW_CC_normal","value":"DwCc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5387},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":56064,"byte_end":56077,"line_start":941,"line_end":941,"column_start":5,"column_end":18},"name":"DW_CC_program","qualname":"::constants::DW_CC_program","value":"DwCc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5388},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":56090,"byte_end":56102,"line_start":942,"line_end":942,"column_start":5,"column_end":17},"name":"DW_CC_nocall","qualname":"::constants::DW_CC_nocall","value":"DwCc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5389},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":56115,"byte_end":56138,"line_start":943,"line_end":943,"column_start":5,"column_end":28},"name":"DW_CC_pass_by_reference","qualname":"::constants::DW_CC_pass_by_reference","value":"DwCc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5390},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":56151,"byte_end":56170,"line_start":944,"line_end":944,"column_start":5,"column_end":24},"name":"DW_CC_pass_by_value","qualname":"::constants::DW_CC_pass_by_value","value":"DwCc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5391},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":56183,"byte_end":56196,"line_start":945,"line_end":945,"column_start":5,"column_end":18},"name":"DW_CC_lo_user","qualname":"::constants::DW_CC_lo_user","value":"DwCc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5392},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":56209,"byte_end":56222,"line_start":946,"line_end":946,"column_start":5,"column_end":18},"name":"DW_CC_hi_user","qualname":"::constants::DW_CC_hi_user","value":"DwCc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5427},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":56352,"byte_end":56357,"line_start":953,"line_end":953,"column_start":1,"column_end":6},"name":"DwInl","qualname":"::constants::DwInl","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_inline` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5419},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":56368,"byte_end":56386,"line_start":954,"line_end":954,"column_start":5,"column_end":23},"name":"DW_INL_not_inlined","qualname":"::constants::DW_INL_not_inlined","value":"DwInl","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5420},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":56399,"byte_end":56413,"line_start":955,"line_end":955,"column_start":5,"column_end":19},"name":"DW_INL_inlined","qualname":"::constants::DW_INL_inlined","value":"DwInl","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5421},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":56426,"byte_end":56453,"line_start":956,"line_end":956,"column_start":5,"column_end":32},"name":"DW_INL_declared_not_inlined","qualname":"::constants::DW_INL_declared_not_inlined","value":"DwInl","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5422},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":56466,"byte_end":56489,"line_start":957,"line_end":957,"column_start":5,"column_end":28},"name":"DW_INL_declared_inlined","qualname":"::constants::DW_INL_declared_inlined","value":"DwInl","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5455},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":56621,"byte_end":56626,"line_start":964,"line_end":964,"column_start":1,"column_end":6},"name":"DwOrd","qualname":"::constants::DwOrd","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_ordering` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5449},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":56637,"byte_end":56653,"line_start":965,"line_end":965,"column_start":5,"column_end":21},"name":"DW_ORD_row_major","qualname":"::constants::DW_ORD_row_major","value":"DwOrd","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5450},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":56666,"byte_end":56682,"line_start":966,"line_end":966,"column_start":5,"column_end":21},"name":"DW_ORD_col_major","qualname":"::constants::DW_ORD_col_major","value":"DwOrd","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5483},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":56816,"byte_end":56821,"line_start":973,"line_end":973,"column_start":1,"column_end":6},"name":"DwDsc","qualname":"::constants::DwDsc","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_discr_list` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5477},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":56832,"byte_end":56844,"line_start":974,"line_end":974,"column_start":5,"column_end":17},"name":"DW_DSC_label","qualname":"::constants::DW_DSC_label","value":"DwDsc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5478},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":56857,"byte_end":56869,"line_start":975,"line_end":975,"column_start":5,"column_end":17},"name":"DW_DSC_range","qualname":"::constants::DW_DSC_range","value":"DwDsc","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5516},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":56962,"byte_end":56967,"line_start":982,"line_end":982,"column_start":1,"column_end":6},"name":"DwIdx","qualname":"::constants::DwIdx","value":"","parent":null,"children":[],"decl_id":null,"docs":" Name index attribute encodings.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5505},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":56979,"byte_end":56998,"line_start":983,"line_end":983,"column_start":5,"column_end":24},"name":"DW_IDX_compile_unit","qualname":"::constants::DW_IDX_compile_unit","value":"DwIdx","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5506},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":57008,"byte_end":57024,"line_start":984,"line_end":984,"column_start":5,"column_end":21},"name":"DW_IDX_type_unit","qualname":"::constants::DW_IDX_type_unit","value":"DwIdx","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5507},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":57034,"byte_end":57051,"line_start":985,"line_end":985,"column_start":5,"column_end":22},"name":"DW_IDX_die_offset","qualname":"::constants::DW_IDX_die_offset","value":"DwIdx","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5508},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":57061,"byte_end":57074,"line_start":986,"line_end":986,"column_start":5,"column_end":18},"name":"DW_IDX_parent","qualname":"::constants::DW_IDX_parent","value":"DwIdx","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5509},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":57084,"byte_end":57100,"line_start":987,"line_end":987,"column_start":5,"column_end":21},"name":"DW_IDX_type_hash","qualname":"::constants::DW_IDX_type_hash","value":"DwIdx","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5510},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":57110,"byte_end":57124,"line_start":988,"line_end":988,"column_start":5,"column_end":19},"name":"DW_IDX_lo_user","qualname":"::constants::DW_IDX_lo_user","value":"DwIdx","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5511},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":57139,"byte_end":57153,"line_start":989,"line_end":989,"column_start":5,"column_end":19},"name":"DW_IDX_hi_user","qualname":"::constants::DW_IDX_hi_user","value":"DwIdx","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5545},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":57288,"byte_end":57299,"line_start":996,"line_end":996,"column_start":1,"column_end":12},"name":"DwDefaulted","qualname":"::constants::DwDefaulted","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings of the constants used in the `DW_AT_defaulted` attribute.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5538},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":57310,"byte_end":57325,"line_start":997,"line_end":997,"column_start":5,"column_end":20},"name":"DW_DEFAULTED_no","qualname":"::constants::DW_DEFAULTED_no","value":"DwDefaulted","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5539},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":57338,"byte_end":57359,"line_start":998,"line_end":998,"column_start":5,"column_end":26},"name":"DW_DEFAULTED_in_class","qualname":"::constants::DW_DEFAULTED_in_class","value":"DwDefaulted","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5540},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":57372,"byte_end":57397,"line_start":999,"line_end":999,"column_start":5,"column_end":30},"name":"DW_DEFAULTED_out_of_class","qualname":"::constants::DW_DEFAULTED_out_of_class","value":"DwDefaulted","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5583},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":57526,"byte_end":57531,"line_start":1006,"line_end":1006,"column_start":1,"column_end":6},"name":"DwLns","qualname":"::constants::DwLns","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings for the standard opcodes for line number information.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5567},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":57542,"byte_end":57553,"line_start":1007,"line_end":1007,"column_start":5,"column_end":16},"name":"DW_LNS_copy","qualname":"::constants::DW_LNS_copy","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5568},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":57566,"byte_end":57583,"line_start":1008,"line_end":1008,"column_start":5,"column_end":22},"name":"DW_LNS_advance_pc","qualname":"::constants::DW_LNS_advance_pc","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5569},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":57596,"byte_end":57615,"line_start":1009,"line_end":1009,"column_start":5,"column_end":24},"name":"DW_LNS_advance_line","qualname":"::constants::DW_LNS_advance_line","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5570},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":57628,"byte_end":57643,"line_start":1010,"line_end":1010,"column_start":5,"column_end":20},"name":"DW_LNS_set_file","qualname":"::constants::DW_LNS_set_file","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5571},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":57656,"byte_end":57673,"line_start":1011,"line_end":1011,"column_start":5,"column_end":22},"name":"DW_LNS_set_column","qualname":"::constants::DW_LNS_set_column","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5572},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":57686,"byte_end":57704,"line_start":1012,"line_end":1012,"column_start":5,"column_end":23},"name":"DW_LNS_negate_stmt","qualname":"::constants::DW_LNS_negate_stmt","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5573},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":57717,"byte_end":57739,"line_start":1013,"line_end":1013,"column_start":5,"column_end":27},"name":"DW_LNS_set_basic_block","qualname":"::constants::DW_LNS_set_basic_block","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5574},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":57752,"byte_end":57771,"line_start":1014,"line_end":1014,"column_start":5,"column_end":24},"name":"DW_LNS_const_add_pc","qualname":"::constants::DW_LNS_const_add_pc","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5575},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":57784,"byte_end":57807,"line_start":1015,"line_end":1015,"column_start":5,"column_end":28},"name":"DW_LNS_fixed_advance_pc","qualname":"::constants::DW_LNS_fixed_advance_pc","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5576},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":57820,"byte_end":57843,"line_start":1016,"line_end":1016,"column_start":5,"column_end":28},"name":"DW_LNS_set_prologue_end","qualname":"::constants::DW_LNS_set_prologue_end","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5577},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":57856,"byte_end":57881,"line_start":1017,"line_end":1017,"column_start":5,"column_end":30},"name":"DW_LNS_set_epilogue_begin","qualname":"::constants::DW_LNS_set_epilogue_begin","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5578},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":57894,"byte_end":57908,"line_start":1018,"line_end":1018,"column_start":5,"column_end":19},"name":"DW_LNS_set_isa","qualname":"::constants::DW_LNS_set_isa","value":"DwLns","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5615},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58037,"byte_end":58042,"line_start":1025,"line_end":1025,"column_start":1,"column_end":6},"name":"DwLne","qualname":"::constants::DwLne","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings for the extended opcodes for line number information.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5605},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58053,"byte_end":58072,"line_start":1026,"line_end":1026,"column_start":5,"column_end":24},"name":"DW_LNE_end_sequence","qualname":"::constants::DW_LNE_end_sequence","value":"DwLne","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5606},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58085,"byte_end":58103,"line_start":1027,"line_end":1027,"column_start":5,"column_end":23},"name":"DW_LNE_set_address","qualname":"::constants::DW_LNE_set_address","value":"DwLne","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5607},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58116,"byte_end":58134,"line_start":1028,"line_end":1028,"column_start":5,"column_end":23},"name":"DW_LNE_define_file","qualname":"::constants::DW_LNE_define_file","value":"DwLne","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5608},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58147,"byte_end":58171,"line_start":1029,"line_end":1029,"column_start":5,"column_end":29},"name":"DW_LNE_set_discriminator","qualname":"::constants::DW_LNE_set_discriminator","value":"DwLne","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5609},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58185,"byte_end":58199,"line_start":1031,"line_end":1031,"column_start":5,"column_end":19},"name":"DW_LNE_lo_user","qualname":"::constants::DW_LNE_lo_user","value":"DwLne","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5610},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58212,"byte_end":58226,"line_start":1032,"line_end":1032,"column_start":5,"column_end":19},"name":"DW_LNE_hi_user","qualname":"::constants::DW_LNE_hi_user","value":"DwLne","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5648},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58343,"byte_end":58349,"line_start":1039,"line_end":1039,"column_start":1,"column_end":7},"name":"DwLnct","qualname":"::constants::DwLnct","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings for the line number header entry formats.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5637},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58361,"byte_end":58373,"line_start":1040,"line_end":1040,"column_start":5,"column_end":17},"name":"DW_LNCT_path","qualname":"::constants::DW_LNCT_path","value":"DwLnct","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5638},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58385,"byte_end":58408,"line_start":1041,"line_end":1041,"column_start":5,"column_end":28},"name":"DW_LNCT_directory_index","qualname":"::constants::DW_LNCT_directory_index","value":"DwLnct","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5639},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58420,"byte_end":58437,"line_start":1042,"line_end":1042,"column_start":5,"column_end":22},"name":"DW_LNCT_timestamp","qualname":"::constants::DW_LNCT_timestamp","value":"DwLnct","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5640},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58449,"byte_end":58461,"line_start":1043,"line_end":1043,"column_start":5,"column_end":17},"name":"DW_LNCT_size","qualname":"::constants::DW_LNCT_size","value":"DwLnct","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5641},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58473,"byte_end":58484,"line_start":1044,"line_end":1044,"column_start":5,"column_end":16},"name":"DW_LNCT_MD5","qualname":"::constants::DW_LNCT_MD5","value":"DwLnct","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5642},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58496,"byte_end":58511,"line_start":1045,"line_end":1045,"column_start":5,"column_end":20},"name":"DW_LNCT_lo_user","qualname":"::constants::DW_LNCT_lo_user","value":"DwLnct","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5643},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58526,"byte_end":58541,"line_start":1046,"line_end":1046,"column_start":5,"column_end":20},"name":"DW_LNCT_hi_user","qualname":"::constants::DW_LNCT_hi_user","value":"DwLnct","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5688},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58653,"byte_end":58660,"line_start":1053,"line_end":1053,"column_start":1,"column_end":8},"name":"DwMacro","qualname":"::constants::DwMacro","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings for macro information entry types.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5670},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58671,"byte_end":58686,"line_start":1054,"line_end":1054,"column_start":5,"column_end":20},"name":"DW_MACRO_define","qualname":"::constants::DW_MACRO_define","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5671},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58699,"byte_end":58713,"line_start":1055,"line_end":1055,"column_start":5,"column_end":19},"name":"DW_MACRO_undef","qualname":"::constants::DW_MACRO_undef","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5672},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58726,"byte_end":58745,"line_start":1056,"line_end":1056,"column_start":5,"column_end":24},"name":"DW_MACRO_start_file","qualname":"::constants::DW_MACRO_start_file","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5673},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58758,"byte_end":58775,"line_start":1057,"line_end":1057,"column_start":5,"column_end":22},"name":"DW_MACRO_end_file","qualname":"::constants::DW_MACRO_end_file","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5674},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58788,"byte_end":58808,"line_start":1058,"line_end":1058,"column_start":5,"column_end":25},"name":"DW_MACRO_define_strp","qualname":"::constants::DW_MACRO_define_strp","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5675},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58821,"byte_end":58840,"line_start":1059,"line_end":1059,"column_start":5,"column_end":24},"name":"DW_MACRO_undef_strp","qualname":"::constants::DW_MACRO_undef_strp","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5676},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58853,"byte_end":58868,"line_start":1060,"line_end":1060,"column_start":5,"column_end":20},"name":"DW_MACRO_import","qualname":"::constants::DW_MACRO_import","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5677},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58881,"byte_end":58900,"line_start":1061,"line_end":1061,"column_start":5,"column_end":24},"name":"DW_MACRO_define_sup","qualname":"::constants::DW_MACRO_define_sup","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5678},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58913,"byte_end":58931,"line_start":1062,"line_end":1062,"column_start":5,"column_end":23},"name":"DW_MACRO_undef_sup","qualname":"::constants::DW_MACRO_undef_sup","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5679},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58944,"byte_end":58963,"line_start":1063,"line_end":1063,"column_start":5,"column_end":24},"name":"DW_MACRO_import_sup","qualname":"::constants::DW_MACRO_import_sup","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5680},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":58976,"byte_end":58996,"line_start":1064,"line_end":1064,"column_start":5,"column_end":25},"name":"DW_MACRO_define_strx","qualname":"::constants::DW_MACRO_define_strx","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5681},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59009,"byte_end":59028,"line_start":1065,"line_end":1065,"column_start":5,"column_end":24},"name":"DW_MACRO_undef_strx","qualname":"::constants::DW_MACRO_undef_strx","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5682},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59041,"byte_end":59057,"line_start":1066,"line_end":1066,"column_start":5,"column_end":21},"name":"DW_MACRO_lo_user","qualname":"::constants::DW_MACRO_lo_user","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5683},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59070,"byte_end":59086,"line_start":1067,"line_end":1067,"column_start":5,"column_end":21},"name":"DW_MACRO_hi_user","qualname":"::constants::DW_MACRO_hi_user","value":"DwMacro","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5722},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59181,"byte_end":59186,"line_start":1074,"line_end":1074,"column_start":1,"column_end":6},"name":"DwRle","qualname":"::constants::DwRle","value":"","parent":null,"children":[],"decl_id":null,"docs":" Range list entry encoding values.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5710},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59197,"byte_end":59215,"line_start":1075,"line_end":1075,"column_start":5,"column_end":23},"name":"DW_RLE_end_of_list","qualname":"::constants::DW_RLE_end_of_list","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5711},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59228,"byte_end":59248,"line_start":1076,"line_end":1076,"column_start":5,"column_end":25},"name":"DW_RLE_base_addressx","qualname":"::constants::DW_RLE_base_addressx","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5712},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59261,"byte_end":59279,"line_start":1077,"line_end":1077,"column_start":5,"column_end":23},"name":"DW_RLE_startx_endx","qualname":"::constants::DW_RLE_startx_endx","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5713},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59292,"byte_end":59312,"line_start":1078,"line_end":1078,"column_start":5,"column_end":25},"name":"DW_RLE_startx_length","qualname":"::constants::DW_RLE_startx_length","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5714},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59325,"byte_end":59343,"line_start":1079,"line_end":1079,"column_start":5,"column_end":23},"name":"DW_RLE_offset_pair","qualname":"::constants::DW_RLE_offset_pair","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5715},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59356,"byte_end":59375,"line_start":1080,"line_end":1080,"column_start":5,"column_end":24},"name":"DW_RLE_base_address","qualname":"::constants::DW_RLE_base_address","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5716},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59388,"byte_end":59404,"line_start":1081,"line_end":1081,"column_start":5,"column_end":21},"name":"DW_RLE_start_end","qualname":"::constants::DW_RLE_start_end","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5717},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59417,"byte_end":59436,"line_start":1082,"line_end":1082,"column_start":5,"column_end":24},"name":"DW_RLE_start_length","qualname":"::constants::DW_RLE_start_length","value":"DwRle","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5924},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59544,"byte_end":59548,"line_start":1089,"line_end":1089,"column_start":1,"column_end":5},"name":"DwOp","qualname":"::constants::DwOp","value":"","parent":null,"children":[],"decl_id":null,"docs":" The encodings for DWARF expression operations.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5744},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59559,"byte_end":59569,"line_start":1090,"line_end":1090,"column_start":5,"column_end":15},"name":"DW_OP_addr","qualname":"::constants::DW_OP_addr","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5745},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59582,"byte_end":59593,"line_start":1091,"line_end":1091,"column_start":5,"column_end":16},"name":"DW_OP_deref","qualname":"::constants::DW_OP_deref","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5746},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59606,"byte_end":59619,"line_start":1092,"line_end":1092,"column_start":5,"column_end":18},"name":"DW_OP_const1u","qualname":"::constants::DW_OP_const1u","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5747},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59632,"byte_end":59645,"line_start":1093,"line_end":1093,"column_start":5,"column_end":18},"name":"DW_OP_const1s","qualname":"::constants::DW_OP_const1s","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5748},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59658,"byte_end":59671,"line_start":1094,"line_end":1094,"column_start":5,"column_end":18},"name":"DW_OP_const2u","qualname":"::constants::DW_OP_const2u","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5749},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59684,"byte_end":59697,"line_start":1095,"line_end":1095,"column_start":5,"column_end":18},"name":"DW_OP_const2s","qualname":"::constants::DW_OP_const2s","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5750},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59710,"byte_end":59723,"line_start":1096,"line_end":1096,"column_start":5,"column_end":18},"name":"DW_OP_const4u","qualname":"::constants::DW_OP_const4u","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5751},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59736,"byte_end":59749,"line_start":1097,"line_end":1097,"column_start":5,"column_end":18},"name":"DW_OP_const4s","qualname":"::constants::DW_OP_const4s","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5752},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59762,"byte_end":59775,"line_start":1098,"line_end":1098,"column_start":5,"column_end":18},"name":"DW_OP_const8u","qualname":"::constants::DW_OP_const8u","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5753},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59788,"byte_end":59801,"line_start":1099,"line_end":1099,"column_start":5,"column_end":18},"name":"DW_OP_const8s","qualname":"::constants::DW_OP_const8s","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5754},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59814,"byte_end":59826,"line_start":1100,"line_end":1100,"column_start":5,"column_end":17},"name":"DW_OP_constu","qualname":"::constants::DW_OP_constu","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5755},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59839,"byte_end":59851,"line_start":1101,"line_end":1101,"column_start":5,"column_end":17},"name":"DW_OP_consts","qualname":"::constants::DW_OP_consts","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5756},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59864,"byte_end":59873,"line_start":1102,"line_end":1102,"column_start":5,"column_end":14},"name":"DW_OP_dup","qualname":"::constants::DW_OP_dup","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5757},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59886,"byte_end":59896,"line_start":1103,"line_end":1103,"column_start":5,"column_end":15},"name":"DW_OP_drop","qualname":"::constants::DW_OP_drop","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5758},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59909,"byte_end":59919,"line_start":1104,"line_end":1104,"column_start":5,"column_end":15},"name":"DW_OP_over","qualname":"::constants::DW_OP_over","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5759},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59932,"byte_end":59942,"line_start":1105,"line_end":1105,"column_start":5,"column_end":15},"name":"DW_OP_pick","qualname":"::constants::DW_OP_pick","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5760},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59955,"byte_end":59965,"line_start":1106,"line_end":1106,"column_start":5,"column_end":15},"name":"DW_OP_swap","qualname":"::constants::DW_OP_swap","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5761},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":59978,"byte_end":59987,"line_start":1107,"line_end":1107,"column_start":5,"column_end":14},"name":"DW_OP_rot","qualname":"::constants::DW_OP_rot","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5762},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60000,"byte_end":60012,"line_start":1108,"line_end":1108,"column_start":5,"column_end":17},"name":"DW_OP_xderef","qualname":"::constants::DW_OP_xderef","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5763},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60025,"byte_end":60034,"line_start":1109,"line_end":1109,"column_start":5,"column_end":14},"name":"DW_OP_abs","qualname":"::constants::DW_OP_abs","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5764},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60047,"byte_end":60056,"line_start":1110,"line_end":1110,"column_start":5,"column_end":14},"name":"DW_OP_and","qualname":"::constants::DW_OP_and","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5765},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60069,"byte_end":60078,"line_start":1111,"line_end":1111,"column_start":5,"column_end":14},"name":"DW_OP_div","qualname":"::constants::DW_OP_div","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5766},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60091,"byte_end":60102,"line_start":1112,"line_end":1112,"column_start":5,"column_end":16},"name":"DW_OP_minus","qualname":"::constants::DW_OP_minus","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5767},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60115,"byte_end":60124,"line_start":1113,"line_end":1113,"column_start":5,"column_end":14},"name":"DW_OP_mod","qualname":"::constants::DW_OP_mod","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5768},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60137,"byte_end":60146,"line_start":1114,"line_end":1114,"column_start":5,"column_end":14},"name":"DW_OP_mul","qualname":"::constants::DW_OP_mul","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5769},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60159,"byte_end":60168,"line_start":1115,"line_end":1115,"column_start":5,"column_end":14},"name":"DW_OP_neg","qualname":"::constants::DW_OP_neg","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5770},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60181,"byte_end":60190,"line_start":1116,"line_end":1116,"column_start":5,"column_end":14},"name":"DW_OP_not","qualname":"::constants::DW_OP_not","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5771},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60203,"byte_end":60211,"line_start":1117,"line_end":1117,"column_start":5,"column_end":13},"name":"DW_OP_or","qualname":"::constants::DW_OP_or","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5772},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60224,"byte_end":60234,"line_start":1118,"line_end":1118,"column_start":5,"column_end":15},"name":"DW_OP_plus","qualname":"::constants::DW_OP_plus","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5773},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60247,"byte_end":60264,"line_start":1119,"line_end":1119,"column_start":5,"column_end":22},"name":"DW_OP_plus_uconst","qualname":"::constants::DW_OP_plus_uconst","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5774},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60277,"byte_end":60286,"line_start":1120,"line_end":1120,"column_start":5,"column_end":14},"name":"DW_OP_shl","qualname":"::constants::DW_OP_shl","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5775},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60299,"byte_end":60308,"line_start":1121,"line_end":1121,"column_start":5,"column_end":14},"name":"DW_OP_shr","qualname":"::constants::DW_OP_shr","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5776},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60321,"byte_end":60331,"line_start":1122,"line_end":1122,"column_start":5,"column_end":15},"name":"DW_OP_shra","qualname":"::constants::DW_OP_shra","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5777},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60344,"byte_end":60353,"line_start":1123,"line_end":1123,"column_start":5,"column_end":14},"name":"DW_OP_xor","qualname":"::constants::DW_OP_xor","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5778},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60366,"byte_end":60375,"line_start":1124,"line_end":1124,"column_start":5,"column_end":14},"name":"DW_OP_bra","qualname":"::constants::DW_OP_bra","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5779},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60388,"byte_end":60396,"line_start":1125,"line_end":1125,"column_start":5,"column_end":13},"name":"DW_OP_eq","qualname":"::constants::DW_OP_eq","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5780},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60409,"byte_end":60417,"line_start":1126,"line_end":1126,"column_start":5,"column_end":13},"name":"DW_OP_ge","qualname":"::constants::DW_OP_ge","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5781},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60430,"byte_end":60438,"line_start":1127,"line_end":1127,"column_start":5,"column_end":13},"name":"DW_OP_gt","qualname":"::constants::DW_OP_gt","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5782},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60451,"byte_end":60459,"line_start":1128,"line_end":1128,"column_start":5,"column_end":13},"name":"DW_OP_le","qualname":"::constants::DW_OP_le","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5783},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60472,"byte_end":60480,"line_start":1129,"line_end":1129,"column_start":5,"column_end":13},"name":"DW_OP_lt","qualname":"::constants::DW_OP_lt","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5784},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60493,"byte_end":60501,"line_start":1130,"line_end":1130,"column_start":5,"column_end":13},"name":"DW_OP_ne","qualname":"::constants::DW_OP_ne","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5785},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60514,"byte_end":60524,"line_start":1131,"line_end":1131,"column_start":5,"column_end":15},"name":"DW_OP_skip","qualname":"::constants::DW_OP_skip","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5786},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60537,"byte_end":60547,"line_start":1132,"line_end":1132,"column_start":5,"column_end":15},"name":"DW_OP_lit0","qualname":"::constants::DW_OP_lit0","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5787},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60560,"byte_end":60570,"line_start":1133,"line_end":1133,"column_start":5,"column_end":15},"name":"DW_OP_lit1","qualname":"::constants::DW_OP_lit1","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5788},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60583,"byte_end":60593,"line_start":1134,"line_end":1134,"column_start":5,"column_end":15},"name":"DW_OP_lit2","qualname":"::constants::DW_OP_lit2","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5789},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60606,"byte_end":60616,"line_start":1135,"line_end":1135,"column_start":5,"column_end":15},"name":"DW_OP_lit3","qualname":"::constants::DW_OP_lit3","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5790},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60629,"byte_end":60639,"line_start":1136,"line_end":1136,"column_start":5,"column_end":15},"name":"DW_OP_lit4","qualname":"::constants::DW_OP_lit4","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5791},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60652,"byte_end":60662,"line_start":1137,"line_end":1137,"column_start":5,"column_end":15},"name":"DW_OP_lit5","qualname":"::constants::DW_OP_lit5","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5792},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60675,"byte_end":60685,"line_start":1138,"line_end":1138,"column_start":5,"column_end":15},"name":"DW_OP_lit6","qualname":"::constants::DW_OP_lit6","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5793},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60698,"byte_end":60708,"line_start":1139,"line_end":1139,"column_start":5,"column_end":15},"name":"DW_OP_lit7","qualname":"::constants::DW_OP_lit7","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5794},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60721,"byte_end":60731,"line_start":1140,"line_end":1140,"column_start":5,"column_end":15},"name":"DW_OP_lit8","qualname":"::constants::DW_OP_lit8","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5795},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60744,"byte_end":60754,"line_start":1141,"line_end":1141,"column_start":5,"column_end":15},"name":"DW_OP_lit9","qualname":"::constants::DW_OP_lit9","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5796},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60767,"byte_end":60778,"line_start":1142,"line_end":1142,"column_start":5,"column_end":16},"name":"DW_OP_lit10","qualname":"::constants::DW_OP_lit10","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5797},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60791,"byte_end":60802,"line_start":1143,"line_end":1143,"column_start":5,"column_end":16},"name":"DW_OP_lit11","qualname":"::constants::DW_OP_lit11","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5798},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60815,"byte_end":60826,"line_start":1144,"line_end":1144,"column_start":5,"column_end":16},"name":"DW_OP_lit12","qualname":"::constants::DW_OP_lit12","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5799},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60839,"byte_end":60850,"line_start":1145,"line_end":1145,"column_start":5,"column_end":16},"name":"DW_OP_lit13","qualname":"::constants::DW_OP_lit13","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5800},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60863,"byte_end":60874,"line_start":1146,"line_end":1146,"column_start":5,"column_end":16},"name":"DW_OP_lit14","qualname":"::constants::DW_OP_lit14","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5801},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60887,"byte_end":60898,"line_start":1147,"line_end":1147,"column_start":5,"column_end":16},"name":"DW_OP_lit15","qualname":"::constants::DW_OP_lit15","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5802},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60911,"byte_end":60922,"line_start":1148,"line_end":1148,"column_start":5,"column_end":16},"name":"DW_OP_lit16","qualname":"::constants::DW_OP_lit16","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5803},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60935,"byte_end":60946,"line_start":1149,"line_end":1149,"column_start":5,"column_end":16},"name":"DW_OP_lit17","qualname":"::constants::DW_OP_lit17","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5804},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60959,"byte_end":60970,"line_start":1150,"line_end":1150,"column_start":5,"column_end":16},"name":"DW_OP_lit18","qualname":"::constants::DW_OP_lit18","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5805},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":60983,"byte_end":60994,"line_start":1151,"line_end":1151,"column_start":5,"column_end":16},"name":"DW_OP_lit19","qualname":"::constants::DW_OP_lit19","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5806},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61007,"byte_end":61018,"line_start":1152,"line_end":1152,"column_start":5,"column_end":16},"name":"DW_OP_lit20","qualname":"::constants::DW_OP_lit20","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5807},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61031,"byte_end":61042,"line_start":1153,"line_end":1153,"column_start":5,"column_end":16},"name":"DW_OP_lit21","qualname":"::constants::DW_OP_lit21","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5808},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61055,"byte_end":61066,"line_start":1154,"line_end":1154,"column_start":5,"column_end":16},"name":"DW_OP_lit22","qualname":"::constants::DW_OP_lit22","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5809},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61079,"byte_end":61090,"line_start":1155,"line_end":1155,"column_start":5,"column_end":16},"name":"DW_OP_lit23","qualname":"::constants::DW_OP_lit23","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5810},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61103,"byte_end":61114,"line_start":1156,"line_end":1156,"column_start":5,"column_end":16},"name":"DW_OP_lit24","qualname":"::constants::DW_OP_lit24","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5811},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61127,"byte_end":61138,"line_start":1157,"line_end":1157,"column_start":5,"column_end":16},"name":"DW_OP_lit25","qualname":"::constants::DW_OP_lit25","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5812},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61151,"byte_end":61162,"line_start":1158,"line_end":1158,"column_start":5,"column_end":16},"name":"DW_OP_lit26","qualname":"::constants::DW_OP_lit26","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5813},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61175,"byte_end":61186,"line_start":1159,"line_end":1159,"column_start":5,"column_end":16},"name":"DW_OP_lit27","qualname":"::constants::DW_OP_lit27","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5814},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61199,"byte_end":61210,"line_start":1160,"line_end":1160,"column_start":5,"column_end":16},"name":"DW_OP_lit28","qualname":"::constants::DW_OP_lit28","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5815},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61223,"byte_end":61234,"line_start":1161,"line_end":1161,"column_start":5,"column_end":16},"name":"DW_OP_lit29","qualname":"::constants::DW_OP_lit29","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5816},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61247,"byte_end":61258,"line_start":1162,"line_end":1162,"column_start":5,"column_end":16},"name":"DW_OP_lit30","qualname":"::constants::DW_OP_lit30","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5817},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61271,"byte_end":61282,"line_start":1163,"line_end":1163,"column_start":5,"column_end":16},"name":"DW_OP_lit31","qualname":"::constants::DW_OP_lit31","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5818},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61295,"byte_end":61305,"line_start":1164,"line_end":1164,"column_start":5,"column_end":15},"name":"DW_OP_reg0","qualname":"::constants::DW_OP_reg0","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5819},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61318,"byte_end":61328,"line_start":1165,"line_end":1165,"column_start":5,"column_end":15},"name":"DW_OP_reg1","qualname":"::constants::DW_OP_reg1","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5820},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61341,"byte_end":61351,"line_start":1166,"line_end":1166,"column_start":5,"column_end":15},"name":"DW_OP_reg2","qualname":"::constants::DW_OP_reg2","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5821},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61364,"byte_end":61374,"line_start":1167,"line_end":1167,"column_start":5,"column_end":15},"name":"DW_OP_reg3","qualname":"::constants::DW_OP_reg3","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5822},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61387,"byte_end":61397,"line_start":1168,"line_end":1168,"column_start":5,"column_end":15},"name":"DW_OP_reg4","qualname":"::constants::DW_OP_reg4","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5823},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61410,"byte_end":61420,"line_start":1169,"line_end":1169,"column_start":5,"column_end":15},"name":"DW_OP_reg5","qualname":"::constants::DW_OP_reg5","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5824},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61433,"byte_end":61443,"line_start":1170,"line_end":1170,"column_start":5,"column_end":15},"name":"DW_OP_reg6","qualname":"::constants::DW_OP_reg6","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5825},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61456,"byte_end":61466,"line_start":1171,"line_end":1171,"column_start":5,"column_end":15},"name":"DW_OP_reg7","qualname":"::constants::DW_OP_reg7","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5826},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61479,"byte_end":61489,"line_start":1172,"line_end":1172,"column_start":5,"column_end":15},"name":"DW_OP_reg8","qualname":"::constants::DW_OP_reg8","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5827},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61502,"byte_end":61512,"line_start":1173,"line_end":1173,"column_start":5,"column_end":15},"name":"DW_OP_reg9","qualname":"::constants::DW_OP_reg9","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5828},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61525,"byte_end":61536,"line_start":1174,"line_end":1174,"column_start":5,"column_end":16},"name":"DW_OP_reg10","qualname":"::constants::DW_OP_reg10","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5829},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61549,"byte_end":61560,"line_start":1175,"line_end":1175,"column_start":5,"column_end":16},"name":"DW_OP_reg11","qualname":"::constants::DW_OP_reg11","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5830},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61573,"byte_end":61584,"line_start":1176,"line_end":1176,"column_start":5,"column_end":16},"name":"DW_OP_reg12","qualname":"::constants::DW_OP_reg12","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5831},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61597,"byte_end":61608,"line_start":1177,"line_end":1177,"column_start":5,"column_end":16},"name":"DW_OP_reg13","qualname":"::constants::DW_OP_reg13","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5832},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61621,"byte_end":61632,"line_start":1178,"line_end":1178,"column_start":5,"column_end":16},"name":"DW_OP_reg14","qualname":"::constants::DW_OP_reg14","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5833},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61645,"byte_end":61656,"line_start":1179,"line_end":1179,"column_start":5,"column_end":16},"name":"DW_OP_reg15","qualname":"::constants::DW_OP_reg15","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5834},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61669,"byte_end":61680,"line_start":1180,"line_end":1180,"column_start":5,"column_end":16},"name":"DW_OP_reg16","qualname":"::constants::DW_OP_reg16","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5835},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61693,"byte_end":61704,"line_start":1181,"line_end":1181,"column_start":5,"column_end":16},"name":"DW_OP_reg17","qualname":"::constants::DW_OP_reg17","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5836},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61717,"byte_end":61728,"line_start":1182,"line_end":1182,"column_start":5,"column_end":16},"name":"DW_OP_reg18","qualname":"::constants::DW_OP_reg18","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5837},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61741,"byte_end":61752,"line_start":1183,"line_end":1183,"column_start":5,"column_end":16},"name":"DW_OP_reg19","qualname":"::constants::DW_OP_reg19","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5838},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61765,"byte_end":61776,"line_start":1184,"line_end":1184,"column_start":5,"column_end":16},"name":"DW_OP_reg20","qualname":"::constants::DW_OP_reg20","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5839},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61789,"byte_end":61800,"line_start":1185,"line_end":1185,"column_start":5,"column_end":16},"name":"DW_OP_reg21","qualname":"::constants::DW_OP_reg21","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5840},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61813,"byte_end":61824,"line_start":1186,"line_end":1186,"column_start":5,"column_end":16},"name":"DW_OP_reg22","qualname":"::constants::DW_OP_reg22","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5841},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61837,"byte_end":61848,"line_start":1187,"line_end":1187,"column_start":5,"column_end":16},"name":"DW_OP_reg23","qualname":"::constants::DW_OP_reg23","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5842},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61861,"byte_end":61872,"line_start":1188,"line_end":1188,"column_start":5,"column_end":16},"name":"DW_OP_reg24","qualname":"::constants::DW_OP_reg24","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5843},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61885,"byte_end":61896,"line_start":1189,"line_end":1189,"column_start":5,"column_end":16},"name":"DW_OP_reg25","qualname":"::constants::DW_OP_reg25","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5844},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61909,"byte_end":61920,"line_start":1190,"line_end":1190,"column_start":5,"column_end":16},"name":"DW_OP_reg26","qualname":"::constants::DW_OP_reg26","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5845},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61933,"byte_end":61944,"line_start":1191,"line_end":1191,"column_start":5,"column_end":16},"name":"DW_OP_reg27","qualname":"::constants::DW_OP_reg27","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5846},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61957,"byte_end":61968,"line_start":1192,"line_end":1192,"column_start":5,"column_end":16},"name":"DW_OP_reg28","qualname":"::constants::DW_OP_reg28","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5847},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":61981,"byte_end":61992,"line_start":1193,"line_end":1193,"column_start":5,"column_end":16},"name":"DW_OP_reg29","qualname":"::constants::DW_OP_reg29","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5848},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62005,"byte_end":62016,"line_start":1194,"line_end":1194,"column_start":5,"column_end":16},"name":"DW_OP_reg30","qualname":"::constants::DW_OP_reg30","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5849},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62029,"byte_end":62040,"line_start":1195,"line_end":1195,"column_start":5,"column_end":16},"name":"DW_OP_reg31","qualname":"::constants::DW_OP_reg31","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5850},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62053,"byte_end":62064,"line_start":1196,"line_end":1196,"column_start":5,"column_end":16},"name":"DW_OP_breg0","qualname":"::constants::DW_OP_breg0","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5851},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62077,"byte_end":62088,"line_start":1197,"line_end":1197,"column_start":5,"column_end":16},"name":"DW_OP_breg1","qualname":"::constants::DW_OP_breg1","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5852},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62101,"byte_end":62112,"line_start":1198,"line_end":1198,"column_start":5,"column_end":16},"name":"DW_OP_breg2","qualname":"::constants::DW_OP_breg2","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5853},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62125,"byte_end":62136,"line_start":1199,"line_end":1199,"column_start":5,"column_end":16},"name":"DW_OP_breg3","qualname":"::constants::DW_OP_breg3","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5854},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62149,"byte_end":62160,"line_start":1200,"line_end":1200,"column_start":5,"column_end":16},"name":"DW_OP_breg4","qualname":"::constants::DW_OP_breg4","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5855},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62173,"byte_end":62184,"line_start":1201,"line_end":1201,"column_start":5,"column_end":16},"name":"DW_OP_breg5","qualname":"::constants::DW_OP_breg5","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5856},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62197,"byte_end":62208,"line_start":1202,"line_end":1202,"column_start":5,"column_end":16},"name":"DW_OP_breg6","qualname":"::constants::DW_OP_breg6","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5857},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62221,"byte_end":62232,"line_start":1203,"line_end":1203,"column_start":5,"column_end":16},"name":"DW_OP_breg7","qualname":"::constants::DW_OP_breg7","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5858},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62245,"byte_end":62256,"line_start":1204,"line_end":1204,"column_start":5,"column_end":16},"name":"DW_OP_breg8","qualname":"::constants::DW_OP_breg8","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5859},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62269,"byte_end":62280,"line_start":1205,"line_end":1205,"column_start":5,"column_end":16},"name":"DW_OP_breg9","qualname":"::constants::DW_OP_breg9","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5860},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62293,"byte_end":62305,"line_start":1206,"line_end":1206,"column_start":5,"column_end":17},"name":"DW_OP_breg10","qualname":"::constants::DW_OP_breg10","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5861},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62318,"byte_end":62330,"line_start":1207,"line_end":1207,"column_start":5,"column_end":17},"name":"DW_OP_breg11","qualname":"::constants::DW_OP_breg11","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5862},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62343,"byte_end":62355,"line_start":1208,"line_end":1208,"column_start":5,"column_end":17},"name":"DW_OP_breg12","qualname":"::constants::DW_OP_breg12","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5863},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62368,"byte_end":62380,"line_start":1209,"line_end":1209,"column_start":5,"column_end":17},"name":"DW_OP_breg13","qualname":"::constants::DW_OP_breg13","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5864},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62393,"byte_end":62405,"line_start":1210,"line_end":1210,"column_start":5,"column_end":17},"name":"DW_OP_breg14","qualname":"::constants::DW_OP_breg14","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5865},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62418,"byte_end":62430,"line_start":1211,"line_end":1211,"column_start":5,"column_end":17},"name":"DW_OP_breg15","qualname":"::constants::DW_OP_breg15","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5866},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62443,"byte_end":62455,"line_start":1212,"line_end":1212,"column_start":5,"column_end":17},"name":"DW_OP_breg16","qualname":"::constants::DW_OP_breg16","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5867},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62468,"byte_end":62480,"line_start":1213,"line_end":1213,"column_start":5,"column_end":17},"name":"DW_OP_breg17","qualname":"::constants::DW_OP_breg17","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5868},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62493,"byte_end":62505,"line_start":1214,"line_end":1214,"column_start":5,"column_end":17},"name":"DW_OP_breg18","qualname":"::constants::DW_OP_breg18","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5869},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62518,"byte_end":62530,"line_start":1215,"line_end":1215,"column_start":5,"column_end":17},"name":"DW_OP_breg19","qualname":"::constants::DW_OP_breg19","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5870},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62543,"byte_end":62555,"line_start":1216,"line_end":1216,"column_start":5,"column_end":17},"name":"DW_OP_breg20","qualname":"::constants::DW_OP_breg20","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5871},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62568,"byte_end":62580,"line_start":1217,"line_end":1217,"column_start":5,"column_end":17},"name":"DW_OP_breg21","qualname":"::constants::DW_OP_breg21","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5872},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62593,"byte_end":62605,"line_start":1218,"line_end":1218,"column_start":5,"column_end":17},"name":"DW_OP_breg22","qualname":"::constants::DW_OP_breg22","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5873},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62618,"byte_end":62630,"line_start":1219,"line_end":1219,"column_start":5,"column_end":17},"name":"DW_OP_breg23","qualname":"::constants::DW_OP_breg23","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5874},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62643,"byte_end":62655,"line_start":1220,"line_end":1220,"column_start":5,"column_end":17},"name":"DW_OP_breg24","qualname":"::constants::DW_OP_breg24","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5875},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62668,"byte_end":62680,"line_start":1221,"line_end":1221,"column_start":5,"column_end":17},"name":"DW_OP_breg25","qualname":"::constants::DW_OP_breg25","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5876},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62693,"byte_end":62705,"line_start":1222,"line_end":1222,"column_start":5,"column_end":17},"name":"DW_OP_breg26","qualname":"::constants::DW_OP_breg26","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5877},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62718,"byte_end":62730,"line_start":1223,"line_end":1223,"column_start":5,"column_end":17},"name":"DW_OP_breg27","qualname":"::constants::DW_OP_breg27","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5878},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62743,"byte_end":62755,"line_start":1224,"line_end":1224,"column_start":5,"column_end":17},"name":"DW_OP_breg28","qualname":"::constants::DW_OP_breg28","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5879},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62768,"byte_end":62780,"line_start":1225,"line_end":1225,"column_start":5,"column_end":17},"name":"DW_OP_breg29","qualname":"::constants::DW_OP_breg29","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5880},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62793,"byte_end":62805,"line_start":1226,"line_end":1226,"column_start":5,"column_end":17},"name":"DW_OP_breg30","qualname":"::constants::DW_OP_breg30","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5881},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62818,"byte_end":62830,"line_start":1227,"line_end":1227,"column_start":5,"column_end":17},"name":"DW_OP_breg31","qualname":"::constants::DW_OP_breg31","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5882},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62843,"byte_end":62853,"line_start":1228,"line_end":1228,"column_start":5,"column_end":15},"name":"DW_OP_regx","qualname":"::constants::DW_OP_regx","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5883},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62866,"byte_end":62877,"line_start":1229,"line_end":1229,"column_start":5,"column_end":16},"name":"DW_OP_fbreg","qualname":"::constants::DW_OP_fbreg","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5884},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62890,"byte_end":62901,"line_start":1230,"line_end":1230,"column_start":5,"column_end":16},"name":"DW_OP_bregx","qualname":"::constants::DW_OP_bregx","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5885},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62914,"byte_end":62925,"line_start":1231,"line_end":1231,"column_start":5,"column_end":16},"name":"DW_OP_piece","qualname":"::constants::DW_OP_piece","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5886},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62938,"byte_end":62954,"line_start":1232,"line_end":1232,"column_start":5,"column_end":21},"name":"DW_OP_deref_size","qualname":"::constants::DW_OP_deref_size","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5887},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62967,"byte_end":62984,"line_start":1233,"line_end":1233,"column_start":5,"column_end":22},"name":"DW_OP_xderef_size","qualname":"::constants::DW_OP_xderef_size","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5888},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":62997,"byte_end":63006,"line_start":1234,"line_end":1234,"column_start":5,"column_end":14},"name":"DW_OP_nop","qualname":"::constants::DW_OP_nop","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5889},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63019,"byte_end":63044,"line_start":1235,"line_end":1235,"column_start":5,"column_end":30},"name":"DW_OP_push_object_address","qualname":"::constants::DW_OP_push_object_address","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5890},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63057,"byte_end":63068,"line_start":1236,"line_end":1236,"column_start":5,"column_end":16},"name":"DW_OP_call2","qualname":"::constants::DW_OP_call2","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5891},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63081,"byte_end":63092,"line_start":1237,"line_end":1237,"column_start":5,"column_end":16},"name":"DW_OP_call4","qualname":"::constants::DW_OP_call4","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5892},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63105,"byte_end":63119,"line_start":1238,"line_end":1238,"column_start":5,"column_end":19},"name":"DW_OP_call_ref","qualname":"::constants::DW_OP_call_ref","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5893},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63132,"byte_end":63154,"line_start":1239,"line_end":1239,"column_start":5,"column_end":27},"name":"DW_OP_form_tls_address","qualname":"::constants::DW_OP_form_tls_address","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5894},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63167,"byte_end":63187,"line_start":1240,"line_end":1240,"column_start":5,"column_end":25},"name":"DW_OP_call_frame_cfa","qualname":"::constants::DW_OP_call_frame_cfa","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5895},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63200,"byte_end":63215,"line_start":1241,"line_end":1241,"column_start":5,"column_end":20},"name":"DW_OP_bit_piece","qualname":"::constants::DW_OP_bit_piece","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5896},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63228,"byte_end":63248,"line_start":1242,"line_end":1242,"column_start":5,"column_end":25},"name":"DW_OP_implicit_value","qualname":"::constants::DW_OP_implicit_value","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5897},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63261,"byte_end":63278,"line_start":1243,"line_end":1243,"column_start":5,"column_end":22},"name":"DW_OP_stack_value","qualname":"::constants::DW_OP_stack_value","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5898},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63291,"byte_end":63313,"line_start":1244,"line_end":1244,"column_start":5,"column_end":27},"name":"DW_OP_implicit_pointer","qualname":"::constants::DW_OP_implicit_pointer","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5899},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63326,"byte_end":63337,"line_start":1245,"line_end":1245,"column_start":5,"column_end":16},"name":"DW_OP_addrx","qualname":"::constants::DW_OP_addrx","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5900},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63350,"byte_end":63362,"line_start":1246,"line_end":1246,"column_start":5,"column_end":17},"name":"DW_OP_constx","qualname":"::constants::DW_OP_constx","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5901},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63375,"byte_end":63392,"line_start":1247,"line_end":1247,"column_start":5,"column_end":22},"name":"DW_OP_entry_value","qualname":"::constants::DW_OP_entry_value","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5902},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63405,"byte_end":63421,"line_start":1248,"line_end":1248,"column_start":5,"column_end":21},"name":"DW_OP_const_type","qualname":"::constants::DW_OP_const_type","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5903},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63434,"byte_end":63451,"line_start":1249,"line_end":1249,"column_start":5,"column_end":22},"name":"DW_OP_regval_type","qualname":"::constants::DW_OP_regval_type","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5904},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63464,"byte_end":63480,"line_start":1250,"line_end":1250,"column_start":5,"column_end":21},"name":"DW_OP_deref_type","qualname":"::constants::DW_OP_deref_type","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5905},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63493,"byte_end":63510,"line_start":1251,"line_end":1251,"column_start":5,"column_end":22},"name":"DW_OP_xderef_type","qualname":"::constants::DW_OP_xderef_type","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5906},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63523,"byte_end":63536,"line_start":1252,"line_end":1252,"column_start":5,"column_end":18},"name":"DW_OP_convert","qualname":"::constants::DW_OP_convert","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5907},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63549,"byte_end":63566,"line_start":1253,"line_end":1253,"column_start":5,"column_end":22},"name":"DW_OP_reinterpret","qualname":"::constants::DW_OP_reinterpret","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5908},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63602,"byte_end":63628,"line_start":1256,"line_end":1256,"column_start":5,"column_end":31},"name":"DW_OP_GNU_push_tls_address","qualname":"::constants::DW_OP_GNU_push_tls_address","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5909},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63641,"byte_end":63667,"line_start":1257,"line_end":1257,"column_start":5,"column_end":31},"name":"DW_OP_GNU_implicit_pointer","qualname":"::constants::DW_OP_GNU_implicit_pointer","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5910},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63680,"byte_end":63701,"line_start":1258,"line_end":1258,"column_start":5,"column_end":26},"name":"DW_OP_GNU_entry_value","qualname":"::constants::DW_OP_GNU_entry_value","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5911},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63714,"byte_end":63734,"line_start":1259,"line_end":1259,"column_start":5,"column_end":25},"name":"DW_OP_GNU_const_type","qualname":"::constants::DW_OP_GNU_const_type","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5912},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63747,"byte_end":63768,"line_start":1260,"line_end":1260,"column_start":5,"column_end":26},"name":"DW_OP_GNU_regval_type","qualname":"::constants::DW_OP_GNU_regval_type","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5913},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63781,"byte_end":63801,"line_start":1261,"line_end":1261,"column_start":5,"column_end":25},"name":"DW_OP_GNU_deref_type","qualname":"::constants::DW_OP_GNU_deref_type","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5914},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63814,"byte_end":63831,"line_start":1262,"line_end":1262,"column_start":5,"column_end":22},"name":"DW_OP_GNU_convert","qualname":"::constants::DW_OP_GNU_convert","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5915},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63844,"byte_end":63865,"line_start":1263,"line_end":1263,"column_start":5,"column_end":26},"name":"DW_OP_GNU_reinterpret","qualname":"::constants::DW_OP_GNU_reinterpret","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5916},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63878,"byte_end":63901,"line_start":1264,"line_end":1264,"column_start":5,"column_end":28},"name":"DW_OP_GNU_parameter_ref","qualname":"::constants::DW_OP_GNU_parameter_ref","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5917},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63914,"byte_end":63934,"line_start":1265,"line_end":1265,"column_start":5,"column_end":25},"name":"DW_OP_GNU_addr_index","qualname":"::constants::DW_OP_GNU_addr_index","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5918},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":63947,"byte_end":63968,"line_start":1266,"line_end":1266,"column_start":5,"column_end":26},"name":"DW_OP_GNU_const_index","qualname":"::constants::DW_OP_GNU_const_index","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5919},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":64005,"byte_end":64024,"line_start":1269,"line_end":1269,"column_start":5,"column_end":24},"name":"DW_OP_WASM_location","qualname":"::constants::DW_OP_WASM_location","value":"DwOp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5966},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":64336,"byte_end":64342,"line_start":1280,"line_end":1280,"column_start":1,"column_end":7},"name":"DwEhPe","qualname":"::constants::DwEhPe","value":"","parent":null,"children":[],"decl_id":null,"docs":" Pointer encoding used by `.eh_frame`.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5946},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":64449,"byte_end":64465,"line_start":1284,"line_end":1284,"column_start":5,"column_end":21},"name":"DW_EH_PE_uleb128","qualname":"::constants::DW_EH_PE_uleb128","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5947},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":64508,"byte_end":64523,"line_start":1286,"line_end":1286,"column_start":5,"column_end":20},"name":"DW_EH_PE_udata2","qualname":"::constants::DW_EH_PE_udata2","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5948},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":64566,"byte_end":64581,"line_start":1288,"line_end":1288,"column_start":5,"column_end":20},"name":"DW_EH_PE_udata4","qualname":"::constants::DW_EH_PE_udata4","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5949},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":64625,"byte_end":64640,"line_start":1290,"line_end":1290,"column_start":5,"column_end":20},"name":"DW_EH_PE_udata8","qualname":"::constants::DW_EH_PE_udata8","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5950},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":64714,"byte_end":64730,"line_start":1292,"line_end":1292,"column_start":5,"column_end":21},"name":"DW_EH_PE_sleb128","qualname":"::constants::DW_EH_PE_sleb128","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5951},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":64771,"byte_end":64786,"line_start":1294,"line_end":1294,"column_start":5,"column_end":20},"name":"DW_EH_PE_sdata2","qualname":"::constants::DW_EH_PE_sdata2","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5952},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":64828,"byte_end":64843,"line_start":1296,"line_end":1296,"column_start":5,"column_end":20},"name":"DW_EH_PE_sdata4","qualname":"::constants::DW_EH_PE_sdata4","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5953},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":64886,"byte_end":64901,"line_start":1298,"line_end":1298,"column_start":5,"column_end":20},"name":"DW_EH_PE_sdata8","qualname":"::constants::DW_EH_PE_sdata8","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5954},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":65028,"byte_end":65042,"line_start":1303,"line_end":1303,"column_start":5,"column_end":19},"name":"DW_EH_PE_pcrel","qualname":"::constants::DW_EH_PE_pcrel","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5955},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":65117,"byte_end":65133,"line_start":1305,"line_end":1305,"column_start":5,"column_end":21},"name":"DW_EH_PE_textrel","qualname":"::constants::DW_EH_PE_textrel","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5956},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":65224,"byte_end":65240,"line_start":1307,"line_end":1307,"column_start":5,"column_end":21},"name":"DW_EH_PE_datarel","qualname":"::constants::DW_EH_PE_datarel","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5957},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":65310,"byte_end":65326,"line_start":1309,"line_end":1309,"column_start":5,"column_end":21},"name":"DW_EH_PE_funcrel","qualname":"::constants::DW_EH_PE_funcrel","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5958},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":65396,"byte_end":65412,"line_start":1311,"line_end":1311,"column_start":5,"column_end":21},"name":"DW_EH_PE_aligned","qualname":"::constants::DW_EH_PE_aligned","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5959},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":65724,"byte_end":65741,"line_start":1319,"line_end":1319,"column_start":5,"column_end":22},"name":"DW_EH_PE_indirect","qualname":"::constants::DW_EH_PE_indirect","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5960},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":65900,"byte_end":65915,"line_start":1325,"line_end":1325,"column_start":5,"column_end":20},"name":"DW_EH_PE_absptr","qualname":"::constants::DW_EH_PE_absptr","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":5961},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":65969,"byte_end":65982,"line_start":1327,"line_end":1327,"column_start":5,"column_end":18},"name":"DW_EH_PE_omit","qualname":"::constants::DW_EH_PE_omit","value":"DwEhPe","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":66205,"byte_end":66211,"line_start":1338,"line_end":1338,"column_start":12,"column_end":18},"name":"format","qualname":"<DwEhPe>::format","value":"pub fn format(Self) -> DwEhPe","parent":null,"children":[],"decl_id":null,"docs":" Get the pointer encoding's format.\n","sig":null,"attributes":[{"value":"/ Get the pointer encoding's format.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":66141,"byte_end":66179,"line_start":1336,"line_end":1336,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":66184,"byte_end":66193,"line_start":1337,"line_end":1337,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":66356,"byte_end":66367,"line_start":1344,"line_end":1344,"column_start":12,"column_end":23},"name":"application","qualname":"<DwEhPe>::application","value":"pub fn application(Self) -> DwEhPe","parent":null,"children":[],"decl_id":null,"docs":" Get the pointer encoding's application.\n","sig":null,"attributes":[{"value":"/ Get the pointer encoding's application.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":66287,"byte_end":66330,"line_start":1342,"line_end":1342,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":66335,"byte_end":66344,"line_start":1343,"line_end":1343,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":66523,"byte_end":66532,"line_start":1350,"line_end":1350,"column_start":12,"column_end":21},"name":"is_absent","qualname":"<DwEhPe>::is_absent","value":"pub fn is_absent(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this encoding the absent pointer encoding?\n","sig":null,"attributes":[{"value":"/ Is this encoding the absent pointer encoding?","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":66448,"byte_end":66497,"line_start":1348,"line_end":1348,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":66502,"byte_end":66511,"line_start":1349,"line_end":1349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":66751,"byte_end":66762,"line_start":1357,"line_end":1357,"column_start":12,"column_end":23},"name":"is_indirect","qualname":"<DwEhPe>::is_indirect","value":"pub fn is_indirect(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this coding indirect? If so, its encoded value is the address of the\n real pointer result, not the pointer result itself.\n","sig":null,"attributes":[{"value":"/ Is this coding indirect? If so, its encoded value is the address of the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":66590,"byte_end":66665,"line_start":1354,"line_end":1354,"column_start":5,"column_end":80}},{"value":"/ real pointer result, not the pointer result itself.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":66670,"byte_end":66725,"line_start":1355,"line_end":1355,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":66730,"byte_end":66739,"line_start":1356,"line_end":1356,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":66888,"byte_end":66905,"line_start":1362,"line_end":1362,"column_start":12,"column_end":29},"name":"is_valid_encoding","qualname":"<DwEhPe>::is_valid_encoding","value":"pub fn is_valid_encoding(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this a known, valid pointer encoding?\n","sig":null,"attributes":[{"value":"/ Is this a known, valid pointer encoding?","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":66832,"byte_end":66876,"line_start":1361,"line_end":1361,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":62},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":68946,"byte_end":68955,"line_start":7,"line_end":7,"column_start":11,"column_end":20},"name":"Endianity","qualname":"::endianity::Endianity","value":"Endianity: Debug + Default + Clone + Copy + PartialEq + Eq","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":67},{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80}],"decl_id":null,"docs":" A trait describing the endianity of some buffer.\n","sig":null,"attributes":[{"value":"/ A trait describing the endianity of some buffer.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":68883,"byte_end":68935,"line_start":6,"line_end":6,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":69061,"byte_end":69074,"line_start":9,"line_end":9,"column_start":8,"column_end":21},"name":"is_big_endian","qualname":"::endianity::Endianity::is_big_endian","value":"pub fn is_big_endian(Self) -> bool","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Return true for big endian byte order.\n","sig":null,"attributes":[{"value":"/ Return true for big endian byte order.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":69011,"byte_end":69053,"line_start":8,"line_end":8,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":69162,"byte_end":69178,"line_start":13,"line_end":13,"column_start":8,"column_end":24},"name":"is_little_endian","qualname":"::endianity::Endianity::is_little_endian","value":"pub fn is_little_endian(Self) -> bool","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Return true for little endian byte order.\n","sig":null,"attributes":[{"value":"/ Return true for little endian byte order.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":69095,"byte_end":69140,"line_start":11,"line_end":11,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":69145,"byte_end":69154,"line_start":12,"line_end":12,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":69376,"byte_end":69384,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::endianity::Endianity::read_u16","value":"pub fn read_u16(Self, &[u8]) -> u16","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 16 bit integer from `buf`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":69236,"byte_end":69284,"line_start":17,"line_end":17,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":69289,"byte_end":69292,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":69297,"byte_end":69309,"line_start":19,"line_end":19,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":69314,"byte_end":69317,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":69322,"byte_end":69354,"line_start":21,"line_end":21,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":69359,"byte_end":69368,"line_start":22,"line_end":22,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":69762,"byte_end":69770,"line_start":38,"line_end":38,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::endianity::Endianity::read_u32","value":"pub fn read_u32(Self, &[u8]) -> u32","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 32 bit integer from `buf`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":69622,"byte_end":69670,"line_start":32,"line_end":32,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":69675,"byte_end":69678,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":69683,"byte_end":69695,"line_start":34,"line_end":34,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":69700,"byte_end":69703,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":69708,"byte_end":69740,"line_start":36,"line_end":36,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":69745,"byte_end":69754,"line_start":37,"line_end":37,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":70148,"byte_end":70156,"line_start":53,"line_end":53,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::endianity::Endianity::read_u64","value":"pub fn read_u64(Self, &[u8]) -> u64","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 64 bit integer from `buf`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":70008,"byte_end":70056,"line_start":47,"line_end":47,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":70061,"byte_end":70064,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":70069,"byte_end":70081,"line_start":49,"line_end":49,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":70086,"byte_end":70089,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":70094,"byte_end":70126,"line_start":51,"line_end":51,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":70131,"byte_end":70140,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":70546,"byte_end":70555,"line_start":68,"line_end":68,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::endianity::Endianity::read_uint","value":"pub fn read_uint(&mut Self, &[u8]) -> u64","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Read an unsigned n-bytes integer u64.","sig":null,"attributes":[{"value":"/ Read an unsigned n-bytes integer u64.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":70394,"byte_end":70435,"line_start":62,"line_end":62,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":70440,"byte_end":70443,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":70448,"byte_end":70460,"line_start":64,"line_end":64,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":70465,"byte_end":70468,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 1` or `buf.len() > 8`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":70473,"byte_end":70524,"line_start":66,"line_end":66,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":70529,"byte_end":70538,"line_start":67,"line_end":67,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":70961,"byte_end":70969,"line_start":84,"line_end":84,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::endianity::Endianity::read_i16","value":"pub fn read_i16(Self, &[u8]) -> i16","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 16 bit integer from `buf`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":70824,"byte_end":70869,"line_start":78,"line_end":78,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":70874,"byte_end":70877,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":70882,"byte_end":70894,"line_start":80,"line_end":80,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":70899,"byte_end":70902,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":70907,"byte_end":70939,"line_start":82,"line_end":82,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":70944,"byte_end":70953,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71179,"byte_end":71187,"line_start":94,"line_end":94,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::endianity::Endianity::read_i32","value":"pub fn read_i32(Self, &[u8]) -> i32","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 32 bit integer from `buf`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71042,"byte_end":71087,"line_start":88,"line_end":88,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71092,"byte_end":71095,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71100,"byte_end":71112,"line_start":90,"line_end":90,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71117,"byte_end":71120,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71125,"byte_end":71157,"line_start":92,"line_end":92,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71162,"byte_end":71171,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71397,"byte_end":71405,"line_start":104,"line_end":104,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::endianity::Endianity::read_i64","value":"pub fn read_i64(Self, &[u8]) -> i64","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 64 bit integer from `buf`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71260,"byte_end":71305,"line_start":98,"line_end":98,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71310,"byte_end":71313,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71318,"byte_end":71330,"line_start":100,"line_end":100,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71335,"byte_end":71338,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71343,"byte_end":71375,"line_start":102,"line_end":102,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71380,"byte_end":71389,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71622,"byte_end":71630,"line_start":114,"line_end":114,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::endianity::Endianity::read_f32","value":"pub fn read_f32(Self, &[u8]) -> f32","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Reads a 32 bit floating point number from `buf`.","sig":null,"attributes":[{"value":"/ Reads a 32 bit floating point number from `buf`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71478,"byte_end":71530,"line_start":108,"line_end":108,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71535,"byte_end":71538,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71543,"byte_end":71555,"line_start":110,"line_end":110,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71560,"byte_end":71563,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71568,"byte_end":71600,"line_start":112,"line_end":112,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71605,"byte_end":71614,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71856,"byte_end":71864,"line_start":124,"line_end":124,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::endianity::Endianity::read_f64","value":"pub fn read_f64(Self, &[u8]) -> f64","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Reads a 32 bit floating point number from `buf`.","sig":null,"attributes":[{"value":"/ Reads a 32 bit floating point number from `buf`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71712,"byte_end":71764,"line_start":118,"line_end":118,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71769,"byte_end":71772,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71777,"byte_end":71789,"line_start":120,"line_end":120,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71794,"byte_end":71797,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71802,"byte_end":71834,"line_start":122,"line_end":122,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71839,"byte_end":71848,"line_start":123,"line_end":123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":72089,"byte_end":72098,"line_start":134,"line_end":134,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::endianity::Endianity::write_u16","value":"pub fn write_u16(Self, &mut [u8], u16)","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 16 bit integer `n` to `buf`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":71946,"byte_end":71997,"line_start":128,"line_end":128,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":72002,"byte_end":72005,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":72010,"byte_end":72022,"line_start":130,"line_end":130,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":72027,"byte_end":72030,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":72035,"byte_end":72067,"line_start":132,"line_end":132,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":72072,"byte_end":72081,"line_start":133,"line_end":133,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":72457,"byte_end":72466,"line_start":149,"line_end":149,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::endianity::Endianity::write_u32","value":"pub fn write_u32(Self, &mut [u8], u32)","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 32 bit integer `n` to `buf`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":72314,"byte_end":72365,"line_start":143,"line_end":143,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":72370,"byte_end":72373,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":72378,"byte_end":72390,"line_start":145,"line_end":145,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":72395,"byte_end":72398,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":72403,"byte_end":72435,"line_start":147,"line_end":147,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":72440,"byte_end":72449,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":72825,"byte_end":72834,"line_start":164,"line_end":164,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::endianity::Endianity::write_u64","value":"pub fn write_u64(Self, &mut [u8], u64)","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 64 bit integer `n` to `buf`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":72682,"byte_end":72733,"line_start":158,"line_end":158,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":72738,"byte_end":72741,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":72746,"byte_end":72758,"line_start":160,"line_end":160,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":72763,"byte_end":72766,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":72771,"byte_end":72803,"line_start":162,"line_end":162,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":72808,"byte_end":72817,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5989},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":73208,"byte_end":73214,"line_start":178,"line_end":178,"column_start":5,"column_end":11},"name":"Little","qualname":"::endianity::RunTimeEndian::Little","value":"RunTimeEndian::Little","parent":{"krate":0,"index":5988},"children":[],"decl_id":null,"docs":" Little endian byte order.\n","sig":null,"attributes":[{"value":"/ Little endian byte order.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":73174,"byte_end":73203,"line_start":177,"line_end":177,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5991},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":73251,"byte_end":73254,"line_start":180,"line_end":180,"column_start":5,"column_end":8},"name":"Big","qualname":"::endianity::RunTimeEndian::Big","value":"RunTimeEndian::Big","parent":{"krate":0,"index":5988},"children":[],"decl_id":null,"docs":" Big endian byte order.\n","sig":null,"attributes":[{"value":"/ Big endian byte order.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":73220,"byte_end":73246,"line_start":179,"line_end":179,"column_start":5,"column_end":31}}]},{"kind":"Enum","id":{"krate":0,"index":5988},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":73154,"byte_end":73167,"line_start":176,"line_end":176,"column_start":10,"column_end":23},"name":"RunTimeEndian","qualname":"::endianity::RunTimeEndian","value":"pub enum RunTimeEndian { Little, Big, }","parent":null,"children":[{"krate":0,"index":5989},{"krate":0,"index":5991}],"decl_id":null,"docs":" Byte order that is selectable at runtime.\n","sig":null,"attributes":[{"value":"/ Byte order that is selectable at runtime.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":73048,"byte_end":73093,"line_start":174,"line_end":174,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6007},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":73761,"byte_end":73773,"line_start":206,"line_end":206,"column_start":12,"column_end":24},"name":"LittleEndian","qualname":"::endianity::LittleEndian","value":"","parent":null,"children":[],"decl_id":null,"docs":" Little endian byte order.\n","sig":null,"attributes":[{"value":"/ Little endian byte order.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":73669,"byte_end":73698,"line_start":204,"line_end":204,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":6023},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":74084,"byte_end":74093,"line_start":224,"line_end":224,"column_start":12,"column_end":21},"name":"BigEndian","qualname":"::endianity::BigEndian","value":"","parent":null,"children":[],"decl_id":null,"docs":" Big endian byte order.\n","sig":null,"attributes":[{"value":"/ Big endian byte order.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":73995,"byte_end":74021,"line_start":222,"line_end":222,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":93},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":74394,"byte_end":74406,"line_start":242,"line_end":242,"column_start":10,"column_end":22},"name":"NativeEndian","qualname":"::endianity::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" The native endianity for the target platform.\n","sig":null,"attributes":[{"value":"/ The native endianity for the target platform.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":74302,"byte_end":74351,"line_start":240,"line_end":240,"column_start":1,"column_end":50}},{"value":"cfg(target_endian = \"little\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":74352,"byte_end":74384,"line_start":241,"line_end":241,"column_start":1,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":94},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":74515,"byte_end":74527,"line_start":247,"line_end":247,"column_start":11,"column_end":23},"name":"NativeEndian","qualname":"::endianity::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_endian = \"little\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":74424,"byte_end":74456,"line_start":244,"line_end":244,"column_start":1,"column_end":33}},{"value":"allow(non_upper_case_globals)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":74457,"byte_end":74489,"line_start":245,"line_end":245,"column_start":1,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":111},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"leb128","qualname":"::leb128","value":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116}],"decl_id":null,"docs":" Read and write DWARF's \"Little Endian Base 128\" (LEB128) variable length\n integer encoding.","sig":null,"attributes":[{"value":"/ Read and write DWARF's \"Little Endian Base 128\" (LEB128) variable length","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":74801,"byte_end":74877,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"/ integer encoding.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":74878,"byte_end":74899,"line_start":2,"line_end":2,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":74900,"byte_end":74903,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ The implementation is a direct translation of the psuedocode in the DWARF 4","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":74904,"byte_end":74983,"line_start":4,"line_end":4,"column_start":1,"column_end":80}},{"value":"/ standard's appendix C.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":74984,"byte_end":75010,"line_start":5,"line_end":5,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75011,"byte_end":75014,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Read and write signed integers:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75015,"byte_end":75050,"line_start":7,"line_end":7,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75051,"byte_end":75054,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75055,"byte_end":75062,"line_start":9,"line_end":9,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(all(feature = \"read\", feature = \"write\"))] {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75063,"byte_end":75119,"line_start":10,"line_end":10,"column_start":1,"column_end":57}},{"value":"/ use gimli::{EndianSlice, NativeEndian, leb128};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75120,"byte_end":75171,"line_start":11,"line_end":11,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75172,"byte_end":75175,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 1024];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75176,"byte_end":75204,"line_start":13,"line_end":13,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75205,"byte_end":75208,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ // Write to anything that implements `std::io::Write`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75209,"byte_end":75267,"line_start":15,"line_end":15,"column_start":1,"column_end":59}},{"value":"/ {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75268,"byte_end":75273,"line_start":16,"line_end":16,"column_start":1,"column_end":6}},{"value":"/     let mut writable = &mut buf[..];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75274,"byte_end":75314,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/     leb128::write::signed(&mut writable, -12345).expect(\"Should write number\");","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75315,"byte_end":75398,"line_start":18,"line_end":18,"column_start":1,"column_end":84}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75399,"byte_end":75404,"line_start":19,"line_end":19,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75405,"byte_end":75408,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ // Read from anything that implements `gimli::Reader`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75409,"byte_end":75467,"line_start":21,"line_end":21,"column_start":1,"column_end":59}},{"value":"/ let mut readable = EndianSlice::new(&buf[..], NativeEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75468,"byte_end":75532,"line_start":22,"line_end":22,"column_start":1,"column_end":65}},{"value":"/ let val = leb128::read::signed(&mut readable).expect(\"Should read number\");","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75533,"byte_end":75612,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ assert_eq!(val, -12345);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75613,"byte_end":75641,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/ # }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75642,"byte_end":75649,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75650,"byte_end":75657,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75658,"byte_end":75661,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Or read and write unsigned integers:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75662,"byte_end":75702,"line_start":28,"line_end":28,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75703,"byte_end":75706,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75707,"byte_end":75714,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(all(feature = \"read\", feature = \"write\"))] {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75715,"byte_end":75771,"line_start":31,"line_end":31,"column_start":1,"column_end":57}},{"value":"/ use gimli::{EndianSlice, NativeEndian, leb128};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75772,"byte_end":75823,"line_start":32,"line_end":32,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75824,"byte_end":75827,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 1024];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75828,"byte_end":75856,"line_start":34,"line_end":34,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75857,"byte_end":75860,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75861,"byte_end":75866,"line_start":36,"line_end":36,"column_start":1,"column_end":6}},{"value":"/     let mut writable = &mut buf[..];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75867,"byte_end":75907,"line_start":37,"line_end":37,"column_start":1,"column_end":41}},{"value":"/     leb128::write::unsigned(&mut writable, 98765).expect(\"Should write number\");","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75908,"byte_end":75992,"line_start":38,"line_end":38,"column_start":1,"column_end":85}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75993,"byte_end":75998,"line_start":39,"line_end":39,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":75999,"byte_end":76002,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ let mut readable = EndianSlice::new(&buf[..], NativeEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":76003,"byte_end":76067,"line_start":41,"line_end":41,"column_start":1,"column_end":65}},{"value":"/ let val = leb128::read::unsigned(&mut readable).expect(\"Should read number\");","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":76068,"byte_end":76149,"line_start":42,"line_end":42,"column_start":1,"column_end":82}},{"value":"/ assert_eq!(val, 98765);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":76150,"byte_end":76177,"line_start":43,"line_end":43,"column_start":1,"column_end":28}},{"value":"/ # }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":76178,"byte_end":76185,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":76186,"byte_end":76193,"line_start":45,"line_end":45,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":116},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":76649,"byte_end":76653,"line_start":66,"line_end":66,"column_start":9,"column_end":13},"name":"read","qualname":"::leb128::read","value":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":131},{"krate":0,"index":134},{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":143}],"decl_id":null,"docs":" A module for reading signed and unsigned integers that have been LEB128\n encoded.\n","sig":null,"attributes":[{"value":"/ A module for reading signed and unsigned integers that have been LEB128","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":76522,"byte_end":76597,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/ encoded.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":76598,"byte_end":76610,"line_start":64,"line_end":64,"column_start":1,"column_end":13}},{"value":"cfg(feature = \"read-core\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":76611,"byte_end":76640,"line_start":65,"line_end":65,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":137},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":76842,"byte_end":76846,"line_start":71,"line_end":71,"column_start":12,"column_end":16},"name":"skip","qualname":"::leb128::read::skip","value":"pub fn skip<R: Reader>(&mut R) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Read bytes until the LEB128 continuation bit is not set.\n","sig":null,"attributes":[{"value":"/ Read bytes until the LEB128 continuation bit is not set.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":76770,"byte_end":76830,"line_start":70,"line_end":70,"column_start":5,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":139},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":77172,"byte_end":77180,"line_start":82,"line_end":82,"column_start":12,"column_end":20},"name":"unsigned","qualname":"::leb128::read::unsigned","value":"pub fn unsigned<R: Reader>(&mut R) -> Result<u64>","parent":null,"children":[],"decl_id":null,"docs":" Read an unsigned LEB128 number from the given `Reader` and\n return it or an error if reading failed.\n","sig":null,"attributes":[{"value":"/ Read an unsigned LEB128 number from the given `Reader` and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":77049,"byte_end":77111,"line_start":80,"line_end":80,"column_start":5,"column_end":67}},{"value":"/ return it or an error if reading failed.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":77116,"byte_end":77160,"line_start":81,"line_end":81,"column_start":5,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":141},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":77814,"byte_end":77817,"line_start":105,"line_end":105,"column_start":12,"column_end":15},"name":"u16","qualname":"::leb128::read::u16","value":"pub fn u16<R: Reader>(&mut R) -> Result<u16>","parent":null,"children":[],"decl_id":null,"docs":" Read an LEB128 u16 from the given `Reader` and\n return it or an error if reading failed.\n","sig":null,"attributes":[{"value":"/ Read an LEB128 u16 from the given `Reader` and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":77703,"byte_end":77753,"line_start":103,"line_end":103,"column_start":5,"column_end":55}},{"value":"/ return it or an error if reading failed.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":77758,"byte_end":77802,"line_start":104,"line_end":104,"column_start":5,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":143},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":78518,"byte_end":78524,"line_start":128,"line_end":128,"column_start":12,"column_end":18},"name":"signed","qualname":"::leb128::read::signed","value":"pub fn signed<R: Reader>(&mut R) -> Result<i64>","parent":null,"children":[],"decl_id":null,"docs":" Read a signed LEB128 number from the given `Reader` and\n return it or an error if reading failed.\n","sig":null,"attributes":[{"value":"/ Read a signed LEB128 number from the given `Reader` and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":78398,"byte_end":78457,"line_start":126,"line_end":126,"column_start":5,"column_end":64}},{"value":"/ return it or an error if reading failed.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/leb128.rs","byte_start":78462,"byte_end":78506,"line_start":127,"line_end":127,"column_start":5,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":145},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::read","value":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":153},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":163},{"krate":0,"index":166},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":750},{"krate":0,"index":751},{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1145},{"krate":0,"index":1146},{"krate":0,"index":1278},{"krate":0,"index":1279},{"krate":0,"index":1407},{"krate":0,"index":1408},{"krate":0,"index":1492},{"krate":0,"index":1493},{"krate":0,"index":1570},{"krate":0,"index":1571},{"krate":0,"index":1832},{"krate":0,"index":1833},{"krate":0,"index":1858},{"krate":0,"index":1986},{"krate":0,"index":1987},{"krate":0,"index":2046},{"krate":0,"index":2166},{"krate":0,"index":2167},{"krate":0,"index":2232},{"krate":0,"index":2233},{"krate":0,"index":2298},{"krate":0,"index":2299},{"krate":0,"index":2425},{"krate":0,"index":2426},{"krate":0,"index":2530},{"krate":0,"index":8344},{"krate":0,"index":8348},{"krate":0,"index":8351},{"krate":0,"index":8354},{"krate":0,"index":8356},{"krate":0,"index":8358},{"krate":0,"index":8362},{"krate":0,"index":8364},{"krate":0,"index":8367},{"krate":0,"index":8370},{"krate":0,"index":8373},{"krate":0,"index":2531},{"krate":0,"index":2918},{"krate":0,"index":2919},{"krate":0,"index":2981},{"krate":0,"index":8895},{"krate":0,"index":8897},{"krate":0,"index":8899},{"krate":0,"index":8901},{"krate":0,"index":8902},{"krate":0,"index":8903},{"krate":0,"index":8905},{"krate":0,"index":8906},{"krate":0,"index":2982},{"krate":0,"index":8908},{"krate":0,"index":9071},{"krate":0,"index":9073},{"krate":0,"index":9075},{"krate":0,"index":9076},{"krate":0,"index":9077},{"krate":0,"index":9080},{"krate":0,"index":9081},{"krate":0,"index":2985},{"krate":0,"index":2987},{"krate":0,"index":2989},{"krate":0,"index":2991},{"krate":0,"index":3003}],"decl_id":null,"docs":" Read DWARF debugging information.","sig":null,"attributes":[{"value":"cfg(feature = \"read-core\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":2000,"byte_end":2029,"line_start":66,"line_end":66,"column_start":1,"column_end":30}},{"value":"/ Read DWARF debugging information.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":93203,"byte_end":93240,"line_start":1,"line_end":1,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":93241,"byte_end":93244,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ * [Example Usage](#example-usage)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":93245,"byte_end":93282,"line_start":3,"line_end":3,"column_start":1,"column_end":38}},{"value":"/ * [API Structure](#api-structure)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":93283,"byte_end":93320,"line_start":4,"line_end":4,"column_start":1,"column_end":38}},{"value":"/ * [Using with `FallibleIterator`](#using-with-fallibleiterator)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":93321,"byte_end":93388,"line_start":5,"line_end":5,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":93389,"byte_end":93392,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ## Example Usage","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":93393,"byte_end":93413,"line_start":7,"line_end":7,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":93414,"byte_end":93417,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Print out all of the functions in the debuggee program:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":93418,"byte_end":93477,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":93478,"byte_end":93481,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":93482,"byte_end":93500,"line_start":11,"line_end":11,"column_start":1,"column_end":19}},{"value":"/ # fn example() -> Result<(), gimli::Error> {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":93501,"byte_end":93549,"line_start":12,"line_end":12,"column_start":1,"column_end":49}},{"value":"/ # type R = gimli::EndianSlice<'static, gimli::LittleEndian>;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":93550,"byte_end":93614,"line_start":13,"line_end":13,"column_start":1,"column_end":65}},{"value":"/ # let get_file_section_reader = |name| -> Result<R, gimli::Error> { unimplemented!() };","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":93615,"byte_end":93706,"line_start":14,"line_end":14,"column_start":1,"column_end":92}},{"value":"/ # let get_sup_file_section_reader = |name| -> Result<R, gimli::Error> { unimplemented!() };","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":93707,"byte_end":93802,"line_start":15,"line_end":15,"column_start":1,"column_end":96}},{"value":"/ // Read the DWARF sections with whatever object loader you're using.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":93803,"byte_end":93875,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/ // These closures should return a `Reader` instance (e.g. `EndianSlice`).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":93876,"byte_end":93953,"line_start":17,"line_end":17,"column_start":1,"column_end":78}},{"value":"/ let loader = |section: gimli::SectionId| { get_file_section_reader(section.name()) };","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":93954,"byte_end":94043,"line_start":18,"line_end":18,"column_start":1,"column_end":90}},{"value":"/ let sup_loader = |section: gimli::SectionId| { get_sup_file_section_reader(section.name()) };","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94044,"byte_end":94141,"line_start":19,"line_end":19,"column_start":1,"column_end":98}},{"value":"/ let mut dwarf = gimli::Dwarf::load(loader)?;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94142,"byte_end":94190,"line_start":20,"line_end":20,"column_start":1,"column_end":49}},{"value":"/ dwarf.load_sup(sup_loader)?;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94191,"byte_end":94223,"line_start":21,"line_end":21,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94224,"byte_end":94227,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ // Iterate over all compilation units.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94228,"byte_end":94270,"line_start":23,"line_end":23,"column_start":1,"column_end":43}},{"value":"/ let mut iter = dwarf.units();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94271,"byte_end":94304,"line_start":24,"line_end":24,"column_start":1,"column_end":34}},{"value":"/ while let Some(header) = iter.next()? {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94305,"byte_end":94348,"line_start":25,"line_end":25,"column_start":1,"column_end":44}},{"value":"/     // Parse the abbreviations and other information for this compilation unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94349,"byte_end":94432,"line_start":26,"line_end":26,"column_start":1,"column_end":84}},{"value":"/     let unit = dwarf.unit(header)?;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94433,"byte_end":94472,"line_start":27,"line_end":27,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94473,"byte_end":94476,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/     // Iterate over all of this compilation unit's entries.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94477,"byte_end":94540,"line_start":29,"line_end":29,"column_start":1,"column_end":64}},{"value":"/     let mut entries = unit.entries();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94541,"byte_end":94582,"line_start":30,"line_end":30,"column_start":1,"column_end":42}},{"value":"/     while let Some((_, entry)) = entries.next_dfs()? {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94583,"byte_end":94641,"line_start":31,"line_end":31,"column_start":1,"column_end":59}},{"value":"/         // If we find an entry for a function, print it.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94642,"byte_end":94702,"line_start":32,"line_end":32,"column_start":1,"column_end":61}},{"value":"/         if entry.tag() == gimli::DW_TAG_subprogram {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94703,"byte_end":94759,"line_start":33,"line_end":33,"column_start":1,"column_end":57}},{"value":"/             println!(\"Found a function: {:?}\", entry);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94760,"byte_end":94818,"line_start":34,"line_end":34,"column_start":1,"column_end":59}},{"value":"/         }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94819,"byte_end":94832,"line_start":35,"line_end":35,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94833,"byte_end":94842,"line_start":36,"line_end":36,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94843,"byte_end":94848,"line_start":37,"line_end":37,"column_start":1,"column_end":6}},{"value":"/ # unreachable!()","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94849,"byte_end":94869,"line_start":38,"line_end":38,"column_start":1,"column_end":21}},{"value":"/ # }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94870,"byte_end":94877,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94878,"byte_end":94885,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94886,"byte_end":94889,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Full example programs:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94890,"byte_end":94916,"line_start":42,"line_end":42,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94917,"byte_end":94920,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/   * [A simple parser](https://github.com/gimli-rs/gimli/blob/master/examples/simple.rs)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":94921,"byte_end":95012,"line_start":44,"line_end":44,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":95013,"byte_end":95016,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/   * [A `dwarfdump`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":95017,"byte_end":95039,"line_start":46,"line_end":46,"column_start":1,"column_end":23}},{"value":"/     clone](https://github.com/gimli-rs/gimli/blob/master/examples/dwarfdump.rs)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":95040,"byte_end":95123,"line_start":47,"line_end":47,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":95124,"byte_end":95127,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/   * [An `addr2line` clone](https://github.com/gimli-rs/addr2line)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":95128,"byte_end":95197,"line_start":49,"line_end":49,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":95198,"byte_end":95201,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/   * [`ddbug`](https://github.com/philipc/ddbug), a utility giving insight into","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":95202,"byte_end":95284,"line_start":51,"line_end":51,"column_start":1,"column_end":83}},{"value":"/     code generation by making debugging information readable","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":95285,"byte_end":95349,"line_start":52,"line_end":52,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":95350,"byte_end":95353,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/   * [`dwprod`](https://github.com/fitzgen/dwprod), a tiny utility to list the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":95354,"byte_end":95435,"line_start":54,"line_end":54,"column_start":1,"column_end":82}},{"value":"/     compilers used to create each compilation unit within a shared library or","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":95436,"byte_end":95517,"line_start":55,"line_end":55,"column_start":1,"column_end":82}},{"value":"/     executable (via `DW_AT_producer`)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":95518,"byte_end":95559,"line_start":56,"line_end":56,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":95560,"byte_end":95563,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/   * [`dwarf-validate`](https://github.com/gimli-rs/gimli/blob/master/examples/dwarf-validate.rs),","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":95564,"byte_end":95665,"line_start":58,"line_end":58,"column_start":1,"column_end":102}},{"value":"/     a program to validate the integrity of some DWARF and its references","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":95666,"byte_end":95742,"line_start":59,"line_end":59,"column_start":1,"column_end":77}},{"value":"/     between sections and compilation units.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":95743,"byte_end":95790,"line_start":60,"line_end":60,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":95791,"byte_end":95794,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ## API Structure","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":95795,"byte_end":95815,"line_start":62,"line_end":62,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":95816,"byte_end":95819,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ * Basic familiarity with DWARF is assumed.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":95820,"byte_end":95866,"line_start":64,"line_end":64,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":95867,"byte_end":95870,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ * The [`Dwarf`](./struct.Dwarf.html) type contains the commonly used DWARF","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":95871,"byte_end":95949,"line_start":66,"line_end":66,"column_start":1,"column_end":79}},{"value":"/ sections. It has methods that simplify access to debugging data that spans","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":95950,"byte_end":96028,"line_start":67,"line_end":67,"column_start":1,"column_end":79}},{"value":"/ multiple sections. Use of this type is optional, but recommended.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96029,"byte_end":96098,"line_start":68,"line_end":68,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96099,"byte_end":96102,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ * Each section gets its own type. Consider these types the entry points to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96103,"byte_end":96181,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/ the library:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96182,"byte_end":96198,"line_start":71,"line_end":71,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96199,"byte_end":96202,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/   * [`DebugAbbrev`](./struct.DebugAbbrev.html): The `.debug_abbrev` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96203,"byte_end":96283,"line_start":73,"line_end":73,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96284,"byte_end":96287,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/   * [`DebugAddr`](./struct.DebugAddr.html): The `.debug_addr` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96288,"byte_end":96362,"line_start":75,"line_end":75,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96363,"byte_end":96366,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/   * [`DebugAranges`](./struct.DebugAranges.html): The `.debug_aranges`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96367,"byte_end":96441,"line_start":77,"line_end":77,"column_start":1,"column_end":75}},{"value":"/   section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96442,"byte_end":96456,"line_start":78,"line_end":78,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96457,"byte_end":96460,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/   * [`DebugFrame`](./struct.DebugFrame.html): The `.debug_frame` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96461,"byte_end":96538,"line_start":80,"line_end":80,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96539,"byte_end":96542,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/   * [`DebugInfo`](./struct.DebugInfo.html): The `.debug_info` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96543,"byte_end":96617,"line_start":82,"line_end":82,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96618,"byte_end":96621,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/   * [`DebugLine`](./struct.DebugLine.html): The `.debug_line` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96622,"byte_end":96696,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96697,"byte_end":96700,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/   * [`DebugLineStr`](./struct.DebugLineStr.html): The `.debug_line_str` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96701,"byte_end":96785,"line_start":86,"line_end":86,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96786,"byte_end":96789,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/   * [`DebugLoc`](./struct.DebugLoc.html): The `.debug_loc` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96790,"byte_end":96861,"line_start":88,"line_end":88,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96862,"byte_end":96865,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/   * [`DebugLocLists`](./struct.DebugLocLists.html): The `.debug_loclists` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96866,"byte_end":96952,"line_start":90,"line_end":90,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96953,"byte_end":96956,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/   * [`DebugPubNames`](./struct.DebugPubNames.html): The `.debug_pubnames`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":96957,"byte_end":97034,"line_start":92,"line_end":92,"column_start":1,"column_end":78}},{"value":"/   section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97035,"byte_end":97049,"line_start":93,"line_end":93,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97050,"byte_end":97053,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/   * [`DebugPubTypes`](./struct.DebugPubTypes.html): The `.debug_pubtypes`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97054,"byte_end":97131,"line_start":95,"line_end":95,"column_start":1,"column_end":78}},{"value":"/   section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97132,"byte_end":97146,"line_start":96,"line_end":96,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97147,"byte_end":97150,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/   * [`DebugRanges`](./struct.DebugRanges.html): The `.debug_ranges` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97151,"byte_end":97231,"line_start":98,"line_end":98,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97232,"byte_end":97235,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/   * [`DebugRngLists`](./struct.DebugRngLists.html): The `.debug_rnglists` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97236,"byte_end":97322,"line_start":100,"line_end":100,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97323,"byte_end":97326,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/   * [`DebugStr`](./struct.DebugStr.html): The `.debug_str` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97327,"byte_end":97398,"line_start":102,"line_end":102,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97399,"byte_end":97402,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/   * [`DebugStrOffsets`](./struct.DebugStrOffsets.html): The `.debug_str_offsets` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97403,"byte_end":97496,"line_start":104,"line_end":104,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97497,"byte_end":97500,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/   * [`DebugTypes`](./struct.DebugTypes.html): The `.debug_types` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97501,"byte_end":97578,"line_start":106,"line_end":106,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97579,"byte_end":97582,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/   * [`DebugCuIndex`](./struct.DebugCuIndex.html): The `.debug_cu_index` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97583,"byte_end":97667,"line_start":108,"line_end":108,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97668,"byte_end":97671,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/   * [`DebugTuIndex`](./struct.DebugTuIndex.html): The `.debug_tu_index` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97672,"byte_end":97756,"line_start":110,"line_end":110,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97757,"byte_end":97760,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/   * [`EhFrame`](./struct.EhFrame.html): The `.eh_frame` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97761,"byte_end":97829,"line_start":112,"line_end":112,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97830,"byte_end":97833,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/   * [`EhFrameHdr`](./struct.EhFrameHdr.html): The `.eh_frame_hdr` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97834,"byte_end":97912,"line_start":114,"line_end":114,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97913,"byte_end":97916,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ * Each section type exposes methods for accessing the debugging data encoded","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97917,"byte_end":97997,"line_start":116,"line_end":116,"column_start":1,"column_end":81}},{"value":"/ in that section. For example, the [`DebugInfo`](./struct.DebugInfo.html)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":97998,"byte_end":98074,"line_start":117,"line_end":117,"column_start":1,"column_end":77}},{"value":"/ struct has the [`units`](./struct.DebugInfo.html#method.units) method for","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":98075,"byte_end":98152,"line_start":118,"line_end":118,"column_start":1,"column_end":78}},{"value":"/ iterating over the compilation units defined within it.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":98153,"byte_end":98212,"line_start":119,"line_end":119,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":98213,"byte_end":98216,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ * Offsets into a section are strongly typed: an offset into `.debug_info` is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":98217,"byte_end":98297,"line_start":121,"line_end":121,"column_start":1,"column_end":81}},{"value":"/ the [`DebugInfoOffset`](./struct.DebugInfoOffset.html) type. It cannot be","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":98298,"byte_end":98375,"line_start":122,"line_end":122,"column_start":1,"column_end":78}},{"value":"/ used to index into the [`DebugLine`](./struct.DebugLine.html) type because","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":98376,"byte_end":98454,"line_start":123,"line_end":123,"column_start":1,"column_end":79}},{"value":"/ `DebugLine` represents the `.debug_line` section. There are similar types","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":98455,"byte_end":98532,"line_start":124,"line_end":124,"column_start":1,"column_end":78}},{"value":"/ for offsets relative to a compilation unit rather than a section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":98533,"byte_end":98602,"line_start":125,"line_end":125,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":98603,"byte_end":98606,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ ## Using with `FallibleIterator`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":98607,"byte_end":98643,"line_start":127,"line_end":127,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":98644,"byte_end":98647,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ The standard library's `Iterator` trait and related APIs do not play well","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":98648,"byte_end":98725,"line_start":129,"line_end":129,"column_start":1,"column_end":78}},{"value":"/ with iterators where the `next` operation is fallible. One can make the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":98726,"byte_end":98801,"line_start":130,"line_end":130,"column_start":1,"column_end":76}},{"value":"/ `Iterator`'s associated `Item` type be a `Result<T, E>`, however the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":98802,"byte_end":98874,"line_start":131,"line_end":131,"column_start":1,"column_end":73}},{"value":"/ provided methods cannot gracefully handle the case when an `Err` is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":98875,"byte_end":98946,"line_start":132,"line_end":132,"column_start":1,"column_end":72}},{"value":"/ returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":98947,"byte_end":98960,"line_start":133,"line_end":133,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":98961,"byte_end":98964,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ This situation led to the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":98965,"byte_end":98994,"line_start":135,"line_end":135,"column_start":1,"column_end":30}},{"value":"/ [`fallible-iterator`](https://crates.io/crates/fallible-iterator) crate's","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":98995,"byte_end":99072,"line_start":136,"line_end":136,"column_start":1,"column_end":78}},{"value":"/ existence. You can read more of the rationale for its existence in its","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":99073,"byte_end":99147,"line_start":137,"line_end":137,"column_start":1,"column_end":75}},{"value":"/ docs. The crate provides the helpers you have come to expect (eg `map`,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":99148,"byte_end":99223,"line_start":138,"line_end":138,"column_start":1,"column_end":76}},{"value":"/ `filter`, etc) for iterators that can fail.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":99224,"byte_end":99271,"line_start":139,"line_end":139,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":99272,"byte_end":99275,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ `gimli`'s many lazy parsing iterators are a perfect match for the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":99276,"byte_end":99345,"line_start":141,"line_end":141,"column_start":1,"column_end":70}},{"value":"/ `fallible-iterator` crate's `FallibleIterator` trait because parsing is not","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":99346,"byte_end":99425,"line_start":142,"line_end":142,"column_start":1,"column_end":80}},{"value":"/ done eagerly. Parse errors later in the input might only be discovered after","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":99426,"byte_end":99506,"line_start":143,"line_end":143,"column_start":1,"column_end":81}},{"value":"/ having iterated through many items.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":99507,"byte_end":99546,"line_start":144,"line_end":144,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":99547,"byte_end":99550,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ To use `gimli` iterators with `FallibleIterator`, import the crate and trait","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":99551,"byte_end":99631,"line_start":146,"line_end":146,"column_start":1,"column_end":81}},{"value":"/ into your code:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":99632,"byte_end":99651,"line_start":147,"line_end":147,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":99652,"byte_end":99655,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":99656,"byte_end":99663,"line_start":149,"line_end":149,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"fallible-iterator\")]","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":99664,"byte_end":99707,"line_start":150,"line_end":150,"column_start":1,"column_end":44}},{"value":"/ # fn foo() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":99708,"byte_end":99724,"line_start":151,"line_end":151,"column_start":1,"column_end":17}},{"value":"/ // Use the `FallibleIterator` trait so its methods are in scope!","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":99725,"byte_end":99793,"line_start":152,"line_end":152,"column_start":1,"column_end":69}},{"value":"/ use fallible_iterator::FallibleIterator;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":99794,"byte_end":99838,"line_start":153,"line_end":153,"column_start":1,"column_end":45}},{"value":"/ use gimli::{DebugAranges, EndianSlice, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":99839,"byte_end":99896,"line_start":154,"line_end":154,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":99897,"byte_end":99900,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ fn find_sum_of_address_range_lengths(aranges: DebugAranges<EndianSlice<LittleEndian>>)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":99901,"byte_end":99991,"line_start":156,"line_end":156,"column_start":1,"column_end":91}},{"value":"/     -> gimli::Result<u64>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":99992,"byte_end":100021,"line_start":157,"line_end":157,"column_start":1,"column_end":30}},{"value":"/ {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":100022,"byte_end":100027,"line_start":158,"line_end":158,"column_start":1,"column_end":6}},{"value":"/     // `DebugAranges::headers` returns a `FallibleIterator`!","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":100028,"byte_end":100092,"line_start":159,"line_end":159,"column_start":1,"column_end":65}},{"value":"/     aranges.headers()","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":100093,"byte_end":100118,"line_start":160,"line_end":160,"column_start":1,"column_end":26}},{"value":"/         // `flat_map` is provided by `FallibleIterator`!","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":100119,"byte_end":100179,"line_start":161,"line_end":161,"column_start":1,"column_end":61}},{"value":"/         .flat_map(|header| Ok(header.entries()))","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":100180,"byte_end":100232,"line_start":162,"line_end":162,"column_start":1,"column_end":53}},{"value":"/         // `map` is provided by `FallibleIterator`!","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":100233,"byte_end":100288,"line_start":163,"line_end":163,"column_start":1,"column_end":56}},{"value":"/         .map(|arange| Ok(arange.length()))","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":100289,"byte_end":100335,"line_start":164,"line_end":164,"column_start":1,"column_end":47}},{"value":"/         // `fold` is provided by `FallibleIterator`!","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":100336,"byte_end":100392,"line_start":165,"line_end":165,"column_start":1,"column_end":57}},{"value":"/         .fold(0, |sum, len| Ok(sum + len))","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":100393,"byte_end":100439,"line_start":166,"line_end":166,"column_start":1,"column_end":47}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":100440,"byte_end":100445,"line_start":167,"line_end":167,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":100446,"byte_end":100453,"line_start":168,"line_end":168,"column_start":1,"column_end":8}},{"value":"/ # fn main() {}","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":100454,"byte_end":100472,"line_start":169,"line_end":169,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":100473,"byte_end":100480,"line_start":170,"line_end":170,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":189},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":125857,"byte_end":125863,"line_start":13,"line_end":13,"column_start":22,"column_end":28},"name":"Sealed","qualname":"::read::util::sealed::Sealed","value":"Sealed","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":190},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":125879,"byte_end":125886,"line_start":14,"line_end":14,"column_start":14,"column_end":21},"name":"Storage","qualname":"::read::util::sealed::Sealed::Storage","value":"type Storage;","parent":{"krate":0,"index":189},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":125900,"byte_end":125911,"line_start":16,"line_end":16,"column_start":12,"column_end":23},"name":"new_storage","qualname":"::read::util::sealed::Sealed::new_storage","value":"pub fn new_storage() -> Self::Storage","parent":{"krate":0,"index":189},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":125944,"byte_end":125948,"line_start":18,"line_end":18,"column_start":12,"column_end":16},"name":"grow","qualname":"::read::util::sealed::Sealed::grow","value":"pub fn grow(&mut Self::Storage, usize) -> Result<(), CapacityFull>","parent":{"krate":0,"index":189},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6039},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":126125,"byte_end":126137,"line_start":24,"line_end":24,"column_start":16,"column_end":28},"name":"CapacityFull","qualname":"::read::util::sealed::CapacityFull","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":194},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":126354,"byte_end":126363,"line_start":32,"line_end":32,"column_start":11,"column_end":20},"name":"ArrayLike","qualname":"::read::util::ArrayLike","value":"ArrayLike: Sealed","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197}],"decl_id":null,"docs":" Marker trait for types that can be used as backing storage when a growable array type is needed.","sig":null,"attributes":[{"value":"/ Marker trait for types that can be used as backing storage when a growable array type is needed.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":126158,"byte_end":126258,"line_start":29,"line_end":29,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":126259,"byte_end":126262,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed and cannot be implemented for types outside this crate.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":126263,"byte_end":126343,"line_start":31,"line_end":31,"column_start":1,"column_end":81}}]},{"kind":"Type","id":{"krate":0,"index":195},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":126426,"byte_end":126430,"line_start":34,"line_end":34,"column_start":10,"column_end":14},"name":"Item","qualname":"::read::util::ArrayLike::Item","value":"type Item;","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":" Type of the elements being stored.\n","sig":null,"attributes":[{"value":"/ Type of the elements being stored.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":126378,"byte_end":126416,"line_start":33,"line_end":33,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":126459,"byte_end":126467,"line_start":37,"line_end":37,"column_start":8,"column_end":16},"name":"as_slice","qualname":"::read::util::ArrayLike::as_slice","value":"pub fn as_slice(&Self::Storage) -> &[MaybeUninit<Self::Item>]","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":126551,"byte_end":126563,"line_start":40,"line_end":40,"column_start":8,"column_end":20},"name":"as_mut_slice","qualname":"::read::util::ArrayLike::as_mut_slice","value":"pub fn as_mut_slice(&mut Self::Storage) -> &mut [MaybeUninit<Self::Item>]","parent":{"krate":0,"index":194},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6178},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":132634,"byte_end":132643,"line_start":6,"line_end":6,"column_start":12,"column_end":21},"name":"DebugAddr","qualname":"::read::addr::DebugAddr","value":"DebugAddr {  }","parent":null,"children":[{"krate":0,"index":6180}],"decl_id":null,"docs":" The raw contents of the `.debug_addr` section.\n","sig":null,"attributes":[{"value":"/ The raw contents of the `.debug_addr` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":132533,"byte_end":132583,"line_start":4,"line_end":4,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":133586,"byte_end":133597,"line_start":28,"line_end":28,"column_start":12,"column_end":23},"name":"get_address","qualname":"<DebugAddr<R>>::get_address","value":"pub fn get_address(&Self, u8, DebugAddrBase<R::Offset>,\n                   DebugAddrIndex<R::Offset>) -> Result<u64>","parent":null,"children":[],"decl_id":null,"docs":" Returns the address at the given `base` and `index`.","sig":null,"attributes":[{"value":"/ Returns the address at the given `base` and `index`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":132842,"byte_end":132898,"line_start":14,"line_end":14,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":132903,"byte_end":132906,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ A set of addresses in the `.debug_addr` section consists of a header","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":132911,"byte_end":132983,"line_start":16,"line_end":16,"column_start":5,"column_end":77}},{"value":"/ followed by a series of addresses.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":132988,"byte_end":133026,"line_start":17,"line_end":17,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":133031,"byte_end":133034,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ The `base` must be the `DW_AT_addr_base` value from the compilation unit DIE.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":133039,"byte_end":133120,"line_start":19,"line_end":19,"column_start":5,"column_end":86}},{"value":"/ This is an offset that points to the first address following the header.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":133125,"byte_end":133201,"line_start":20,"line_end":20,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":133206,"byte_end":133209,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ The `index` is the value of a `DW_FORM_addrx` attribute.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":133214,"byte_end":133274,"line_start":22,"line_end":22,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":133279,"byte_end":133282,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ The `address_size` must be the size of the address for the compilation unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":133287,"byte_end":133367,"line_start":24,"line_end":24,"column_start":5,"column_end":85}},{"value":"/ This value must also match the header. However, note that we do not parse the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":133372,"byte_end":133453,"line_start":25,"line_end":25,"column_start":5,"column_end":86}},{"value":"/ header to validate this, since locating the header is unreliable, and the GNU","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":133458,"byte_end":133539,"line_start":26,"line_end":26,"column_start":5,"column_end":86}},{"value":"/ extensions do not emit it.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":133544,"byte_end":133574,"line_start":27,"line_end":27,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":134640,"byte_end":134646,"line_start":59,"line_end":59,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugAddr<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugAddr<R> where F: FnMut(&'a T) ->\nR","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugAddr` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugAddr` section that references the data in `self`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":134010,"byte_end":134078,"line_start":44,"line_end":44,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":134083,"byte_end":134086,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":134091,"byte_end":134156,"line_start":46,"line_end":46,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":134161,"byte_end":134164,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":134169,"byte_end":134189,"line_start":48,"line_end":48,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":134194,"byte_end":134197,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":134202,"byte_end":134220,"line_start":50,"line_end":50,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":134225,"byte_end":134270,"line_start":51,"line_end":51,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":134275,"byte_end":134359,"line_start":52,"line_end":52,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugAddr<Vec<u8>> = load_section();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":134364,"byte_end":134430,"line_start":53,"line_end":53,"column_start":5,"column_end":71}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":134435,"byte_end":134482,"line_start":54,"line_end":54,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":134487,"byte_end":134537,"line_start":55,"line_end":55,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":134542,"byte_end":134604,"line_start":56,"line_end":56,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":134609,"byte_end":134616,"line_start":57,"line_end":57,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":134621,"byte_end":134628,"line_start":58,"line_end":58,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":6192},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":138035,"byte_end":138045,"line_start":33,"line_end":33,"column_start":12,"column_end":22},"name":"DebugFrame","qualname":"::read::cfi::DebugFrame","value":"DebugFrame {  }","parent":null,"children":[{"krate":0,"index":6194},{"krate":0,"index":6195},{"krate":0,"index":6196}],"decl_id":null,"docs":" `DebugFrame` contains the `.debug_frame` section's frame unwinding\n information required to unwind to and recover registers from older frames on\n the stack. For example, this is useful for a debugger that wants to print\n locals in a backtrace.","sig":null,"attributes":[{"value":"/ `DebugFrame` contains the `.debug_frame` section's frame unwinding","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":137230,"byte_end":137300,"line_start":18,"line_end":18,"column_start":1,"column_end":71}},{"value":"/ information required to unwind to and recover registers from older frames on","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":137301,"byte_end":137381,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/ the stack. For example, this is useful for a debugger that wants to print","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":137382,"byte_end":137459,"line_start":20,"line_end":20,"column_start":1,"column_end":78}},{"value":"/ locals in a backtrace.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":137460,"byte_end":137486,"line_start":21,"line_end":21,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":137487,"byte_end":137490,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Most interesting methods are defined in the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":137491,"byte_end":137538,"line_start":23,"line_end":23,"column_start":1,"column_end":48}},{"value":"/ [`UnwindSection`](trait.UnwindSection.html) trait.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":137539,"byte_end":137593,"line_start":24,"line_end":24,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":137594,"byte_end":137597,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ### Differences between `.debug_frame` and `.eh_frame`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":137598,"byte_end":137656,"line_start":26,"line_end":26,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":137657,"byte_end":137660,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ While the `.debug_frame` section's information has a lot of overlap with the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":137661,"byte_end":137741,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ `.eh_frame` section's information, the `.eh_frame` information tends to only","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":137742,"byte_end":137822,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ encode the subset of information needed for exception handling. Often, only","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":137823,"byte_end":137902,"line_start":30,"line_end":30,"column_start":1,"column_end":80}},{"value":"/ one of `.eh_frame` or `.debug_frame` will be present in an object file.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":137903,"byte_end":137978,"line_start":31,"line_end":31,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":138332,"byte_end":138348,"line_start":44,"line_end":44,"column_start":12,"column_end":28},"name":"set_address_size","qualname":"<DebugFrame<R>>::set_address_size","value":"pub fn set_address_size(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Set the size of a target address in bytes.","sig":null,"attributes":[{"value":"/ Set the size of a target address in bytes.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":138158,"byte_end":138204,"line_start":40,"line_end":40,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":138209,"byte_end":138212,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ This defaults to the native word size.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":138217,"byte_end":138259,"line_start":42,"line_end":42,"column_start":5,"column_end":47}},{"value":"/ This is only used if the CIE version is less than 4.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":138264,"byte_end":138320,"line_start":43,"line_end":43,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":138589,"byte_end":138605,"line_start":52,"line_end":52,"column_start":12,"column_end":28},"name":"set_segment_size","qualname":"<DebugFrame<R>>::set_segment_size","value":"pub fn set_segment_size(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Set the size of a segment selector in bytes.","sig":null,"attributes":[{"value":"/ Set the size of a segment selector in bytes.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":138432,"byte_end":138480,"line_start":48,"line_end":48,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":138485,"byte_end":138488,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ This defaults to 0.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":138493,"byte_end":138516,"line_start":50,"line_end":50,"column_start":5,"column_end":28}},{"value":"/ This is only used if the CIE version is less than 4.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":138521,"byte_end":138577,"line_start":51,"line_end":51,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":139401,"byte_end":139404,"line_start":76,"line_end":76,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugFrame<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugFrame` instance from the data in the\n `.debug_frame` section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugFrame` instance from the data in the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":138783,"byte_end":138845,"line_start":61,"line_end":61,"column_start":5,"column_end":67}},{"value":"/ `.debug_frame` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":138850,"byte_end":138877,"line_start":62,"line_end":62,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":138882,"byte_end":138885,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the section and present it as","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":138890,"byte_end":138965,"line_start":64,"line_end":64,"column_start":5,"column_end":80}},{"value":"/ a `&[u8]` slice. That means using some ELF loader on Linux, a Mach-O","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":138970,"byte_end":139042,"line_start":65,"line_end":65,"column_start":5,"column_end":77}},{"value":"/ loader on OSX, etc.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":139047,"byte_end":139070,"line_start":66,"line_end":66,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":139075,"byte_end":139078,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":139083,"byte_end":139090,"line_start":68,"line_end":68,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugFrame, NativeEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":139095,"byte_end":139137,"line_start":69,"line_end":69,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":139142,"byte_end":139145,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ // Use with `.debug_frame`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":139150,"byte_end":139180,"line_start":71,"line_end":71,"column_start":5,"column_end":35}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":139185,"byte_end":139226,"line_start":72,"line_end":72,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_frame_section_somehow = || &buf;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":139231,"byte_end":139284,"line_start":73,"line_end":73,"column_start":5,"column_end":58}},{"value":"/ let debug_frame = DebugFrame::new(read_debug_frame_section_somehow(), NativeEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":139289,"byte_end":139377,"line_start":74,"line_end":74,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":139382,"byte_end":139389,"line_start":75,"line_end":75,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":6216},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":140271,"byte_end":140281,"line_start":107,"line_end":107,"column_start":12,"column_end":22},"name":"EhFrameHdr","qualname":"::read::cfi::EhFrameHdr","value":"","parent":null,"children":[],"decl_id":null,"docs":" `EhFrameHdr` contains the information about the `.eh_frame_hdr` section.","sig":null,"attributes":[{"value":"/ `EhFrameHdr` contains the information about the `.eh_frame_hdr` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":139969,"byte_end":140045,"line_start":102,"line_end":102,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":140046,"byte_end":140049,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ A pointer to the start of the `.eh_frame` data, and optionally, a binary","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":140050,"byte_end":140126,"line_start":104,"line_end":104,"column_start":1,"column_end":77}},{"value":"/ search table of pointers to the `.eh_frame` records that are found in this section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":140127,"byte_end":140214,"line_start":105,"line_end":105,"column_start":1,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":6239},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":140422,"byte_end":140438,"line_start":111,"line_end":111,"column_start":12,"column_end":28},"name":"ParsedEhFrameHdr","qualname":"::read::cfi::ParsedEhFrameHdr","value":"ParsedEhFrameHdr {  }","parent":null,"children":[{"krate":0,"index":6241},{"krate":0,"index":6242},{"krate":0,"index":6243},{"krate":0,"index":6244},{"krate":0,"index":6245},{"krate":0,"index":6246}],"decl_id":null,"docs":" `ParsedEhFrameHdr` contains the parsed information from the `.eh_frame_hdr` section.\n","sig":null,"attributes":[{"value":"/ `ParsedEhFrameHdr` contains the parsed information from the `.eh_frame_hdr` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":140298,"byte_end":140386,"line_start":109,"line_end":109,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":140774,"byte_end":140777,"line_start":126,"line_end":126,"column_start":12,"column_end":15},"name":"new","qualname":"<EhFrameHdr<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `EhFrameHdr` instance from the data in the `.eh_frame_hdr` section.\n","sig":null,"attributes":[{"value":"/ Constructs a new `EhFrameHdr` instance from the data in the `.eh_frame_hdr` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":140674,"byte_end":140762,"line_start":125,"line_end":125,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":140991,"byte_end":140996,"line_start":133,"line_end":133,"column_start":12,"column_end":17},"name":"parse","qualname":"<EhFrameHdr<R>>::parse","value":"pub fn parse(&Self, &BaseAddresses, u8) -> Result<ParsedEhFrameHdr<R>>","parent":null,"children":[],"decl_id":null,"docs":" Parses this `EhFrameHdr` to a `ParsedEhFrameHdr`.\n","sig":null,"attributes":[{"value":"/ Parses this `EhFrameHdr` to a `ParsedEhFrameHdr`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":140926,"byte_end":140979,"line_start":132,"line_end":132,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":143018,"byte_end":143030,"line_start":198,"line_end":198,"column_start":12,"column_end":24},"name":"eh_frame_ptr","qualname":"<ParsedEhFrameHdr<R>>::eh_frame_ptr","value":"pub fn eh_frame_ptr(&Self) -> Pointer","parent":null,"children":[],"decl_id":null,"docs":" Returns the address of the binary's `.eh_frame` section.\n","sig":null,"attributes":[{"value":"/ Returns the address of the binary's `.eh_frame` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":142946,"byte_end":143006,"line_start":197,"line_end":197,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":143159,"byte_end":143164,"line_start":203,"line_end":203,"column_start":12,"column_end":17},"name":"table","qualname":"<ParsedEhFrameHdr<R>>::table","value":"pub fn table(&Self) -> Option<EhHdrTable<, R>>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the CFI binary search table, if there is one.\n","sig":null,"attributes":[{"value":"/ Retrieves the CFI binary search table, if there is one.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":143088,"byte_end":143147,"line_start":202,"line_end":202,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":6253},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":144159,"byte_end":144169,"line_start":223,"line_end":223,"column_start":12,"column_end":22},"name":"EhHdrTable","qualname":"::read::cfi::EhHdrTable","value":"EhHdrTable {  }","parent":null,"children":[{"krate":0,"index":6256}],"decl_id":null,"docs":" The CFI binary search table that is an optional part of the `.eh_frame_hdr` section.\n","sig":null,"attributes":[{"value":"/ The CFI binary search table that is an optional part of the `.eh_frame_hdr` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":144035,"byte_end":144123,"line_start":221,"line_end":221,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":144594,"byte_end":144600,"line_start":234,"line_end":234,"column_start":12,"column_end":18},"name":"lookup","qualname":"<EhHdrTable>::lookup","value":"pub fn lookup(&Self, u64, &BaseAddresses) -> Result<Pointer>","parent":null,"children":[],"decl_id":null,"docs":" *Probably* returns a pointer to the FDE for the given address.","sig":null,"attributes":[{"value":"/ *Probably* returns a pointer to the FDE for the given address.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":144273,"byte_end":144339,"line_start":228,"line_end":228,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":144344,"byte_end":144347,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ This performs a binary search, so if there is no FDE for the given address,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":144352,"byte_end":144431,"line_start":230,"line_end":230,"column_start":5,"column_end":84}},{"value":"/ this function **will** return a pointer to any other FDE that's close by.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":144436,"byte_end":144513,"line_start":231,"line_end":231,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":144518,"byte_end":144521,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ To be sure, you **must** call `contains` on the FDE.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":144526,"byte_end":144582,"line_start":233,"line_end":233,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":146625,"byte_end":146642,"line_start":292,"line_end":292,"column_start":12,"column_end":29},"name":"pointer_to_offset","qualname":"<EhHdrTable>::pointer_to_offset","value":"pub fn pointer_to_offset(&Self, Pointer) -> Result<EhFrameOffset<R::Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Convert a `Pointer` to a section offset.","sig":null,"attributes":[{"value":"/ Convert a `Pointer` to a section offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":146512,"byte_end":146556,"line_start":289,"line_end":289,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":146561,"byte_end":146564,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ This does not support indirect pointers.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":146569,"byte_end":146613,"line_start":291,"line_end":291,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":148027,"byte_end":148042,"line_start":327,"line_end":327,"column_start":12,"column_end":27},"name":"fde_for_address","qualname":"<EhHdrTable>::fde_for_address","value":"pub fn fde_for_address<F>(&Self, &EhFrame<R>, &BaseAddresses, u64, F)\n-> Result<FrameDescriptionEntry<R>> where\nF: FnMut(&EhFrame<R>, &BaseAddresses, EhFrameOffset<R::Offset>) ->\nResult<CommonInformationEntry<R>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed FDE for the given address, or `NoUnwindInfoForAddress`\n if there are none.","sig":null,"attributes":[{"value":"/ Returns a parsed FDE for the given address, or `NoUnwindInfoForAddress`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":147150,"byte_end":147225,"line_start":307,"line_end":307,"column_start":5,"column_end":80}},{"value":"/ if there are none.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":147230,"byte_end":147252,"line_start":308,"line_end":308,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":147257,"byte_end":147260,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ You must provide a function to get its associated CIE. See","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":147265,"byte_end":147327,"line_start":310,"line_end":310,"column_start":5,"column_end":67}},{"value":"/ `PartialFrameDescriptionEntry::parse` for more information.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":147332,"byte_end":147395,"line_start":311,"line_end":311,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":147400,"byte_end":147403,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":147408,"byte_end":147421,"line_start":313,"line_end":313,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":147426,"byte_end":147429,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":147434,"byte_end":147441,"line_start":315,"line_end":315,"column_start":5,"column_end":12}},{"value":"/ # use gimli::{BaseAddresses, EhFrame, ParsedEhFrameHdr, EndianSlice, NativeEndian, Error, UnwindSection};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":147446,"byte_end":147555,"line_start":316,"line_end":316,"column_start":5,"column_end":114}},{"value":"/ # fn foo() -> Result<(), Error> {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":147560,"byte_end":147597,"line_start":317,"line_end":317,"column_start":5,"column_end":42}},{"value":"/ # let eh_frame: EhFrame<EndianSlice<NativeEndian>> = unreachable!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":147602,"byte_end":147674,"line_start":318,"line_end":318,"column_start":5,"column_end":77}},{"value":"/ # let eh_frame_hdr: ParsedEhFrameHdr<EndianSlice<NativeEndian>> = unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":147679,"byte_end":147766,"line_start":319,"line_end":319,"column_start":5,"column_end":92}},{"value":"/ # let addr = 0;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":147771,"byte_end":147790,"line_start":320,"line_end":320,"column_start":5,"column_end":24}},{"value":"/ # let bases = unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":147795,"byte_end":147830,"line_start":321,"line_end":321,"column_start":5,"column_end":40}},{"value":"/ let table = eh_frame_hdr.table().unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":147835,"byte_end":147881,"line_start":322,"line_end":322,"column_start":5,"column_end":51}},{"value":"/ let fde = table.fde_for_address(&eh_frame, &bases, addr, EhFrame::cie_from_offset)?;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":147886,"byte_end":147974,"line_start":323,"line_end":323,"column_start":5,"column_end":93}},{"value":"/ # Ok(())","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":147979,"byte_end":147991,"line_start":324,"line_end":324,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":147996,"byte_end":148003,"line_start":325,"line_end":325,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":148008,"byte_end":148015,"line_start":326,"line_end":326,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":148816,"byte_end":148832,"line_start":354,"line_end":354,"column_start":12,"column_end":28},"name":"lookup_and_parse","qualname":"<EhHdrTable>::lookup_and_parse","value":"pub fn lookup_and_parse<F>(&Self, u64, &BaseAddresses, EhFrame<R>, F)\n-> Result<FrameDescriptionEntry<R>> where\nF: FnMut(&EhFrame<R>, &BaseAddresses, EhFrameOffset<R::Offset>) ->\nResult<CommonInformationEntry<R>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":148695,"byte_end":148704,"line_start":351,"line_end":351,"column_start":5,"column_end":14}},{"value":"deprecated(note = \"Method renamed to fde_for_address; use that instead.\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":148728,"byte_end":148804,"line_start":353,"line_end":353,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":149513,"byte_end":149536,"line_start":376,"line_end":376,"column_start":12,"column_end":35},"name":"unwind_info_for_address","qualname":"<EhHdrTable>::unwind_info_for_address","value":"pub fn unwind_info_for_address<'ctx, F,\n                               A: UnwindContextStorage<R>>(&Self, &EhFrame<R>,\n                                                           &BaseAddresses,\n                                                           &'ctx mut UnwindContext<R,\n                                                                                   A>,\n                                                           u64, F)\n-> Result<&'ctx UnwindTableRow<R, A>> where\nF: FnMut(&EhFrame<R>, &BaseAddresses, EhFrameOffset<R::Offset>) ->\nResult<CommonInformationEntry<R>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the frame unwind information for the given address,\n or `NoUnwindInfoForAddress` if there are none.","sig":null,"attributes":[{"value":"/ Returns the frame unwind information for the given address,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":149240,"byte_end":149303,"line_start":371,"line_end":371,"column_start":5,"column_end":68}},{"value":"/ or `NoUnwindInfoForAddress` if there are none.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":149308,"byte_end":149358,"line_start":372,"line_end":372,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":149363,"byte_end":149366,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ You must provide a function to get the associated CIE. See","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":149371,"byte_end":149433,"line_start":374,"line_end":374,"column_start":5,"column_end":67}},{"value":"/ `PartialFrameDescriptionEntry::parse` for more information.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":149438,"byte_end":149501,"line_start":375,"line_end":375,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":6265},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":150576,"byte_end":150583,"line_start":407,"line_end":407,"column_start":12,"column_end":19},"name":"EhFrame","qualname":"::read::cfi::EhFrame","value":"EhFrame {  }","parent":null,"children":[{"krate":0,"index":6267},{"krate":0,"index":6268}],"decl_id":null,"docs":" `EhFrame` contains the frame unwinding information needed during exception\n handling found in the `.eh_frame` section.","sig":null,"attributes":[{"value":"/ `EhFrame` contains the frame unwinding information needed during exception","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":150098,"byte_end":150176,"line_start":396,"line_end":396,"column_start":1,"column_end":79}},{"value":"/ handling found in the `.eh_frame` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":150177,"byte_end":150223,"line_start":397,"line_end":397,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":150224,"byte_end":150227,"line_start":398,"line_end":398,"column_start":1,"column_end":4}},{"value":"/ Most interesting methods are defined in the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":150228,"byte_end":150275,"line_start":399,"line_end":399,"column_start":1,"column_end":48}},{"value":"/ [`UnwindSection`](trait.UnwindSection.html) trait.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":150276,"byte_end":150330,"line_start":400,"line_end":400,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":150331,"byte_end":150334,"line_start":401,"line_end":401,"column_start":1,"column_end":4}},{"value":"/ See","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":150335,"byte_end":150342,"line_start":402,"line_end":402,"column_start":1,"column_end":8}},{"value":"/ [`DebugFrame`](./struct.DebugFrame.html#differences-between-debug_frame-and-eh_frame)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":150343,"byte_end":150432,"line_start":403,"line_end":403,"column_start":1,"column_end":90}},{"value":"/ for some discussion on the differences between `.debug_frame` and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":150433,"byte_end":150502,"line_start":404,"line_end":404,"column_start":1,"column_end":70}},{"value":"/ `.eh_frame`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":150503,"byte_end":150519,"line_start":405,"line_end":405,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":150784,"byte_end":150800,"line_start":416,"line_end":416,"column_start":12,"column_end":28},"name":"set_address_size","qualname":"<EhFrame<R>>::set_address_size","value":"pub fn set_address_size(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Set the size of a target address in bytes.","sig":null,"attributes":[{"value":"/ Set the size of a target address in bytes.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":150671,"byte_end":150717,"line_start":413,"line_end":413,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":150722,"byte_end":150725,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ This defaults to the native word size.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":150730,"byte_end":150772,"line_start":415,"line_end":415,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":151597,"byte_end":151600,"line_start":440,"line_end":440,"column_start":12,"column_end":15},"name":"new","qualname":"<EhFrame<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `EhFrame` instance from the data in the\n `.debug_frame` section.","sig":null,"attributes":[{"value":"/ Construct a new `EhFrame` instance from the data in the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":150975,"byte_end":151034,"line_start":425,"line_end":425,"column_start":5,"column_end":64}},{"value":"/ `.debug_frame` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":151039,"byte_end":151066,"line_start":426,"line_end":426,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":151071,"byte_end":151074,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the section and present it as","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":151079,"byte_end":151154,"line_start":428,"line_end":428,"column_start":5,"column_end":80}},{"value":"/ a `&[u8]` slice. That means using some ELF loader on Linux, a Mach-O","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":151159,"byte_end":151231,"line_start":429,"line_end":429,"column_start":5,"column_end":77}},{"value":"/ loader on OSX, etc.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":151236,"byte_end":151259,"line_start":430,"line_end":430,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":151264,"byte_end":151267,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":151272,"byte_end":151279,"line_start":432,"line_end":432,"column_start":5,"column_end":12}},{"value":"/ use gimli::{EhFrame, EndianSlice, NativeEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":151284,"byte_end":151336,"line_start":433,"line_end":433,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":151341,"byte_end":151344,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ // Use with `.debug_frame`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":151349,"byte_end":151379,"line_start":435,"line_end":435,"column_start":5,"column_end":35}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":151384,"byte_end":151425,"line_start":436,"line_end":436,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_frame_section_somehow = || &buf;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":151430,"byte_end":151483,"line_start":437,"line_end":437,"column_start":5,"column_end":58}},{"value":"/ let debug_frame = EhFrame::new(read_debug_frame_section_somehow(), NativeEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":151488,"byte_end":151573,"line_start":438,"line_end":438,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":151578,"byte_end":151585,"line_start":439,"line_end":439,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6289},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":152374,"byte_end":152377,"line_start":471,"line_end":471,"column_start":5,"column_end":8},"name":"U32","qualname":"::read::cfi::CieOffsetEncoding::U32","value":"CieOffsetEncoding::U32","parent":{"krate":0,"index":6288},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6291},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":152383,"byte_end":152386,"line_start":472,"line_end":472,"column_start":5,"column_end":8},"name":"U64","qualname":"::read::cfi::CieOffsetEncoding::U64","value":"CieOffsetEncoding::U64","parent":{"krate":0,"index":6288},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6288},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":152350,"byte_end":152367,"line_start":470,"line_end":470,"column_start":10,"column_end":27},"name":"CieOffsetEncoding","qualname":"::read::cfi::CieOffsetEncoding","value":"pub enum CieOffsetEncoding { U32, U64, }","parent":null,"children":[{"krate":0,"index":6289},{"krate":0,"index":6291}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":152273,"byte_end":152295,"line_start":468,"line_end":468,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":438},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":152504,"byte_end":152516,"line_start":478,"line_end":478,"column_start":11,"column_end":23},"name":"UnwindOffset","qualname":"::read::cfi::UnwindOffset","value":"UnwindOffset<T = usize>: Copy + Debug + Eq + From<T>","parent":null,"children":[{"krate":0,"index":440}],"decl_id":null,"docs":" An offset into an `UnwindSection`.\n","sig":null,"attributes":[{"value":"/ An offset into an `UnwindSection`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":152391,"byte_end":152429,"line_start":475,"line_end":475,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":152642,"byte_end":152646,"line_start":483,"line_end":483,"column_start":8,"column_end":12},"name":"into","qualname":"::read::cfi::UnwindOffset::into","value":"pub fn into(Self) -> T","parent":{"krate":0,"index":438},"children":[],"decl_id":null,"docs":" Convert an `UnwindOffset<T>` into a `T`.\n","sig":null,"attributes":[{"value":"/ Convert an `UnwindOffset<T>` into a `T`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":152590,"byte_end":152634,"line_start":482,"line_end":482,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":447},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":153144,"byte_end":153165,"line_start":510,"line_end":510,"column_start":11,"column_end":32},"name":"_UnwindSectionPrivate","qualname":"::read::cfi::_UnwindSectionPrivate","value":"_UnwindSectionPrivate<R: Reader>","parent":null,"children":[{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456}],"decl_id":null,"docs":" This trait completely encapsulates everything that is different between\n `.eh_frame` and `.debug_frame`, as well as all the bits that can change\n between DWARF versions.\n","sig":null,"attributes":[{"value":"/ This trait completely encapsulates everything that is different between","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":152939,"byte_end":153014,"line_start":506,"line_end":506,"column_start":1,"column_end":76}},{"value":"/ `.eh_frame` and `.debug_frame`, as well as all the bits that can change","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":153015,"byte_end":153090,"line_start":507,"line_end":507,"column_start":1,"column_end":76}},{"value":"/ between DWARF versions.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":153091,"byte_end":153118,"line_start":508,"line_end":508,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":153227,"byte_end":153234,"line_start":512,"line_end":512,"column_start":8,"column_end":15},"name":"section","qualname":"::read::cfi::_UnwindSectionPrivate::section","value":"pub fn section(&Self) -> &R","parent":{"krate":0,"index":447},"children":[],"decl_id":null,"docs":" Get the underlying section data.\n","sig":null,"attributes":[{"value":"/ Get the underlying section data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":153183,"byte_end":153219,"line_start":511,"line_end":511,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":153361,"byte_end":153391,"line_start":516,"line_end":516,"column_start":8,"column_end":38},"name":"length_value_is_end_of_entries","qualname":"::read::cfi::_UnwindSectionPrivate::length_value_is_end_of_entries","value":"pub fn length_value_is_end_of_entries(R::Offset) -> bool","parent":{"krate":0,"index":447},"children":[],"decl_id":null,"docs":" Returns true if the given length value should be considered an\n end-of-entries sentinel.\n","sig":null,"attributes":[{"value":"/ Returns true if the given length value should be considered an","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":153254,"byte_end":153320,"line_start":514,"line_end":514,"column_start":5,"column_end":71}},{"value":"/ end-of-entries sentinel.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":153325,"byte_end":153353,"line_start":515,"line_end":515,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":153506,"byte_end":153512,"line_start":519,"line_end":519,"column_start":8,"column_end":14},"name":"is_cie","qualname":"::read::cfi::_UnwindSectionPrivate::is_cie","value":"pub fn is_cie(Format, u64) -> bool","parent":{"krate":0,"index":447},"children":[],"decl_id":null,"docs":" Return true if the given offset if the CIE sentinel, false otherwise.\n","sig":null,"attributes":[{"value":"/ Return true if the given offset if the CIE sentinel, false otherwise.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":153425,"byte_end":153498,"line_start":518,"line_end":518,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":153662,"byte_end":153681,"line_start":523,"line_end":523,"column_start":8,"column_end":27},"name":"cie_offset_encoding","qualname":"::read::cfi::_UnwindSectionPrivate::cie_offset_encoding","value":"pub fn cie_offset_encoding(Format) -> CieOffsetEncoding","parent":{"krate":0,"index":447},"children":[],"decl_id":null,"docs":" Return the CIE offset/ID encoding used by this unwind section with the\n given DWARF format.\n","sig":null,"attributes":[{"value":"/ Return the CIE offset/ID encoding used by this unwind section with the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":153552,"byte_end":153626,"line_start":521,"line_end":521,"column_start":5,"column_end":79}},{"value":"/ given DWARF format.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":153631,"byte_end":153654,"line_start":522,"line_end":522,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":154084,"byte_end":154102,"line_start":530,"line_end":530,"column_start":8,"column_end":26},"name":"resolve_cie_offset","qualname":"::read::cfi::_UnwindSectionPrivate::resolve_cie_offset","value":"pub fn resolve_cie_offset(&Self, R::Offset, R::Offset) -> Option<R::Offset>","parent":{"krate":0,"index":447},"children":[],"decl_id":null,"docs":" For `.eh_frame`, CIE offsets are relative to the current position. For\n `.debug_frame`, they are relative to the start of the section. We always\n internally store them relative to the section, so we handle translating\n `.eh_frame`'s relative offsets in this method. If the offset calculation\n underflows, return `None`.\n","sig":null,"attributes":[{"value":"/ For `.eh_frame`, CIE offsets are relative to the current position. For","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":153725,"byte_end":153799,"line_start":525,"line_end":525,"column_start":5,"column_end":79}},{"value":"/ `.debug_frame`, they are relative to the start of the section. We always","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":153804,"byte_end":153880,"line_start":526,"line_end":526,"column_start":5,"column_end":81}},{"value":"/ internally store them relative to the section, so we handle translating","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":153885,"byte_end":153960,"line_start":527,"line_end":527,"column_start":5,"column_end":80}},{"value":"/ `.eh_frame`'s relative offsets in this method. If the offset calculation","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":153965,"byte_end":154041,"line_start":528,"line_end":528,"column_start":5,"column_end":81}},{"value":"/ underflows, return `None`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":154046,"byte_end":154076,"line_start":529,"line_end":529,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":154279,"byte_end":154308,"line_start":534,"line_end":534,"column_start":8,"column_end":37},"name":"has_address_and_segment_sizes","qualname":"::read::cfi::_UnwindSectionPrivate::has_address_and_segment_sizes","value":"pub fn has_address_and_segment_sizes(u8) -> bool","parent":{"krate":0,"index":447},"children":[],"decl_id":null,"docs":" Does this version of this unwind section encode address and segment\n sizes in its CIEs?\n","sig":null,"attributes":[{"value":"/ Does this version of this unwind section encode address and segment","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":154173,"byte_end":154244,"line_start":532,"line_end":532,"column_start":5,"column_end":76}},{"value":"/ sizes in its CIEs?","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":154249,"byte_end":154271,"line_start":533,"line_end":533,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":154421,"byte_end":154433,"line_start":537,"line_end":537,"column_start":8,"column_end":20},"name":"address_size","qualname":"::read::cfi::_UnwindSectionPrivate::address_size","value":"pub fn address_size(&Self) -> u8","parent":{"krate":0,"index":447},"children":[],"decl_id":null,"docs":" The address size to use if `has_address_and_segment_sizes` returns false.\n","sig":null,"attributes":[{"value":"/ The address size to use if `has_address_and_segment_sizes` returns false.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":154336,"byte_end":154413,"line_start":536,"line_end":536,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":154538,"byte_end":154550,"line_start":540,"line_end":540,"column_start":8,"column_end":20},"name":"segment_size","qualname":"::read::cfi::_UnwindSectionPrivate::segment_size","value":"pub fn segment_size(&Self) -> u8","parent":{"krate":0,"index":447},"children":[],"decl_id":null,"docs":" The segment size to use if `has_address_and_segment_sizes` returns false.\n","sig":null,"attributes":[{"value":"/ The segment size to use if `has_address_and_segment_sizes` returns false.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":154453,"byte_end":154530,"line_start":539,"line_end":539,"column_start":5,"column_end":82}}]},{"kind":"Trait","id":{"krate":0,"index":457},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":154764,"byte_end":154777,"line_start":546,"line_end":546,"column_start":11,"column_end":24},"name":"UnwindSection","qualname":"::read::cfi::UnwindSection","value":"UnwindSection<R: Reader>: Clone + Debug + _UnwindSectionPrivate<R>","parent":null,"children":[{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":465},{"krate":0,"index":467},{"krate":0,"index":469}],"decl_id":null,"docs":" A section holding unwind information: either `.debug_frame` or\n `.eh_frame`. See [`DebugFrame`](./struct.DebugFrame.html) and\n [`EhFrame`](./struct.EhFrame.html) respectively.\n","sig":null,"attributes":[{"value":"/ A section holding unwind information: either `.debug_frame` or","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":154568,"byte_end":154634,"line_start":543,"line_end":543,"column_start":1,"column_end":67}},{"value":"/ `.eh_frame`. See [`DebugFrame`](./struct.DebugFrame.html) and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":154635,"byte_end":154700,"line_start":544,"line_end":544,"column_start":1,"column_end":66}},{"value":"/ [`EhFrame`](./struct.EhFrame.html) respectively.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":154701,"byte_end":154753,"line_start":545,"line_end":545,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":459},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":154954,"byte_end":154960,"line_start":549,"line_end":549,"column_start":10,"column_end":16},"name":"Offset","qualname":"::read::cfi::UnwindSection::Offset","value":"type Offset: UnwindOffset<R::Offset>;","parent":{"krate":0,"index":457},"children":[],"decl_id":null,"docs":" The offset type associated with this CFI section. Either\n `DebugFrameOffset` or `EhFrameOffset`.\n","sig":null,"attributes":[{"value":"/ The offset type associated with this CFI section. Either","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":154837,"byte_end":154897,"line_start":547,"line_end":547,"column_start":5,"column_end":65}},{"value":"/ `DebugFrameOffset` or `EhFrameOffset`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":154902,"byte_end":154944,"line_start":548,"line_end":548,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":155220,"byte_end":155227,"line_start":556,"line_end":556,"column_start":8,"column_end":15},"name":"entries","qualname":"::read::cfi::UnwindSection::entries","value":"pub fn entries<'bases>(&Self, &'bases BaseAddresses) -> CfiEntriesIter","parent":{"krate":0,"index":457},"children":[],"decl_id":null,"docs":" Iterate over the `CommonInformationEntry`s and `FrameDescriptionEntry`s\n in this `.debug_frame` section.","sig":null,"attributes":[{"value":"/ Iterate over the `CommonInformationEntry`s and `FrameDescriptionEntry`s","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":154992,"byte_end":155067,"line_start":551,"line_end":551,"column_start":5,"column_end":80}},{"value":"/ in this `.debug_frame` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":155072,"byte_end":155107,"line_start":552,"line_end":552,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":155112,"byte_end":155115,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":155120,"byte_end":155141,"line_start":554,"line_end":554,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":155146,"byte_end":155212,"line_start":555,"line_end":555,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":155520,"byte_end":155535,"line_start":565,"line_end":565,"column_start":8,"column_end":23},"name":"cie_from_offset","qualname":"::read::cfi::UnwindSection::cie_from_offset","value":"pub fn cie_from_offset(&Self, &BaseAddresses, Self::Offset)\n-> Result<CommonInformationEntry<R>>","parent":{"krate":0,"index":457},"children":[],"decl_id":null,"docs":" Parse the `CommonInformationEntry` at the given offset.\n","sig":null,"attributes":[{"value":"/ Parse the `CommonInformationEntry` at the given offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":155453,"byte_end":155512,"line_start":564,"line_end":564,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":155927,"byte_end":155950,"line_start":577,"line_end":577,"column_start":8,"column_end":31},"name":"partial_fde_from_offset","qualname":"::read::cfi::UnwindSection::partial_fde_from_offset","value":"pub fn partial_fde_from_offset<'bases>(&Self, &'bases BaseAddresses,\n                                       Self::Offset)\n-> Result<PartialFrameDescriptionEntry>","parent":{"krate":0,"index":457},"children":[],"decl_id":null,"docs":" Parse the `PartialFrameDescriptionEntry` at the given offset.\n","sig":null,"attributes":[{"value":"/ Parse the `PartialFrameDescriptionEntry` at the given offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":155854,"byte_end":155919,"line_start":576,"line_end":576,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":156384,"byte_end":156399,"line_start":589,"line_end":589,"column_start":8,"column_end":23},"name":"fde_from_offset","qualname":"::read::cfi::UnwindSection::fde_from_offset","value":"pub fn fde_from_offset<F>(&Self, &BaseAddresses, Self::Offset, F)\n-> Result<FrameDescriptionEntry<R>> where\nF: FnMut(&Self, &BaseAddresses, Self::Offset) ->\nResult<CommonInformationEntry<R>>","parent":{"krate":0,"index":457},"children":[],"decl_id":null,"docs":" Parse the `FrameDescriptionEntry` at the given offset.\n","sig":null,"attributes":[{"value":"/ Parse the `FrameDescriptionEntry` at the given offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":156318,"byte_end":156376,"line_start":588,"line_end":588,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":157300,"byte_end":157315,"line_start":613,"line_end":613,"column_start":8,"column_end":23},"name":"fde_for_address","qualname":"::read::cfi::UnwindSection::fde_for_address","value":"pub fn fde_for_address<F>(&Self, &BaseAddresses, u64, F)\n-> Result<FrameDescriptionEntry<R>> where\nF: FnMut(&Self, &BaseAddresses, Self::Offset) ->\nResult<CommonInformationEntry<R>>","parent":{"krate":0,"index":457},"children":[],"decl_id":null,"docs":" Find the `FrameDescriptionEntry` for the given address.","sig":null,"attributes":[{"value":"/ Find the `FrameDescriptionEntry` for the given address.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":156760,"byte_end":156819,"line_start":602,"line_end":602,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":156824,"byte_end":156827,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ If found, the FDE is returned.  If not found,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":156832,"byte_end":156881,"line_start":604,"line_end":604,"column_start":5,"column_end":54}},{"value":"/ `Err(gimli::Error::NoUnwindInfoForAddress)` is returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":156886,"byte_end":156946,"line_start":605,"line_end":605,"column_start":5,"column_end":65}},{"value":"/ If parsing fails, the error is returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":156951,"byte_end":156995,"line_start":606,"line_end":606,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":157000,"byte_end":157003,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ You must provide a function to get its associated CIE. See","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":157008,"byte_end":157070,"line_start":608,"line_end":608,"column_start":5,"column_end":67}},{"value":"/ `PartialFrameDescriptionEntry::parse` for more information.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":157075,"byte_end":157138,"line_start":609,"line_end":609,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":157143,"byte_end":157146,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ Note: this iterates over all FDEs. If available, it is possible","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":157151,"byte_end":157218,"line_start":611,"line_end":611,"column_start":5,"column_end":72}},{"value":"/ to do a binary search with `EhFrameHdr::fde_for_address` instead.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":157223,"byte_end":157292,"line_start":612,"line_end":612,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159939,"byte_end":159962,"line_start":683,"line_end":683,"column_start":8,"column_end":31},"name":"unwind_info_for_address","qualname":"::read::cfi::UnwindSection::unwind_info_for_address","value":"pub fn unwind_info_for_address<'ctx, F,\n                               A: UnwindContextStorage<R>>(&Self,\n                                                           &BaseAddresses,\n                                                           &'ctx mut UnwindContext<R,\n                                                                                   A>,\n                                                           u64, F)\n-> Result<&'ctx UnwindTableRow<R, A>> where\nF: FnMut(&Self, &BaseAddresses, Self::Offset) ->\nResult<CommonInformationEntry<R>>","parent":{"krate":0,"index":457},"children":[],"decl_id":null,"docs":" Find the frame unwind information for the given address.","sig":null,"attributes":[{"value":"/ Find the frame unwind information for the given address.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":158033,"byte_end":158093,"line_start":637,"line_end":637,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":158098,"byte_end":158101,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ If found, the unwind information is returned.  If not found,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":158106,"byte_end":158170,"line_start":639,"line_end":639,"column_start":5,"column_end":69}},{"value":"/ `Err(gimli::Error::NoUnwindInfoForAddress)` is returned. If parsing or","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":158175,"byte_end":158249,"line_start":640,"line_end":640,"column_start":5,"column_end":79}},{"value":"/ CFI evaluation fails, the error is returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":158254,"byte_end":158302,"line_start":641,"line_end":641,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":158307,"byte_end":158310,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":158315,"byte_end":158322,"line_start":643,"line_end":643,"column_start":5,"column_end":12}},{"value":"/ use gimli::{BaseAddresses, EhFrame, EndianSlice, NativeEndian, UnwindContext,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":158327,"byte_end":158408,"line_start":644,"line_end":644,"column_start":5,"column_end":86}},{"value":"/             UnwindSection};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":158413,"byte_end":158444,"line_start":645,"line_end":645,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":158449,"byte_end":158452,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ # fn foo() -> gimli::Result<()> {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":158457,"byte_end":158494,"line_start":647,"line_end":647,"column_start":5,"column_end":42}},{"value":"/ # let read_eh_frame_section = || unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":158499,"byte_end":158553,"line_start":648,"line_end":648,"column_start":5,"column_end":59}},{"value":"/ // Get the `.eh_frame` section from the object file. Alternatively,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":158558,"byte_end":158629,"line_start":649,"line_end":649,"column_start":5,"column_end":76}},{"value":"/ // use `EhFrame` with the `.eh_frame` section of the object file.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":158634,"byte_end":158703,"line_start":650,"line_end":650,"column_start":5,"column_end":74}},{"value":"/ let eh_frame = EhFrame::new(read_eh_frame_section(), NativeEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":158708,"byte_end":158779,"line_start":651,"line_end":651,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":158784,"byte_end":158787,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ # let get_frame_pc = || unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":158792,"byte_end":158837,"line_start":653,"line_end":653,"column_start":5,"column_end":50}},{"value":"/ // Get the address of the PC for a frame you'd like to unwind.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":158842,"byte_end":158908,"line_start":654,"line_end":654,"column_start":5,"column_end":71}},{"value":"/ let address = get_frame_pc();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":158913,"byte_end":158946,"line_start":655,"line_end":655,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":158951,"byte_end":158954,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ // This context is reusable, which cuts down on heap allocations.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":158959,"byte_end":159028,"line_start":657,"line_end":657,"column_start":5,"column_end":74}},{"value":"/ let ctx = UnwindContext::new();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159033,"byte_end":159068,"line_start":658,"line_end":658,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159073,"byte_end":159076,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ // Optionally provide base addresses for any relative pointers. If a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159081,"byte_end":159153,"line_start":660,"line_end":660,"column_start":5,"column_end":77}},{"value":"/ // base address isn't provided and a pointer is found that is relative to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159158,"byte_end":159235,"line_start":661,"line_end":661,"column_start":5,"column_end":82}},{"value":"/ // it, we will return an `Err`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159240,"byte_end":159275,"line_start":662,"line_end":662,"column_start":5,"column_end":40}},{"value":"/ # let address_of_text_section_in_memory = unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159280,"byte_end":159343,"line_start":663,"line_end":663,"column_start":5,"column_end":68}},{"value":"/ # let address_of_got_section_in_memory = unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159348,"byte_end":159410,"line_start":664,"line_end":664,"column_start":5,"column_end":67}},{"value":"/ let bases = BaseAddresses::default()","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159415,"byte_end":159455,"line_start":665,"line_end":665,"column_start":5,"column_end":45}},{"value":"/     .set_text(address_of_text_section_in_memory)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159460,"byte_end":159512,"line_start":666,"line_end":666,"column_start":5,"column_end":57}},{"value":"/     .set_got(address_of_got_section_in_memory);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159517,"byte_end":159568,"line_start":667,"line_end":667,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159573,"byte_end":159576,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ let unwind_info = eh_frame.unwind_info_for_address(","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159581,"byte_end":159636,"line_start":669,"line_end":669,"column_start":5,"column_end":60}},{"value":"/     &bases,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159641,"byte_end":159656,"line_start":670,"line_end":670,"column_start":5,"column_end":20}},{"value":"/     &mut ctx,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159661,"byte_end":159678,"line_start":671,"line_end":671,"column_start":5,"column_end":22}},{"value":"/     address,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159683,"byte_end":159699,"line_start":672,"line_end":672,"column_start":5,"column_end":21}},{"value":"/     EhFrame::cie_from_offset,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159704,"byte_end":159737,"line_start":673,"line_end":673,"column_start":5,"column_end":38}},{"value":"/ )?;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159742,"byte_end":159749,"line_start":674,"line_end":674,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159754,"byte_end":159757,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ # let do_stuff_with = |_| unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159762,"byte_end":159809,"line_start":676,"line_end":676,"column_start":5,"column_end":52}},{"value":"/ do_stuff_with(unwind_info);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159814,"byte_end":159845,"line_start":677,"line_end":677,"column_start":5,"column_end":36}},{"value":"/ # let _ = ctx;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159850,"byte_end":159868,"line_start":678,"line_end":678,"column_start":5,"column_end":23}},{"value":"/ # unreachable!()","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159873,"byte_end":159893,"line_start":679,"line_end":679,"column_start":5,"column_end":25}},{"value":"/ # }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159898,"byte_end":159905,"line_start":680,"line_end":680,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159910,"byte_end":159917,"line_start":681,"line_end":681,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":159922,"byte_end":159931,"line_start":682,"line_end":682,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":6304},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":163387,"byte_end":163400,"line_start":805,"line_end":805,"column_start":12,"column_end":25},"name":"BaseAddresses","qualname":"::read::cfi::BaseAddresses","value":"BaseAddresses { eh_frame_hdr, eh_frame }","parent":null,"children":[{"krate":0,"index":6305},{"krate":0,"index":6306}],"decl_id":null,"docs":" Optional base addresses for the relative `DW_EH_PE_*` encoded pointers.","sig":null,"attributes":[{"value":"/ Optional base addresses for the relative `DW_EH_PE_*` encoded pointers.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":162408,"byte_end":162483,"line_start":782,"line_end":782,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":162484,"byte_end":162487,"line_start":783,"line_end":783,"column_start":1,"column_end":4}},{"value":"/ During CIE/FDE parsing, if a relative pointer is encountered for a base","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":162488,"byte_end":162563,"line_start":784,"line_end":784,"column_start":1,"column_end":76}},{"value":"/ address that is unknown, an Err will be returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":162564,"byte_end":162617,"line_start":785,"line_end":785,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":162618,"byte_end":162621,"line_start":786,"line_end":786,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":162622,"byte_end":162629,"line_start":787,"line_end":787,"column_start":1,"column_end":8}},{"value":"/ use gimli::BaseAddresses;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":162630,"byte_end":162659,"line_start":788,"line_end":788,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":162660,"byte_end":162663,"line_start":789,"line_end":789,"column_start":1,"column_end":4}},{"value":"/ # fn foo() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":162664,"byte_end":162680,"line_start":790,"line_end":790,"column_start":1,"column_end":17}},{"value":"/ # let address_of_eh_frame_hdr_section_in_memory = unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":162681,"byte_end":162752,"line_start":791,"line_end":791,"column_start":1,"column_end":72}},{"value":"/ # let address_of_eh_frame_section_in_memory = unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":162753,"byte_end":162820,"line_start":792,"line_end":792,"column_start":1,"column_end":68}},{"value":"/ # let address_of_text_section_in_memory = unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":162821,"byte_end":162884,"line_start":793,"line_end":793,"column_start":1,"column_end":64}},{"value":"/ # let address_of_got_section_in_memory = unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":162885,"byte_end":162947,"line_start":794,"line_end":794,"column_start":1,"column_end":63}},{"value":"/ # let address_of_the_start_of_current_func = unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":162948,"byte_end":163014,"line_start":795,"line_end":795,"column_start":1,"column_end":67}},{"value":"/ let bases = BaseAddresses::default()","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":163015,"byte_end":163055,"line_start":796,"line_end":796,"column_start":1,"column_end":41}},{"value":"/     .set_eh_frame_hdr(address_of_eh_frame_hdr_section_in_memory)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":163056,"byte_end":163124,"line_start":797,"line_end":797,"column_start":1,"column_end":69}},{"value":"/     .set_eh_frame(address_of_eh_frame_section_in_memory)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":163125,"byte_end":163185,"line_start":798,"line_end":798,"column_start":1,"column_end":61}},{"value":"/     .set_text(address_of_text_section_in_memory)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":163186,"byte_end":163238,"line_start":799,"line_end":799,"column_start":1,"column_end":53}},{"value":"/     .set_got(address_of_got_section_in_memory);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":163239,"byte_end":163290,"line_start":800,"line_end":800,"column_start":1,"column_end":52}},{"value":"/ # let _ = bases;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":163291,"byte_end":163311,"line_start":801,"line_end":801,"column_start":1,"column_end":21}},{"value":"/ # }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":163312,"byte_end":163319,"line_start":802,"line_end":802,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":163320,"byte_end":163327,"line_start":803,"line_end":803,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":6305},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":163490,"byte_end":163502,"line_start":807,"line_end":807,"column_start":9,"column_end":21},"name":"eh_frame_hdr","qualname":"::read::cfi::BaseAddresses::eh_frame_hdr","value":"read::cfi::SectionBaseAddresses","parent":{"krate":0,"index":6304},"children":[],"decl_id":null,"docs":" The base addresses to use for pointers in the `.eh_frame_hdr` section.\n","sig":null,"attributes":[{"value":"/ The base addresses to use for pointers in the `.eh_frame_hdr` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":163407,"byte_end":163481,"line_start":806,"line_end":806,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":6306},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":163610,"byte_end":163618,"line_start":810,"line_end":810,"column_start":9,"column_end":17},"name":"eh_frame","qualname":"::read::cfi::BaseAddresses::eh_frame","value":"read::cfi::SectionBaseAddresses","parent":{"krate":0,"index":6304},"children":[],"decl_id":null,"docs":" The base addresses to use for pointers in the `.eh_frame` section.\n","sig":null,"attributes":[{"value":"/ The base addresses to use for pointers in the `.eh_frame` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":163531,"byte_end":163601,"line_start":809,"line_end":809,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":6320},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":163893,"byte_end":163913,"line_start":818,"line_end":818,"column_start":12,"column_end":32},"name":"SectionBaseAddresses","qualname":"::read::cfi::SectionBaseAddresses","value":"SectionBaseAddresses { section, text, data }","parent":null,"children":[{"krate":0,"index":6321},{"krate":0,"index":6322},{"krate":0,"index":6323}],"decl_id":null,"docs":" Optional base addresses for the relative `DW_EH_PE_*` encoded pointers\n in a particular section.","sig":null,"attributes":[{"value":"/ Optional base addresses for the relative `DW_EH_PE_*` encoded pointers","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":163645,"byte_end":163719,"line_start":813,"line_end":813,"column_start":1,"column_end":75}},{"value":"/ in a particular section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":163720,"byte_end":163748,"line_start":814,"line_end":814,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":163749,"byte_end":163752,"line_start":815,"line_end":815,"column_start":1,"column_end":4}},{"value":"/ See `BaseAddresses` for methods that are helpful in setting these addresses.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":163753,"byte_end":163833,"line_start":816,"line_end":816,"column_start":1,"column_end":81}}]},{"kind":"Field","id":{"krate":0,"index":6321},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":163983,"byte_end":163990,"line_start":820,"line_end":820,"column_start":9,"column_end":16},"name":"section","qualname":"::read::cfi::SectionBaseAddresses::section","value":"core::option::Option<u64>","parent":{"krate":0,"index":6320},"children":[],"decl_id":null,"docs":" The address of the section containing the pointer.\n","sig":null,"attributes":[{"value":"/ The address of the section containing the pointer.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":163920,"byte_end":163974,"line_start":819,"line_end":819,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":6322},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":164129,"byte_end":164133,"line_start":824,"line_end":824,"column_start":9,"column_end":13},"name":"text","qualname":"::read::cfi::SectionBaseAddresses::text","value":"core::option::Option<u64>","parent":{"krate":0,"index":6320},"children":[],"decl_id":null,"docs":" The base address for text relative pointers.\n This is generally the address of the `.text` section.\n","sig":null,"attributes":[{"value":"/ The base address for text relative pointers.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":164010,"byte_end":164058,"line_start":822,"line_end":822,"column_start":5,"column_end":53}},{"value":"/ This is generally the address of the `.text` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":164063,"byte_end":164120,"line_start":823,"line_end":823,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":6323},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":164476,"byte_end":164480,"line_start":833,"line_end":833,"column_start":9,"column_end":13},"name":"data","qualname":"::read::cfi::SectionBaseAddresses::data","value":"core::option::Option<u64>","parent":{"krate":0,"index":6320},"children":[],"decl_id":null,"docs":" The base address for data relative pointers.","sig":null,"attributes":[{"value":"/ The base address for data relative pointers.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":164153,"byte_end":164201,"line_start":826,"line_end":826,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":164206,"byte_end":164209,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/ For pointers in the `.eh_frame_hdr` section, this is the address","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":164214,"byte_end":164282,"line_start":828,"line_end":828,"column_start":5,"column_end":73}},{"value":"/ of the `.eh_frame_hdr` section","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":164287,"byte_end":164321,"line_start":829,"line_end":829,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":164326,"byte_end":164329,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ For pointers in the `.eh_frame` section, this is generally the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":164334,"byte_end":164400,"line_start":831,"line_end":831,"column_start":5,"column_end":71}},{"value":"/ global pointer, such as the address of the `.got` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":164405,"byte_end":164467,"line_start":832,"line_end":832,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":164598,"byte_end":164614,"line_start":839,"line_end":839,"column_start":12,"column_end":28},"name":"set_eh_frame_hdr","qualname":"<BaseAddresses>::set_eh_frame_hdr","value":"pub fn set_eh_frame_hdr(Self, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the `.eh_frame_hdr` section base address.\n","sig":null,"attributes":[{"value":"/ Set the `.eh_frame_hdr` section base address.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":164523,"byte_end":164572,"line_start":837,"line_end":837,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":164577,"byte_end":164586,"line_start":838,"line_end":838,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":164834,"byte_end":164846,"line_start":847,"line_end":847,"column_start":12,"column_end":24},"name":"set_eh_frame","qualname":"<BaseAddresses>::set_eh_frame","value":"pub fn set_eh_frame(Self, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the `.eh_frame` section base address.\n","sig":null,"attributes":[{"value":"/ Set the `.eh_frame` section base address.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":164763,"byte_end":164808,"line_start":845,"line_end":845,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":164813,"byte_end":164822,"line_start":846,"line_end":846,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":165013,"byte_end":165021,"line_start":854,"line_end":854,"column_start":12,"column_end":20},"name":"set_text","qualname":"<BaseAddresses>::set_text","value":"pub fn set_text(Self, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the `.text` section base address.\n","sig":null,"attributes":[{"value":"/ Set the `.text` section base address.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":164946,"byte_end":164987,"line_start":852,"line_end":852,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":164992,"byte_end":165001,"line_start":853,"line_end":853,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":165229,"byte_end":165236,"line_start":862,"line_end":862,"column_start":12,"column_end":19},"name":"set_got","qualname":"<BaseAddresses>::set_got","value":"pub fn set_got(Self, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the `.got` section base address.\n","sig":null,"attributes":[{"value":"/ Set the `.got` section base address.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":165163,"byte_end":165203,"line_start":860,"line_end":860,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":165208,"byte_end":165217,"line_start":861,"line_end":861,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":6337},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":167024,"byte_end":167038,"line_start":908,"line_end":908,"column_start":12,"column_end":26},"name":"CfiEntriesIter","qualname":"::read::cfi::CfiEntriesIter","value":"CfiEntriesIter {  }","parent":null,"children":[{"krate":0,"index":6341},{"krate":0,"index":6342},{"krate":0,"index":6343}],"decl_id":null,"docs":" An iterator over CIE and FDE entries in a `.debug_frame` or `.eh_frame`\n section.","sig":null,"attributes":[{"value":"/ An iterator over CIE and FDE entries in a `.debug_frame` or `.eh_frame`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":165331,"byte_end":165406,"line_start":868,"line_end":868,"column_start":1,"column_end":76}},{"value":"/ section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":165407,"byte_end":165419,"line_start":869,"line_end":869,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":165420,"byte_end":165423,"line_start":870,"line_end":870,"column_start":1,"column_end":4}},{"value":"/ Some pointers may be encoded relative to various base addresses. Use the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":165424,"byte_end":165500,"line_start":871,"line_end":871,"column_start":1,"column_end":77}},{"value":"/ [`BaseAddresses`](./struct.BaseAddresses.html) parameter to provide them. By","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":165501,"byte_end":165581,"line_start":872,"line_end":872,"column_start":1,"column_end":81}},{"value":"/ default, none are provided. If a relative pointer is encountered for a base","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":165582,"byte_end":165661,"line_start":873,"line_end":873,"column_start":1,"column_end":80}},{"value":"/ address that is unknown, an `Err` will be returned and iteration will abort.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":165662,"byte_end":165742,"line_start":874,"line_end":874,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":165743,"byte_end":165746,"line_start":875,"line_end":875,"column_start":1,"column_end":4}},{"value":"/ Can be [used with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":165747,"byte_end":165768,"line_start":876,"line_end":876,"column_start":1,"column_end":22}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":165769,"byte_end":165835,"line_start":877,"line_end":877,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":165836,"byte_end":165839,"line_start":878,"line_end":878,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":165840,"byte_end":165847,"line_start":879,"line_end":879,"column_start":1,"column_end":8}},{"value":"/ use gimli::{BaseAddresses, EhFrame, EndianSlice, NativeEndian, UnwindSection};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":165848,"byte_end":165930,"line_start":880,"line_end":880,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":165931,"byte_end":165934,"line_start":881,"line_end":881,"column_start":1,"column_end":4}},{"value":"/ # fn foo() -> gimli::Result<()> {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":165935,"byte_end":165972,"line_start":882,"line_end":882,"column_start":1,"column_end":38}},{"value":"/ # let read_eh_frame_somehow = || unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":165973,"byte_end":166027,"line_start":883,"line_end":883,"column_start":1,"column_end":55}},{"value":"/ let eh_frame = EhFrame::new(read_eh_frame_somehow(), NativeEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":166028,"byte_end":166099,"line_start":884,"line_end":884,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":166100,"byte_end":166103,"line_start":885,"line_end":885,"column_start":1,"column_end":4}},{"value":"/ # let address_of_eh_frame_hdr_section_in_memory = unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":166104,"byte_end":166175,"line_start":886,"line_end":886,"column_start":1,"column_end":72}},{"value":"/ # let address_of_eh_frame_section_in_memory = unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":166176,"byte_end":166243,"line_start":887,"line_end":887,"column_start":1,"column_end":68}},{"value":"/ # let address_of_text_section_in_memory = unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":166244,"byte_end":166307,"line_start":888,"line_end":888,"column_start":1,"column_end":64}},{"value":"/ # let address_of_got_section_in_memory = unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":166308,"byte_end":166370,"line_start":889,"line_end":889,"column_start":1,"column_end":63}},{"value":"/ # let address_of_the_start_of_current_func = unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":166371,"byte_end":166437,"line_start":890,"line_end":890,"column_start":1,"column_end":67}},{"value":"/ // Provide base addresses for relative pointers.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":166438,"byte_end":166490,"line_start":891,"line_end":891,"column_start":1,"column_end":53}},{"value":"/ let bases = BaseAddresses::default()","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":166491,"byte_end":166531,"line_start":892,"line_end":892,"column_start":1,"column_end":41}},{"value":"/     .set_eh_frame_hdr(address_of_eh_frame_hdr_section_in_memory)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":166532,"byte_end":166600,"line_start":893,"line_end":893,"column_start":1,"column_end":69}},{"value":"/     .set_eh_frame(address_of_eh_frame_section_in_memory)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":166601,"byte_end":166661,"line_start":894,"line_end":894,"column_start":1,"column_end":61}},{"value":"/     .set_text(address_of_text_section_in_memory)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":166662,"byte_end":166714,"line_start":895,"line_end":895,"column_start":1,"column_end":53}},{"value":"/     .set_got(address_of_got_section_in_memory);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":166715,"byte_end":166766,"line_start":896,"line_end":896,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":166767,"byte_end":166770,"line_start":897,"line_end":897,"column_start":1,"column_end":4}},{"value":"/ let mut entries = eh_frame.entries(&bases);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":166771,"byte_end":166818,"line_start":898,"line_end":898,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":166819,"byte_end":166822,"line_start":899,"line_end":899,"column_start":1,"column_end":4}},{"value":"/ # let do_stuff_with = |_| unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":166823,"byte_end":166870,"line_start":900,"line_end":900,"column_start":1,"column_end":48}},{"value":"/ while let Some(entry) = entries.next()? {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":166871,"byte_end":166916,"line_start":901,"line_end":901,"column_start":1,"column_end":46}},{"value":"/     do_stuff_with(entry)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":166917,"byte_end":166945,"line_start":902,"line_end":902,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":166946,"byte_end":166951,"line_start":903,"line_end":903,"column_start":1,"column_end":6}},{"value":"/ # unreachable!()","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":166952,"byte_end":166972,"line_start":904,"line_end":904,"column_start":1,"column_end":21}},{"value":"/ # }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":166973,"byte_end":166980,"line_start":905,"line_end":905,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":166981,"byte_end":166988,"line_start":906,"line_end":906,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":167359,"byte_end":167363,"line_start":924,"line_end":924,"column_start":12,"column_end":16},"name":"next","qualname":"<CfiEntriesIter>::next","value":"pub fn next(&mut Self) -> Result<Option<CieOrFde>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next entry.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next entry.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":167304,"byte_end":167347,"line_start":923,"line_end":923,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6358},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":168501,"byte_end":168504,"line_start":965,"line_end":965,"column_start":5,"column_end":8},"name":"Cie","qualname":"::read::cfi::CieOrFde::Cie","value":"CieOrFde::Cie(CommonInformationEntry<R>)","parent":{"krate":0,"index":6354},"children":[],"decl_id":null,"docs":" This CFI entry is a `CommonInformationEntry`.\n","sig":null,"attributes":[{"value":"/ This CFI entry is a `CommonInformationEntry`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":168447,"byte_end":168496,"line_start":964,"line_end":964,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6361},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":168706,"byte_end":168709,"line_start":969,"line_end":969,"column_start":5,"column_end":8},"name":"Fde","qualname":"::read::cfi::CieOrFde::Fde","value":"CieOrFde::Fde(PartialFrameDescriptionEntry)","parent":{"krate":0,"index":6354},"children":[],"decl_id":null,"docs":" This CFI entry is a `FrameDescriptionEntry`, however fully parsing it\n requires parsing its CIE first, so it is left in a partially parsed\n state.\n","sig":null,"attributes":[{"value":"/ This CFI entry is a `FrameDescriptionEntry`, however fully parsing it","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":168537,"byte_end":168610,"line_start":966,"line_end":966,"column_start":5,"column_end":78}},{"value":"/ requires parsing its CIE first, so it is left in a partially parsed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":168615,"byte_end":168686,"line_start":967,"line_end":967,"column_start":5,"column_end":76}},{"value":"/ state.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":168691,"byte_end":168701,"line_start":968,"line_end":968,"column_start":5,"column_end":15}}]},{"kind":"Enum","id":{"krate":0,"index":6354},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":168360,"byte_end":168368,"line_start":959,"line_end":959,"column_start":10,"column_end":18},"name":"CieOrFde","qualname":"::read::cfi::CieOrFde","value":"pub enum CieOrFde<'bases, Section, R> where R: Reader,\n         Section: UnwindSection<R> {\n    Cie(CommonInformationEntry<R>),\n    Fde(PartialFrameDescriptionEntry),\n}","parent":null,"children":[{"krate":0,"index":6358},{"krate":0,"index":6361}],"decl_id":null,"docs":" Either a `CommonInformationEntry` (CIE) or a `FrameDescriptionEntry` (FDE).\n","sig":null,"attributes":[{"value":"/ Either a `CommonInformationEntry` (CIE) or a `FrameDescriptionEntry` (FDE).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":168232,"byte_end":168311,"line_start":957,"line_end":957,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":6393},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":171030,"byte_end":171042,"line_start":1035,"line_end":1035,"column_start":12,"column_end":24},"name":"Augmentation","qualname":"::read::cfi::Augmentation","value":"Augmentation {  }","parent":null,"children":[{"krate":0,"index":6394},{"krate":0,"index":6395},{"krate":0,"index":6396},{"krate":0,"index":6397}],"decl_id":null,"docs":" We support the z-style augmentation [defined by `.eh_frame`][ehframe].","sig":null,"attributes":[{"value":"/ We support the z-style augmentation [defined by `.eh_frame`][ehframe].","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":170773,"byte_end":170847,"line_start":1031,"line_end":1031,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":170848,"byte_end":170851,"line_start":1032,"line_end":1032,"column_start":1,"column_end":4}},{"value":"/ [ehframe]: https://refspecs.linuxfoundation.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/ehframechpt.html","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":170852,"byte_end":170964,"line_start":1033,"line_end":1033,"column_start":1,"column_end":113}}]},{"kind":"Struct","id":{"krate":0,"index":6427},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":176686,"byte_end":176708,"line_start":1167,"line_end":1167,"column_start":12,"column_end":34},"name":"CommonInformationEntry","qualname":"::read::cfi::CommonInformationEntry","value":"CommonInformationEntry {  }","parent":null,"children":[{"krate":0,"index":6430},{"krate":0,"index":6431},{"krate":0,"index":6432},{"krate":0,"index":6433},{"krate":0,"index":6434},{"krate":0,"index":6435},{"krate":0,"index":6436},{"krate":0,"index":6437},{"krate":0,"index":6438},{"krate":0,"index":6439},{"krate":0,"index":6440}],"decl_id":null,"docs":" > A Common Information Entry holds information that is shared among many\n > Frame Description Entries. There is at least one CIE in every non-empty\n > `.debug_frame` section.\n","sig":null,"attributes":[{"value":"/ > A Common Information Entry holds information that is shared among many","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":176451,"byte_end":176527,"line_start":1163,"line_end":1163,"column_start":1,"column_end":77}},{"value":"/ > Frame Description Entries. There is at least one CIE in every non-empty","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":176528,"byte_end":176605,"line_start":1164,"line_end":1164,"column_start":1,"column_end":78}},{"value":"/ > `.debug_frame` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":176606,"byte_end":176635,"line_start":1165,"line_end":1165,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":181695,"byte_end":181701,"line_start":1311,"line_end":1311,"column_start":12,"column_end":18},"name":"offset","qualname":"<CommonInformationEntry<R>>::offset","value":"pub fn offset(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" Get the offset of this entry from the start of its containing section.\n","sig":null,"attributes":[{"value":"/ Get the offset of this entry from the start of its containing section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":181609,"byte_end":181683,"line_start":1310,"line_end":1310,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":181815,"byte_end":181823,"line_start":1316,"line_end":1316,"column_start":12,"column_end":20},"name":"encoding","qualname":"<CommonInformationEntry<R>>::encoding","value":"pub fn encoding(&Self) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding parameters for this CIE.\n","sig":null,"attributes":[{"value":"/ Return the encoding parameters for this CIE.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":181755,"byte_end":181803,"line_start":1315,"line_end":1315,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":182070,"byte_end":182082,"line_start":1325,"line_end":1325,"column_start":12,"column_end":24},"name":"address_size","qualname":"<CommonInformationEntry<R>>::address_size","value":"pub fn address_size(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" The size of addresses (in bytes) in this CIE.\n","sig":null,"attributes":[{"value":"/ The size of addresses (in bytes) in this CIE.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":182009,"byte_end":182058,"line_start":1324,"line_end":1324,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":182301,"byte_end":182313,"line_start":1333,"line_end":1333,"column_start":12,"column_end":24},"name":"instructions","qualname":"<CommonInformationEntry<R>>::instructions","value":"pub fn instructions<'a, Section>(&Self, &'a Section, &'a BaseAddresses)\n-> CallFrameInstructionIter where Section: UnwindSection<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over this CIE's initial instructions.","sig":null,"attributes":[{"value":"/ Iterate over this CIE's initial instructions.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":182135,"byte_end":182184,"line_start":1329,"line_end":1329,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":182189,"byte_end":182192,"line_start":1330,"line_end":1330,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":182197,"byte_end":182218,"line_start":1331,"line_end":1331,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":182223,"byte_end":182289,"line_start":1332,"line_end":1332,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":183152,"byte_end":183161,"line_start":1357,"line_end":1357,"column_start":12,"column_end":21},"name":"entry_len","qualname":"<CommonInformationEntry<R>>::entry_len","value":"pub fn entry_len(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" > A constant that gives the number of bytes of the CIE structure, not\n > including the length field itself (see Section 7.2.2). The size of the\n > length field plus the value of length must be an integral multiple of\n > the address size.\n","sig":null,"attributes":[{"value":"/ > A constant that gives the number of bytes of the CIE structure, not","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":182878,"byte_end":182951,"line_start":1353,"line_end":1353,"column_start":5,"column_end":78}},{"value":"/ > including the length field itself (see Section 7.2.2). The size of the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":182956,"byte_end":183032,"line_start":1354,"line_end":1354,"column_start":5,"column_end":81}},{"value":"/ > length field plus the value of length must be an integral multiple of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":183037,"byte_end":183112,"line_start":1355,"line_end":1355,"column_start":5,"column_end":80}},{"value":"/ > the address size.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":183117,"byte_end":183140,"line_start":1356,"line_end":1356,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":183381,"byte_end":183388,"line_start":1363,"line_end":1363,"column_start":12,"column_end":19},"name":"version","qualname":"<CommonInformationEntry<R>>::version","value":"pub fn version(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" > A version number (see Section 7.23). This number is specific to the\n > call frame information and is independent of the DWARF version number.\n","sig":null,"attributes":[{"value":"/ > A version number (see Section 7.23). This number is specific to the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":183215,"byte_end":183288,"line_start":1361,"line_end":1361,"column_start":5,"column_end":78}},{"value":"/ > call frame information and is independent of the DWARF version number.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":183293,"byte_end":183369,"line_start":1362,"line_end":1362,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":183602,"byte_end":183614,"line_start":1371,"line_end":1371,"column_start":12,"column_end":24},"name":"augmentation","qualname":"<CommonInformationEntry<R>>::augmentation","value":"pub fn augmentation(&Self) -> Option<&Augmentation>","parent":null,"children":[],"decl_id":null,"docs":" Get the augmentation data, if any exists.","sig":null,"attributes":[{"value":"/ Get the augmentation data, if any exists.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":183436,"byte_end":183481,"line_start":1367,"line_end":1367,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":183486,"byte_end":183489,"line_start":1368,"line_end":1368,"column_start":5,"column_end":8}},{"value":"/ The only augmentation understood by `gimli` is that which is defined by","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":183494,"byte_end":183569,"line_start":1369,"line_end":1369,"column_start":5,"column_end":80}},{"value":"/ `.eh_frame`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":183574,"byte_end":183590,"line_start":1370,"line_end":1370,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":183747,"byte_end":183755,"line_start":1376,"line_end":1376,"column_start":12,"column_end":20},"name":"has_lsda","qualname":"<CommonInformationEntry<R>>::has_lsda","value":"pub fn has_lsda(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if this CIE's FDEs have a LSDA.\n","sig":null,"attributes":[{"value":"/ True if this CIE's FDEs have a LSDA.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":183695,"byte_end":183735,"line_start":1375,"line_end":1375,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":183922,"byte_end":183935,"line_start":1381,"line_end":1381,"column_start":12,"column_end":25},"name":"lsda_encoding","qualname":"<CommonInformationEntry<R>>::lsda_encoding","value":"pub fn lsda_encoding(&Self) -> Option<constants::DwEhPe>","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding of the LSDA address for this CIE's FDEs.\n","sig":null,"attributes":[{"value":"/ Return the encoding of the LSDA address for this CIE's FDEs.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":183846,"byte_end":183910,"line_start":1380,"line_end":1380,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":184143,"byte_end":184168,"line_start":1387,"line_end":1387,"column_start":12,"column_end":37},"name":"personality_with_encoding","qualname":"<CommonInformationEntry<R>>::personality_with_encoding","value":"pub fn personality_with_encoding(&Self)\n-> Option<(constants::DwEhPe, Pointer)>","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding and address of the personality routine handler\n for this CIE's FDEs.\n","sig":null,"attributes":[{"value":"/ Return the encoding and address of the personality routine handler","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":184032,"byte_end":184102,"line_start":1385,"line_end":1385,"column_start":5,"column_end":75}},{"value":"/ for this CIE's FDEs.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":184107,"byte_end":184131,"line_start":1386,"line_end":1386,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":184390,"byte_end":184401,"line_start":1393,"line_end":1393,"column_start":12,"column_end":23},"name":"personality","qualname":"<CommonInformationEntry<R>>::personality","value":"pub fn personality(&Self) -> Option<Pointer>","parent":null,"children":[],"decl_id":null,"docs":" Return the address of the personality routine handler\n for this CIE's FDEs.\n","sig":null,"attributes":[{"value":"/ Return the address of the personality routine handler","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":184292,"byte_end":184349,"line_start":1391,"line_end":1391,"column_start":5,"column_end":62}},{"value":"/ for this CIE's FDEs.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":184354,"byte_end":184378,"line_start":1392,"line_end":1392,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":184632,"byte_end":184652,"line_start":1401,"line_end":1401,"column_start":12,"column_end":32},"name":"fde_address_encoding","qualname":"<CommonInformationEntry<R>>::fde_address_encoding","value":"pub fn fde_address_encoding(&Self) -> Option<constants::DwEhPe>","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding of the addresses for this CIE's FDEs.\n","sig":null,"attributes":[{"value":"/ Return the encoding of the addresses for this CIE's FDEs.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":184559,"byte_end":184620,"line_start":1400,"line_end":1400,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":184841,"byte_end":184861,"line_start":1406,"line_end":1406,"column_start":12,"column_end":32},"name":"is_signal_trampoline","qualname":"<CommonInformationEntry<R>>::is_signal_trampoline","value":"pub fn is_signal_trampoline(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if this CIE's FDEs are trampolines for signal handlers.\n","sig":null,"attributes":[{"value":"/ True if this CIE's FDEs are trampolines for signal handlers.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":184765,"byte_end":184829,"line_start":1405,"line_end":1405,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":185077,"byte_end":185098,"line_start":1412,"line_end":1412,"column_start":12,"column_end":33},"name":"code_alignment_factor","qualname":"<CommonInformationEntry<R>>::code_alignment_factor","value":"pub fn code_alignment_factor(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" > A constant that is factored out of all advance location instructions\n > (see Section 6.4.2.1).\n","sig":null,"attributes":[{"value":"/ > A constant that is factored out of all advance location instructions","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":184958,"byte_end":185032,"line_start":1410,"line_end":1410,"column_start":5,"column_end":79}},{"value":"/ > (see Section 6.4.2.1).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":185037,"byte_end":185065,"line_start":1411,"line_end":1411,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":185322,"byte_end":185343,"line_start":1418,"line_end":1418,"column_start":12,"column_end":33},"name":"data_alignment_factor","qualname":"<CommonInformationEntry<R>>::data_alignment_factor","value":"pub fn data_alignment_factor(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" > A constant that is factored out of certain offset instructions (see\n > below). The resulting value is (operand * data_alignment_factor).\n","sig":null,"attributes":[{"value":"/ > A constant that is factored out of certain offset instructions (see","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":185161,"byte_end":185234,"line_start":1416,"line_end":1416,"column_start":5,"column_end":78}},{"value":"/ > below). The resulting value is (operand * data_alignment_factor).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":185239,"byte_end":185310,"line_start":1417,"line_end":1417,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":185635,"byte_end":185658,"line_start":1425,"line_end":1425,"column_start":12,"column_end":35},"name":"return_address_register","qualname":"<CommonInformationEntry<R>>::return_address_register","value":"pub fn return_address_register(&Self) -> Register","parent":null,"children":[],"decl_id":null,"docs":" > An unsigned ... constant that indicates which column in the rule\n > table represents the return address of the function. Note that this\n > column might not correspond to an actual machine register.\n","sig":null,"attributes":[{"value":"/ > An unsigned ... constant that indicates which column in the rule","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":185406,"byte_end":185476,"line_start":1422,"line_end":1422,"column_start":5,"column_end":75}},{"value":"/ > table represents the return address of the function. Note that this","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":185481,"byte_end":185554,"line_start":1423,"line_end":1423,"column_start":5,"column_end":78}},{"value":"/ > column might not correspond to an actual machine register.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":185559,"byte_end":185623,"line_start":1424,"line_end":1424,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":6464},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":185887,"byte_end":185915,"line_start":1434,"line_end":1434,"column_start":12,"column_end":40},"name":"PartialFrameDescriptionEntry","qualname":"::read::cfi::PartialFrameDescriptionEntry","value":"PartialFrameDescriptionEntry {  }","parent":null,"children":[{"krate":0,"index":6468},{"krate":0,"index":6469},{"krate":0,"index":6470},{"krate":0,"index":6471},{"krate":0,"index":6472},{"krate":0,"index":6473},{"krate":0,"index":6474}],"decl_id":null,"docs":" A partially parsed `FrameDescriptionEntry`.","sig":null,"attributes":[{"value":"/ A partially parsed `FrameDescriptionEntry`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":185726,"byte_end":185773,"line_start":1430,"line_end":1430,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":185774,"byte_end":185777,"line_start":1431,"line_end":1431,"column_start":1,"column_end":4}},{"value":"/ Fully parsing this FDE requires first parsing its CIE.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":185778,"byte_end":185836,"line_start":1432,"line_end":1432,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":186962,"byte_end":186967,"line_start":1470,"line_end":1470,"column_start":12,"column_end":17},"name":"parse","qualname":"<PartialFrameDescriptionEntry>::parse","value":"pub fn parse<F>(&Self, F) -> Result<FrameDescriptionEntry<R>> where\nF: FnMut(&Section, &BaseAddresses, Section::Offset) ->\nResult<CommonInformationEntry<R>>","parent":null,"children":[],"decl_id":null,"docs":" Fully parse this FDE.","sig":null,"attributes":[{"value":"/ Fully parse this FDE.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":186720,"byte_end":186745,"line_start":1465,"line_end":1465,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":186750,"byte_end":186753,"line_start":1466,"line_end":1466,"column_start":5,"column_end":8}},{"value":"/ You must provide a function get its associated CIE (either by parsing it","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":186758,"byte_end":186834,"line_start":1467,"line_end":1467,"column_start":5,"column_end":81}},{"value":"/ on demand, or looking it up in some table mapping offsets to CIEs that","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":186839,"byte_end":186913,"line_start":1468,"line_end":1468,"column_start":5,"column_end":79}},{"value":"/ you've already parsed, etc.)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":186918,"byte_end":186950,"line_start":1469,"line_end":1469,"column_start":5,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":6504},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":187540,"byte_end":187561,"line_start":1489,"line_end":1489,"column_start":12,"column_end":33},"name":"FrameDescriptionEntry","qualname":"::read::cfi::FrameDescriptionEntry","value":"FrameDescriptionEntry {  }","parent":null,"children":[{"krate":0,"index":6507},{"krate":0,"index":6508},{"krate":0,"index":6509},{"krate":0,"index":6510},{"krate":0,"index":6511},{"krate":0,"index":6512},{"krate":0,"index":6513},{"krate":0,"index":6514},{"krate":0,"index":6515}],"decl_id":null,"docs":" A `FrameDescriptionEntry` is a set of CFA instructions for an address range.\n","sig":null,"attributes":[{"value":"/ A `FrameDescriptionEntry` is a set of CFA instructions for an address range.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":187409,"byte_end":187489,"line_start":1487,"line_end":1487,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":191753,"byte_end":191757,"line_start":1614,"line_end":1614,"column_start":12,"column_end":16},"name":"rows","qualname":"<FrameDescriptionEntry<R>>::rows","value":"pub fn rows<'a, 'ctx, Section: UnwindSection<R>,\n            A: UnwindContextStorage<R>>(&Self, &'a Section, &'a BaseAddresses,\n                                        &'ctx mut UnwindContext<R, A>)\n-> Result<UnwindTable>","parent":null,"children":[],"decl_id":null,"docs":" Return the table of unwind information for this FDE.\n","sig":null,"attributes":[{"value":"/ Return the table of unwind information for this FDE.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":191671,"byte_end":191727,"line_start":1612,"line_end":1612,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":191732,"byte_end":191741,"line_start":1613,"line_end":1613,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":192415,"byte_end":192438,"line_start":1629,"line_end":1629,"column_start":12,"column_end":35},"name":"unwind_info_for_address","qualname":"<FrameDescriptionEntry<R>>::unwind_info_for_address","value":"pub fn unwind_info_for_address<'ctx, Section: UnwindSection<R>,\n                               A: UnwindContextStorage<R>>(&Self, &Section,\n                                                           &BaseAddresses,\n                                                           &'ctx mut UnwindContext<R,\n                                                                                   A>,\n                                                           u64)\n-> Result<&'ctx UnwindTableRow<R, A>>","parent":null,"children":[],"decl_id":null,"docs":" Find the frame unwind information for the given address.","sig":null,"attributes":[{"value":"/ Find the frame unwind information for the given address.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":192057,"byte_end":192117,"line_start":1623,"line_end":1623,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":192122,"byte_end":192125,"line_start":1624,"line_end":1624,"column_start":5,"column_end":8}},{"value":"/ If found, the unwind information is returned along with the reset","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":192130,"byte_end":192199,"line_start":1625,"line_end":1625,"column_start":5,"column_end":74}},{"value":"/ context in the form `Ok((unwind_info, context))`. If not found,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":192204,"byte_end":192271,"line_start":1626,"line_end":1626,"column_start":5,"column_end":72}},{"value":"/ `Err(gimli::Error::NoUnwindInfoForAddress)` is returned. If parsing or","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":192276,"byte_end":192350,"line_start":1627,"line_end":1627,"column_start":5,"column_end":79}},{"value":"/ CFI evaluation fails, the error is returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":192355,"byte_end":192403,"line_start":1628,"line_end":1628,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":193270,"byte_end":193276,"line_start":1653,"line_end":1653,"column_start":12,"column_end":18},"name":"offset","qualname":"<FrameDescriptionEntry<R>>::offset","value":"pub fn offset(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" Get the offset of this entry from the start of its containing section.\n","sig":null,"attributes":[{"value":"/ Get the offset of this entry from the start of its containing section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":193184,"byte_end":193258,"line_start":1652,"line_end":1652,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":193380,"byte_end":193383,"line_start":1658,"line_end":1658,"column_start":12,"column_end":15},"name":"cie","qualname":"<FrameDescriptionEntry<R>>::cie","value":"pub fn cie(&Self) -> &CommonInformationEntry<R>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to this FDE's CIE.\n","sig":null,"attributes":[{"value":"/ Get a reference to this FDE's CIE.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":193330,"byte_end":193368,"line_start":1657,"line_end":1657,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":193760,"byte_end":193769,"line_start":1666,"line_end":1666,"column_start":12,"column_end":21},"name":"entry_len","qualname":"<FrameDescriptionEntry<R>>::entry_len","value":"pub fn entry_len(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" > A constant that gives the number of bytes of the header and\n > instruction stream for this function, not including the length field\n > itself (see Section 7.2.2). The size of the length field plus the value\n > of length must be an integral multiple of the address size.\n","sig":null,"attributes":[{"value":"/ > A constant that gives the number of bytes of the header and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":193452,"byte_end":193517,"line_start":1662,"line_end":1662,"column_start":5,"column_end":70}},{"value":"/ > instruction stream for this function, not including the length field","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":193522,"byte_end":193596,"line_start":1663,"line_end":1663,"column_start":5,"column_end":79}},{"value":"/ > itself (see Section 7.2.2). The size of the length field plus the value","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":193601,"byte_end":193678,"line_start":1664,"line_end":1664,"column_start":5,"column_end":82}},{"value":"/ > of length must be an integral multiple of the address size.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":193683,"byte_end":193748,"line_start":1665,"line_end":1665,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":194109,"byte_end":194121,"line_start":1677,"line_end":1677,"column_start":12,"column_end":24},"name":"instructions","qualname":"<FrameDescriptionEntry<R>>::instructions","value":"pub fn instructions<'a, Section>(&Self, &'a Section, &'a BaseAddresses)\n-> CallFrameInstructionIter where Section: UnwindSection<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over this FDE's instructions.","sig":null,"attributes":[{"value":"/ Iterate over this FDE's instructions.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":193823,"byte_end":193864,"line_start":1670,"line_end":1670,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":193869,"byte_end":193872,"line_start":1671,"line_end":1671,"column_start":5,"column_end":8}},{"value":"/ Will not include the CIE's initial instructions, if you want those do","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":193877,"byte_end":193950,"line_start":1672,"line_end":1672,"column_start":5,"column_end":78}},{"value":"/ `fde.cie().instructions()` first.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":193955,"byte_end":193992,"line_start":1673,"line_end":1673,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":193997,"byte_end":194000,"line_start":1674,"line_end":1674,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":194005,"byte_end":194026,"line_start":1675,"line_end":1675,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":194031,"byte_end":194097,"line_start":1676,"line_end":1676,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":194820,"byte_end":194835,"line_start":1698,"line_end":1698,"column_start":12,"column_end":27},"name":"initial_address","qualname":"<FrameDescriptionEntry<R>>::initial_address","value":"pub fn initial_address(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The first address for which this entry has unwind information for.\n","sig":null,"attributes":[{"value":"/ The first address for which this entry has unwind information for.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":194738,"byte_end":194808,"line_start":1697,"line_end":1697,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":194995,"byte_end":194998,"line_start":1704,"line_end":1704,"column_start":12,"column_end":15},"name":"len","qualname":"<FrameDescriptionEntry<R>>::len","value":"pub fn len(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The number of bytes of instructions that this entry has unwind\n information for.\n","sig":null,"attributes":[{"value":"/ The number of bytes of instructions that this entry has unwind","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":194892,"byte_end":194958,"line_start":1702,"line_end":1702,"column_start":5,"column_end":71}},{"value":"/ information for.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":194963,"byte_end":194983,"line_start":1703,"line_end":1703,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":195274,"byte_end":195282,"line_start":1713,"line_end":1713,"column_start":12,"column_end":20},"name":"contains","qualname":"<FrameDescriptionEntry<R>>::contains","value":"pub fn contains(&Self, u64) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if the given address is within this FDE, `false`\n otherwise.","sig":null,"attributes":[{"value":"/ Return `true` if the given address is within this FDE, `false`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":195053,"byte_end":195119,"line_start":1708,"line_end":1708,"column_start":5,"column_end":71}},{"value":"/ otherwise.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":195124,"byte_end":195138,"line_start":1709,"line_end":1709,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":195143,"byte_end":195146,"line_start":1710,"line_end":1710,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to `entry.initial_address() <= address <","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":195151,"byte_end":195214,"line_start":1711,"line_end":1711,"column_start":5,"column_end":68}},{"value":"/ entry.initial_address() + entry.len()`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":195219,"byte_end":195262,"line_start":1712,"line_end":1712,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":195549,"byte_end":195553,"line_start":1721,"line_end":1721,"column_start":12,"column_end":16},"name":"lsda","qualname":"<FrameDescriptionEntry<R>>::lsda","value":"pub fn lsda(&Self) -> Option<Pointer>","parent":null,"children":[],"decl_id":null,"docs":" The address of this FDE's language-specific data area (LSDA), if it has\n any.\n","sig":null,"attributes":[{"value":"/ The address of this FDE's language-specific data area (LSDA), if it has","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":195449,"byte_end":195524,"line_start":1719,"line_end":1719,"column_start":5,"column_end":80}},{"value":"/ any.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":195529,"byte_end":195537,"line_start":1720,"line_end":1720,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":195751,"byte_end":195771,"line_start":1727,"line_end":1727,"column_start":12,"column_end":32},"name":"is_signal_trampoline","qualname":"<FrameDescriptionEntry<R>>::is_signal_trampoline","value":"pub fn is_signal_trampoline(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if this FDE's function is a trampoline for a signal handler.\n","sig":null,"attributes":[{"value":"/ Return true if this FDE's function is a trampoline for a signal handler.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":195649,"byte_end":195725,"line_start":1725,"line_end":1725,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":195730,"byte_end":195739,"line_start":1726,"line_end":1726,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":196086,"byte_end":196097,"line_start":1735,"line_end":1735,"column_start":12,"column_end":23},"name":"personality","qualname":"<FrameDescriptionEntry<R>>::personality","value":"pub fn personality(&Self) -> Option<Pointer>","parent":null,"children":[],"decl_id":null,"docs":" Return the address of the FDE's function's personality routine\n handler. The personality routine does language-specific clean up when\n unwinding the stack frames with the intent to not run them again.\n","sig":null,"attributes":[{"value":"/ Return the address of the FDE's function's personality routine","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":195842,"byte_end":195908,"line_start":1731,"line_end":1731,"column_start":5,"column_end":71}},{"value":"/ handler. The personality routine does language-specific clean up when","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":195913,"byte_end":195986,"line_start":1732,"line_end":1732,"column_start":5,"column_end":78}},{"value":"/ unwinding the stack frames with the intent to not run them again.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":195991,"byte_end":196060,"line_start":1733,"line_end":1733,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":196065,"byte_end":196074,"line_start":1734,"line_end":1734,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":592},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197514,"byte_end":197534,"line_start":1779,"line_end":1779,"column_start":11,"column_end":31},"name":"UnwindContextStorage","qualname":"::read::cfi::UnwindContextStorage","value":"UnwindContextStorage<R: Reader>: Sized","parent":null,"children":[{"krate":0,"index":594},{"krate":0,"index":595}],"decl_id":null,"docs":" Specification of what storage should be used for [`UnwindContext`].","sig":null,"attributes":[{"value":"/ Specification of what storage should be used for [`UnwindContext`].","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":196168,"byte_end":196239,"line_start":1740,"line_end":1740,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":196240,"byte_end":196243,"line_start":1741,"line_end":1741,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":196464,"byte_end":196467,"line_start":1749,"line_end":1749,"column_start":1,"column_end":4}},{"value":"/ If you need to avoid [`UnwindContext`] from allocating memory, e.g. for signal safety,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":196468,"byte_end":196558,"line_start":1750,"line_end":1750,"column_start":1,"column_end":91}},{"value":"/ you can provide you own storage specification:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":196559,"byte_end":196609,"line_start":1751,"line_end":1751,"column_start":1,"column_end":51}},{"value":"/ ```rust,no_run","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":196610,"byte_end":196628,"line_start":1752,"line_end":1752,"column_start":1,"column_end":19}},{"value":"/ # use gimli::*;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":196629,"byte_end":196648,"line_start":1753,"line_end":1753,"column_start":1,"column_end":20}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":196649,"byte_end":196654,"line_start":1754,"line_end":1754,"column_start":1,"column_end":6}},{"value":"/ # fn foo<'a>(some_fde: gimli::FrameDescriptionEntry<gimli::EndianSlice<'a, gimli::LittleEndian>>)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":196655,"byte_end":196756,"line_start":1755,"line_end":1755,"column_start":1,"column_end":102}},{"value":"/ #            -> gimli::Result<()> {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":196757,"byte_end":196796,"line_start":1756,"line_end":1756,"column_start":1,"column_end":40}},{"value":"/ # let eh_frame: gimli::EhFrame<_> = unreachable!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":196797,"byte_end":196852,"line_start":1757,"line_end":1757,"column_start":1,"column_end":56}},{"value":"/ # let bases = unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":196853,"byte_end":196888,"line_start":1758,"line_end":1758,"column_start":1,"column_end":36}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":196889,"byte_end":196894,"line_start":1759,"line_end":1759,"column_start":1,"column_end":6}},{"value":"/ struct StoreOnStack;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":196895,"byte_end":196919,"line_start":1760,"line_end":1760,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":196920,"byte_end":196923,"line_start":1761,"line_end":1761,"column_start":1,"column_end":4}},{"value":"/ impl<R: Reader> UnwindContextStorage<R> for StoreOnStack {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":196924,"byte_end":196986,"line_start":1762,"line_end":1762,"column_start":1,"column_end":63}},{"value":"/     type Rules = [(Register, RegisterRule<R>); 192];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":196987,"byte_end":197043,"line_start":1763,"line_end":1763,"column_start":1,"column_end":57}},{"value":"/     type Stack = [UnwindTableRow<R, Self>; 4];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197044,"byte_end":197094,"line_start":1764,"line_end":1764,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197095,"byte_end":197100,"line_start":1765,"line_end":1765,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197101,"byte_end":197104,"line_start":1766,"line_end":1766,"column_start":1,"column_end":4}},{"value":"/ let mut ctx = UnwindContext::<_, StoreOnStack>::new_in();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197105,"byte_end":197166,"line_start":1767,"line_end":1767,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197167,"byte_end":197170,"line_start":1768,"line_end":1768,"column_start":1,"column_end":4}},{"value":"/ // Initialize the context by evaluating the CIE's initial instruction program,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197171,"byte_end":197253,"line_start":1769,"line_end":1769,"column_start":1,"column_end":83}},{"value":"/ // and generate the unwind table.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197254,"byte_end":197291,"line_start":1770,"line_end":1770,"column_start":1,"column_end":38}},{"value":"/ let mut table = some_fde.rows(&eh_frame, &bases, &mut ctx)?;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197292,"byte_end":197356,"line_start":1771,"line_end":1771,"column_start":1,"column_end":65}},{"value":"/ while let Some(row) = table.next_row()? {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197357,"byte_end":197402,"line_start":1772,"line_end":1772,"column_start":1,"column_end":46}},{"value":"/     // Do stuff with each row...","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197403,"byte_end":197439,"line_start":1773,"line_end":1773,"column_start":1,"column_end":37}},{"value":"/ #   let _ = row;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197440,"byte_end":197460,"line_start":1774,"line_end":1774,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197461,"byte_end":197466,"line_start":1775,"line_end":1775,"column_start":1,"column_end":6}},{"value":"/ # unreachable!()","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197467,"byte_end":197487,"line_start":1776,"line_end":1776,"column_start":1,"column_end":21}},{"value":"/ # }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197488,"byte_end":197495,"line_start":1777,"line_end":1777,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197496,"byte_end":197503,"line_start":1778,"line_end":1778,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":594},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197690,"byte_end":197695,"line_start":1783,"line_end":1783,"column_start":10,"column_end":15},"name":"Rules","qualname":"::read::cfi::UnwindContextStorage::Rules","value":"type Rules: ArrayLike<Item = (Register, RegisterRule<R>)>;","parent":{"krate":0,"index":592},"children":[],"decl_id":null,"docs":" The storage used for register rules in a unwind table row.","sig":null,"attributes":[{"value":"/ The storage used for register rules in a unwind table row.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197559,"byte_end":197621,"line_start":1780,"line_end":1780,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197626,"byte_end":197629,"line_start":1781,"line_end":1781,"column_start":5,"column_end":8}},{"value":"/ Note that this is nested within the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197634,"byte_end":197680,"line_start":1782,"line_end":1782,"column_start":5,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":595},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197807,"byte_end":197812,"line_start":1786,"line_end":1786,"column_start":10,"column_end":15},"name":"Stack","qualname":"::read::cfi::UnwindContextStorage::Stack","value":"type Stack: ArrayLike<Item = UnwindTableRow<R, Self>>;","parent":{"krate":0,"index":592},"children":[],"decl_id":null,"docs":" The storage used for unwind table row stack.\n","sig":null,"attributes":[{"value":"/ The storage used for unwind table row stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197749,"byte_end":197797,"line_start":1785,"line_end":1785,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":6539},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":199141,"byte_end":199154,"line_start":1825,"line_end":1825,"column_start":12,"column_end":25},"name":"UnwindContext","qualname":"::read::cfi::UnwindContext","value":"UnwindContext {  }","parent":null,"children":[{"krate":0,"index":6542},{"krate":0,"index":6543},{"krate":0,"index":6544}],"decl_id":null,"docs":" Common context needed when evaluating the call frame unwinding information.","sig":null,"attributes":[{"value":"/ Common context needed when evaluating the call frame unwinding information.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":198108,"byte_end":198187,"line_start":1798,"line_end":1798,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":198188,"byte_end":198191,"line_start":1799,"line_end":1799,"column_start":1,"column_end":4}},{"value":"/ This structure can be large so it is advisable to place it on the heap.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":198192,"byte_end":198267,"line_start":1800,"line_end":1800,"column_start":1,"column_end":76}},{"value":"/ To avoid re-allocating the context multiple times when evaluating multiple","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":198268,"byte_end":198346,"line_start":1801,"line_end":1801,"column_start":1,"column_end":79}},{"value":"/ CFI programs, it can be reused.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":198347,"byte_end":198382,"line_start":1802,"line_end":1802,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":198383,"byte_end":198386,"line_start":1803,"line_end":1803,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":198387,"byte_end":198394,"line_start":1804,"line_end":1804,"column_start":1,"column_end":8}},{"value":"/ use gimli::{UnwindContext, UnwindTable};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":198395,"byte_end":198439,"line_start":1805,"line_end":1805,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":198440,"byte_end":198443,"line_start":1806,"line_end":1806,"column_start":1,"column_end":4}},{"value":"/ # fn foo<'a>(some_fde: gimli::FrameDescriptionEntry<gimli::EndianSlice<'a, gimli::LittleEndian>>)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":198444,"byte_end":198545,"line_start":1807,"line_end":1807,"column_start":1,"column_end":102}},{"value":"/ #            -> gimli::Result<()> {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":198546,"byte_end":198585,"line_start":1808,"line_end":1808,"column_start":1,"column_end":40}},{"value":"/ # let eh_frame: gimli::EhFrame<_> = unreachable!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":198586,"byte_end":198641,"line_start":1809,"line_end":1809,"column_start":1,"column_end":56}},{"value":"/ # let bases = unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":198642,"byte_end":198677,"line_start":1810,"line_end":1810,"column_start":1,"column_end":36}},{"value":"/ // An uninitialized context.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":198678,"byte_end":198710,"line_start":1811,"line_end":1811,"column_start":1,"column_end":33}},{"value":"/ let mut ctx = Box::new(UnwindContext::new());","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":198711,"byte_end":198760,"line_start":1812,"line_end":1812,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":198761,"byte_end":198764,"line_start":1813,"line_end":1813,"column_start":1,"column_end":4}},{"value":"/ // Initialize the context by evaluating the CIE's initial instruction program,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":198765,"byte_end":198847,"line_start":1814,"line_end":1814,"column_start":1,"column_end":83}},{"value":"/ // and generate the unwind table.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":198848,"byte_end":198885,"line_start":1815,"line_end":1815,"column_start":1,"column_end":38}},{"value":"/ let mut table = some_fde.rows(&eh_frame, &bases, &mut ctx)?;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":198886,"byte_end":198950,"line_start":1816,"line_end":1816,"column_start":1,"column_end":65}},{"value":"/ while let Some(row) = table.next_row()? {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":198951,"byte_end":198996,"line_start":1817,"line_end":1817,"column_start":1,"column_end":46}},{"value":"/     // Do stuff with each row...","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":198997,"byte_end":199033,"line_start":1818,"line_end":1818,"column_start":1,"column_end":37}},{"value":"/ #   let _ = row;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":199034,"byte_end":199054,"line_start":1819,"line_end":1819,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":199055,"byte_end":199060,"line_start":1820,"line_end":1820,"column_start":1,"column_end":6}},{"value":"/ # unreachable!()","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":199061,"byte_end":199081,"line_start":1821,"line_end":1821,"column_start":1,"column_end":21}},{"value":"/ # }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":199082,"byte_end":199089,"line_start":1822,"line_end":1822,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":199090,"byte_end":199097,"line_start":1823,"line_end":1823,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":200740,"byte_end":200743,"line_start":1863,"line_end":1863,"column_start":12,"column_end":15},"name":"new","qualname":"<UnwindContext<R>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new call frame unwinding context.\n","sig":null,"attributes":[{"value":"/ Construct a new call frame unwinding context.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":200679,"byte_end":200728,"line_start":1862,"line_end":1862,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":201103,"byte_end":201109,"line_start":1874,"line_end":1874,"column_start":12,"column_end":18},"name":"new_in","qualname":"<UnwindContext<R, A>>::new_in","value":"pub fn new_in() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new call frame unwinding context.\n","sig":null,"attributes":[{"value":"/ Construct a new call frame unwinding context.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":201042,"byte_end":201091,"line_start":1873,"line_end":1873,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":6564},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":207235,"byte_end":207246,"line_start":2048,"line_end":2048,"column_start":12,"column_end":23},"name":"UnwindTable","qualname":"::read::cfi::UnwindTable","value":"UnwindTable {  }","parent":null,"children":[{"krate":0,"index":6569},{"krate":0,"index":6570},{"krate":0,"index":6571},{"krate":0,"index":6572},{"krate":0,"index":6573},{"krate":0,"index":6574},{"krate":0,"index":6575},{"krate":0,"index":6576}],"decl_id":null,"docs":" The `UnwindTable` iteratively evaluates a `FrameDescriptionEntry`'s\n `CallFrameInstruction` program, yielding the each row one at a time.","sig":null,"attributes":[{"value":"/ The `UnwindTable` iteratively evaluates a `FrameDescriptionEntry`'s","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":204528,"byte_end":204599,"line_start":1991,"line_end":1991,"column_start":1,"column_end":72}},{"value":"/ `CallFrameInstruction` program, yielding the each row one at a time.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":204600,"byte_end":204672,"line_start":1992,"line_end":1992,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":204673,"byte_end":204676,"line_start":1993,"line_end":1993,"column_start":1,"column_end":4}},{"value":"/ > 6.4.1 Structure of Call Frame Information","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":204677,"byte_end":204724,"line_start":1994,"line_end":1994,"column_start":1,"column_end":48}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":204725,"byte_end":204730,"line_start":1995,"line_end":1995,"column_start":1,"column_end":6}},{"value":"/ > DWARF supports virtual unwinding by defining an architecture independent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":204731,"byte_end":204809,"line_start":1996,"line_end":1996,"column_start":1,"column_end":79}},{"value":"/ > basis for recording how procedures save and restore registers during their","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":204810,"byte_end":204890,"line_start":1997,"line_end":1997,"column_start":1,"column_end":81}},{"value":"/ > lifetimes. This basis must be augmented on some machines with specific","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":204891,"byte_end":204967,"line_start":1998,"line_end":1998,"column_start":1,"column_end":77}},{"value":"/ > information that is defined by an architecture specific ABI authoring","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":204968,"byte_end":205043,"line_start":1999,"line_end":1999,"column_start":1,"column_end":76}},{"value":"/ > committee, a hardware vendor, or a compiler producer. The body defining a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205044,"byte_end":205123,"line_start":2000,"line_end":2000,"column_start":1,"column_end":80}},{"value":"/ > specific augmentation is referred to below as the “augmenter.”","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205124,"byte_end":205196,"line_start":2001,"line_end":2001,"column_start":1,"column_end":69}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205197,"byte_end":205202,"line_start":2002,"line_end":2002,"column_start":1,"column_end":6}},{"value":"/ > Abstractly, this mechanism describes a very large table that has the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205203,"byte_end":205277,"line_start":2003,"line_end":2003,"column_start":1,"column_end":75}},{"value":"/ > following structure:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205278,"byte_end":205304,"line_start":2004,"line_end":2004,"column_start":1,"column_end":27}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205305,"byte_end":205310,"line_start":2005,"line_end":2005,"column_start":1,"column_end":6}},{"value":"/ > <table>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205311,"byte_end":205324,"line_start":2006,"line_end":2006,"column_start":1,"column_end":14}},{"value":"/ >   <tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205325,"byte_end":205337,"line_start":2007,"line_end":2007,"column_start":1,"column_end":13}},{"value":"/ >     <th>LOC</th><th>CFA</th><th>R0</th><th>R1</th><td>...</td><th>RN</th>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205338,"byte_end":205417,"line_start":2008,"line_end":2008,"column_start":1,"column_end":80}},{"value":"/ >   </tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205418,"byte_end":205431,"line_start":2009,"line_end":2009,"column_start":1,"column_end":14}},{"value":"/ >   <tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205432,"byte_end":205444,"line_start":2010,"line_end":2010,"column_start":1,"column_end":13}},{"value":"/ >     <th>L0</th> <td></td>   <td></td>  <td></td>  <td></td>   <td></td>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205445,"byte_end":205522,"line_start":2011,"line_end":2011,"column_start":1,"column_end":78}},{"value":"/ >   </tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205523,"byte_end":205536,"line_start":2012,"line_end":2012,"column_start":1,"column_end":14}},{"value":"/ >   <tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205537,"byte_end":205549,"line_start":2013,"line_end":2013,"column_start":1,"column_end":13}},{"value":"/ >     <th>L1</th> <td></td>   <td></td>  <td></td>  <td></td>   <td></td>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205550,"byte_end":205627,"line_start":2014,"line_end":2014,"column_start":1,"column_end":78}},{"value":"/ >   </tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205628,"byte_end":205641,"line_start":2015,"line_end":2015,"column_start":1,"column_end":14}},{"value":"/ >   <tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205642,"byte_end":205654,"line_start":2016,"line_end":2016,"column_start":1,"column_end":13}},{"value":"/ >     <td>...</td><td></td>   <td></td>  <td></td>  <td></td>   <td></td>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205655,"byte_end":205732,"line_start":2017,"line_end":2017,"column_start":1,"column_end":78}},{"value":"/ >   </tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205733,"byte_end":205746,"line_start":2018,"line_end":2018,"column_start":1,"column_end":14}},{"value":"/ >   <tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205747,"byte_end":205759,"line_start":2019,"line_end":2019,"column_start":1,"column_end":13}},{"value":"/ >     <th>LN</th> <td></td>   <td></td>  <td></td>  <td></td>   <td></td>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205760,"byte_end":205837,"line_start":2020,"line_end":2020,"column_start":1,"column_end":78}},{"value":"/ >   </tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205838,"byte_end":205851,"line_start":2021,"line_end":2021,"column_start":1,"column_end":14}},{"value":"/ > </table>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205852,"byte_end":205866,"line_start":2022,"line_end":2022,"column_start":1,"column_end":15}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205867,"byte_end":205872,"line_start":2023,"line_end":2023,"column_start":1,"column_end":6}},{"value":"/ > The first column indicates an address for every location that contains code","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205873,"byte_end":205954,"line_start":2024,"line_end":2024,"column_start":1,"column_end":82}},{"value":"/ > in a program. (In shared objects, this is an object-relative offset.) The","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":205955,"byte_end":206034,"line_start":2025,"line_end":2025,"column_start":1,"column_end":80}},{"value":"/ > remaining columns contain virtual unwinding rules that are associated with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":206035,"byte_end":206115,"line_start":2026,"line_end":2026,"column_start":1,"column_end":81}},{"value":"/ > the indicated location.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":206116,"byte_end":206145,"line_start":2027,"line_end":2027,"column_start":1,"column_end":30}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":206146,"byte_end":206151,"line_start":2028,"line_end":2028,"column_start":1,"column_end":6}},{"value":"/ > The CFA column defines the rule which computes the Canonical Frame Address","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":206152,"byte_end":206232,"line_start":2029,"line_end":2029,"column_start":1,"column_end":81}},{"value":"/ > value; it may be either a register and a signed offset that are added","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":206233,"byte_end":206308,"line_start":2030,"line_end":2030,"column_start":1,"column_end":76}},{"value":"/ > together, or a DWARF expression that is evaluated.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":206309,"byte_end":206365,"line_start":2031,"line_end":2031,"column_start":1,"column_end":57}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":206366,"byte_end":206371,"line_start":2032,"line_end":2032,"column_start":1,"column_end":6}},{"value":"/ > The remaining columns are labeled by register number. This includes some","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":206372,"byte_end":206450,"line_start":2033,"line_end":2033,"column_start":1,"column_end":79}},{"value":"/ > registers that have special designation on some architectures such as the PC","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":206451,"byte_end":206533,"line_start":2034,"line_end":2034,"column_start":1,"column_end":83}},{"value":"/ > and the stack pointer register. (The actual mapping of registers for a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":206534,"byte_end":206610,"line_start":2035,"line_end":2035,"column_start":1,"column_end":77}},{"value":"/ > particular architecture is defined by the augmenter.) The register columns","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":206611,"byte_end":206691,"line_start":2036,"line_end":2036,"column_start":1,"column_end":81}},{"value":"/ > contain rules that describe whether a given register has been saved and the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":206692,"byte_end":206773,"line_start":2037,"line_end":2037,"column_start":1,"column_end":82}},{"value":"/ > rule to find the value for the register in the previous frame.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":206774,"byte_end":206842,"line_start":2038,"line_end":2038,"column_start":1,"column_end":69}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":206843,"byte_end":206848,"line_start":2039,"line_end":2039,"column_start":1,"column_end":6}},{"value":"/ > ...","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":206849,"byte_end":206858,"line_start":2040,"line_end":2040,"column_start":1,"column_end":10}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":206859,"byte_end":206864,"line_start":2041,"line_end":2041,"column_start":1,"column_end":6}},{"value":"/ > This table would be extremely large if actually constructed as","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":206865,"byte_end":206933,"line_start":2042,"line_end":2042,"column_start":1,"column_end":69}},{"value":"/ > described. Most of the entries at any point in the table are identical to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":206934,"byte_end":207013,"line_start":2043,"line_end":2043,"column_start":1,"column_end":80}},{"value":"/ > the ones above them. The whole table can be represented quite compactly by","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":207014,"byte_end":207094,"line_start":2044,"line_end":2044,"column_start":1,"column_end":81}},{"value":"/ > recording just the differences starting at the beginning address of each","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":207095,"byte_end":207173,"line_start":2045,"line_end":2045,"column_start":1,"column_end":79}},{"value":"/ > subroutine in the program.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":207174,"byte_end":207206,"line_start":2046,"line_end":2046,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":207954,"byte_end":207957,"line_start":2066,"line_end":2066,"column_start":12,"column_end":15},"name":"new","qualname":"<UnwindTable>::new","value":"pub fn new<Section: UnwindSection<R>>(&'a Section, &'a BaseAddresses,\n                                      &'ctx mut UnwindContext<R, A>,\n                                      &FrameDescriptionEntry<R>)\n-> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `UnwindTable` for the given\n `FrameDescriptionEntry`'s CFI unwinding program.\n","sig":null,"attributes":[{"value":"/ Construct a new `UnwindTable` for the given","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":207838,"byte_end":207885,"line_start":2064,"line_end":2064,"column_start":5,"column_end":52}},{"value":"/ `FrameDescriptionEntry`'s CFI unwinding program.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":207890,"byte_end":207942,"line_start":2065,"line_end":2065,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":209926,"byte_end":209934,"line_start":2119,"line_end":2119,"column_start":12,"column_end":20},"name":"next_row","qualname":"<UnwindTable>::next_row","value":"pub fn next_row(&mut Self) -> Result<Option<&UnwindTableRow<R, A>>>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate call frame instructions until the next row of the table is\n completed, and return it.","sig":null,"attributes":[{"value":"/ Evaluate call frame instructions until the next row of the table is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":209670,"byte_end":209741,"line_start":2114,"line_end":2114,"column_start":5,"column_end":76}},{"value":"/ completed, and return it.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":209746,"byte_end":209775,"line_start":2115,"line_end":2115,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":209780,"byte_end":209783,"line_start":2116,"line_end":2116,"column_start":5,"column_end":8}},{"value":"/ Unfortunately, this cannot be used with `FallibleIterator` because of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":209788,"byte_end":209861,"line_start":2117,"line_end":2117,"column_start":5,"column_end":78}},{"value":"/ the restricted lifetime of the yielded item.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":209866,"byte_end":209914,"line_start":2118,"line_end":2118,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":211011,"byte_end":211027,"line_start":2152,"line_end":2152,"column_start":12,"column_end":28},"name":"into_current_row","qualname":"<UnwindTable>::into_current_row","value":"pub fn into_current_row(Self) -> Option<&'ctx UnwindTableRow<R, A>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current row with the lifetime of the context.\n","sig":null,"attributes":[{"value":"/ Returns the current row with the lifetime of the context.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":210938,"byte_end":210999,"line_start":2151,"line_end":2151,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":6583},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":222790,"byte_end":222806,"line_start":2487,"line_end":2487,"column_start":12,"column_end":28},"name":"RegisterRuleIter","qualname":"::read::cfi::RegisterRuleIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An unordered iterator for register rules.\n","sig":null,"attributes":[{"value":"/ An unordered iterator for register rules.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":222709,"byte_end":222754,"line_start":2485,"line_end":2485,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6596},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":223278,"byte_end":223292,"line_start":2502,"line_end":2502,"column_start":12,"column_end":26},"name":"UnwindTableRow","qualname":"::read::cfi::UnwindTableRow","value":"UnwindTableRow {  }","parent":null,"children":[{"krate":0,"index":6599},{"krate":0,"index":6600},{"krate":0,"index":6601},{"krate":0,"index":6602},{"krate":0,"index":6603}],"decl_id":null,"docs":" A row in the virtual unwind table that describes how to find the values of\n the registers in the *previous* frame for a range of PC addresses.\n","sig":null,"attributes":[{"value":"/ A row in the virtual unwind table that describes how to find the values of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":223092,"byte_end":223170,"line_start":2499,"line_end":2499,"column_start":1,"column_end":79}},{"value":"/ the registers in the *previous* frame for a range of PC addresses.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":223171,"byte_end":223241,"line_start":2500,"line_end":2500,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":224962,"byte_end":224975,"line_start":2555,"line_end":2555,"column_start":12,"column_end":25},"name":"start_address","qualname":"<UnwindTableRow<R, S>>::start_address","value":"pub fn start_address(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the starting PC address that this row applies to.\n","sig":null,"attributes":[{"value":"/ Get the starting PC address that this row applies to.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":224893,"byte_end":224950,"line_start":2554,"line_end":2554,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":225397,"byte_end":225408,"line_start":2566,"line_end":2566,"column_start":12,"column_end":23},"name":"end_address","qualname":"<UnwindTableRow<R, S>>::end_address","value":"pub fn end_address(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get the end PC address where this row's register rules become\n unapplicable.","sig":null,"attributes":[{"value":"/ Get the end PC address where this row's register rules become","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":225030,"byte_end":225095,"line_start":2559,"line_end":2559,"column_start":5,"column_end":70}},{"value":"/ unapplicable.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":225100,"byte_end":225117,"line_start":2560,"line_end":2560,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":225122,"byte_end":225125,"line_start":2561,"line_end":2561,"column_start":5,"column_end":8}},{"value":"/ In other words, this row describes how to recover the last frame's","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":225130,"byte_end":225200,"line_start":2562,"line_end":2562,"column_start":5,"column_end":75}},{"value":"/ registers for all PCs where `row.start_address() <= PC <","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":225205,"byte_end":225265,"line_start":2563,"line_end":2563,"column_start":5,"column_end":65}},{"value":"/ row.end_address()`. This row does NOT describe how to recover registers","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":225270,"byte_end":225345,"line_start":2564,"line_end":2564,"column_start":5,"column_end":80}},{"value":"/ when `PC == row.end_address()`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":225350,"byte_end":225385,"line_start":2565,"line_end":2565,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":225576,"byte_end":225584,"line_start":2572,"line_end":2572,"column_start":12,"column_end":20},"name":"contains","qualname":"<UnwindTableRow<R, S>>::contains","value":"pub fn contains(&Self, u64) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if the given `address` is within this row's address range,\n `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Return `true` if the given `address` is within this row's address range,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":225461,"byte_end":225537,"line_start":2570,"line_end":2570,"column_start":5,"column_end":81}},{"value":"/ `false` otherwise.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":225542,"byte_end":225564,"line_start":2571,"line_end":2571,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":225903,"byte_end":225918,"line_start":2580,"line_end":2580,"column_start":12,"column_end":27},"name":"saved_args_size","qualname":"<UnwindTableRow<R, S>>::saved_args_size","value":"pub fn saved_args_size(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the amount of args currently on the stack.","sig":null,"attributes":[{"value":"/ Returns the amount of args currently on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":225695,"byte_end":225749,"line_start":2576,"line_end":2576,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":225754,"byte_end":225757,"line_start":2577,"line_end":2577,"column_start":5,"column_end":8}},{"value":"/ When unwinding, if the personality function requested a change in IP,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":225762,"byte_end":225835,"line_start":2578,"line_end":2578,"column_start":5,"column_end":78}},{"value":"/ the SP needs to be adjusted by saved_args_size.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":225840,"byte_end":225891,"line_start":2579,"line_end":2579,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":226056,"byte_end":226059,"line_start":2585,"line_end":2585,"column_start":12,"column_end":15},"name":"cfa","qualname":"<UnwindTableRow<R, S>>::cfa","value":"pub fn cfa(&Self) -> &CfaRule<R>","parent":null,"children":[],"decl_id":null,"docs":" Get the canonical frame address (CFA) recovery rule for this row.\n","sig":null,"attributes":[{"value":"/ Get the canonical frame address (CFA) recovery rule for this row.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":225975,"byte_end":226044,"line_start":2584,"line_end":2584,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":229813,"byte_end":229821,"line_start":2633,"line_end":2633,"column_start":12,"column_end":20},"name":"register","qualname":"<UnwindTableRow<R, S>>::register","value":"pub fn register(&Self, Register) -> RegisterRule<R>","parent":null,"children":[],"decl_id":null,"docs":" Get the register recovery rule for the given register number.","sig":null,"attributes":[{"value":"/ Get the register recovery rule for the given register number.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":226113,"byte_end":226178,"line_start":2589,"line_end":2589,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":226183,"byte_end":226186,"line_start":2590,"line_end":2590,"column_start":5,"column_end":8}},{"value":"/ The register number mapping is architecture dependent. For example, in","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":226191,"byte_end":226265,"line_start":2591,"line_end":2591,"column_start":5,"column_end":79}},{"value":"/ the x86-64 ABI the register number mapping is defined in Figure 3.36:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":226270,"byte_end":226343,"line_start":2592,"line_end":2592,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":226348,"byte_end":226351,"line_start":2593,"line_end":2593,"column_start":5,"column_end":8}},{"value":"/ > Figure 3.36: DWARF Register Number Mapping","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":226356,"byte_end":226404,"line_start":2594,"line_end":2594,"column_start":5,"column_end":53}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":226409,"byte_end":226414,"line_start":2595,"line_end":2595,"column_start":5,"column_end":10}},{"value":"/ > <table>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":226419,"byte_end":226432,"line_start":2596,"line_end":2596,"column_start":5,"column_end":18}},{"value":"/ >   <tr><th>Register Name</th>                    <th>Number</th>  <th>Abbreviation</th></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":226437,"byte_end":226534,"line_start":2597,"line_end":2597,"column_start":5,"column_end":102}},{"value":"/ >   <tr><td>General Purpose Register RAX</td>     <td>0</td>       <td>%rax</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":226539,"byte_end":226628,"line_start":2598,"line_end":2598,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>General Purpose Register RDX</td>     <td>1</td>       <td>%rdx</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":226633,"byte_end":226722,"line_start":2599,"line_end":2599,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>General Purpose Register RCX</td>     <td>2</td>       <td>%rcx</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":226727,"byte_end":226816,"line_start":2600,"line_end":2600,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>General Purpose Register RBX</td>     <td>3</td>       <td>%rbx</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":226821,"byte_end":226910,"line_start":2601,"line_end":2601,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>General Purpose Register RSI</td>     <td>4</td>       <td>%rsi</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":226915,"byte_end":227004,"line_start":2602,"line_end":2602,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>General Purpose Register RDI</td>     <td>5</td>       <td>%rdi</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":227009,"byte_end":227098,"line_start":2603,"line_end":2603,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>General Purpose Register RBP</td>     <td>6</td>       <td>%rbp</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":227103,"byte_end":227192,"line_start":2604,"line_end":2604,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>Stack Pointer Register RSP</td>       <td>7</td>       <td>%rsp</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":227197,"byte_end":227286,"line_start":2605,"line_end":2605,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>Extended Integer Registers 8-15</td>  <td>8-15</td>    <td>%r8-%r15</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":227291,"byte_end":227384,"line_start":2606,"line_end":2606,"column_start":5,"column_end":98}},{"value":"/ >   <tr><td>Return Address RA</td>                <td>16</td>      <td></td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":227389,"byte_end":227474,"line_start":2607,"line_end":2607,"column_start":5,"column_end":90}},{"value":"/ >   <tr><td>Vector Registers 0–7</td>             <td>17-24</td>   <td>%xmm0–%xmm7</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":227479,"byte_end":227579,"line_start":2608,"line_end":2608,"column_start":5,"column_end":101}},{"value":"/ >   <tr><td>Extended Vector Registers 8–15</td>   <td>25-32</td>   <td>%xmm8–%xmm15</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":227584,"byte_end":227685,"line_start":2609,"line_end":2609,"column_start":5,"column_end":102}},{"value":"/ >   <tr><td>Floating Point Registers 0–7</td>     <td>33-40</td>   <td>%st0–%st7</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":227690,"byte_end":227788,"line_start":2610,"line_end":2610,"column_start":5,"column_end":99}},{"value":"/ >   <tr><td>MMX Registers 0–7</td>                <td>41-48</td>   <td>%mm0–%mm7</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":227793,"byte_end":227891,"line_start":2611,"line_end":2611,"column_start":5,"column_end":99}},{"value":"/ >   <tr><td>Flag Register</td>                    <td>49</td>      <td>%rFLAGS</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":227896,"byte_end":227988,"line_start":2612,"line_end":2612,"column_start":5,"column_end":97}},{"value":"/ >   <tr><td>Segment Register ES</td>              <td>50</td>      <td>%es</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":227993,"byte_end":228081,"line_start":2613,"line_end":2613,"column_start":5,"column_end":93}},{"value":"/ >   <tr><td>Segment Register CS</td>              <td>51</td>      <td>%cs</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":228086,"byte_end":228174,"line_start":2614,"line_end":2614,"column_start":5,"column_end":93}},{"value":"/ >   <tr><td>Segment Register SS</td>              <td>52</td>      <td>%ss</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":228179,"byte_end":228267,"line_start":2615,"line_end":2615,"column_start":5,"column_end":93}},{"value":"/ >   <tr><td>Segment Register DS</td>              <td>53</td>      <td>%ds</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":228272,"byte_end":228360,"line_start":2616,"line_end":2616,"column_start":5,"column_end":93}},{"value":"/ >   <tr><td>Segment Register FS</td>              <td>54</td>      <td>%fs</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":228365,"byte_end":228453,"line_start":2617,"line_end":2617,"column_start":5,"column_end":93}},{"value":"/ >   <tr><td>Segment Register GS</td>              <td>55</td>      <td>%gs</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":228458,"byte_end":228546,"line_start":2618,"line_end":2618,"column_start":5,"column_end":93}},{"value":"/ >   <tr><td>Reserved</td>                         <td>56-57</td>   <td></td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":228551,"byte_end":228636,"line_start":2619,"line_end":2619,"column_start":5,"column_end":90}},{"value":"/ >   <tr><td>FS Base address</td>                  <td>58</td>      <td>%fs.base</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":228641,"byte_end":228734,"line_start":2620,"line_end":2620,"column_start":5,"column_end":98}},{"value":"/ >   <tr><td>GS Base address</td>                  <td>59</td>      <td>%gs.base</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":228739,"byte_end":228832,"line_start":2621,"line_end":2621,"column_start":5,"column_end":98}},{"value":"/ >   <tr><td>Reserved</td>                         <td>60-61</td>   <td></td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":228837,"byte_end":228922,"line_start":2622,"line_end":2622,"column_start":5,"column_end":90}},{"value":"/ >   <tr><td>Task Register</td>                    <td>62</td>      <td>%tr</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":228927,"byte_end":229015,"line_start":2623,"line_end":2623,"column_start":5,"column_end":93}},{"value":"/ >   <tr><td>LDT Register</td>                     <td>63</td>      <td>%ldtr</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":229020,"byte_end":229110,"line_start":2624,"line_end":2624,"column_start":5,"column_end":95}},{"value":"/ >   <tr><td>128-bit Media Control and Status</td> <td>64</td>      <td>%mxcsr</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":229115,"byte_end":229206,"line_start":2625,"line_end":2625,"column_start":5,"column_end":96}},{"value":"/ >   <tr><td>x87 Control Word</td>                 <td>65</td>      <td>%fcw</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":229211,"byte_end":229300,"line_start":2626,"line_end":2626,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>x87 Status Word</td>                  <td>66</td>      <td>%fsw</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":229305,"byte_end":229394,"line_start":2627,"line_end":2627,"column_start":5,"column_end":94}},{"value":"/ >   <tr><td>Upper Vector Registers 16–31</td>     <td>67-82</td>   <td>%xmm16–%xmm31</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":229399,"byte_end":229501,"line_start":2628,"line_end":2628,"column_start":5,"column_end":103}},{"value":"/ >   <tr><td>Reserved</td>                         <td>83-117</td>  <td></td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":229506,"byte_end":229591,"line_start":2629,"line_end":2629,"column_start":5,"column_end":90}},{"value":"/ >   <tr><td>Vector Mask Registers 0–7</td>        <td>118-125</td> <td>%k0–%k7</td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":229596,"byte_end":229692,"line_start":2630,"line_end":2630,"column_start":5,"column_end":97}},{"value":"/ >   <tr><td>Reserved</td>                         <td>126-129</td> <td></td></tr>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":229697,"byte_end":229782,"line_start":2631,"line_end":2631,"column_start":5,"column_end":90}},{"value":"/ > </table>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":229787,"byte_end":229801,"line_start":2632,"line_end":2632,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":230533,"byte_end":230542,"line_start":2652,"line_end":2652,"column_start":12,"column_end":21},"name":"registers","qualname":"<UnwindTableRow<R, S>>::registers","value":"pub fn registers(&Self) -> RegisterRuleIter<, R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all defined register `(number, rule)` pairs.","sig":null,"attributes":[{"value":"/ Iterate over all defined register `(number, rule)` pairs.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":229918,"byte_end":229979,"line_start":2637,"line_end":2637,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":229984,"byte_end":229987,"line_start":2638,"line_end":2638,"column_start":5,"column_end":8}},{"value":"/ The rules are not iterated in any guaranteed order. Any register that","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":229992,"byte_end":230065,"line_start":2639,"line_end":2639,"column_start":5,"column_end":78}},{"value":"/ does not make an appearance in the iterator implicitly has the rule","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":230070,"byte_end":230141,"line_start":2640,"line_end":2640,"column_start":5,"column_end":76}},{"value":"/ `RegisterRule::Undefined`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":230146,"byte_end":230176,"line_start":2641,"line_end":2641,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":230181,"byte_end":230184,"line_start":2642,"line_end":2642,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":230189,"byte_end":230196,"line_start":2643,"line_end":2643,"column_start":5,"column_end":12}},{"value":"/ # use gimli::{EndianSlice, LittleEndian, UnwindTableRow};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":230201,"byte_end":230262,"line_start":2644,"line_end":2644,"column_start":5,"column_end":66}},{"value":"/ # fn foo<'input>(unwind_table_row: UnwindTableRow<EndianSlice<'input, LittleEndian>>) {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":230267,"byte_end":230358,"line_start":2645,"line_end":2645,"column_start":5,"column_end":96}},{"value":"/ for &(register, ref rule) in unwind_table_row.registers() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":230363,"byte_end":230426,"line_start":2646,"line_end":2646,"column_start":5,"column_end":68}},{"value":"/     // ...","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":230431,"byte_end":230445,"line_start":2647,"line_end":2647,"column_start":5,"column_end":19}},{"value":"/     # drop(register); drop(rule);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":230450,"byte_end":230487,"line_start":2648,"line_end":2648,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":230492,"byte_end":230497,"line_start":2649,"line_end":2649,"column_start":5,"column_end":10}},{"value":"/ # }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":230502,"byte_end":230509,"line_start":2650,"line_end":2650,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":230514,"byte_end":230521,"line_start":2651,"line_end":2651,"column_start":5,"column_end":12}}]},{"kind":"StructVariant","id":{"krate":0,"index":6621},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":230806,"byte_end":230823,"line_start":2661,"line_end":2661,"column_start":5,"column_end":22},"name":"RegisterAndOffset","qualname":"::read::cfi::CfaRule::RegisterAndOffset","value":"CfaRule::RegisterAndOffset { register, offset }","parent":{"krate":0,"index":6619},"children":[],"decl_id":null,"docs":" The CFA is given offset from the given register's value.\n","sig":null,"attributes":[{"value":"/ The CFA is given offset from the given register's value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":230741,"byte_end":230801,"line_start":2660,"line_end":2660,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6624},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":231088,"byte_end":231098,"line_start":2669,"line_end":2669,"column_start":5,"column_end":15},"name":"Expression","qualname":"::read::cfi::CfaRule::Expression","value":"CfaRule::Expression(Expression<R>)","parent":{"krate":0,"index":6619},"children":[],"decl_id":null,"docs":" The CFA is obtained by evaluating this `Reader` as a DWARF expression\n program.\n","sig":null,"attributes":[{"value":"/ The CFA is obtained by evaluating this `Reader` as a DWARF expression","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":230993,"byte_end":231066,"line_start":2667,"line_end":2667,"column_start":5,"column_end":78}},{"value":"/ program.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":231071,"byte_end":231083,"line_start":2668,"line_end":2668,"column_start":5,"column_end":17}}]},{"kind":"Enum","id":{"krate":0,"index":6619},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":230716,"byte_end":230723,"line_start":2659,"line_end":2659,"column_start":10,"column_end":17},"name":"CfaRule","qualname":"::read::cfi::CfaRule","value":"pub enum CfaRule<R: Reader> {\n    RegisterAndOffset {\n        register: Register,\n        offset: i64,\n    },\n    Expression(Expression<R>),\n}","parent":null,"children":[{"krate":0,"index":6621},{"krate":0,"index":6624}],"decl_id":null,"docs":" The canonical frame address (CFA) recovery rules.\n","sig":null,"attributes":[{"value":"/ The canonical frame address (CFA) recovery rules.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":230614,"byte_end":230667,"line_start":2657,"line_end":2657,"column_start":1,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6646},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":232062,"byte_end":232071,"line_start":2702,"line_end":2702,"column_start":5,"column_end":14},"name":"Undefined","qualname":"::read::cfi::RegisterRule::Undefined","value":"RegisterRule::Undefined","parent":{"krate":0,"index":6644},"children":[],"decl_id":null,"docs":" > A register that has this rule has no recoverable value in the previous\n > frame. (By convention, it is not preserved by a callee.)\n","sig":null,"attributes":[{"value":"/ > A register that has this rule has no recoverable value in the previous","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":231914,"byte_end":231990,"line_start":2700,"line_end":2700,"column_start":5,"column_end":81}},{"value":"/ > frame. (By convention, it is not preserved by a callee.)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":231995,"byte_end":232057,"line_start":2701,"line_end":2701,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6648},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":232253,"byte_end":232262,"line_start":2707,"line_end":2707,"column_start":5,"column_end":14},"name":"SameValue","qualname":"::read::cfi::RegisterRule::SameValue","value":"RegisterRule::SameValue","parent":{"krate":0,"index":6644},"children":[],"decl_id":null,"docs":" > This register has not been modified from the previous frame. (By\n > convention, it is preserved by the callee, but the callee has not\n > modified it.)\n","sig":null,"attributes":[{"value":"/ > This register has not been modified from the previous frame. (By","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":232078,"byte_end":232148,"line_start":2704,"line_end":2704,"column_start":5,"column_end":75}},{"value":"/ > convention, it is preserved by the callee, but the callee has not","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":232153,"byte_end":232224,"line_start":2705,"line_end":2705,"column_start":5,"column_end":76}},{"value":"/ > modified it.)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":232229,"byte_end":232248,"line_start":2706,"line_end":2706,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6650},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":232414,"byte_end":232420,"line_start":2711,"line_end":2711,"column_start":5,"column_end":11},"name":"Offset","qualname":"::read::cfi::RegisterRule::Offset","value":"RegisterRule::Offset(i64)","parent":{"krate":0,"index":6644},"children":[],"decl_id":null,"docs":" \"The previous value of this register is saved at the address CFA+N where\n CFA is the current CFA value and N is a signed offset.\"\n","sig":null,"attributes":[{"value":"/ \"The previous value of this register is saved at the address CFA+N where","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":232269,"byte_end":232345,"line_start":2709,"line_end":2709,"column_start":5,"column_end":81}},{"value":"/ CFA is the current CFA value and N is a signed offset.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":232350,"byte_end":232409,"line_start":2710,"line_end":2710,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6653},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":232566,"byte_end":232575,"line_start":2715,"line_end":2715,"column_start":5,"column_end":14},"name":"ValOffset","qualname":"::read::cfi::RegisterRule::ValOffset","value":"RegisterRule::ValOffset(i64)","parent":{"krate":0,"index":6644},"children":[],"decl_id":null,"docs":" \"The previous value of this register is the value CFA+N where CFA is the\n current CFA value and N is a signed offset.\"\n","sig":null,"attributes":[{"value":"/ \"The previous value of this register is the value CFA+N where CFA is the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":232432,"byte_end":232508,"line_start":2713,"line_end":2713,"column_start":5,"column_end":81}},{"value":"/ current CFA value and N is a signed offset.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":232513,"byte_end":232561,"line_start":2714,"line_end":2714,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6656},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":232683,"byte_end":232691,"line_start":2719,"line_end":2719,"column_start":5,"column_end":13},"name":"Register","qualname":"::read::cfi::RegisterRule::Register","value":"RegisterRule::Register(Register)","parent":{"krate":0,"index":6644},"children":[],"decl_id":null,"docs":" \"The previous value of this register is stored in another register\n numbered R.\"\n","sig":null,"attributes":[{"value":"/ \"The previous value of this register is stored in another register","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":232587,"byte_end":232657,"line_start":2717,"line_end":2717,"column_start":5,"column_end":75}},{"value":"/ numbered R.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":232662,"byte_end":232678,"line_start":2718,"line_end":2718,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6659},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":232832,"byte_end":232842,"line_start":2723,"line_end":2723,"column_start":5,"column_end":15},"name":"Expression","qualname":"::read::cfi::RegisterRule::Expression","value":"RegisterRule::Expression(Expression<R>)","parent":{"krate":0,"index":6644},"children":[],"decl_id":null,"docs":" \"The previous value of this register is located at the address produced\n by executing the DWARF expression.\"\n","sig":null,"attributes":[{"value":"/ \"The previous value of this register is located at the address produced","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":232708,"byte_end":232783,"line_start":2721,"line_end":2721,"column_start":5,"column_end":80}},{"value":"/ by executing the DWARF expression.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":232788,"byte_end":232827,"line_start":2722,"line_end":2722,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6662},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":232975,"byte_end":232988,"line_start":2727,"line_end":2727,"column_start":5,"column_end":18},"name":"ValExpression","qualname":"::read::cfi::RegisterRule::ValExpression","value":"RegisterRule::ValExpression(Expression<R>)","parent":{"krate":0,"index":6644},"children":[],"decl_id":null,"docs":" \"The previous value of this register is the value produced by executing\n the DWARF expression.\"\n","sig":null,"attributes":[{"value":"/ \"The previous value of this register is the value produced by executing","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":232864,"byte_end":232939,"line_start":2725,"line_end":2725,"column_start":5,"column_end":80}},{"value":"/ the DWARF expression.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":232944,"byte_end":232970,"line_start":2726,"line_end":2726,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6665},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":233091,"byte_end":233104,"line_start":2730,"line_end":2730,"column_start":5,"column_end":18},"name":"Architectural","qualname":"::read::cfi::RegisterRule::Architectural","value":"RegisterRule::Architectural","parent":{"krate":0,"index":6644},"children":[],"decl_id":null,"docs":" \"The rule is defined externally to this specification by the augmenter.\"\n","sig":null,"attributes":[{"value":"/ \"The rule is defined externally to this specification by the augmenter.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":233010,"byte_end":233086,"line_start":2729,"line_end":2729,"column_start":5,"column_end":81}}]},{"kind":"Enum","id":{"krate":0,"index":6644},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":231884,"byte_end":231896,"line_start":2699,"line_end":2699,"column_start":10,"column_end":22},"name":"RegisterRule","qualname":"::read::cfi::RegisterRule","value":"pub enum RegisterRule<R: Reader> {\n    Undefined,\n    SameValue,\n    Offset(i64),\n    ValOffset(i64),\n    Register(Register),\n    Expression(Expression<R>),\n    ValExpression(Expression<R>),\n    Architectural,\n}","parent":null,"children":[{"krate":0,"index":6646},{"krate":0,"index":6648},{"krate":0,"index":6650},{"krate":0,"index":6653},{"krate":0,"index":6656},{"krate":0,"index":6659},{"krate":0,"index":6662},{"krate":0,"index":6665}],"decl_id":null,"docs":" An entry in the abstract CFI table that describes how to find the value of a\n register.","sig":null,"attributes":[{"value":"/ An entry in the abstract CFI table that describes how to find the value of a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":231563,"byte_end":231643,"line_start":2692,"line_end":2692,"column_start":1,"column_end":81}},{"value":"/ register.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":231644,"byte_end":231657,"line_start":2693,"line_end":2693,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":231658,"byte_end":231661,"line_start":2694,"line_end":2694,"column_start":1,"column_end":4}},{"value":"/ \"The register columns contain rules that describe whether a given register","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":231662,"byte_end":231740,"line_start":2695,"line_end":2695,"column_start":1,"column_end":79}},{"value":"/ has been saved and the rule to find the value for the register in the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":231741,"byte_end":231814,"line_start":2696,"line_end":2696,"column_start":1,"column_end":74}},{"value":"/ previous frame.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":231815,"byte_end":231835,"line_start":2697,"line_end":2697,"column_start":1,"column_end":21}}]},{"kind":"StructVariant","id":{"krate":0,"index":6686},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":234010,"byte_end":234016,"line_start":2755,"line_end":2755,"column_start":5,"column_end":11},"name":"SetLoc","qualname":"::read::cfi::CallFrameInstruction::SetLoc","value":"CallFrameInstruction::SetLoc { address }","parent":{"krate":0,"index":6684},"children":[],"decl_id":null,"docs":" > 1. DW_CFA_set_loc\n >\n > The DW_CFA_set_loc instruction takes a single operand that represents\n > a target address. The required action is to create a new table row\n > using the specified address as the location. All other values in the\n > new row are initially identical to the current row. The new location\n > value is always greater than the current one. If the segment_size\n > field of this FDE's CIE is non- zero, the initial location is preceded\n > by a segment selector of the given length.\n","sig":null,"attributes":[{"value":"/ > 1. DW_CFA_set_loc","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":233447,"byte_end":233470,"line_start":2746,"line_end":2746,"column_start":5,"column_end":28}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":233475,"byte_end":233480,"line_start":2747,"line_end":2747,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_set_loc instruction takes a single operand that represents","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":233485,"byte_end":233560,"line_start":2748,"line_end":2748,"column_start":5,"column_end":80}},{"value":"/ > a target address. The required action is to create a new table row","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":233565,"byte_end":233637,"line_start":2749,"line_end":2749,"column_start":5,"column_end":77}},{"value":"/ > using the specified address as the location. All other values in the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":233642,"byte_end":233716,"line_start":2750,"line_end":2750,"column_start":5,"column_end":79}},{"value":"/ > new row are initially identical to the current row. The new location","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":233721,"byte_end":233795,"line_start":2751,"line_end":2751,"column_start":5,"column_end":79}},{"value":"/ > value is always greater than the current one. If the segment_size","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":233800,"byte_end":233871,"line_start":2752,"line_end":2752,"column_start":5,"column_end":76}},{"value":"/ > field of this FDE's CIE is non- zero, the initial location is preceded","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":233876,"byte_end":233952,"line_start":2753,"line_end":2753,"column_start":5,"column_end":81}},{"value":"/ > by a segment selector of the given length.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":233957,"byte_end":234005,"line_start":2754,"line_end":2754,"column_start":5,"column_end":53}}]},{"kind":"StructVariant","id":{"krate":0,"index":6688},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":234693,"byte_end":234703,"line_start":2771,"line_end":2771,"column_start":5,"column_end":15},"name":"AdvanceLoc","qualname":"::read::cfi::CallFrameInstruction::AdvanceLoc","value":"CallFrameInstruction::AdvanceLoc { delta }","parent":{"krate":0,"index":6684},"children":[],"decl_id":null,"docs":" The `AdvanceLoc` instruction is used for all of `DW_CFA_advance_loc` and\n `DW_CFA_advance_loc{1,2,4}`.","sig":null,"attributes":[{"value":"/ The `AdvanceLoc` instruction is used for all of `DW_CFA_advance_loc` and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":234085,"byte_end":234161,"line_start":2760,"line_end":2760,"column_start":5,"column_end":81}},{"value":"/ `DW_CFA_advance_loc{1,2,4}`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":234166,"byte_end":234198,"line_start":2761,"line_end":2761,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":234203,"byte_end":234206,"line_start":2762,"line_end":2762,"column_start":5,"column_end":8}},{"value":"/ > 2. DW_CFA_advance_loc","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":234211,"byte_end":234238,"line_start":2763,"line_end":2763,"column_start":5,"column_end":32}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":234243,"byte_end":234248,"line_start":2764,"line_end":2764,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_advance instruction takes a single operand (encoded with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":234253,"byte_end":234326,"line_start":2765,"line_end":2765,"column_start":5,"column_end":78}},{"value":"/ > the opcode) that represents a constant delta. The required action is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":234331,"byte_end":234405,"line_start":2766,"line_end":2766,"column_start":5,"column_end":79}},{"value":"/ > to create a new table row with a location value that is computed by","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":234410,"byte_end":234483,"line_start":2767,"line_end":2767,"column_start":5,"column_end":78}},{"value":"/ > taking the current entry’s location value and adding the value of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":234488,"byte_end":234561,"line_start":2768,"line_end":2768,"column_start":5,"column_end":76}},{"value":"/ > delta * code_alignment_factor. All other values in the new row are","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":234566,"byte_end":234638,"line_start":2769,"line_end":2769,"column_start":5,"column_end":77}},{"value":"/ > initially identical to the current row.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":234643,"byte_end":234688,"line_start":2770,"line_end":2770,"column_start":5,"column_end":50}}]},{"kind":"StructVariant","id":{"krate":0,"index":6690},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":235133,"byte_end":235139,"line_start":2783,"line_end":2783,"column_start":5,"column_end":11},"name":"DefCfa","qualname":"::read::cfi::CallFrameInstruction::DefCfa","value":"CallFrameInstruction::DefCfa { register, offset }","parent":{"krate":0,"index":6684},"children":[],"decl_id":null,"docs":" > 1. DW_CFA_def_cfa\n >\n > The DW_CFA_def_cfa instruction takes two unsigned LEB128 operands\n > representing a register number and a (non-factored) offset. The\n > required action is to define the current CFA rule to use the provided\n > register and offset.\n","sig":null,"attributes":[{"value":"/ > 1. DW_CFA_def_cfa","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":234834,"byte_end":234857,"line_start":2777,"line_end":2777,"column_start":5,"column_end":28}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":234862,"byte_end":234867,"line_start":2778,"line_end":2778,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_def_cfa instruction takes two unsigned LEB128 operands","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":234872,"byte_end":234943,"line_start":2779,"line_end":2779,"column_start":5,"column_end":76}},{"value":"/ > representing a register number and a (non-factored) offset. The","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":234948,"byte_end":235017,"line_start":2780,"line_end":2780,"column_start":5,"column_end":74}},{"value":"/ > required action is to define the current CFA rule to use the provided","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":235022,"byte_end":235097,"line_start":2781,"line_end":2781,"column_start":5,"column_end":80}},{"value":"/ > register and offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":235102,"byte_end":235128,"line_start":2782,"line_end":2782,"column_start":5,"column_end":31}}]},{"kind":"StructVariant","id":{"krate":0,"index":6693},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":235688,"byte_end":235696,"line_start":2797,"line_end":2797,"column_start":5,"column_end":13},"name":"DefCfaSf","qualname":"::read::cfi::CallFrameInstruction::DefCfaSf","value":"CallFrameInstruction::DefCfaSf { register, factored_offset }","parent":{"krate":0,"index":6684},"children":[],"decl_id":null,"docs":" > 2. DW_CFA_def_cfa_sf\n >\n > The DW_CFA_def_cfa_sf instruction takes two operands: an unsigned\n > LEB128 value representing a register number and a signed LEB128\n > factored offset. This instruction is identical to DW_CFA_def_cfa\n > except that the second operand is signed and factored. The resulting\n > offset is factored_offset * data_alignment_factor.\n","sig":null,"attributes":[{"value":"/ > 2. DW_CFA_def_cfa_sf","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":235282,"byte_end":235308,"line_start":2790,"line_end":2790,"column_start":5,"column_end":31}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":235313,"byte_end":235318,"line_start":2791,"line_end":2791,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_def_cfa_sf instruction takes two operands: an unsigned","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":235323,"byte_end":235394,"line_start":2792,"line_end":2792,"column_start":5,"column_end":76}},{"value":"/ > LEB128 value representing a register number and a signed LEB128","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":235399,"byte_end":235468,"line_start":2793,"line_end":2793,"column_start":5,"column_end":74}},{"value":"/ > factored offset. This instruction is identical to DW_CFA_def_cfa","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":235473,"byte_end":235543,"line_start":2794,"line_end":2794,"column_start":5,"column_end":75}},{"value":"/ > except that the second operand is signed and factored. The resulting","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":235548,"byte_end":235622,"line_start":2795,"line_end":2795,"column_start":5,"column_end":79}},{"value":"/ > offset is factored_offset * data_alignment_factor.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":235627,"byte_end":235683,"line_start":2796,"line_end":2796,"column_start":5,"column_end":61}}]},{"kind":"StructVariant","id":{"krate":0,"index":6696},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":236259,"byte_end":236273,"line_start":2811,"line_end":2811,"column_start":5,"column_end":19},"name":"DefCfaRegister","qualname":"::read::cfi::CallFrameInstruction::DefCfaRegister","value":"CallFrameInstruction::DefCfaRegister { register }","parent":{"krate":0,"index":6684},"children":[],"decl_id":null,"docs":" > 3. DW_CFA_def_cfa_register\n >\n > The DW_CFA_def_cfa_register instruction takes a single unsigned LEB128\n > operand representing a register number. The required action is to\n > define the current CFA rule to use the provided register (but to keep\n > the old offset). This operation is valid only if the current CFA rule\n > is defined to use a register and offset.\n","sig":null,"attributes":[{"value":"/ > 3. DW_CFA_def_cfa_register","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":235844,"byte_end":235876,"line_start":2804,"line_end":2804,"column_start":5,"column_end":37}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":235881,"byte_end":235886,"line_start":2805,"line_end":2805,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_def_cfa_register instruction takes a single unsigned LEB128","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":235891,"byte_end":235967,"line_start":2806,"line_end":2806,"column_start":5,"column_end":81}},{"value":"/ > operand representing a register number. The required action is to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":235972,"byte_end":236043,"line_start":2807,"line_end":2807,"column_start":5,"column_end":76}},{"value":"/ > define the current CFA rule to use the provided register (but to keep","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":236048,"byte_end":236123,"line_start":2808,"line_end":2808,"column_start":5,"column_end":80}},{"value":"/ > the old offset). This operation is valid only if the current CFA rule","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":236128,"byte_end":236203,"line_start":2809,"line_end":2809,"column_start":5,"column_end":80}},{"value":"/ > is defined to use a register and offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":236208,"byte_end":236254,"line_start":2810,"line_end":2810,"column_start":5,"column_end":51}}]},{"kind":"StructVariant","id":{"krate":0,"index":6698},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":236775,"byte_end":236787,"line_start":2823,"line_end":2823,"column_start":5,"column_end":17},"name":"DefCfaOffset","qualname":"::read::cfi::CallFrameInstruction::DefCfaOffset","value":"CallFrameInstruction::DefCfaOffset { offset }","parent":{"krate":0,"index":6684},"children":[],"decl_id":null,"docs":" > 4. DW_CFA_def_cfa_offset\n >\n > The DW_CFA_def_cfa_offset instruction takes a single unsigned LEB128\n > operand representing a (non-factored) offset. The required action is\n > to define the current CFA rule to use the provided offset (but to keep\n > the old register). This operation is valid only if the current CFA\n > rule is defined to use a register and offset.\n","sig":null,"attributes":[{"value":"/ > 4. DW_CFA_def_cfa_offset","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":236358,"byte_end":236388,"line_start":2816,"line_end":2816,"column_start":5,"column_end":35}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":236393,"byte_end":236398,"line_start":2817,"line_end":2817,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_def_cfa_offset instruction takes a single unsigned LEB128","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":236403,"byte_end":236477,"line_start":2818,"line_end":2818,"column_start":5,"column_end":79}},{"value":"/ > operand representing a (non-factored) offset. The required action is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":236482,"byte_end":236556,"line_start":2819,"line_end":2819,"column_start":5,"column_end":79}},{"value":"/ > to define the current CFA rule to use the provided offset (but to keep","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":236561,"byte_end":236637,"line_start":2820,"line_end":2820,"column_start":5,"column_end":81}},{"value":"/ > the old register). This operation is valid only if the current CFA","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":236642,"byte_end":236714,"line_start":2821,"line_end":2821,"column_start":5,"column_end":77}},{"value":"/ > rule is defined to use a register and offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":236719,"byte_end":236770,"line_start":2822,"line_end":2822,"column_start":5,"column_end":56}}]},{"kind":"StructVariant","id":{"krate":0,"index":6700},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":237333,"byte_end":237347,"line_start":2836,"line_end":2836,"column_start":5,"column_end":19},"name":"DefCfaOffsetSf","qualname":"::read::cfi::CallFrameInstruction::DefCfaOffsetSf","value":"CallFrameInstruction::DefCfaOffsetSf { factored_offset }","parent":{"krate":0,"index":6684},"children":[],"decl_id":null,"docs":" > 5. DW_CFA_def_cfa_offset_sf\n >\n > The DW_CFA_def_cfa_offset_sf instruction takes a signed LEB128 operand\n > representing a factored offset. This instruction is identical to\n > DW_CFA_def_cfa_offset except that the operand is signed and\n > factored. The resulting offset is factored_offset *\n > data_alignment_factor. This operation is valid only if the current CFA\n > rule is defined to use a register and offset.\n","sig":null,"attributes":[{"value":"/ > 5. DW_CFA_def_cfa_offset_sf","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":236860,"byte_end":236893,"line_start":2828,"line_end":2828,"column_start":5,"column_end":38}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":236898,"byte_end":236903,"line_start":2829,"line_end":2829,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_def_cfa_offset_sf instruction takes a signed LEB128 operand","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":236908,"byte_end":236984,"line_start":2830,"line_end":2830,"column_start":5,"column_end":81}},{"value":"/ > representing a factored offset. This instruction is identical to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":236989,"byte_end":237059,"line_start":2831,"line_end":2831,"column_start":5,"column_end":75}},{"value":"/ > DW_CFA_def_cfa_offset except that the operand is signed and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":237064,"byte_end":237129,"line_start":2832,"line_end":2832,"column_start":5,"column_end":70}},{"value":"/ > factored. The resulting offset is factored_offset *","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":237134,"byte_end":237191,"line_start":2833,"line_end":2833,"column_start":5,"column_end":62}},{"value":"/ > data_alignment_factor. This operation is valid only if the current CFA","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":237196,"byte_end":237272,"line_start":2834,"line_end":2834,"column_start":5,"column_end":81}},{"value":"/ > rule is defined to use a register and offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":237277,"byte_end":237328,"line_start":2835,"line_end":2835,"column_start":5,"column_end":56}}]},{"kind":"StructVariant","id":{"krate":0,"index":6702},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":237750,"byte_end":237766,"line_start":2847,"line_end":2847,"column_start":5,"column_end":21},"name":"DefCfaExpression","qualname":"::read::cfi::CallFrameInstruction::DefCfaExpression","value":"CallFrameInstruction::DefCfaExpression { expression }","parent":{"krate":0,"index":6684},"children":[],"decl_id":null,"docs":" > 6. DW_CFA_def_cfa_expression\n >\n > The DW_CFA_def_cfa_expression instruction takes a single operand\n > encoded as a DW_FORM_exprloc value representing a DWARF\n > expression. The required action is to establish that expression as the\n > means by which the current CFA is computed.\n","sig":null,"attributes":[{"value":"/ > 6. DW_CFA_def_cfa_expression","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":237425,"byte_end":237459,"line_start":2841,"line_end":2841,"column_start":5,"column_end":39}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":237464,"byte_end":237469,"line_start":2842,"line_end":2842,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_def_cfa_expression instruction takes a single operand","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":237474,"byte_end":237544,"line_start":2843,"line_end":2843,"column_start":5,"column_end":75}},{"value":"/ > encoded as a DW_FORM_exprloc value representing a DWARF","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":237549,"byte_end":237610,"line_start":2844,"line_end":2844,"column_start":5,"column_end":66}},{"value":"/ > expression. The required action is to establish that expression as the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":237615,"byte_end":237691,"line_start":2845,"line_end":2845,"column_start":5,"column_end":81}},{"value":"/ > means by which the current CFA is computed.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":237696,"byte_end":237745,"line_start":2846,"line_end":2846,"column_start":5,"column_end":54}}]},{"kind":"StructVariant","id":{"krate":0,"index":6704},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":238155,"byte_end":238164,"line_start":2858,"line_end":2858,"column_start":5,"column_end":14},"name":"Undefined","qualname":"::read::cfi::CallFrameInstruction::Undefined","value":"CallFrameInstruction::Undefined { register }","parent":{"krate":0,"index":6684},"children":[],"decl_id":null,"docs":" > 1. DW_CFA_undefined\n >\n > The DW_CFA_undefined instruction takes a single unsigned LEB128\n > operand that represents a register number. The required action is to\n > set the rule for the specified register to “undefined.”\n","sig":null,"attributes":[{"value":"/ > 1. DW_CFA_undefined","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":237892,"byte_end":237917,"line_start":2853,"line_end":2853,"column_start":5,"column_end":30}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":237922,"byte_end":237927,"line_start":2854,"line_end":2854,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_undefined instruction takes a single unsigned LEB128","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":237932,"byte_end":238001,"line_start":2855,"line_end":2855,"column_start":5,"column_end":74}},{"value":"/ > operand that represents a register number. The required action is to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":238006,"byte_end":238080,"line_start":2856,"line_end":2856,"column_start":5,"column_end":79}},{"value":"/ > set the rule for the specified register to “undefined.”","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":238085,"byte_end":238150,"line_start":2857,"line_end":2857,"column_start":5,"column_end":66}}]},{"kind":"StructVariant","id":{"krate":0,"index":6706},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":238515,"byte_end":238524,"line_start":2868,"line_end":2868,"column_start":5,"column_end":14},"name":"SameValue","qualname":"::read::cfi::CallFrameInstruction::SameValue","value":"CallFrameInstruction::SameValue { register }","parent":{"krate":0,"index":6684},"children":[],"decl_id":null,"docs":" > 2. DW_CFA_same_value\n >\n > The DW_CFA_same_value instruction takes a single unsigned LEB128\n > operand that represents a register number. The required action is to\n > set the rule for the specified register to “same value.”\n","sig":null,"attributes":[{"value":"/ > 2. DW_CFA_same_value","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":238249,"byte_end":238275,"line_start":2863,"line_end":2863,"column_start":5,"column_end":31}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":238280,"byte_end":238285,"line_start":2864,"line_end":2864,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_same_value instruction takes a single unsigned LEB128","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":238290,"byte_end":238360,"line_start":2865,"line_end":2865,"column_start":5,"column_end":75}},{"value":"/ > operand that represents a register number. The required action is to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":238365,"byte_end":238439,"line_start":2866,"line_end":2866,"column_start":5,"column_end":79}},{"value":"/ > set the rule for the specified register to “same value.”","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":238444,"byte_end":238510,"line_start":2867,"line_end":2867,"column_start":5,"column_end":67}}]},{"kind":"StructVariant","id":{"krate":0,"index":6708},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":239146,"byte_end":239152,"line_start":2883,"line_end":2883,"column_start":5,"column_end":11},"name":"Offset","qualname":"::read::cfi::CallFrameInstruction::Offset","value":"CallFrameInstruction::Offset { register, factored_offset }","parent":{"krate":0,"index":6684},"children":[],"decl_id":null,"docs":" The `Offset` instruction represents both `DW_CFA_offset` and\n `DW_CFA_offset_extended`.","sig":null,"attributes":[{"value":"/ The `Offset` instruction represents both `DW_CFA_offset` and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":238609,"byte_end":238673,"line_start":2873,"line_end":2873,"column_start":5,"column_end":69}},{"value":"/ `DW_CFA_offset_extended`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":238678,"byte_end":238707,"line_start":2874,"line_end":2874,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":238712,"byte_end":238715,"line_start":2875,"line_end":2875,"column_start":5,"column_end":8}},{"value":"/ > 3. DW_CFA_offset","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":238720,"byte_end":238742,"line_start":2876,"line_end":2876,"column_start":5,"column_end":27}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":238747,"byte_end":238752,"line_start":2877,"line_end":2877,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_offset instruction takes two operands: a register number","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":238757,"byte_end":238830,"line_start":2878,"line_end":2878,"column_start":5,"column_end":78}},{"value":"/ > (encoded with the opcode) and an unsigned LEB128 constant representing","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":238835,"byte_end":238911,"line_start":2879,"line_end":2879,"column_start":5,"column_end":81}},{"value":"/ > a factored offset. The required action is to change the rule for the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":238916,"byte_end":238990,"line_start":2880,"line_end":2880,"column_start":5,"column_end":79}},{"value":"/ > register indicated by the register number to be an offset(N) rule","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":238995,"byte_end":239066,"line_start":2881,"line_end":2881,"column_start":5,"column_end":76}},{"value":"/ > where the value of N is factored offset * data_alignment_factor.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":239071,"byte_end":239141,"line_start":2882,"line_end":2882,"column_start":5,"column_end":75}}]},{"kind":"StructVariant","id":{"krate":0,"index":6711},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":239740,"byte_end":239756,"line_start":2898,"line_end":2898,"column_start":5,"column_end":21},"name":"OffsetExtendedSf","qualname":"::read::cfi::CallFrameInstruction::OffsetExtendedSf","value":"CallFrameInstruction::OffsetExtendedSf { register, factored_offset }","parent":{"krate":0,"index":6684},"children":[],"decl_id":null,"docs":" > 5. DW_CFA_offset_extended_sf\n >\n > The DW_CFA_offset_extended_sf instruction takes two operands: an\n > unsigned LEB128 value representing a register number and a signed\n > LEB128 factored offset. This instruction is identical to\n > DW_CFA_offset_extended except that the second operand is signed and\n > factored. The resulting offset is factored_offset *\n > data_alignment_factor.\n","sig":null,"attributes":[{"value":"/ > 5. DW_CFA_offset_extended_sf","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":239300,"byte_end":239334,"line_start":2890,"line_end":2890,"column_start":5,"column_end":39}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":239339,"byte_end":239344,"line_start":2891,"line_end":2891,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_offset_extended_sf instruction takes two operands: an","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":239349,"byte_end":239419,"line_start":2892,"line_end":2892,"column_start":5,"column_end":75}},{"value":"/ > unsigned LEB128 value representing a register number and a signed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":239424,"byte_end":239495,"line_start":2893,"line_end":2893,"column_start":5,"column_end":76}},{"value":"/ > LEB128 factored offset. This instruction is identical to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":239500,"byte_end":239562,"line_start":2894,"line_end":2894,"column_start":5,"column_end":67}},{"value":"/ > DW_CFA_offset_extended except that the second operand is signed and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":239567,"byte_end":239640,"line_start":2895,"line_end":2895,"column_start":5,"column_end":78}},{"value":"/ > factored. The resulting offset is factored_offset *","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":239645,"byte_end":239702,"line_start":2896,"line_end":2896,"column_start":5,"column_end":62}},{"value":"/ > data_alignment_factor.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":239707,"byte_end":239735,"line_start":2897,"line_end":2897,"column_start":5,"column_end":33}}]},{"kind":"StructVariant","id":{"krate":0,"index":6714},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":240302,"byte_end":240311,"line_start":2912,"line_end":2912,"column_start":5,"column_end":14},"name":"ValOffset","qualname":"::read::cfi::CallFrameInstruction::ValOffset","value":"CallFrameInstruction::ValOffset { register, factored_offset }","parent":{"krate":0,"index":6684},"children":[],"decl_id":null,"docs":" > 6. DW_CFA_val_offset\n >\n > The DW_CFA_val_offset instruction takes two unsigned LEB128 operands\n > representing a register number and a factored offset. The required\n > action is to change the rule for the register indicated by the\n > register number to be a val_offset(N) rule where the value of N is\n > factored_offset * data_alignment_factor.\n","sig":null,"attributes":[{"value":"/ > 6. DW_CFA_val_offset","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":239904,"byte_end":239930,"line_start":2905,"line_end":2905,"column_start":5,"column_end":31}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":239935,"byte_end":239940,"line_start":2906,"line_end":2906,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_val_offset instruction takes two unsigned LEB128 operands","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":239945,"byte_end":240019,"line_start":2907,"line_end":2907,"column_start":5,"column_end":79}},{"value":"/ > representing a register number and a factored offset. The required","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":240024,"byte_end":240096,"line_start":2908,"line_end":2908,"column_start":5,"column_end":77}},{"value":"/ > action is to change the rule for the register indicated by the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":240101,"byte_end":240169,"line_start":2909,"line_end":2909,"column_start":5,"column_end":73}},{"value":"/ > register number to be a val_offset(N) rule where the value of N is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":240174,"byte_end":240246,"line_start":2910,"line_end":2910,"column_start":5,"column_end":77}},{"value":"/ > factored_offset * data_alignment_factor.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":240251,"byte_end":240297,"line_start":2911,"line_end":2911,"column_start":5,"column_end":51}}]},{"kind":"StructVariant","id":{"krate":0,"index":6717},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":240874,"byte_end":240885,"line_start":2926,"line_end":2926,"column_start":5,"column_end":16},"name":"ValOffsetSf","qualname":"::read::cfi::CallFrameInstruction::ValOffsetSf","value":"CallFrameInstruction::ValOffsetSf { register, factored_offset }","parent":{"krate":0,"index":6684},"children":[],"decl_id":null,"docs":" > 7. DW_CFA_val_offset_sf\n >\n > The DW_CFA_val_offset_sf instruction takes two operands: an unsigned\n > LEB128 value representing a register number and a signed LEB128\n > factored offset. This instruction is identical to DW_CFA_val_offset\n > except that the second operand is signed and factored. The resulting\n > offset is factored_offset * data_alignment_factor.\n","sig":null,"attributes":[{"value":"/ > 7. DW_CFA_val_offset_sf","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":240459,"byte_end":240488,"line_start":2919,"line_end":2919,"column_start":5,"column_end":34}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":240493,"byte_end":240498,"line_start":2920,"line_end":2920,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_val_offset_sf instruction takes two operands: an unsigned","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":240503,"byte_end":240577,"line_start":2921,"line_end":2921,"column_start":5,"column_end":79}},{"value":"/ > LEB128 value representing a register number and a signed LEB128","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":240582,"byte_end":240651,"line_start":2922,"line_end":2922,"column_start":5,"column_end":74}},{"value":"/ > factored offset. This instruction is identical to DW_CFA_val_offset","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":240656,"byte_end":240729,"line_start":2923,"line_end":2923,"column_start":5,"column_end":78}},{"value":"/ > except that the second operand is signed and factored. The resulting","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":240734,"byte_end":240808,"line_start":2924,"line_end":2924,"column_start":5,"column_end":79}},{"value":"/ > offset is factored_offset * data_alignment_factor.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":240813,"byte_end":240869,"line_start":2925,"line_end":2925,"column_start":5,"column_end":61}}]},{"kind":"StructVariant","id":{"krate":0,"index":6720},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":241322,"byte_end":241330,"line_start":2939,"line_end":2939,"column_start":5,"column_end":13},"name":"Register","qualname":"::read::cfi::CallFrameInstruction::Register","value":"CallFrameInstruction::Register { dest_register, src_register }","parent":{"krate":0,"index":6684},"children":[],"decl_id":null,"docs":" > 8. DW_CFA_register\n >\n > The DW_CFA_register instruction takes two unsigned LEB128 operands\n > representing register numbers. The required action is to set the rule\n > for the first register to be register(R) where R is the second\n > register.\n","sig":null,"attributes":[{"value":"/ > 8. DW_CFA_register","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":241033,"byte_end":241057,"line_start":2933,"line_end":2933,"column_start":5,"column_end":29}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":241062,"byte_end":241067,"line_start":2934,"line_end":2934,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_register instruction takes two unsigned LEB128 operands","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":241072,"byte_end":241144,"line_start":2935,"line_end":2935,"column_start":5,"column_end":77}},{"value":"/ > representing register numbers. The required action is to set the rule","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":241149,"byte_end":241224,"line_start":2936,"line_end":2936,"column_start":5,"column_end":80}},{"value":"/ > for the first register to be register(R) where R is the second","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":241229,"byte_end":241297,"line_start":2937,"line_end":2937,"column_start":5,"column_end":73}},{"value":"/ > register.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":241302,"byte_end":241317,"line_start":2938,"line_end":2938,"column_start":5,"column_end":20}}]},{"kind":"StructVariant","id":{"krate":0,"index":6723},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":242167,"byte_end":242177,"line_start":2956,"line_end":2956,"column_start":5,"column_end":15},"name":"Expression","qualname":"::read::cfi::CallFrameInstruction::Expression","value":"CallFrameInstruction::Expression { register, expression }","parent":{"krate":0,"index":6684},"children":[],"decl_id":null,"docs":" > 9. DW_CFA_expression\n >\n > The DW_CFA_expression instruction takes two operands: an unsigned\n > LEB128 value representing a register number, and a DW_FORM_block value\n > representing a DWARF expression. The required action is to change the\n > rule for the register indicated by the register number to be an\n > expression(E) rule where E is the DWARF expression. That is, the DWARF\n > expression computes the address. The value of the CFA is pushed on the\n > DWARF evaluation stack prior to execution of the DWARF expression.\n","sig":null,"attributes":[{"value":"/ > 9. DW_CFA_expression","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":241576,"byte_end":241602,"line_start":2947,"line_end":2947,"column_start":5,"column_end":31}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":241607,"byte_end":241612,"line_start":2948,"line_end":2948,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_expression instruction takes two operands: an unsigned","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":241617,"byte_end":241688,"line_start":2949,"line_end":2949,"column_start":5,"column_end":76}},{"value":"/ > LEB128 value representing a register number, and a DW_FORM_block value","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":241693,"byte_end":241769,"line_start":2950,"line_end":2950,"column_start":5,"column_end":81}},{"value":"/ > representing a DWARF expression. The required action is to change the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":241774,"byte_end":241849,"line_start":2951,"line_end":2951,"column_start":5,"column_end":80}},{"value":"/ > rule for the register indicated by the register number to be an","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":241854,"byte_end":241923,"line_start":2952,"line_end":2952,"column_start":5,"column_end":74}},{"value":"/ > expression(E) rule where E is the DWARF expression. That is, the DWARF","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":241928,"byte_end":242004,"line_start":2953,"line_end":2953,"column_start":5,"column_end":81}},{"value":"/ > expression computes the address. The value of the CFA is pushed on the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":242009,"byte_end":242085,"line_start":2954,"line_end":2954,"column_start":5,"column_end":81}},{"value":"/ > DWARF evaluation stack prior to execution of the DWARF expression.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":242090,"byte_end":242162,"line_start":2955,"line_end":2955,"column_start":5,"column_end":77}}]},{"kind":"StructVariant","id":{"krate":0,"index":6726},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":242964,"byte_end":242977,"line_start":2973,"line_end":2973,"column_start":5,"column_end":18},"name":"ValExpression","qualname":"::read::cfi::CallFrameInstruction::ValExpression","value":"CallFrameInstruction::ValExpression { register, expression }","parent":{"krate":0,"index":6684},"children":[],"decl_id":null,"docs":" > 10. DW_CFA_val_expression\n >\n > The DW_CFA_val_expression instruction takes two operands: an unsigned\n > LEB128 value representing a register number, and a DW_FORM_block value\n > representing a DWARF expression. The required action is to change the\n > rule for the register indicated by the register number to be a\n > val_expression(E) rule where E is the DWARF expression. That is, the\n > DWARF expression computes the value of the given register. The value\n > of the CFA is pushed on the DWARF evaluation stack prior to execution\n > of the DWARF expression.\n","sig":null,"attributes":[{"value":"/ > 10. DW_CFA_val_expression","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":242331,"byte_end":242362,"line_start":2963,"line_end":2963,"column_start":5,"column_end":36}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":242367,"byte_end":242372,"line_start":2964,"line_end":2964,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_val_expression instruction takes two operands: an unsigned","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":242377,"byte_end":242452,"line_start":2965,"line_end":2965,"column_start":5,"column_end":80}},{"value":"/ > LEB128 value representing a register number, and a DW_FORM_block value","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":242457,"byte_end":242533,"line_start":2966,"line_end":2966,"column_start":5,"column_end":81}},{"value":"/ > representing a DWARF expression. The required action is to change the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":242538,"byte_end":242613,"line_start":2967,"line_end":2967,"column_start":5,"column_end":80}},{"value":"/ > rule for the register indicated by the register number to be a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":242618,"byte_end":242686,"line_start":2968,"line_end":2968,"column_start":5,"column_end":73}},{"value":"/ > val_expression(E) rule where E is the DWARF expression. That is, the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":242691,"byte_end":242765,"line_start":2969,"line_end":2969,"column_start":5,"column_end":79}},{"value":"/ > DWARF expression computes the value of the given register. The value","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":242770,"byte_end":242844,"line_start":2970,"line_end":2970,"column_start":5,"column_end":79}},{"value":"/ > of the CFA is pushed on the DWARF evaluation stack prior to execution","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":242849,"byte_end":242924,"line_start":2971,"line_end":2971,"column_start":5,"column_end":80}},{"value":"/ > of the DWARF expression.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":242929,"byte_end":242959,"line_start":2972,"line_end":2972,"column_start":5,"column_end":35}}]},{"kind":"StructVariant","id":{"krate":0,"index":6729},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":243572,"byte_end":243579,"line_start":2989,"line_end":2989,"column_start":5,"column_end":12},"name":"Restore","qualname":"::read::cfi::CallFrameInstruction::Restore","value":"CallFrameInstruction::Restore { register }","parent":{"krate":0,"index":6684},"children":[],"decl_id":null,"docs":" The `Restore` instruction represents both `DW_CFA_restore` and\n `DW_CFA_restore_extended`.","sig":null,"attributes":[{"value":"/ The `Restore` instruction represents both `DW_CFA_restore` and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":243131,"byte_end":243197,"line_start":2980,"line_end":2980,"column_start":5,"column_end":71}},{"value":"/ `DW_CFA_restore_extended`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":243202,"byte_end":243232,"line_start":2981,"line_end":2981,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":243237,"byte_end":243240,"line_start":2982,"line_end":2982,"column_start":5,"column_end":8}},{"value":"/ > 11. DW_CFA_restore","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":243245,"byte_end":243269,"line_start":2983,"line_end":2983,"column_start":5,"column_end":29}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":243274,"byte_end":243279,"line_start":2984,"line_end":2984,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_restore instruction takes a single operand (encoded with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":243284,"byte_end":243357,"line_start":2985,"line_end":2985,"column_start":5,"column_end":78}},{"value":"/ > the opcode) that represents a register number. The required action is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":243362,"byte_end":243437,"line_start":2986,"line_end":2986,"column_start":5,"column_end":80}},{"value":"/ > to change the rule for the indicated register to the rule assigned it","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":243442,"byte_end":243517,"line_start":2987,"line_end":2987,"column_start":5,"column_end":80}},{"value":"/ > by the initial_instructions in the CIE.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":243522,"byte_end":243567,"line_start":2988,"line_end":2988,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6731},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":243921,"byte_end":243934,"line_start":3000,"line_end":3000,"column_start":5,"column_end":18},"name":"RememberState","qualname":"::read::cfi::CallFrameInstruction::RememberState","value":"CallFrameInstruction::RememberState","parent":{"krate":0,"index":6684},"children":[],"decl_id":null,"docs":" > 1. DW_CFA_remember_state\n >\n > The DW_CFA_remember_state instruction takes no operands. The required\n > action is to push the set of rules for every register onto an implicit\n > stack.\n","sig":null,"attributes":[{"value":"/ > 1. DW_CFA_remember_state","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":243698,"byte_end":243728,"line_start":2995,"line_end":2995,"column_start":5,"column_end":35}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":243733,"byte_end":243738,"line_start":2996,"line_end":2996,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_remember_state instruction takes no operands. The required","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":243743,"byte_end":243818,"line_start":2997,"line_end":2997,"column_start":5,"column_end":80}},{"value":"/ > action is to push the set of rules for every register onto an implicit","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":243823,"byte_end":243899,"line_start":2998,"line_end":2998,"column_start":5,"column_end":81}},{"value":"/ > stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":243904,"byte_end":243916,"line_start":2999,"line_end":2999,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6733},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":244176,"byte_end":244188,"line_start":3007,"line_end":3007,"column_start":5,"column_end":17},"name":"RestoreState","qualname":"::read::cfi::CallFrameInstruction::RestoreState","value":"CallFrameInstruction::RestoreState","parent":{"krate":0,"index":6684},"children":[],"decl_id":null,"docs":" > 2. DW_CFA_restore_state\n >\n > The DW_CFA_restore_state instruction takes no operands. The required\n > action is to pop the set of rules off the implicit stack and place\n > them in the current row.\n","sig":null,"attributes":[{"value":"/ > 2. DW_CFA_restore_state","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":243941,"byte_end":243970,"line_start":3002,"line_end":3002,"column_start":5,"column_end":34}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":243975,"byte_end":243980,"line_start":3003,"line_end":3003,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_restore_state instruction takes no operands. The required","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":243985,"byte_end":244059,"line_start":3004,"line_end":3004,"column_start":5,"column_end":79}},{"value":"/ > action is to pop the set of rules off the implicit stack and place","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":244064,"byte_end":244136,"line_start":3005,"line_end":3005,"column_start":5,"column_end":77}},{"value":"/ > them in the current row.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":244141,"byte_end":244171,"line_start":3006,"line_end":3006,"column_start":5,"column_end":35}}]},{"kind":"StructVariant","id":{"krate":0,"index":6735},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":244506,"byte_end":244514,"line_start":3016,"line_end":3016,"column_start":5,"column_end":13},"name":"ArgsSize","qualname":"::read::cfi::CallFrameInstruction::ArgsSize","value":"CallFrameInstruction::ArgsSize { size }","parent":{"krate":0,"index":6684},"children":[],"decl_id":null,"docs":" > DW_CFA_GNU_args_size\n >\n > GNU Extension\n >\n > The DW_CFA_GNU_args_size instruction takes an unsigned LEB128 operand\n > representing an argument size. This instruction specifies the total of\n > the size of the arguments which have been pushed onto the stack.\n","sig":null,"attributes":[{"value":"/ > DW_CFA_GNU_args_size","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":244195,"byte_end":244221,"line_start":3009,"line_end":3009,"column_start":5,"column_end":31}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":244226,"byte_end":244231,"line_start":3010,"line_end":3010,"column_start":5,"column_end":10}},{"value":"/ > GNU Extension","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":244236,"byte_end":244255,"line_start":3011,"line_end":3011,"column_start":5,"column_end":24}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":244260,"byte_end":244265,"line_start":3012,"line_end":3012,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_GNU_args_size instruction takes an unsigned LEB128 operand","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":244270,"byte_end":244345,"line_start":3013,"line_end":3013,"column_start":5,"column_end":80}},{"value":"/ > representing an argument size. This instruction specifies the total of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":244350,"byte_end":244426,"line_start":3014,"line_end":3014,"column_start":5,"column_end":81}},{"value":"/ > the size of the arguments which have been pushed onto the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":244431,"byte_end":244501,"line_start":3015,"line_end":3015,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6737},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":244845,"byte_end":244848,"line_start":3026,"line_end":3026,"column_start":5,"column_end":8},"name":"Nop","qualname":"::read::cfi::CallFrameInstruction::Nop","value":"CallFrameInstruction::Nop","parent":{"krate":0,"index":6684},"children":[],"decl_id":null,"docs":" > 1. DW_CFA_nop\n >\n > The DW_CFA_nop instruction has no operands and no required actions. It\n > is used as padding to make a CIE or FDE an appropriate size.\n","sig":null,"attributes":[{"value":"/ > 1. DW_CFA_nop","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":244659,"byte_end":244678,"line_start":3022,"line_end":3022,"column_start":5,"column_end":24}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":244683,"byte_end":244688,"line_start":3023,"line_end":3023,"column_start":5,"column_end":10}},{"value":"/ > The DW_CFA_nop instruction has no operands and no required actions. It","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":244693,"byte_end":244769,"line_start":3024,"line_end":3024,"column_start":5,"column_end":81}},{"value":"/ > is used as padding to make a CIE or FDE an appropriate size.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":244774,"byte_end":244840,"line_start":3025,"line_end":3025,"column_start":5,"column_end":71}}]},{"kind":"Enum","id":{"krate":0,"index":6684},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":233373,"byte_end":233393,"line_start":2744,"line_end":2744,"column_start":10,"column_end":30},"name":"CallFrameInstruction","qualname":"::read::cfi::CallFrameInstruction","value":"pub enum CallFrameInstruction<R: Reader> {\n    SetLoc {\n        address: u64,\n    },\n    AdvanceLoc {\n        delta: u32,\n    },\n    DefCfa {\n        register: Register,\n        offset: u64,\n    },\n    DefCfaSf {\n        register: Register,\n        factored_offset: i64,\n    },\n    DefCfaRegister {\n        register: Register,\n    },\n    DefCfaOffset {\n        offset: u64,\n    },\n    DefCfaOffsetSf {\n        factored_offset: i64,\n    },\n    DefCfaExpression {\n        expression: Expression<R>,\n    },\n    Undefined {\n        register: Register,\n    },\n    SameValue {\n        register: Register,\n    },\n    Offset {\n        register: Register,\n        factored_offset: u64,\n    },\n    OffsetExtendedSf {\n        register: Register,\n        factored_offset: i64,\n    },\n    ValOffset {\n        register: Register,\n        factored_offset: u64,\n    },\n    ValOffsetSf {\n        register: Register,\n        factored_offset: i64,\n    },\n    Register {\n        dest_register: Register,\n        src_register: Register,\n    },\n    Expression {\n        register: Register,\n        expression: Expression<R>,\n    },\n    ValExpression {\n        register: Register,\n        expression: Expression<R>,\n    },\n    Restore {\n        register: Register,\n    },\n    RememberState,\n    RestoreState,\n    ArgsSize {\n        size: u64,\n    },\n    Nop,\n}","parent":null,"children":[{"krate":0,"index":6686},{"krate":0,"index":6688},{"krate":0,"index":6690},{"krate":0,"index":6693},{"krate":0,"index":6696},{"krate":0,"index":6698},{"krate":0,"index":6700},{"krate":0,"index":6702},{"krate":0,"index":6704},{"krate":0,"index":6706},{"krate":0,"index":6708},{"krate":0,"index":6711},{"krate":0,"index":6714},{"krate":0,"index":6717},{"krate":0,"index":6720},{"krate":0,"index":6723},{"krate":0,"index":6726},{"krate":0,"index":6729},{"krate":0,"index":6731},{"krate":0,"index":6733},{"krate":0,"index":6735},{"krate":0,"index":6737}],"decl_id":null,"docs":" A parsed call frame instruction.\n","sig":null,"attributes":[{"value":"/ A parsed call frame instruction.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":233288,"byte_end":233324,"line_start":2742,"line_end":2742,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":6756},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":252960,"byte_end":252984,"line_start":3238,"line_end":3238,"column_start":12,"column_end":36},"name":"CallFrameInstructionIter","qualname":"::read::cfi::CallFrameInstructionIter","value":"CallFrameInstructionIter {  }","parent":null,"children":[{"krate":0,"index":6759},{"krate":0,"index":6760},{"krate":0,"index":6761}],"decl_id":null,"docs":" A lazy iterator parsing call frame instructions.","sig":null,"attributes":[{"value":"/ A lazy iterator parsing call frame instructions.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":252779,"byte_end":252831,"line_start":3233,"line_end":3233,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":252832,"byte_end":252835,"line_start":3234,"line_end":3234,"column_start":1,"column_end":4}},{"value":"/ Can be [used with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":252836,"byte_end":252857,"line_start":3235,"line_end":3235,"column_start":1,"column_end":22}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":252858,"byte_end":252924,"line_start":3236,"line_end":3236,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":253230,"byte_end":253234,"line_start":3246,"line_end":3246,"column_start":12,"column_end":16},"name":"next","qualname":"<CallFrameInstructionIter>::next","value":"pub fn next(&mut Self) -> Result<Option<CallFrameInstruction<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Parse the next call frame instruction.\n","sig":null,"attributes":[{"value":"/ Parse the next call frame instruction.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":253176,"byte_end":253218,"line_start":3245,"line_end":3245,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6771},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":254468,"byte_end":254474,"line_start":3290,"line_end":3290,"column_start":5,"column_end":11},"name":"Direct","qualname":"::read::cfi::Pointer::Direct","value":"Pointer::Direct(u64)","parent":{"krate":0,"index":6770},"children":[],"decl_id":null,"docs":" This value is the decoded pointer value.\n","sig":null,"attributes":[{"value":"/ This value is the decoded pointer value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":254419,"byte_end":254463,"line_start":3289,"line_end":3289,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6774},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":254783,"byte_end":254791,"line_start":3298,"line_end":3298,"column_start":5,"column_end":13},"name":"Indirect","qualname":"::read::cfi::Pointer::Indirect","value":"Pointer::Indirect(u64)","parent":{"krate":0,"index":6770},"children":[],"decl_id":null,"docs":" This value is *not* the pointer value, but points to the address of\n where the real pointer value lives. In other words, deref this pointer\n to get the real pointer value.","sig":null,"attributes":[{"value":"/ This value is *not* the pointer value, but points to the address of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":254486,"byte_end":254557,"line_start":3292,"line_end":3292,"column_start":5,"column_end":76}},{"value":"/ where the real pointer value lives. In other words, deref this pointer","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":254562,"byte_end":254636,"line_start":3293,"line_end":3293,"column_start":5,"column_end":79}},{"value":"/ to get the real pointer value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":254641,"byte_end":254675,"line_start":3294,"line_end":3294,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":254680,"byte_end":254683,"line_start":3295,"line_end":3295,"column_start":5,"column_end":8}},{"value":"/ Chase this pointer at your own risk: do you trust the DWARF data it came","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":254688,"byte_end":254764,"line_start":3296,"line_end":3296,"column_start":5,"column_end":81}},{"value":"/ from?","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":254769,"byte_end":254778,"line_start":3297,"line_end":3297,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":6770},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":254405,"byte_end":254412,"line_start":3288,"line_end":3288,"column_start":10,"column_end":17},"name":"Pointer","qualname":"::read::cfi::Pointer","value":"pub enum Pointer { Direct(u64), Indirect(u64), }","parent":null,"children":[{"krate":0,"index":6771},{"krate":0,"index":6774}],"decl_id":null,"docs":" A decoded pointer.\n","sig":null,"attributes":[{"value":"/ A decoded pointer.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":254328,"byte_end":254350,"line_start":3286,"line_end":3286,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":6804},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":399910,"byte_end":399915,"line_start":23,"line_end":23,"column_start":12,"column_end":17},"name":"Dwarf","qualname":"::read::dwarf::Dwarf","value":"Dwarf { debug_abbrev, debug_addr, debug_aranges, debug_info, debug_line, debug_line_str, debug_str, debug_str_offsets, debug_types, locations, ranges, file_type, sup }","parent":null,"children":[{"krate":0,"index":6806},{"krate":0,"index":6807},{"krate":0,"index":6808},{"krate":0,"index":6809},{"krate":0,"index":6810},{"krate":0,"index":6811},{"krate":0,"index":6812},{"krate":0,"index":6813},{"krate":0,"index":6814},{"krate":0,"index":6815},{"krate":0,"index":6816},{"krate":0,"index":6817},{"krate":0,"index":6818}],"decl_id":null,"docs":" All of the commonly used DWARF sections, and other common information.\n","sig":null,"attributes":[{"value":"/ All of the commonly used DWARF sections, and other common information.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":399798,"byte_end":399872,"line_start":21,"line_end":21,"column_start":1,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":6806},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":399966,"byte_end":399978,"line_start":25,"line_end":25,"column_start":9,"column_end":21},"name":"debug_abbrev","qualname":"::read::dwarf::Dwarf::debug_abbrev","value":"read::abbrev::DebugAbbrev<R>","parent":{"krate":0,"index":6804},"children":[],"decl_id":null,"docs":" The `.debug_abbrev` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_abbrev` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":399925,"byte_end":399957,"line_start":24,"line_end":24,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":6807},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400040,"byte_end":400050,"line_start":28,"line_end":28,"column_start":9,"column_end":19},"name":"debug_addr","qualname":"::read::dwarf::Dwarf::debug_addr","value":"read::addr::DebugAddr<R>","parent":{"krate":0,"index":6804},"children":[],"decl_id":null,"docs":" The `.debug_addr` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_addr` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400001,"byte_end":400031,"line_start":27,"line_end":27,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":6808},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400113,"byte_end":400126,"line_start":31,"line_end":31,"column_start":9,"column_end":22},"name":"debug_aranges","qualname":"::read::dwarf::Dwarf::debug_aranges","value":"read::aranges::DebugAranges<R>","parent":{"krate":0,"index":6804},"children":[],"decl_id":null,"docs":" The `.debug_aranges` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_aranges` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400071,"byte_end":400104,"line_start":30,"line_end":30,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":6809},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400189,"byte_end":400199,"line_start":34,"line_end":34,"column_start":9,"column_end":19},"name":"debug_info","qualname":"::read::dwarf::Dwarf::debug_info","value":"read::unit::DebugInfo<R>","parent":{"krate":0,"index":6804},"children":[],"decl_id":null,"docs":" The `.debug_info` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_info` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400150,"byte_end":400180,"line_start":33,"line_end":33,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":6810},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400259,"byte_end":400269,"line_start":37,"line_end":37,"column_start":9,"column_end":19},"name":"debug_line","qualname":"::read::dwarf::Dwarf::debug_line","value":"read::line::DebugLine<R>","parent":{"krate":0,"index":6804},"children":[],"decl_id":null,"docs":" The `.debug_line` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_line` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400220,"byte_end":400250,"line_start":36,"line_end":36,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":6811},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400333,"byte_end":400347,"line_start":40,"line_end":40,"column_start":9,"column_end":23},"name":"debug_line_str","qualname":"::read::dwarf::Dwarf::debug_line_str","value":"read::str::DebugLineStr<R>","parent":{"krate":0,"index":6804},"children":[],"decl_id":null,"docs":" The `.debug_line_str` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_line_str` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400290,"byte_end":400324,"line_start":39,"line_end":39,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":6812},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400409,"byte_end":400418,"line_start":43,"line_end":43,"column_start":9,"column_end":18},"name":"debug_str","qualname":"::read::dwarf::Dwarf::debug_str","value":"read::str::DebugStr<R>","parent":{"krate":0,"index":6804},"children":[],"decl_id":null,"docs":" The `.debug_str` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_str` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400371,"byte_end":400400,"line_start":42,"line_end":42,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":6813},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400484,"byte_end":400501,"line_start":46,"line_end":46,"column_start":9,"column_end":26},"name":"debug_str_offsets","qualname":"::read::dwarf::Dwarf::debug_str_offsets","value":"read::str::DebugStrOffsets<R>","parent":{"krate":0,"index":6804},"children":[],"decl_id":null,"docs":" The `.debug_str_offsets` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_str_offsets` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400438,"byte_end":400475,"line_start":45,"line_end":45,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":6814},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400568,"byte_end":400579,"line_start":49,"line_end":49,"column_start":9,"column_end":20},"name":"debug_types","qualname":"::read::dwarf::Dwarf::debug_types","value":"read::unit::DebugTypes<R>","parent":{"krate":0,"index":6804},"children":[],"decl_id":null,"docs":" The `.debug_types` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_types` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400528,"byte_end":400559,"line_start":48,"line_end":48,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":6815},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400684,"byte_end":400693,"line_start":52,"line_end":52,"column_start":9,"column_end":18},"name":"locations","qualname":"::read::dwarf::Dwarf::locations","value":"read::loclists::LocationLists<R>","parent":{"krate":0,"index":6804},"children":[],"decl_id":null,"docs":" The location lists in the `.debug_loc` and `.debug_loclists` sections.\n","sig":null,"attributes":[{"value":"/ The location lists in the `.debug_loc` and `.debug_loclists` sections.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400601,"byte_end":400675,"line_start":51,"line_end":51,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":6816},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400801,"byte_end":400807,"line_start":55,"line_end":55,"column_start":9,"column_end":15},"name":"ranges","qualname":"::read::dwarf::Dwarf::ranges","value":"read::rnglists::RangeLists<R>","parent":{"krate":0,"index":6804},"children":[],"decl_id":null,"docs":" The range lists in the `.debug_ranges` and `.debug_rnglists` sections.\n","sig":null,"attributes":[{"value":"/ The range lists in the `.debug_ranges` and `.debug_rnglists` sections.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400718,"byte_end":400792,"line_start":54,"line_end":54,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":6817},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400864,"byte_end":400873,"line_start":58,"line_end":58,"column_start":9,"column_end":18},"name":"file_type","qualname":"::read::dwarf::Dwarf::file_type","value":"common::DwarfFileType","parent":{"krate":0,"index":6804},"children":[],"decl_id":null,"docs":" The type of this file.\n","sig":null,"attributes":[{"value":"/ The type of this file.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400829,"byte_end":400855,"line_start":57,"line_end":57,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":6818},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400959,"byte_end":400962,"line_start":61,"line_end":61,"column_start":9,"column_end":12},"name":"sup","qualname":"::read::dwarf::Dwarf::sup","value":"core::option::Option<alloc::sync::Arc<read::dwarf::Dwarf<R>>>","parent":{"krate":0,"index":6804},"children":[],"decl_id":null,"docs":" The DWARF sections for a supplementary object file.\n","sig":null,"attributes":[{"value":"/ The DWARF sections for a supplementary object file.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400895,"byte_end":400950,"line_start":60,"line_end":60,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":951},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":401562,"byte_end":401566,"line_start":76,"line_end":76,"column_start":12,"column_end":16},"name":"load","qualname":"<Dwarf<T>>::load","value":"pub fn load<F, E>(F) -> core::result::Result<Self, E> where\nF: FnMut(SectionId) -> core::result::Result<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Try to load the DWARF sections using the given loader function.","sig":null,"attributes":[{"value":"/ Try to load the DWARF sections using the given loader function.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":401013,"byte_end":401080,"line_start":65,"line_end":65,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":401085,"byte_end":401088,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ `section` loads a DWARF section from the object file.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":401093,"byte_end":401150,"line_start":67,"line_end":67,"column_start":5,"column_end":62}},{"value":"/ It should return an empty section if the section does not exist.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":401155,"byte_end":401223,"line_start":68,"line_end":68,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":401228,"byte_end":401231,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ `section` may either directly return a `Reader` instance (such as","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":401236,"byte_end":401305,"line_start":70,"line_end":70,"column_start":5,"column_end":74}},{"value":"/ `EndianSlice`), or it may return some other type and then convert","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":401310,"byte_end":401379,"line_start":71,"line_end":71,"column_start":5,"column_end":74}},{"value":"/ that type into a `Reader` using `Dwarf::borrow`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":401384,"byte_end":401436,"line_start":72,"line_end":72,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":401441,"byte_end":401444,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ After loading, the user should set the `file_type` field and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":401449,"byte_end":401513,"line_start":74,"line_end":74,"column_start":5,"column_end":69}},{"value":"/ call `load_sup` if required.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":401518,"byte_end":401550,"line_start":75,"line_end":75,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":402909,"byte_end":402917,"line_start":107,"line_end":107,"column_start":12,"column_end":20},"name":"load_sup","qualname":"<Dwarf<T>>::load_sup","value":"pub fn load_sup<F, E>(&mut Self, F) -> core::result::Result<(), E> where\nF: FnMut(SectionId) -> core::result::Result<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Load the DWARF sections from the supplementary object file.","sig":null,"attributes":[{"value":"/ Load the DWARF sections from the supplementary object file.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":402712,"byte_end":402775,"line_start":102,"line_end":102,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":402780,"byte_end":402783,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ `section` operates the same as for `load`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":402788,"byte_end":402834,"line_start":104,"line_end":104,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":402839,"byte_end":402842,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ Sets `self.sup`, replacing any previous value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":402847,"byte_end":402897,"line_start":106,"line_end":106,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":957},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":404445,"byte_end":404451,"line_start":142,"line_end":142,"column_start":12,"column_end":18},"name":"borrow","qualname":"<Dwarf<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> Dwarf<R> where F: FnMut(&'a T) -> R","parent":null,"children":[],"decl_id":null,"docs":" Create a `Dwarf` structure that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `Dwarf` structure that references the data in `self`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":403136,"byte_end":403202,"line_start":115,"line_end":115,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":403207,"byte_end":403210,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":403215,"byte_end":403280,"line_start":117,"line_end":117,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":403285,"byte_end":403288,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":403293,"byte_end":403313,"line_start":119,"line_end":119,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":403318,"byte_end":403321,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ It can be useful to load DWARF sections into owned data structures,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":403326,"byte_end":403397,"line_start":121,"line_end":121,"column_start":5,"column_end":76}},{"value":"/ such as `Vec`. However, we do not implement the `Reader` trait","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":403402,"byte_end":403468,"line_start":122,"line_end":122,"column_start":5,"column_end":71}},{"value":"/ for `Vec`, because it would be very inefficient, but this trait","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":403473,"byte_end":403540,"line_start":123,"line_end":123,"column_start":5,"column_end":72}},{"value":"/ is required for all of the methods that parse the DWARF data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":403545,"byte_end":403610,"line_start":124,"line_end":124,"column_start":5,"column_end":70}},{"value":"/ So we first load the DWARF sections into `Vec`s, and then use","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":403615,"byte_end":403680,"line_start":125,"line_end":125,"column_start":5,"column_end":70}},{"value":"/ `borrow` to create `Reader`s that reference the data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":403685,"byte_end":403742,"line_start":126,"line_end":126,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":403747,"byte_end":403750,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":403755,"byte_end":403773,"line_start":128,"line_end":128,"column_start":5,"column_end":23}},{"value":"/ # fn example() -> Result<(), gimli::Error> {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":403778,"byte_end":403826,"line_start":129,"line_end":129,"column_start":5,"column_end":53}},{"value":"/ # let loader = |name| -> Result<_, gimli::Error> { unimplemented!() };","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":403831,"byte_end":403905,"line_start":130,"line_end":130,"column_start":5,"column_end":79}},{"value":"/ # let sup_loader = |name| -> Result<_, gimli::Error> { unimplemented!() };","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":403910,"byte_end":403988,"line_start":131,"line_end":131,"column_start":5,"column_end":83}},{"value":"/ // Read the DWARF sections into `Vec`s with whatever object loader you're using.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":403993,"byte_end":404077,"line_start":132,"line_end":132,"column_start":5,"column_end":89}},{"value":"/ let mut owned_dwarf: gimli::Dwarf<Vec<u8>> = gimli::Dwarf::load(loader)?;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":404082,"byte_end":404159,"line_start":133,"line_end":133,"column_start":5,"column_end":82}},{"value":"/ owned_dwarf.load_sup(sup_loader)?;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":404164,"byte_end":404202,"line_start":134,"line_end":134,"column_start":5,"column_end":43}},{"value":"/ // Create references to the DWARF sections.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":404207,"byte_end":404254,"line_start":135,"line_end":135,"column_start":5,"column_end":52}},{"value":"/ let dwarf = owned_dwarf.borrow(|section| {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":404259,"byte_end":404305,"line_start":136,"line_end":136,"column_start":5,"column_end":51}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":404310,"byte_end":404372,"line_start":137,"line_end":137,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":404377,"byte_end":404384,"line_start":138,"line_end":138,"column_start":5,"column_end":12}},{"value":"/ # unreachable!()","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":404389,"byte_end":404409,"line_start":139,"line_end":139,"column_start":5,"column_end":25}},{"value":"/ # }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":404414,"byte_end":404421,"line_start":140,"line_end":140,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":404426,"byte_end":404433,"line_start":141,"line_end":141,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":962},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":405470,"byte_end":405473,"line_start":164,"line_end":164,"column_start":12,"column_end":15},"name":"sup","qualname":"<Dwarf<T>>::sup","value":"pub fn sup(&Self) -> Option<&Dwarf<T>>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the DWARF sections for supplementary object file.\n","sig":null,"attributes":[{"value":"/ Return a reference to the DWARF sections for supplementary object file.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":405383,"byte_end":405458,"line_start":163,"line_end":163,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":965},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":405776,"byte_end":405781,"line_start":175,"line_end":175,"column_start":12,"column_end":17},"name":"units","qualname":"<Dwarf<R>>::units","value":"pub fn units(&Self) -> DebugInfoUnitHeadersIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate the unit headers in the `.debug_info` section.","sig":null,"attributes":[{"value":"/ Iterate the unit headers in the `.debug_info` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":405587,"byte_end":405645,"line_start":170,"line_end":170,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":405650,"byte_end":405653,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":405658,"byte_end":405679,"line_start":172,"line_end":172,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":405684,"byte_end":405750,"line_start":173,"line_end":173,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":405755,"byte_end":405764,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":966},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":405945,"byte_end":405949,"line_start":181,"line_end":181,"column_start":12,"column_end":16},"name":"unit","qualname":"<Dwarf<R>>::unit","value":"pub fn unit(&Self, UnitHeader<R>) -> Result<Unit<R>>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Unit` from the given unit header.\n","sig":null,"attributes":[{"value":"/ Construct a new `Unit` from the given unit header.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":405865,"byte_end":405919,"line_start":179,"line_end":179,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":405924,"byte_end":405933,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":967},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":406239,"byte_end":406249,"line_start":190,"line_end":190,"column_start":12,"column_end":22},"name":"type_units","qualname":"<Dwarf<R>>::type_units","value":"pub fn type_units(&Self) -> DebugTypesUnitHeadersIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate the type-unit headers in the `.debug_types` section.","sig":null,"attributes":[{"value":"/ Iterate the type-unit headers in the `.debug_types` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":406044,"byte_end":406108,"line_start":185,"line_end":185,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":406113,"byte_end":406116,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":406121,"byte_end":406142,"line_start":187,"line_end":187,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":406147,"byte_end":406213,"line_start":188,"line_end":188,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":406218,"byte_end":406227,"line_start":189,"line_end":189,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":406458,"byte_end":406471,"line_start":197,"line_end":197,"column_start":12,"column_end":25},"name":"abbreviations","qualname":"<Dwarf<R>>::abbreviations","value":"pub fn abbreviations(&Self, &UnitHeader<R>) -> Result<Abbreviations>","parent":null,"children":[],"decl_id":null,"docs":" Parse the abbreviations for a compilation unit.\n","sig":null,"attributes":[{"value":"/ Parse the abbreviations for a compilation unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":406335,"byte_end":406386,"line_start":194,"line_end":194,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":406437,"byte_end":406446,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":969},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":406660,"byte_end":406673,"line_start":203,"line_end":203,"column_start":12,"column_end":25},"name":"string_offset","qualname":"<Dwarf<R>>::string_offset","value":"pub fn string_offset(&Self, &Unit<R>, DebugStrOffsetsIndex<R::Offset>)\n-> Result<DebugStrOffset<R::Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Return the string offset at the given index.\n","sig":null,"attributes":[{"value":"/ Return the string offset at the given index.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":406586,"byte_end":406634,"line_start":201,"line_end":201,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":406639,"byte_end":406648,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":407013,"byte_end":407019,"line_start":214,"line_end":214,"column_start":12,"column_end":18},"name":"string","qualname":"<Dwarf<R>>::string","value":"pub fn string(&Self, DebugStrOffset<R::Offset>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Return the string at the given offset in `.debug_str`.\n","sig":null,"attributes":[{"value":"/ Return the string at the given offset in `.debug_str`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":406929,"byte_end":406987,"line_start":212,"line_end":212,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":406992,"byte_end":407001,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":971},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":407216,"byte_end":407227,"line_start":220,"line_end":220,"column_start":12,"column_end":23},"name":"line_string","qualname":"<Dwarf<R>>::line_string","value":"pub fn line_string(&Self, DebugLineStrOffset<R::Offset>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Return the string at the given offset in `.debug_line_str`.\n","sig":null,"attributes":[{"value":"/ Return the string at the given offset in `.debug_line_str`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":407127,"byte_end":407190,"line_start":218,"line_end":218,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":407195,"byte_end":407204,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":408040,"byte_end":408051,"line_start":238,"line_end":238,"column_start":12,"column_end":23},"name":"attr_string","qualname":"<Dwarf<R>>::attr_string","value":"pub fn attr_string(&Self, &Unit<R>, AttributeValue<R>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Return an attribute value as a string slice.","sig":null,"attributes":[{"value":"/ Return an attribute value as a string slice.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":407344,"byte_end":407392,"line_start":224,"line_end":224,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":407397,"byte_end":407400,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ If the attribute value is one of:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":407405,"byte_end":407442,"line_start":226,"line_end":226,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":407447,"byte_end":407450,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ - an inline `DW_FORM_string` string","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":407455,"byte_end":407494,"line_start":228,"line_end":228,"column_start":5,"column_end":44}},{"value":"/ - a `DW_FORM_strp` reference to an offset into the `.debug_str` section","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":407499,"byte_end":407574,"line_start":229,"line_end":229,"column_start":5,"column_end":80}},{"value":"/ - a `DW_FORM_strp_sup` reference to an offset into a supplementary","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":407579,"byte_end":407649,"line_start":230,"line_end":230,"column_start":5,"column_end":75}},{"value":"/ object file","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":407654,"byte_end":407669,"line_start":231,"line_end":231,"column_start":5,"column_end":20}},{"value":"/ - a `DW_FORM_line_strp` reference to an offset into the `.debug_line_str`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":407674,"byte_end":407751,"line_start":232,"line_end":232,"column_start":5,"column_end":82}},{"value":"/ section","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":407756,"byte_end":407767,"line_start":233,"line_end":233,"column_start":5,"column_end":16}},{"value":"/ - a `DW_FORM_strx` index into the `.debug_str_offsets` entries for the unit","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":407772,"byte_end":407851,"line_start":234,"line_end":234,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":407856,"byte_end":407859,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ then return the attribute's string value. Returns an error if the attribute","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":407864,"byte_end":407943,"line_start":236,"line_end":236,"column_start":5,"column_end":84}},{"value":"/ value does not have a string form, or if a string form has an invalid value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":407948,"byte_end":408028,"line_start":237,"line_end":237,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":973},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":409097,"byte_end":409104,"line_start":263,"line_end":263,"column_start":12,"column_end":19},"name":"address","qualname":"<Dwarf<R>>::address","value":"pub fn address(&Self, &Unit<R>, DebugAddrIndex<R::Offset>) -> Result<u64>","parent":null,"children":[],"decl_id":null,"docs":" Return the address at the given index.\n","sig":null,"attributes":[{"value":"/ Return the address at the given index.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":409043,"byte_end":409085,"line_start":262,"line_end":262,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":409599,"byte_end":409611,"line_start":277,"line_end":277,"column_start":12,"column_end":24},"name":"attr_address","qualname":"<Dwarf<R>>::attr_address","value":"pub fn attr_address(&Self, &Unit<R>, AttributeValue<R>) -> Result<Option<u64>>","parent":null,"children":[],"decl_id":null,"docs":" Try to return an attribute value as an address.","sig":null,"attributes":[{"value":"/ Try to return an attribute value as an address.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":409292,"byte_end":409343,"line_start":268,"line_end":268,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":409348,"byte_end":409351,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ If the attribute value is one of:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":409356,"byte_end":409393,"line_start":270,"line_end":270,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":409398,"byte_end":409401,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ - a `DW_FORM_addr`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":409406,"byte_end":409428,"line_start":272,"line_end":272,"column_start":5,"column_end":27}},{"value":"/ - a `DW_FORM_addrx` index into the `.debug_addr` entries for the unit","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":409433,"byte_end":409506,"line_start":273,"line_end":273,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":409511,"byte_end":409514,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ then return the address.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":409519,"byte_end":409547,"line_start":275,"line_end":275,"column_start":5,"column_end":33}},{"value":"/ Returns `None` for other forms.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":409552,"byte_end":409587,"line_start":276,"line_end":276,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":975},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":410045,"byte_end":410067,"line_start":288,"line_end":288,"column_start":12,"column_end":34},"name":"ranges_offset_from_raw","qualname":"<Dwarf<R>>::ranges_offset_from_raw","value":"pub fn ranges_offset_from_raw(&Self, &Unit<R>, RawRangeListsOffset<R::Offset>)\n-> RangeListsOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Return the range list offset for the given raw offset.","sig":null,"attributes":[{"value":"/ Return the range list offset for the given raw offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":409902,"byte_end":409960,"line_start":285,"line_end":285,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":409965,"byte_end":409968,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ This handles adding `DW_AT_GNU_ranges_base` if required.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":409973,"byte_end":410033,"line_start":287,"line_end":287,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":976},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":410489,"byte_end":410502,"line_start":301,"line_end":301,"column_start":12,"column_end":25},"name":"ranges_offset","qualname":"<Dwarf<R>>::ranges_offset","value":"pub fn ranges_offset(&Self, &Unit<R>, DebugRngListsIndex<R::Offset>)\n-> Result<RangeListsOffset<R::Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Return the range list offset at the given index.\n","sig":null,"attributes":[{"value":"/ Return the range list offset at the given index.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":410425,"byte_end":410477,"line_start":300,"line_end":300,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":977},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":410815,"byte_end":410821,"line_start":311,"line_end":311,"column_start":12,"column_end":18},"name":"ranges","qualname":"<Dwarf<R>>::ranges","value":"pub fn ranges(&Self, &Unit<R>, RangeListsOffset<R::Offset>)\n-> Result<RngListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the `RangeListEntry`s starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Iterate over the `RangeListEntry`s starting at the given offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":410735,"byte_end":410803,"line_start":310,"line_end":310,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":411205,"byte_end":411215,"line_start":326,"line_end":326,"column_start":12,"column_end":22},"name":"raw_ranges","qualname":"<Dwarf<R>>::raw_ranges","value":"pub fn raw_ranges(&Self, &Unit<R>, RangeListsOffset<R::Offset>)\n-> Result<RawRngListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the `RawRngListEntry`ies starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Iterate over the `RawRngListEntry`ies starting at the given offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":411122,"byte_end":411193,"line_start":325,"line_end":325,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":979},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":411825,"byte_end":411843,"line_start":343,"line_end":343,"column_start":12,"column_end":30},"name":"attr_ranges_offset","qualname":"<Dwarf<R>>::attr_ranges_offset","value":"pub fn attr_ranges_offset(&Self, &Unit<R>, AttributeValue<R>)\n-> Result<Option<RangeListsOffset<R::Offset>>>","parent":null,"children":[],"decl_id":null,"docs":" Try to return an attribute value as a range list offset.","sig":null,"attributes":[{"value":"/ Try to return an attribute value as a range list offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":411405,"byte_end":411465,"line_start":334,"line_end":334,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":411470,"byte_end":411473,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ If the attribute value is one of:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":411478,"byte_end":411515,"line_start":336,"line_end":336,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":411520,"byte_end":411523,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ - a `DW_FORM_sec_offset` reference to the `.debug_ranges` or `.debug_rnglists` sections","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":411528,"byte_end":411619,"line_start":338,"line_end":338,"column_start":5,"column_end":96}},{"value":"/ - a `DW_FORM_rnglistx` index into the `.debug_rnglists` entries for the unit","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":411624,"byte_end":411704,"line_start":339,"line_end":339,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":411709,"byte_end":411712,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ then return the range list offset of the range list.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":411717,"byte_end":411773,"line_start":341,"line_end":341,"column_start":5,"column_end":61}},{"value":"/ Returns `None` for other forms.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":411778,"byte_end":411813,"line_start":342,"line_end":342,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":980},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":412713,"byte_end":412724,"line_start":366,"line_end":366,"column_start":12,"column_end":23},"name":"attr_ranges","qualname":"<Dwarf<R>>::attr_ranges","value":"pub fn attr_ranges(&Self, &Unit<R>, AttributeValue<R>)\n-> Result<Option<RngListIter<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Try to return an attribute value as a range list entry iterator.","sig":null,"attributes":[{"value":"/ Try to return an attribute value as a range list entry iterator.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":412278,"byte_end":412346,"line_start":357,"line_end":357,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":412351,"byte_end":412354,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ If the attribute value is one of:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":412359,"byte_end":412396,"line_start":359,"line_end":359,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":412401,"byte_end":412404,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ - a `DW_FORM_sec_offset` reference to the `.debug_ranges` or `.debug_rnglists` sections","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":412409,"byte_end":412500,"line_start":361,"line_end":361,"column_start":5,"column_end":96}},{"value":"/ - a `DW_FORM_rnglistx` index into the `.debug_rnglists` entries for the unit","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":412505,"byte_end":412585,"line_start":362,"line_end":362,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":412590,"byte_end":412593,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ then return an iterator over the entries in the range list.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":412598,"byte_end":412661,"line_start":364,"line_end":364,"column_start":5,"column_end":68}},{"value":"/ Returns `None` for other forms.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":412666,"byte_end":412701,"line_start":365,"line_end":365,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":981},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":413179,"byte_end":413189,"line_start":380,"line_end":380,"column_start":12,"column_end":22},"name":"die_ranges","qualname":"<Dwarf<R>>::die_ranges","value":"pub fn die_ranges(&Self, &Unit<R>, &DebuggingInformationEntry<, , R>)\n-> Result<RangeIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator for the address ranges of a `DebuggingInformationEntry`.","sig":null,"attributes":[{"value":"/ Return an iterator for the address ranges of a `DebuggingInformationEntry`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":413010,"byte_end":413089,"line_start":377,"line_end":377,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":413094,"byte_end":413097,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ This uses `DW_AT_low_pc`, `DW_AT_high_pc` and `DW_AT_ranges`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":413102,"byte_end":413167,"line_start":379,"line_end":379,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":985},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":414958,"byte_end":414969,"line_start":426,"line_end":426,"column_start":12,"column_end":23},"name":"unit_ranges","qualname":"<Dwarf<R>>::unit_ranges","value":"pub fn unit_ranges(&Self, &Unit<R>) -> Result<RangeIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator for the address ranges of a `Unit`.","sig":null,"attributes":[{"value":"/ Return an iterator for the address ranges of a `Unit`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":414762,"byte_end":414820,"line_start":422,"line_end":422,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":414825,"byte_end":414828,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ This uses `DW_AT_low_pc`, `DW_AT_high_pc` and `DW_AT_ranges` of the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":414833,"byte_end":414904,"line_start":424,"line_end":424,"column_start":5,"column_end":76}},{"value":"/ root `DebuggingInformationEntry`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":414909,"byte_end":414946,"line_start":425,"line_end":425,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":415295,"byte_end":415311,"line_start":434,"line_end":434,"column_start":12,"column_end":28},"name":"locations_offset","qualname":"<Dwarf<R>>::locations_offset","value":"pub fn locations_offset(&Self, &Unit<R>, DebugLocListsIndex<R::Offset>)\n-> Result<LocationListsOffset<R::Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Return the location list offset at the given index.\n","sig":null,"attributes":[{"value":"/ Return the location list offset at the given index.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":415228,"byte_end":415283,"line_start":433,"line_end":433,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":987},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":415633,"byte_end":415642,"line_start":444,"line_end":444,"column_start":12,"column_end":21},"name":"locations","qualname":"<Dwarf<R>>::locations","value":"pub fn locations(&Self, &Unit<R>, LocationListsOffset<R::Offset>)\n-> Result<LocListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the `LocationListEntry`s starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Iterate over the `LocationListEntry`s starting at the given offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":415550,"byte_end":415621,"line_start":443,"line_end":443,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":416363,"byte_end":416376,"line_start":468,"line_end":468,"column_start":12,"column_end":25},"name":"raw_locations","qualname":"<Dwarf<R>>::raw_locations","value":"pub fn raw_locations(&Self, &Unit<R>, LocationListsOffset<R::Offset>)\n-> Result<RawLocListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the raw `LocationListEntry`s starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Iterate over the raw `LocationListEntry`s starting at the given offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":416276,"byte_end":416351,"line_start":467,"line_end":467,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":989},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":417163,"byte_end":417184,"line_start":488,"line_end":488,"column_start":12,"column_end":33},"name":"attr_locations_offset","qualname":"<Dwarf<R>>::attr_locations_offset","value":"pub fn attr_locations_offset(&Self, &Unit<R>, AttributeValue<R>)\n-> Result<Option<LocationListsOffset<R::Offset>>>","parent":null,"children":[],"decl_id":null,"docs":" Try to return an attribute value as a location list offset.","sig":null,"attributes":[{"value":"/ Try to return an attribute value as a location list offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":416737,"byte_end":416800,"line_start":479,"line_end":479,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":416805,"byte_end":416808,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ If the attribute value is one of:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":416813,"byte_end":416850,"line_start":481,"line_end":481,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":416855,"byte_end":416858,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ - a `DW_FORM_sec_offset` reference to the `.debug_loc` or `.debug_loclists` sections","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":416863,"byte_end":416951,"line_start":483,"line_end":483,"column_start":5,"column_end":93}},{"value":"/ - a `DW_FORM_loclistx` index into the `.debug_loclists` entries for the unit","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":416956,"byte_end":417036,"line_start":484,"line_end":484,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":417041,"byte_end":417044,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ then return the location list offset of the location list.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":417049,"byte_end":417111,"line_start":486,"line_end":486,"column_start":5,"column_end":67}},{"value":"/ Returns `None` for other forms.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":417116,"byte_end":417151,"line_start":487,"line_end":487,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":990},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":418031,"byte_end":418045,"line_start":511,"line_end":511,"column_start":12,"column_end":26},"name":"attr_locations","qualname":"<Dwarf<R>>::attr_locations","value":"pub fn attr_locations(&Self, &Unit<R>, AttributeValue<R>)\n-> Result<Option<LocListIter<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Try to return an attribute value as a location list entry iterator.","sig":null,"attributes":[{"value":"/ Try to return an attribute value as a location list entry iterator.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":417593,"byte_end":417664,"line_start":502,"line_end":502,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":417669,"byte_end":417672,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ If the attribute value is one of:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":417677,"byte_end":417714,"line_start":504,"line_end":504,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":417719,"byte_end":417722,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ - a `DW_FORM_sec_offset` reference to the `.debug_loc` or `.debug_loclists` sections","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":417727,"byte_end":417815,"line_start":506,"line_end":506,"column_start":5,"column_end":93}},{"value":"/ - a `DW_FORM_loclistx` index into the `.debug_loclists` entries for the unit","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":417820,"byte_end":417900,"line_start":507,"line_end":507,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":417905,"byte_end":417908,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ then return an iterator over the entries in the location list.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":417913,"byte_end":417979,"line_start":509,"line_end":509,"column_start":5,"column_end":71}},{"value":"/ Returns `None` for other forms.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":417984,"byte_end":418019,"line_start":510,"line_end":510,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":991},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":418515,"byte_end":418531,"line_start":525,"line_end":525,"column_start":12,"column_end":28},"name":"lookup_offset_id","qualname":"<Dwarf<R>>::lookup_offset_id","value":"pub fn lookup_offset_id(&Self, ReaderOffsetId)\n-> Option<(bool, SectionId, R::Offset)>","parent":null,"children":[],"decl_id":null,"docs":" Call `Reader::lookup_offset_id` for each section, and return the first match.","sig":null,"attributes":[{"value":"/ Call `Reader::lookup_offset_id` for each section, and return the first match.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":418337,"byte_end":418418,"line_start":522,"line_end":522,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":418423,"byte_end":418426,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ The first element of the tuple is `true` for supplementary sections.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":418431,"byte_end":418503,"line_start":524,"line_end":524,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1007},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":419723,"byte_end":419735,"line_start":548,"line_end":548,"column_start":12,"column_end":24},"name":"format_error","qualname":"<Dwarf<R>>::format_error","value":"pub fn format_error(&Self, Error) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns a string representation of the given error.","sig":null,"attributes":[{"value":"/ Returns a string representation of the given error.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":419551,"byte_end":419606,"line_start":545,"line_end":545,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":419611,"byte_end":419614,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ This uses information from the DWARF sections to provide more information in some cases.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":419619,"byte_end":419711,"line_start":547,"line_end":547,"column_start":5,"column_end":97}}]},{"kind":"Struct","id":{"krate":0,"index":6825},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":420419,"byte_end":420431,"line_start":571,"line_end":571,"column_start":12,"column_end":24},"name":"DwarfPackage","qualname":"::read::dwarf::DwarfPackage","value":"DwarfPackage { cu_index, tu_index, debug_abbrev, debug_info, debug_line, debug_str, debug_str_offsets, debug_loc, debug_loclists, debug_rnglists, debug_types, empty }","parent":null,"children":[{"krate":0,"index":6827},{"krate":0,"index":6828},{"krate":0,"index":6829},{"krate":0,"index":6830},{"krate":0,"index":6831},{"krate":0,"index":6832},{"krate":0,"index":6833},{"krate":0,"index":6834},{"krate":0,"index":6835},{"krate":0,"index":6836},{"krate":0,"index":6837},{"krate":0,"index":6838}],"decl_id":null,"docs":" The sections from a `.dwp` file.\n","sig":null,"attributes":[{"value":"/ The sections from a `.dwp` file.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":420354,"byte_end":420390,"line_start":569,"line_end":569,"column_start":1,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":6827},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":420522,"byte_end":420530,"line_start":573,"line_end":573,"column_start":9,"column_end":17},"name":"cu_index","qualname":"::read::dwarf::DwarfPackage::cu_index","value":"read::index::UnitIndex<R>","parent":{"krate":0,"index":6825},"children":[],"decl_id":null,"docs":" The compilation unit index in the `.debug_cu_index` section.\n","sig":null,"attributes":[{"value":"/ The compilation unit index in the `.debug_cu_index` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":420449,"byte_end":420513,"line_start":572,"line_end":572,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":6828},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":420617,"byte_end":420625,"line_start":576,"line_end":576,"column_start":9,"column_end":17},"name":"tu_index","qualname":"::read::dwarf::DwarfPackage::tu_index","value":"read::index::UnitIndex<R>","parent":{"krate":0,"index":6825},"children":[],"decl_id":null,"docs":" The type unit index in the `.debug_tu_index` section.\n","sig":null,"attributes":[{"value":"/ The type unit index in the `.debug_tu_index` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":420551,"byte_end":420608,"line_start":575,"line_end":575,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":6829},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":420691,"byte_end":420703,"line_start":579,"line_end":579,"column_start":9,"column_end":21},"name":"debug_abbrev","qualname":"::read::dwarf::DwarfPackage::debug_abbrev","value":"read::abbrev::DebugAbbrev<R>","parent":{"krate":0,"index":6825},"children":[],"decl_id":null,"docs":" The `.debug_abbrev.dwo` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_abbrev.dwo` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":420646,"byte_end":420682,"line_start":578,"line_end":578,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":6830},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":420769,"byte_end":420779,"line_start":582,"line_end":582,"column_start":9,"column_end":19},"name":"debug_info","qualname":"::read::dwarf::DwarfPackage::debug_info","value":"read::unit::DebugInfo<R>","parent":{"krate":0,"index":6825},"children":[],"decl_id":null,"docs":" The `.debug_info.dwo` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_info.dwo` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":420726,"byte_end":420760,"line_start":581,"line_end":581,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":6831},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":420843,"byte_end":420853,"line_start":585,"line_end":585,"column_start":9,"column_end":19},"name":"debug_line","qualname":"::read::dwarf::DwarfPackage::debug_line","value":"read::line::DebugLine<R>","parent":{"krate":0,"index":6825},"children":[],"decl_id":null,"docs":" The `.debug_line.dwo` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_line.dwo` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":420800,"byte_end":420834,"line_start":584,"line_end":584,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":6832},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":420916,"byte_end":420925,"line_start":588,"line_end":588,"column_start":9,"column_end":18},"name":"debug_str","qualname":"::read::dwarf::DwarfPackage::debug_str","value":"read::str::DebugStr<R>","parent":{"krate":0,"index":6825},"children":[],"decl_id":null,"docs":" The `.debug_str.dwo` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_str.dwo` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":420874,"byte_end":420907,"line_start":587,"line_end":587,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":6833},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":420995,"byte_end":421012,"line_start":591,"line_end":591,"column_start":9,"column_end":26},"name":"debug_str_offsets","qualname":"::read::dwarf::DwarfPackage::debug_str_offsets","value":"read::str::DebugStrOffsets<R>","parent":{"krate":0,"index":6825},"children":[],"decl_id":null,"docs":" The `.debug_str_offsets.dwo` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_str_offsets.dwo` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":420945,"byte_end":420986,"line_start":590,"line_end":590,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":6834},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":421159,"byte_end":421168,"line_start":596,"line_end":596,"column_start":9,"column_end":18},"name":"debug_loc","qualname":"::read::dwarf::DwarfPackage::debug_loc","value":"read::loclists::DebugLoc<R>","parent":{"krate":0,"index":6825},"children":[],"decl_id":null,"docs":" The `.debug_loc.dwo` section.","sig":null,"attributes":[{"value":"/ The `.debug_loc.dwo` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":421039,"byte_end":421072,"line_start":593,"line_end":593,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":421077,"byte_end":421080,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ Only present when using GNU split-dwarf extension to DWARF 4.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":421085,"byte_end":421150,"line_start":595,"line_end":595,"column_start":5,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":6835},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":421235,"byte_end":421249,"line_start":599,"line_end":599,"column_start":9,"column_end":23},"name":"debug_loclists","qualname":"::read::dwarf::DwarfPackage::debug_loclists","value":"read::loclists::DebugLocLists<R>","parent":{"krate":0,"index":6825},"children":[],"decl_id":null,"docs":" The `.debug_loclists.dwo` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_loclists.dwo` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":421188,"byte_end":421226,"line_start":598,"line_end":598,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":6836},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":421321,"byte_end":421335,"line_start":602,"line_end":602,"column_start":9,"column_end":23},"name":"debug_rnglists","qualname":"::read::dwarf::DwarfPackage::debug_rnglists","value":"read::rnglists::DebugRngLists<R>","parent":{"krate":0,"index":6825},"children":[],"decl_id":null,"docs":" The `.debug_rnglists.dwo` section.\n","sig":null,"attributes":[{"value":"/ The `.debug_rnglists.dwo` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":421274,"byte_end":421312,"line_start":601,"line_end":601,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":6837},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":421482,"byte_end":421493,"line_start":607,"line_end":607,"column_start":9,"column_end":20},"name":"debug_types","qualname":"::read::dwarf::DwarfPackage::debug_types","value":"read::unit::DebugTypes<R>","parent":{"krate":0,"index":6825},"children":[],"decl_id":null,"docs":" The `.debug_types.dwo` section.","sig":null,"attributes":[{"value":"/ The `.debug_types.dwo` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":421360,"byte_end":421395,"line_start":604,"line_end":604,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":421400,"byte_end":421403,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ Only present when using GNU split-dwarf extension to DWARF 4.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":421408,"byte_end":421473,"line_start":606,"line_end":606,"column_start":5,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":6838},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":421592,"byte_end":421597,"line_start":612,"line_end":612,"column_start":9,"column_end":14},"name":"empty","qualname":"::read::dwarf::DwarfPackage::empty","value":"R","parent":{"krate":0,"index":6825},"children":[],"decl_id":null,"docs":" An empty section.","sig":null,"attributes":[{"value":"/ An empty section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":421515,"byte_end":421536,"line_start":609,"line_end":609,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":421541,"byte_end":421544,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ Used when creating `Dwarf<R>`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":421549,"byte_end":421583,"line_start":611,"line_end":611,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1010},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":421866,"byte_end":421870,"line_start":620,"line_end":620,"column_start":12,"column_end":16},"name":"load","qualname":"<DwarfPackage<R>>::load","value":"pub fn load<F, E>(F, R) -> core::result::Result<Self, E> where\nF: FnMut(SectionId) -> core::result::Result<R, E>, E: From<Error>","parent":null,"children":[],"decl_id":null,"docs":" Try to load the `.dwp` sections using the given loader function.","sig":null,"attributes":[{"value":"/ Try to load the `.dwp` sections using the given loader function.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":421643,"byte_end":421711,"line_start":616,"line_end":616,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":421716,"byte_end":421719,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ `section` loads a DWARF section from the object file.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":421724,"byte_end":421781,"line_start":618,"line_end":618,"column_start":5,"column_end":62}},{"value":"/ It should return an empty section if the section does not exist.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":421786,"byte_end":421854,"line_start":619,"line_end":619,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1013},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":422896,"byte_end":422903,"line_start":644,"line_end":644,"column_start":12,"column_end":19},"name":"find_cu","qualname":"<DwarfPackage<R>>::find_cu","value":"pub fn find_cu(&Self, DwoId, &Dwarf<R>) -> Result<Option<Dwarf<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Find the compilation unit with the given DWO identifier and return its section\n contributions.\n","sig":null,"attributes":[{"value":"/ Find the compilation unit with the given DWO identifier and return its section","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":422779,"byte_end":422861,"line_start":642,"line_end":642,"column_start":5,"column_end":87}},{"value":"/ contributions.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":422866,"byte_end":422884,"line_start":643,"line_end":643,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":423269,"byte_end":423276,"line_start":654,"line_end":654,"column_start":12,"column_end":19},"name":"find_tu","qualname":"<DwarfPackage<R>>::find_tu","value":"pub fn find_tu(&Self, DebugTypeSignature, &Dwarf<R>)\n-> Result<Option<Dwarf<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Find the type unit with the given type signature and return its section\n contributions.\n","sig":null,"attributes":[{"value":"/ Find the type unit with the given type signature and return its section","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":423159,"byte_end":423234,"line_start":652,"line_end":652,"column_start":5,"column_end":80}},{"value":"/ contributions.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":423239,"byte_end":423257,"line_start":653,"line_end":653,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1015},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":423829,"byte_end":423840,"line_start":671,"line_end":671,"column_start":12,"column_end":23},"name":"cu_sections","qualname":"<DwarfPackage<R>>::cu_sections","value":"pub fn cu_sections(&Self, u32, &Dwarf<R>) -> Result<Dwarf<R>>","parent":null,"children":[],"decl_id":null,"docs":" Return the section contributions of the compilation unit at the given index.","sig":null,"attributes":[{"value":"/ Return the section contributions of the compilation unit at the given index.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":423590,"byte_end":423670,"line_start":666,"line_end":666,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":423675,"byte_end":423678,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ The index must be in the range `1..cu_index.unit_count`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":423683,"byte_end":423743,"line_start":668,"line_end":668,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":423748,"byte_end":423751,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ This function should only be needed by low level parsers.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":423756,"byte_end":423817,"line_start":670,"line_end":670,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":424213,"byte_end":424224,"line_start":680,"line_end":680,"column_start":12,"column_end":23},"name":"tu_sections","qualname":"<DwarfPackage<R>>::tu_sections","value":"pub fn tu_sections(&Self, u32, &Dwarf<R>) -> Result<Dwarf<R>>","parent":null,"children":[],"decl_id":null,"docs":" Return the section contributions of the compilation unit at the given index.","sig":null,"attributes":[{"value":"/ Return the section contributions of the compilation unit at the given index.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":423974,"byte_end":424054,"line_start":675,"line_end":675,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":424059,"byte_end":424062,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ The index must be in the range `1..tu_index.unit_count`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":424067,"byte_end":424127,"line_start":677,"line_end":677,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":424132,"byte_end":424135,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ This function should only be needed by low level parsers.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":424140,"byte_end":424201,"line_start":679,"line_end":679,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1017},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":424491,"byte_end":424499,"line_start":687,"line_end":687,"column_start":12,"column_end":20},"name":"sections","qualname":"<DwarfPackage<R>>::sections","value":"pub fn sections(&Self, UnitIndexSectionIterator<, R>, &Dwarf<R>)\n-> Result<Dwarf<R>>","parent":null,"children":[],"decl_id":null,"docs":" Return the section contributions of a unit.","sig":null,"attributes":[{"value":"/ Return the section contributions of a unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":424358,"byte_end":424405,"line_start":684,"line_end":684,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":424410,"byte_end":424413,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ This function should only be needed by low level parsers.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":424418,"byte_end":424479,"line_start":686,"line_end":686,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":6842},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":428423,"byte_end":428427,"line_start":793,"line_end":793,"column_start":12,"column_end":16},"name":"Unit","qualname":"::read::dwarf::Unit","value":"Unit { header, abbreviations, name, comp_dir, low_pc, str_offsets_base, addr_base, loclists_base, rnglists_base, line_program, dwo_id }","parent":null,"children":[{"krate":0,"index":6845},{"krate":0,"index":6846},{"krate":0,"index":6847},{"krate":0,"index":6848},{"krate":0,"index":6849},{"krate":0,"index":6850},{"krate":0,"index":6851},{"krate":0,"index":6852},{"krate":0,"index":6853},{"krate":0,"index":6854},{"krate":0,"index":6855}],"decl_id":null,"docs":" All of the commonly used information for a unit in the `.debug_info` or `.debug_types`\n sections.\n","sig":null,"attributes":[{"value":"/ All of the commonly used information for a unit in the `.debug_info` or `.debug_types`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":428290,"byte_end":428380,"line_start":790,"line_end":790,"column_start":1,"column_end":91}},{"value":"/ sections.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":428381,"byte_end":428394,"line_start":791,"line_end":791,"column_start":1,"column_end":14}}]},{"kind":"Field","id":{"krate":0,"index":6845},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":428569,"byte_end":428575,"line_start":799,"line_end":799,"column_start":9,"column_end":15},"name":"header","qualname":"::read::dwarf::Unit::header","value":"read::unit::UnitHeader<R, Offset>","parent":{"krate":0,"index":6842},"children":[],"decl_id":null,"docs":" The header of the unit.\n","sig":null,"attributes":[{"value":"/ The header of the unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":428533,"byte_end":428560,"line_start":798,"line_end":798,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":6846},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":428656,"byte_end":428669,"line_start":802,"line_end":802,"column_start":9,"column_end":22},"name":"abbreviations","qualname":"::read::dwarf::Unit::abbreviations","value":"read::abbrev::Abbreviations","parent":{"krate":0,"index":6842},"children":[],"decl_id":null,"docs":" The parsed abbreviations for the unit.\n","sig":null,"attributes":[{"value":"/ The parsed abbreviations for the unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":428605,"byte_end":428647,"line_start":801,"line_end":801,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":6847},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":428743,"byte_end":428747,"line_start":805,"line_end":805,"column_start":9,"column_end":13},"name":"name","qualname":"::read::dwarf::Unit::name","value":"core::option::Option<R>","parent":{"krate":0,"index":6842},"children":[],"decl_id":null,"docs":" The `DW_AT_name` attribute of the unit.\n","sig":null,"attributes":[{"value":"/ The `DW_AT_name` attribute of the unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":428691,"byte_end":428734,"line_start":804,"line_end":804,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":6848},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":428821,"byte_end":428829,"line_start":808,"line_end":808,"column_start":9,"column_end":17},"name":"comp_dir","qualname":"::read::dwarf::Unit::comp_dir","value":"core::option::Option<R>","parent":{"krate":0,"index":6842},"children":[],"decl_id":null,"docs":" The `DW_AT_comp_dir` attribute of the unit.\n","sig":null,"attributes":[{"value":"/ The `DW_AT_comp_dir` attribute of the unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":428765,"byte_end":428812,"line_start":807,"line_end":807,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":6849},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":428916,"byte_end":428922,"line_start":811,"line_end":811,"column_start":9,"column_end":15},"name":"low_pc","qualname":"::read::dwarf::Unit::low_pc","value":"u64","parent":{"krate":0,"index":6842},"children":[],"decl_id":null,"docs":" The `DW_AT_low_pc` attribute of the unit. Defaults to 0.\n","sig":null,"attributes":[{"value":"/ The `DW_AT_low_pc` attribute of the unit. Defaults to 0.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":428847,"byte_end":428907,"line_start":810,"line_end":810,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":6850},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":429013,"byte_end":429029,"line_start":814,"line_end":814,"column_start":9,"column_end":25},"name":"str_offsets_base","qualname":"::read::dwarf::Unit::str_offsets_base","value":"common::DebugStrOffsetsBase<Offset>","parent":{"krate":0,"index":6842},"children":[],"decl_id":null,"docs":" The `DW_AT_str_offsets_base` attribute of the unit. Defaults to 0.\n","sig":null,"attributes":[{"value":"/ The `DW_AT_str_offsets_base` attribute of the unit. Defaults to 0.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":428934,"byte_end":429004,"line_start":813,"line_end":813,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":6851},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":429137,"byte_end":429146,"line_start":817,"line_end":817,"column_start":9,"column_end":18},"name":"addr_base","qualname":"::read::dwarf::Unit::addr_base","value":"common::DebugAddrBase<Offset>","parent":{"krate":0,"index":6842},"children":[],"decl_id":null,"docs":" The `DW_AT_addr_base` attribute of the unit. Defaults to 0.\n","sig":null,"attributes":[{"value":"/ The `DW_AT_addr_base` attribute of the unit. Defaults to 0.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":429065,"byte_end":429128,"line_start":816,"line_end":816,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":6852},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":429252,"byte_end":429265,"line_start":820,"line_end":820,"column_start":9,"column_end":22},"name":"loclists_base","qualname":"::read::dwarf::Unit::loclists_base","value":"common::DebugLocListsBase<Offset>","parent":{"krate":0,"index":6842},"children":[],"decl_id":null,"docs":" The `DW_AT_loclists_base` attribute of the unit. Defaults to 0.\n","sig":null,"attributes":[{"value":"/ The `DW_AT_loclists_base` attribute of the unit. Defaults to 0.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":429176,"byte_end":429243,"line_start":819,"line_end":819,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":6853},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":429375,"byte_end":429388,"line_start":823,"line_end":823,"column_start":9,"column_end":22},"name":"rnglists_base","qualname":"::read::dwarf::Unit::rnglists_base","value":"common::DebugRngListsBase<Offset>","parent":{"krate":0,"index":6842},"children":[],"decl_id":null,"docs":" The `DW_AT_rnglists_base` attribute of the unit. Defaults to 0.\n","sig":null,"attributes":[{"value":"/ The `DW_AT_rnglists_base` attribute of the unit. Defaults to 0.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":429299,"byte_end":429366,"line_start":822,"line_end":822,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":6854},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":429471,"byte_end":429483,"line_start":826,"line_end":826,"column_start":9,"column_end":21},"name":"line_program","qualname":"::read::dwarf::Unit::line_program","value":"core::option::Option<read::line::IncompleteLineProgram<R, Offset>>","parent":{"krate":0,"index":6842},"children":[],"decl_id":null,"docs":" The line number program of the unit.\n","sig":null,"attributes":[{"value":"/ The line number program of the unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":429422,"byte_end":429462,"line_start":825,"line_end":825,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":6855},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":429601,"byte_end":429607,"line_start":829,"line_end":829,"column_start":9,"column_end":15},"name":"dwo_id","qualname":"::read::dwarf::Unit::dwo_id","value":"core::option::Option<common::DwoId>","parent":{"krate":0,"index":6842},"children":[],"decl_id":null,"docs":" The DWO ID of a skeleton unit or split compilation unit.\n","sig":null,"attributes":[{"value":"/ The DWO ID of a skeleton unit or split compilation unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":429532,"byte_end":429592,"line_start":828,"line_end":828,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1020},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":429737,"byte_end":429740,"line_start":835,"line_end":835,"column_start":12,"column_end":15},"name":"new","qualname":"<Unit<R>>::new","value":"pub fn new(&Dwarf<R>, UnitHeader<R>) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Unit` from the given unit header.\n","sig":null,"attributes":[{"value":"/ Construct a new `Unit` from the given unit header.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":429657,"byte_end":429711,"line_start":833,"line_end":833,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":429716,"byte_end":429725,"line_start":834,"line_end":834,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1021},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":434313,"byte_end":434321,"line_start":948,"line_end":948,"column_start":12,"column_end":20},"name":"encoding","qualname":"<Unit<R>>::encoding","value":"pub fn encoding(&Self) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding parameters for this unit.\n","sig":null,"attributes":[{"value":"/ Return the encoding parameters for this unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":434238,"byte_end":434287,"line_start":946,"line_end":946,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":434292,"byte_end":434301,"line_start":947,"line_end":947,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1022},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":434458,"byte_end":434463,"line_start":953,"line_end":953,"column_start":12,"column_end":17},"name":"entry","qualname":"<Unit<R>>::entry","value":"pub fn entry(&Self, UnitOffset<R::Offset>)\n-> Result<DebuggingInformationEntry<, , R>>","parent":null,"children":[],"decl_id":null,"docs":" Read the `DebuggingInformationEntry` at the given offset.\n","sig":null,"attributes":[{"value":"/ Read the `DebuggingInformationEntry` at the given offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":434385,"byte_end":434446,"line_start":952,"line_end":952,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1023},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":434690,"byte_end":434697,"line_start":959,"line_end":959,"column_start":12,"column_end":19},"name":"entries","qualname":"<Unit<R>>::entries","value":"pub fn entries(&Self) -> EntriesCursor<, , R>","parent":null,"children":[],"decl_id":null,"docs":" Navigate this unit's `DebuggingInformationEntry`s.\n","sig":null,"attributes":[{"value":"/ Navigate this unit's `DebuggingInformationEntry`s.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":434610,"byte_end":434664,"line_start":957,"line_end":957,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":434669,"byte_end":434678,"line_start":958,"line_end":958,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1024},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":434904,"byte_end":434921,"line_start":966,"line_end":966,"column_start":12,"column_end":29},"name":"entries_at_offset","qualname":"<Unit<R>>::entries_at_offset","value":"pub fn entries_at_offset(&Self, UnitOffset<R::Offset>)\n-> Result<EntriesCursor<, , R>>","parent":null,"children":[],"decl_id":null,"docs":" Navigate this unit's `DebuggingInformationEntry`s\n starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Navigate this unit's `DebuggingInformationEntry`s","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":434787,"byte_end":434840,"line_start":963,"line_end":963,"column_start":5,"column_end":58}},{"value":"/ starting at the given offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":434845,"byte_end":434878,"line_start":964,"line_end":964,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":434883,"byte_end":434892,"line_start":965,"line_end":965,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1025},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":435195,"byte_end":435207,"line_start":973,"line_end":973,"column_start":12,"column_end":24},"name":"entries_tree","qualname":"<Unit<R>>::entries_tree","value":"pub fn entries_tree(&Self, Option<UnitOffset<R::Offset>>)\n-> Result<EntriesTree<, , R>>","parent":null,"children":[],"decl_id":null,"docs":" Navigate this unit's `DebuggingInformationEntry`s as a tree\n starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Navigate this unit's `DebuggingInformationEntry`s as a tree","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":435068,"byte_end":435131,"line_start":970,"line_end":970,"column_start":5,"column_end":68}},{"value":"/ starting at the given offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":435136,"byte_end":435169,"line_start":971,"line_end":971,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":435174,"byte_end":435183,"line_start":972,"line_end":972,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":435450,"byte_end":435461,"line_start":979,"line_end":979,"column_start":12,"column_end":23},"name":"entries_raw","qualname":"<Unit<R>>::entries_raw","value":"pub fn entries_raw(&Self, Option<UnitOffset<R::Offset>>)\n-> Result<EntriesRaw<, , R>>","parent":null,"children":[],"decl_id":null,"docs":" Read the raw data that defines the Debugging Information Entries.\n","sig":null,"attributes":[{"value":"/ Read the raw data that defines the Debugging Information Entries.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":435355,"byte_end":435424,"line_start":977,"line_end":977,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":435429,"byte_end":435438,"line_start":978,"line_end":978,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1027},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":435829,"byte_end":435854,"line_start":986,"line_end":986,"column_start":12,"column_end":37},"name":"copy_relocated_attributes","qualname":"<Unit<R>>::copy_relocated_attributes","value":"pub fn copy_relocated_attributes(&mut Self, &Unit<R>)","parent":null,"children":[],"decl_id":null,"docs":" Copy attributes that are subject to relocation from another unit. This is intended\n to be used to copy attributes from a skeleton compilation unit to the corresponding\n split compilation unit.\n","sig":null,"attributes":[{"value":"/ Copy attributes that are subject to relocation from another unit. This is intended","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":435607,"byte_end":435693,"line_start":983,"line_end":983,"column_start":5,"column_end":91}},{"value":"/ to be used to copy attributes from a skeleton compilation unit to the corresponding","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":435698,"byte_end":435785,"line_start":984,"line_end":984,"column_start":5,"column_end":92}},{"value":"/ split compilation unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":435790,"byte_end":435817,"line_start":985,"line_end":985,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1030},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":436330,"byte_end":436344,"line_start":999,"line_end":999,"column_start":12,"column_end":26},"name":"to_unit_offset","qualname":"<UnitSectionOffset<T>>::to_unit_offset","value":"pub fn to_unit_offset<R>(&Self, &Unit<R>) -> Option<UnitOffset<T>> where\nR: Reader<Offset = T>","parent":null,"children":[],"decl_id":null,"docs":" Convert an offset to be relative to the start of the given unit,\n instead of relative to the start of the section.\n Returns `None` if the offset is not within the unit entries.\n","sig":null,"attributes":[{"value":"/ Convert an offset to be relative to the start of the given unit,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":436124,"byte_end":436192,"line_start":996,"line_end":996,"column_start":5,"column_end":73}},{"value":"/ instead of relative to the start of the section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":436197,"byte_end":436249,"line_start":997,"line_end":997,"column_start":5,"column_end":57}},{"value":"/ Returns `None` if the offset is not within the unit entries.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":436254,"byte_end":436318,"line_start":998,"line_end":998,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1034},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":437453,"byte_end":437475,"line_start":1030,"line_end":1030,"column_start":12,"column_end":34},"name":"to_unit_section_offset","qualname":"<UnitOffset<T>>::to_unit_section_offset","value":"pub fn to_unit_section_offset<R>(&Self, &Unit<R>) -> UnitSectionOffset<T>\nwhere R: Reader<Offset = T>","parent":null,"children":[],"decl_id":null,"docs":" Convert an offset to be relative to the start of the .debug_info section,\n instead of relative to the start of the given compilation unit.","sig":null,"attributes":[{"value":"/ Convert an offset to be relative to the start of the .debug_info section,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":437235,"byte_end":437312,"line_start":1026,"line_end":1026,"column_start":5,"column_end":82}},{"value":"/ instead of relative to the start of the given compilation unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":437317,"byte_end":437384,"line_start":1027,"line_end":1027,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":437389,"byte_end":437392,"line_start":1028,"line_end":1028,"column_start":5,"column_end":8}},{"value":"/ Does not check that the offset is valid.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":437397,"byte_end":437441,"line_start":1029,"line_end":1029,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":6860},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":438082,"byte_end":438091,"line_start":1049,"line_end":1049,"column_start":12,"column_end":21},"name":"RangeIter","qualname":"::read::dwarf::RangeIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator for the address ranges of a `DebuggingInformationEntry`.","sig":null,"attributes":[{"value":"/ An iterator for the address ranges of a `DebuggingInformationEntry`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":437915,"byte_end":437987,"line_start":1045,"line_end":1045,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":437988,"byte_end":437991,"line_start":1046,"line_end":1046,"column_start":1,"column_end":4}},{"value":"/ Returned by `Dwarf::die_ranges` and `Dwarf::unit_ranges`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":437992,"byte_end":438053,"line_start":1047,"line_end":1047,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1041},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":438447,"byte_end":438451,"line_start":1065,"line_end":1065,"column_start":12,"column_end":16},"name":"next","qualname":"<RangeIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<Range>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next range.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next range.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":438392,"byte_end":438435,"line_start":1064,"line_end":1064,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":6878},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":441460,"byte_end":441471,"line_start":17,"line_end":17,"column_start":12,"column_end":23},"name":"EndianSlice","qualname":"::read::endian_slice::EndianSlice","value":"EndianSlice {  }","parent":null,"children":[{"krate":0,"index":6881},{"krate":0,"index":6882}],"decl_id":null,"docs":" A `&[u8]` slice with endianity metadata.","sig":null,"attributes":[{"value":"/ A `&[u8]` slice with endianity metadata.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":441251,"byte_end":441295,"line_start":13,"line_end":13,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":441296,"byte_end":441299,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This implements the `Reader` trait, which is used for all reading of DWARF sections.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":441300,"byte_end":441388,"line_start":15,"line_end":15,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":441746,"byte_end":441749,"line_start":31,"line_end":31,"column_start":12,"column_end":15},"name":"new","qualname":"<EndianSlice>::new","value":"pub fn new(&'input [u8], Endian) -> EndianSlice","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `EndianSlice` with the given slice and endianity.\n","sig":null,"attributes":[{"value":"/ Construct a new `EndianSlice` with the given slice and endianity.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":441651,"byte_end":441720,"line_start":29,"line_end":29,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":441725,"byte_end":441734,"line_start":30,"line_end":30,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1089},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":442038,"byte_end":442041,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"buf","qualname":"<EndianSlice>::buf","value":"pub fn buf(&Self) -> &'input [u8]","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the raw slice.\n","sig":null,"attributes":[{"value":"/ Return a reference to the raw slice.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":441869,"byte_end":441909,"line_start":35,"line_end":35,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":441914,"byte_end":441923,"line_start":36,"line_end":36,"column_start":5,"column_end":14}},{"value":"deprecated(note =\n             \"Method renamed to EndianSlice::slice; use that instead.\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":441947,"byte_end":442026,"line_start":38,"line_end":38,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":442163,"byte_end":442168,"line_start":45,"line_end":45,"column_start":12,"column_end":17},"name":"slice","qualname":"<EndianSlice>::slice","value":"pub fn slice(&Self) -> &'input [u8]","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the raw slice.\n","sig":null,"attributes":[{"value":"/ Return a reference to the raw slice.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":442097,"byte_end":442137,"line_start":43,"line_end":43,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":442142,"byte_end":442151,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1091},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":442451,"byte_end":442459,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"split_at","qualname":"<EndianSlice>::split_at","value":"pub fn split_at(&Self, usize) -> (EndianSlice, EndianSlice)","parent":null,"children":[],"decl_id":null,"docs":" Split the slice in two at the given index, resulting in the tuple where\n the first item has range [0, idx), and the second has range [idx,\n len). Panics if the index is out of bounds.\n","sig":null,"attributes":[{"value":"/ Split the slice in two at the given index, resulting in the tuple where","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":442224,"byte_end":442299,"line_start":49,"line_end":49,"column_start":5,"column_end":80}},{"value":"/ the first item has range [0, idx), and the second has range [idx,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":442304,"byte_end":442373,"line_start":50,"line_end":50,"column_start":5,"column_end":74}},{"value":"/ len). Panics if the index is out of bounds.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":442378,"byte_end":442425,"line_start":51,"line_end":51,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":442430,"byte_end":442439,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":442732,"byte_end":442736,"line_start":62,"line_end":62,"column_start":12,"column_end":16},"name":"find","qualname":"<EndianSlice>::find","value":"pub fn find(&Self, u8) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Find the first occurence of a byte in the slice, and return its index.\n","sig":null,"attributes":[{"value":"/ Find the first occurence of a byte in the slice, and return its index.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":442632,"byte_end":442706,"line_start":60,"line_end":60,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":442711,"byte_end":442720,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":442960,"byte_end":442971,"line_start":69,"line_end":69,"column_start":12,"column_end":23},"name":"offset_from","qualname":"<EndianSlice>::offset_from","value":"pub fn offset_from(&Self, EndianSlice) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the offset of the start of the slice relative to the start\n of the given slice.\n","sig":null,"attributes":[{"value":"/ Return the offset of the start of the slice relative to the start","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":442837,"byte_end":442906,"line_start":66,"line_end":66,"column_start":5,"column_end":74}},{"value":"/ of the given slice.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":442911,"byte_end":442934,"line_start":67,"line_end":67,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":442939,"byte_end":442948,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1095},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":443463,"byte_end":443472,"line_start":81,"line_end":81,"column_start":12,"column_end":21},"name":"to_string","qualname":"<EndianSlice>::to_string","value":"pub fn to_string(&Self) -> Result<&'input str>","parent":null,"children":[],"decl_id":null,"docs":" Converts the slice to a string using `str::from_utf8`.","sig":null,"attributes":[{"value":"/ Converts the slice to a string using `str::from_utf8`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":443304,"byte_end":443362,"line_start":77,"line_end":77,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":443367,"byte_end":443370,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the slice contains invalid characters.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":443375,"byte_end":443437,"line_start":79,"line_end":79,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":443442,"byte_end":443451,"line_start":80,"line_end":80,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1097},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":443740,"byte_end":443755,"line_start":89,"line_end":89,"column_start":12,"column_end":27},"name":"to_string_lossy","qualname":"<EndianSlice>::to_string_lossy","value":"pub fn to_string_lossy(&Self) -> Cow","parent":null,"children":[],"decl_id":null,"docs":" Converts the slice to a string, including invalid characters,\n using `String::from_utf8_lossy`.\n","sig":null,"attributes":[{"value":"/ Converts the slice to a string, including invalid characters,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":443579,"byte_end":443644,"line_start":85,"line_end":85,"column_start":5,"column_end":70}},{"value":"/ using `String::from_utf8_lossy`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":443649,"byte_end":443685,"line_start":86,"line_end":86,"column_start":5,"column_end":41}},{"value":"cfg(feature = \"read\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":443690,"byte_end":443714,"line_start":87,"line_end":87,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":443719,"byte_end":443728,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":444940,"byte_end":444945,"line_start":126,"line_end":126,"column_start":12,"column_end":17},"name":"range","qualname":"<EndianSlice>::range","value":"pub fn range(&Self, Range<usize>) -> EndianSlice","parent":null,"children":[],"decl_id":null,"docs":" Take the given `start..end` range of the underlying slice and return a\n new `EndianSlice`.","sig":null,"attributes":[{"value":"/ Take the given `start..end` range of the underlying slice and return a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":444515,"byte_end":444589,"line_start":115,"line_end":115,"column_start":5,"column_end":79}},{"value":"/ new `EndianSlice`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":444594,"byte_end":444616,"line_start":116,"line_end":116,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":444621,"byte_end":444624,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":444629,"byte_end":444636,"line_start":118,"line_end":118,"column_start":5,"column_end":12}},{"value":"/ use gimli::{EndianSlice, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":444641,"byte_end":444684,"line_start":119,"line_end":119,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":444689,"byte_end":444692,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ let slice = &[0x01, 0x02, 0x03, 0x04];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":444697,"byte_end":444739,"line_start":121,"line_end":121,"column_start":5,"column_end":47}},{"value":"/ let endian_slice = EndianSlice::new(slice, LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":444744,"byte_end":444805,"line_start":122,"line_end":122,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(endian_slice.range(1..3),","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":444810,"byte_end":444850,"line_start":123,"line_end":123,"column_start":5,"column_end":45}},{"value":"/            EndianSlice::new(&slice[1..3], LittleEndian));","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":444855,"byte_end":444916,"line_start":124,"line_end":124,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":444921,"byte_end":444928,"line_start":125,"line_end":125,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1103},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":445543,"byte_end":445553,"line_start":144,"line_end":144,"column_start":12,"column_end":22},"name":"range_from","qualname":"<EndianSlice>::range_from","value":"pub fn range_from(&Self, RangeFrom<usize>) -> EndianSlice","parent":null,"children":[],"decl_id":null,"docs":" Take the given `start..` range of the underlying slice and return a new\n `EndianSlice`.","sig":null,"attributes":[{"value":"/ Take the given `start..` range of the underlying slice and return a new","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":445118,"byte_end":445193,"line_start":133,"line_end":133,"column_start":5,"column_end":80}},{"value":"/ `EndianSlice`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":445198,"byte_end":445216,"line_start":134,"line_end":134,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":445221,"byte_end":445224,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":445229,"byte_end":445236,"line_start":136,"line_end":136,"column_start":5,"column_end":12}},{"value":"/ use gimli::{EndianSlice, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":445241,"byte_end":445284,"line_start":137,"line_end":137,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":445289,"byte_end":445292,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ let slice = &[0x01, 0x02, 0x03, 0x04];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":445297,"byte_end":445339,"line_start":139,"line_end":139,"column_start":5,"column_end":47}},{"value":"/ let endian_slice = EndianSlice::new(slice, LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":445344,"byte_end":445405,"line_start":140,"line_end":140,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(endian_slice.range_from(2..),","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":445410,"byte_end":445454,"line_start":141,"line_end":141,"column_start":5,"column_end":49}},{"value":"/            EndianSlice::new(&slice[2..], LittleEndian));","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":445459,"byte_end":445519,"line_start":142,"line_end":142,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":445524,"byte_end":445531,"line_start":143,"line_end":143,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1104},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":446151,"byte_end":446159,"line_start":162,"line_end":162,"column_start":12,"column_end":20},"name":"range_to","qualname":"<EndianSlice>::range_to","value":"pub fn range_to(&Self, RangeTo<usize>) -> EndianSlice","parent":null,"children":[],"decl_id":null,"docs":" Take the given `..end` range of the underlying slice and return a new\n `EndianSlice`.","sig":null,"attributes":[{"value":"/ Take the given `..end` range of the underlying slice and return a new","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":445730,"byte_end":445803,"line_start":151,"line_end":151,"column_start":5,"column_end":78}},{"value":"/ `EndianSlice`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":445808,"byte_end":445826,"line_start":152,"line_end":152,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":445831,"byte_end":445834,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":445839,"byte_end":445846,"line_start":154,"line_end":154,"column_start":5,"column_end":12}},{"value":"/ use gimli::{EndianSlice, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":445851,"byte_end":445894,"line_start":155,"line_end":155,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":445899,"byte_end":445902,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ let slice = &[0x01, 0x02, 0x03, 0x04];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":445907,"byte_end":445949,"line_start":157,"line_end":157,"column_start":5,"column_end":47}},{"value":"/ let endian_slice = EndianSlice::new(slice, LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":445954,"byte_end":446015,"line_start":158,"line_end":158,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(endian_slice.range_to(..3),","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":446020,"byte_end":446062,"line_start":159,"line_end":159,"column_start":5,"column_end":47}},{"value":"/            EndianSlice::new(&slice[..3], LittleEndian));","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":446067,"byte_end":446127,"line_start":160,"line_end":160,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":446132,"byte_end":446139,"line_start":161,"line_end":161,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":6918},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451161,"byte_end":451175,"line_start":19,"line_end":19,"column_start":12,"column_end":26},"name":"ReaderOffsetId","qualname":"::read::reader::ReaderOffsetId","value":"","parent":null,"children":[],"decl_id":null,"docs":" An identifier for an offset within a section reader.","sig":null,"attributes":[{"value":"/ An identifier for an offset within a section reader.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":450799,"byte_end":450855,"line_start":13,"line_end":13,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":450856,"byte_end":450859,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This is used for error reporting. The meaning of this value is specific to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":450860,"byte_end":450938,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ each reader implementation. The values should be chosen to be unique amongst","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":450939,"byte_end":451019,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/ all readers. If values are not unique then errors may point to the wrong reader.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451020,"byte_end":451104,"line_start":17,"line_end":17,"column_start":1,"column_end":85}}]},{"kind":"Field","id":{"krate":0,"index":6920},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451176,"byte_end":451183,"line_start":19,"line_end":19,"column_start":27,"column_end":34},"name":"0","qualname":"::read::reader::ReaderOffsetId::0","value":"u64","parent":{"krate":0,"index":6918},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1185},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451335,"byte_end":451347,"line_start":24,"line_end":24,"column_start":11,"column_end":23},"name":"ReaderOffset","qualname":"::read::reader::ReaderOffset","value":"ReaderOffset: Debug + Copy + Eq + Ord + Hash + Add<Output = Self> + AddAssign + Sub<Output =\nSelf>","parent":null,"children":[{"krate":0,"index":1186},{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1193}],"decl_id":null,"docs":" A trait for offsets with a DWARF section.","sig":null,"attributes":[{"value":"/ A trait for offsets with a DWARF section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451187,"byte_end":451232,"line_start":21,"line_end":21,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451233,"byte_end":451236,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This allows consumers to choose a size that is appropriate for their address space.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451237,"byte_end":451324,"line_start":23,"line_end":23,"column_start":1,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451482,"byte_end":451489,"line_start":28,"line_end":28,"column_start":8,"column_end":15},"name":"from_u8","qualname":"::read::reader::ReaderOffset::from_u8","value":"pub fn from_u8(u8) -> Self","parent":{"krate":0,"index":1185},"children":[],"decl_id":null,"docs":" Convert a u8 to an offset.\n","sig":null,"attributes":[{"value":"/ Convert a u8 to an offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451444,"byte_end":451474,"line_start":27,"line_end":27,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1187},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451555,"byte_end":451563,"line_start":31,"line_end":31,"column_start":8,"column_end":16},"name":"from_u16","qualname":"::read::reader::ReaderOffset::from_u16","value":"pub fn from_u16(u16) -> Self","parent":{"krate":0,"index":1185},"children":[],"decl_id":null,"docs":" Convert a u16 to an offset.\n","sig":null,"attributes":[{"value":"/ Convert a u16 to an offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451516,"byte_end":451547,"line_start":30,"line_end":30,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451631,"byte_end":451639,"line_start":34,"line_end":34,"column_start":8,"column_end":16},"name":"from_i16","qualname":"::read::reader::ReaderOffset::from_i16","value":"pub fn from_i16(i16) -> Self","parent":{"krate":0,"index":1185},"children":[],"decl_id":null,"docs":" Convert an i16 to an offset.\n","sig":null,"attributes":[{"value":"/ Convert an i16 to an offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451591,"byte_end":451623,"line_start":33,"line_end":33,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451706,"byte_end":451714,"line_start":37,"line_end":37,"column_start":8,"column_end":16},"name":"from_u32","qualname":"::read::reader::ReaderOffset::from_u32","value":"pub fn from_u32(u32) -> Self","parent":{"krate":0,"index":1185},"children":[],"decl_id":null,"docs":" Convert a u32 to an offset.\n","sig":null,"attributes":[{"value":"/ Convert a u32 to an offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451667,"byte_end":451698,"line_start":36,"line_end":36,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451859,"byte_end":451867,"line_start":42,"line_end":42,"column_start":8,"column_end":16},"name":"from_u64","qualname":"::read::reader::ReaderOffset::from_u64","value":"pub fn from_u64(u64) -> Result<Self>","parent":{"krate":0,"index":1185},"children":[],"decl_id":null,"docs":" Convert a u64 to an offset.","sig":null,"attributes":[{"value":"/ Convert a u64 to an offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451742,"byte_end":451773,"line_start":39,"line_end":39,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451778,"byte_end":451781,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ Returns `Error::UnsupportedOffset` if the value is too large.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451786,"byte_end":451851,"line_start":41,"line_end":41,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451942,"byte_end":451950,"line_start":45,"line_end":45,"column_start":8,"column_end":16},"name":"into_u64","qualname":"::read::reader::ReaderOffset::into_u64","value":"pub fn into_u64(Self) -> u64","parent":{"krate":0,"index":1185},"children":[],"decl_id":null,"docs":" Convert an offset to a u64.\n","sig":null,"attributes":[{"value":"/ Convert an offset to a u64.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451903,"byte_end":451934,"line_start":44,"line_end":44,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":452035,"byte_end":452047,"line_start":48,"line_end":48,"column_start":8,"column_end":20},"name":"wrapping_add","qualname":"::read::reader::ReaderOffset::wrapping_add","value":"pub fn wrapping_add(Self, Self) -> Self","parent":{"krate":0,"index":1185},"children":[],"decl_id":null,"docs":" Wrapping (modular) addition. Computes `self + other`.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) addition. Computes `self + other`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451970,"byte_end":452027,"line_start":47,"line_end":47,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1193},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":452138,"byte_end":452149,"line_start":51,"line_end":51,"column_start":8,"column_end":19},"name":"checked_sub","qualname":"::read::reader::ReaderOffset::checked_sub","value":"pub fn checked_sub(Self, Self) -> Option<Self>","parent":{"krate":0,"index":1185},"children":[],"decl_id":null,"docs":" Checked subtraction. Computes `self - other`.\n","sig":null,"attributes":[{"value":"/ Checked subtraction. Computes `self - other`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":452081,"byte_end":452130,"line_start":50,"line_end":50,"column_start":5,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":1221},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":456405,"byte_end":456411,"line_start":215,"line_end":215,"column_start":11,"column_end":17},"name":"Reader","qualname":"::read::reader::Reader","value":"Reader: Debug + Clone","parent":null,"children":[{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1232},{"krate":0,"index":1233},{"krate":0,"index":1234},{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1240},{"krate":0,"index":1241},{"krate":0,"index":1243},{"krate":0,"index":1245},{"krate":0,"index":1247},{"krate":0,"index":1249},{"krate":0,"index":1251},{"krate":0,"index":1253},{"krate":0,"index":1255},{"krate":0,"index":1257},{"krate":0,"index":1259},{"krate":0,"index":1261},{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1265},{"krate":0,"index":1266},{"krate":0,"index":1268},{"krate":0,"index":1269},{"krate":0,"index":1270},{"krate":0,"index":1273},{"krate":0,"index":1274},{"krate":0,"index":1275},{"krate":0,"index":1276},{"krate":0,"index":1277}],"decl_id":null,"docs":" A trait for reading the data from a DWARF section.","sig":null,"attributes":[{"value":"/ A trait for reading the data from a DWARF section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":454811,"byte_end":454865,"line_start":196,"line_end":196,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":454866,"byte_end":454869,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ All read operations advance the section offset of the reader","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":454870,"byte_end":454934,"line_start":198,"line_end":198,"column_start":1,"column_end":65}},{"value":"/ unless specified otherwise.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":454935,"byte_end":454966,"line_start":199,"line_end":199,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":454967,"byte_end":454970,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ ## Choosing a `Reader` Implementation","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":454971,"byte_end":455012,"line_start":201,"line_end":201,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":455013,"byte_end":455016,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ `gimli` comes with a few different `Reader` implementations and lets you","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":455017,"byte_end":455093,"line_start":203,"line_end":203,"column_start":1,"column_end":77}},{"value":"/ choose the one that is right for your use case. A `Reader` is essentially a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":455094,"byte_end":455173,"line_start":204,"line_end":204,"column_start":1,"column_end":80}},{"value":"/ view into the raw bytes that make up some DWARF, but this view might borrow","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":455174,"byte_end":455253,"line_start":205,"line_end":205,"column_start":1,"column_end":80}},{"value":"/ the underlying data or use reference counting ownership, and it might be","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":455254,"byte_end":455330,"line_start":206,"line_end":206,"column_start":1,"column_end":77}},{"value":"/ thread safe or not.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":455331,"byte_end":455354,"line_start":207,"line_end":207,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":455355,"byte_end":455358,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ | Implementation    | Ownership         | Thread Safe | Notes |","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":455359,"byte_end":455426,"line_start":209,"line_end":209,"column_start":1,"column_end":68}},{"value":"/ |:------------------|:------------------|:------------|:------|","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":455427,"byte_end":455494,"line_start":210,"line_end":210,"column_start":1,"column_end":68}},{"value":"/ | [`EndianSlice`](./struct.EndianSlice.html)        | Borrowed          | Yes         | Fastest, but requires that all of your code work with borrows. |","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":455495,"byte_end":455651,"line_start":211,"line_end":211,"column_start":1,"column_end":157}},{"value":"/ | [`EndianRcSlice`](./struct.EndianRcSlice.html)    | Reference counted | No          | Shared ownership via reference counting, which alleviates the borrow restrictions of `EndianSlice` but imposes reference counting increments and decrements. Cannot be sent across threads, because the reference count is not atomic. |","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":455652,"byte_end":455976,"line_start":212,"line_end":212,"column_start":1,"column_end":325}},{"value":"/ | [`EndianArcSlice`](./struct.EndianArcSlice.html)  | Reference counted | Yes         | The same as `EndianRcSlice`, but uses atomic reference counting, and therefore reference counting operations are slower but `EndianArcSlice`s may be sent across threads. |","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":455977,"byte_end":456240,"line_start":213,"line_end":213,"column_start":1,"column_end":264}},{"value":"/ | [`EndianReader<T>`](./struct.EndianReader.html)   | Same as `T`       | Same as `T` | Escape hatch for easily defining your own type of `Reader`. |","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":456241,"byte_end":456394,"line_start":214,"line_end":214,"column_start":1,"column_end":154}}]},{"kind":"Type","id":{"krate":0,"index":1222},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":456484,"byte_end":456490,"line_start":217,"line_end":217,"column_start":10,"column_end":16},"name":"Endian","qualname":"::read::reader::Reader::Endian","value":"type Endian: Endianity;","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" The endianity of bytes that are read.\n","sig":null,"attributes":[{"value":"/ The endianity of bytes that are read.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":456433,"byte_end":456474,"line_start":216,"line_end":216,"column_start":5,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1223},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":456560,"byte_end":456566,"line_start":220,"line_end":220,"column_start":10,"column_end":16},"name":"Offset","qualname":"::read::reader::Reader::Offset","value":"type Offset: ReaderOffset;","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" The type used for offsets and lengths.\n","sig":null,"attributes":[{"value":"/ The type used for offsets and lengths.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":456508,"byte_end":456550,"line_start":219,"line_end":219,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":456643,"byte_end":456649,"line_start":223,"line_end":223,"column_start":8,"column_end":14},"name":"endian","qualname":"::read::reader::Reader::endian","value":"pub fn endian(&Self) -> Self::Endian","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Return the endianity of bytes that are read.\n","sig":null,"attributes":[{"value":"/ Return the endianity of bytes that are read.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":456587,"byte_end":456635,"line_start":222,"line_end":222,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1225},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":456728,"byte_end":456731,"line_start":226,"line_end":226,"column_start":8,"column_end":11},"name":"len","qualname":"::read::reader::Reader::len","value":"pub fn len(&Self) -> Self::Offset","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Return the number of bytes remaining.\n","sig":null,"attributes":[{"value":"/ Return the number of bytes remaining.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":456679,"byte_end":456720,"line_start":225,"line_end":225,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1226},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":456815,"byte_end":456820,"line_start":229,"line_end":229,"column_start":8,"column_end":13},"name":"empty","qualname":"::read::reader::Reader::empty","value":"pub fn empty(&mut Self)","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Set the number of bytes remaining to zero.\n","sig":null,"attributes":[{"value":"/ Set the number of bytes remaining to zero.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":456761,"byte_end":456807,"line_start":228,"line_end":228,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1227},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":456908,"byte_end":456916,"line_start":232,"line_end":232,"column_start":8,"column_end":16},"name":"truncate","qualname":"::read::reader::Reader::truncate","value":"pub fn truncate(&mut Self, Self::Offset) -> Result<()>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Set the number of bytes remaining to the specified length.\n","sig":null,"attributes":[{"value":"/ Set the number of bytes remaining to the specified length.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":456838,"byte_end":456900,"line_start":231,"line_end":231,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":457191,"byte_end":457202,"line_start":239,"line_end":239,"column_start":8,"column_end":19},"name":"offset_from","qualname":"::read::reader::Reader::offset_from","value":"pub fn offset_from(&Self, &Self) -> Self::Offset","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Return the offset of this reader's data relative to the start of\n the given base reader's data.","sig":null,"attributes":[{"value":"/ Return the offset of this reader's data relative to the start of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":456967,"byte_end":457035,"line_start":234,"line_end":234,"column_start":5,"column_end":73}},{"value":"/ the given base reader's data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":457040,"byte_end":457073,"line_start":235,"line_end":235,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":457078,"byte_end":457081,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ May panic if this reader's data is not contained within the given","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":457086,"byte_end":457155,"line_start":237,"line_end":237,"column_start":5,"column_end":74}},{"value":"/ base reader's data.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":457160,"byte_end":457183,"line_start":238,"line_end":238,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1229},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":457308,"byte_end":457317,"line_start":242,"line_end":242,"column_start":8,"column_end":17},"name":"offset_id","qualname":"::read::reader::Reader::offset_id","value":"pub fn offset_id(&Self) -> ReaderOffsetId","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Return an identifier for the current reader offset.\n","sig":null,"attributes":[{"value":"/ Return an identifier for the current reader offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":457245,"byte_end":457300,"line_start":241,"line_end":241,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1230},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":457456,"byte_end":457472,"line_start":246,"line_end":246,"column_start":8,"column_end":24},"name":"lookup_offset_id","qualname":"::read::reader::Reader::lookup_offset_id","value":"pub fn lookup_offset_id(&Self, ReaderOffsetId) -> Option<Self::Offset>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Return the offset corresponding to the given `id` if\n it is associated with this reader.\n","sig":null,"attributes":[{"value":"/ Return the offset corresponding to the given `id` if","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":457349,"byte_end":457405,"line_start":244,"line_end":244,"column_start":5,"column_end":61}},{"value":"/ it is associated with this reader.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":457410,"byte_end":457448,"line_start":245,"line_end":245,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1231},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":457647,"byte_end":457651,"line_start":250,"line_end":250,"column_start":8,"column_end":12},"name":"find","qualname":"::read::reader::Reader::find","value":"pub fn find(&Self, u8) -> Result<Self::Offset>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Find the index of the first occurence of the given byte.\n The offset of the reader is not changed.\n","sig":null,"attributes":[{"value":"/ Find the index of the first occurence of the given byte.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":457530,"byte_end":457590,"line_start":248,"line_end":248,"column_start":5,"column_end":65}},{"value":"/ The offset of the reader is not changed.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":457595,"byte_end":457639,"line_start":249,"line_end":249,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1232},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":457749,"byte_end":457753,"line_start":253,"line_end":253,"column_start":8,"column_end":12},"name":"skip","qualname":"::read::reader::Reader::skip","value":"pub fn skip(&mut Self, Self::Offset) -> Result<()>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Discard the specified number of bytes.\n","sig":null,"attributes":[{"value":"/ Discard the specified number of bytes.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":457699,"byte_end":457741,"line_start":252,"line_end":252,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1233},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":457989,"byte_end":457994,"line_start":259,"line_end":259,"column_start":8,"column_end":13},"name":"split","qualname":"::read::reader::Reader::split","value":"pub fn split(&mut Self, Self::Offset) -> Result<Self>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Split a reader in two.","sig":null,"attributes":[{"value":"/ Split a reader in two.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":457804,"byte_end":457830,"line_start":255,"line_end":255,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":457835,"byte_end":457838,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ A new reader is returned that can be used to read the next","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":457843,"byte_end":457905,"line_start":257,"line_end":257,"column_start":5,"column_end":67}},{"value":"/ `len` bytes, and `self` is advanced so that it reads the remainder.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":457910,"byte_end":457981,"line_start":258,"line_end":258,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1234},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":458744,"byte_end":458752,"line_start":277,"line_end":277,"column_start":8,"column_end":16},"name":"to_slice","qualname":"::read::reader::Reader::to_slice","value":"pub fn to_slice(&Self) -> Result<Cow<, [u8]>>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Return all remaining data as a clone-on-write slice.","sig":null,"attributes":[{"value":"/ Return all remaining data as a clone-on-write slice.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":458487,"byte_end":458543,"line_start":270,"line_end":270,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":458548,"byte_end":458551,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ The slice will be borrowed where possible, but some readers may","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":458556,"byte_end":458623,"line_start":272,"line_end":272,"column_start":5,"column_end":72}},{"value":"/ always return an owned vector.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":458628,"byte_end":458662,"line_start":273,"line_end":273,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":458667,"byte_end":458670,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ Does not advance the reader.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":458675,"byte_end":458707,"line_start":275,"line_end":275,"column_start":5,"column_end":37}},{"value":"cfg(feature = \"read\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":458712,"byte_end":458736,"line_start":276,"line_end":276,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1235},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":459121,"byte_end":459130,"line_start":288,"line_end":288,"column_start":8,"column_end":17},"name":"to_string","qualname":"::read::reader::Reader::to_string","value":"pub fn to_string(&Self) -> Result<Cow<, str>>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Convert all remaining data to a clone-on-write string.","sig":null,"attributes":[{"value":"/ Convert all remaining data to a clone-on-write string.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":458787,"byte_end":458845,"line_start":279,"line_end":279,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":458850,"byte_end":458853,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ The string will be borrowed where possible, but some readers may","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":458858,"byte_end":458926,"line_start":281,"line_end":281,"column_start":5,"column_end":73}},{"value":"/ always return an owned string.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":458931,"byte_end":458965,"line_start":282,"line_end":282,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":458970,"byte_end":458973,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ Does not advance the reader.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":458978,"byte_end":459010,"line_start":284,"line_end":284,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":459015,"byte_end":459018,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the data contains invalid characters.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":459023,"byte_end":459084,"line_start":286,"line_end":286,"column_start":5,"column_end":66}},{"value":"cfg(feature = \"read\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":459089,"byte_end":459113,"line_start":287,"line_end":287,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1236},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":459454,"byte_end":459469,"line_start":297,"line_end":297,"column_start":8,"column_end":23},"name":"to_string_lossy","qualname":"::read::reader::Reader::to_string_lossy","value":"pub fn to_string_lossy(&Self) -> Result<Cow<, str>>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Convert all remaining data to a clone-on-write string, including invalid characters.","sig":null,"attributes":[{"value":"/ Convert all remaining data to a clone-on-write string, including invalid characters.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":459164,"byte_end":459252,"line_start":290,"line_end":290,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":459257,"byte_end":459260,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ The string will be borrowed where possible, but some readers may","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":459265,"byte_end":459333,"line_start":292,"line_end":292,"column_start":5,"column_end":73}},{"value":"/ always return an owned string.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":459338,"byte_end":459372,"line_start":293,"line_end":293,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":459377,"byte_end":459380,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ Does not advance the reader.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":459385,"byte_end":459417,"line_start":295,"line_end":295,"column_start":5,"column_end":37}},{"value":"cfg(feature = \"read\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":459422,"byte_end":459446,"line_start":296,"line_end":296,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1237},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":459557,"byte_end":459567,"line_start":300,"line_end":300,"column_start":8,"column_end":18},"name":"read_slice","qualname":"::read::reader::Reader::read_slice","value":"pub fn read_slice(&mut Self, &mut [u8]) -> Result<()>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Read exactly `buf.len()` bytes into `buf`.\n","sig":null,"attributes":[{"value":"/ Read exactly `buf.len()` bytes into `buf`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":459503,"byte_end":459549,"line_start":299,"line_end":299,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1238},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":459657,"byte_end":459670,"line_start":304,"line_end":304,"column_start":8,"column_end":21},"name":"read_u8_array","qualname":"::read::reader::Reader::read_u8_array","value":"pub fn read_u8_array<A>(&mut Self) -> Result<A> where A: Sized + Default +\nAsMut<[u8]>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Read a u8 array.\n","sig":null,"attributes":[{"value":"/ Read a u8 array.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":459615,"byte_end":459635,"line_start":302,"line_end":302,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":459640,"byte_end":459649,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1240},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":459968,"byte_end":459976,"line_start":315,"line_end":315,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::read::reader::Reader::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Return true if the number of bytes remaining is zero.\n","sig":null,"attributes":[{"value":"/ Return true if the number of bytes remaining is zero.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":459889,"byte_end":459946,"line_start":313,"line_end":313,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":459951,"byte_end":459960,"line_start":314,"line_end":314,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1241},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":460088,"byte_end":460095,"line_start":321,"line_end":321,"column_start":8,"column_end":15},"name":"read_u8","qualname":"::read::reader::Reader::read_u8","value":"pub fn read_u8(&mut Self) -> Result<u8>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Read a u8.\n","sig":null,"attributes":[{"value":"/ Read a u8.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":460052,"byte_end":460066,"line_start":319,"line_end":319,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":460071,"byte_end":460080,"line_start":320,"line_end":320,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1243},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":460236,"byte_end":460243,"line_start":328,"line_end":328,"column_start":8,"column_end":15},"name":"read_i8","qualname":"::read::reader::Reader::read_i8","value":"pub fn read_i8(&mut Self) -> Result<i8>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Read an i8.\n","sig":null,"attributes":[{"value":"/ Read an i8.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":460199,"byte_end":460214,"line_start":326,"line_end":326,"column_start":5,"column_end":20}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":460219,"byte_end":460228,"line_start":327,"line_end":327,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1245},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":460390,"byte_end":460398,"line_start":335,"line_end":335,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::read::reader::Reader::read_u16","value":"pub fn read_u16(&mut Self) -> Result<u16>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Read a u16.\n","sig":null,"attributes":[{"value":"/ Read a u16.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":460353,"byte_end":460368,"line_start":333,"line_end":333,"column_start":5,"column_end":20}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":460373,"byte_end":460382,"line_start":334,"line_end":334,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1247},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":460563,"byte_end":460571,"line_start":342,"line_end":342,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::read::reader::Reader::read_i16","value":"pub fn read_i16(&mut Self) -> Result<i16>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Read an i16.\n","sig":null,"attributes":[{"value":"/ Read an i16.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":460525,"byte_end":460541,"line_start":340,"line_end":340,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":460546,"byte_end":460555,"line_start":341,"line_end":341,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1249},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":460735,"byte_end":460743,"line_start":349,"line_end":349,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::read::reader::Reader::read_u32","value":"pub fn read_u32(&mut Self) -> Result<u32>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Read a u32.\n","sig":null,"attributes":[{"value":"/ Read a u32.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":460698,"byte_end":460713,"line_start":347,"line_end":347,"column_start":5,"column_end":20}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":460718,"byte_end":460727,"line_start":348,"line_end":348,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1251},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":460908,"byte_end":460916,"line_start":356,"line_end":356,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::read::reader::Reader::read_i32","value":"pub fn read_i32(&mut Self) -> Result<i32>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Read an i32.\n","sig":null,"attributes":[{"value":"/ Read an i32.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":460870,"byte_end":460886,"line_start":354,"line_end":354,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":460891,"byte_end":460900,"line_start":355,"line_end":355,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1253},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":461080,"byte_end":461088,"line_start":363,"line_end":363,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::read::reader::Reader::read_u64","value":"pub fn read_u64(&mut Self) -> Result<u64>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Read a u64.\n","sig":null,"attributes":[{"value":"/ Read a u64.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":461043,"byte_end":461058,"line_start":361,"line_end":361,"column_start":5,"column_end":20}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":461063,"byte_end":461072,"line_start":362,"line_end":362,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1255},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":461253,"byte_end":461261,"line_start":370,"line_end":370,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::read::reader::Reader::read_i64","value":"pub fn read_i64(&mut Self) -> Result<i64>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Read an i64.\n","sig":null,"attributes":[{"value":"/ Read an i64.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":461215,"byte_end":461231,"line_start":368,"line_end":368,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":461236,"byte_end":461245,"line_start":369,"line_end":369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1257},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":461425,"byte_end":461433,"line_start":377,"line_end":377,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::read::reader::Reader::read_f32","value":"pub fn read_f32(&mut Self) -> Result<f32>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Read a f32.\n","sig":null,"attributes":[{"value":"/ Read a f32.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":461388,"byte_end":461403,"line_start":375,"line_end":375,"column_start":5,"column_end":20}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":461408,"byte_end":461417,"line_start":376,"line_end":376,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1259},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":461597,"byte_end":461605,"line_start":384,"line_end":384,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::read::reader::Reader::read_f64","value":"pub fn read_f64(&mut Self) -> Result<f64>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Read a f64.\n","sig":null,"attributes":[{"value":"/ Read a f64.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":461560,"byte_end":461575,"line_start":382,"line_end":382,"column_start":5,"column_end":20}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":461580,"byte_end":461589,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1261},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":461873,"byte_end":461882,"line_start":395,"line_end":395,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::read::reader::Reader::read_uint","value":"pub fn read_uint(&mut Self, usize) -> Result<u64>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Read an unsigned n-bytes integer u64.","sig":null,"attributes":[{"value":"/ Read an unsigned n-bytes integer u64.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":461732,"byte_end":461773,"line_start":389,"line_end":389,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":461778,"byte_end":461781,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":461786,"byte_end":461798,"line_start":391,"line_end":391,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":461803,"byte_end":461806,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ Panics when nbytes < 1 or nbytes > 8","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":461811,"byte_end":461851,"line_start":393,"line_end":393,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":461856,"byte_end":461865,"line_start":394,"line_end":394,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1263},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":462127,"byte_end":462153,"line_start":402,"line_end":402,"column_start":8,"column_end":34},"name":"read_null_terminated_slice","qualname":"::read::reader::Reader::read_null_terminated_slice","value":"pub fn read_null_terminated_slice(&mut Self) -> Result<Self>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Read a null-terminated slice, and return it (excluding the null).\n","sig":null,"attributes":[{"value":"/ Read a null-terminated slice, and return it (excluding the null).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":462050,"byte_end":462119,"line_start":401,"line_end":401,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1264},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":462367,"byte_end":462378,"line_start":410,"line_end":410,"column_start":8,"column_end":19},"name":"skip_leb128","qualname":"::read::reader::Reader::skip_leb128","value":"pub fn skip_leb128(&mut Self) -> Result<()>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Skip a LEB128 encoded integer.\n","sig":null,"attributes":[{"value":"/ Skip a LEB128 encoded integer.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":462325,"byte_end":462359,"line_start":409,"line_end":409,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1265},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":462502,"byte_end":462514,"line_start":415,"line_end":415,"column_start":8,"column_end":20},"name":"read_uleb128","qualname":"::read::reader::Reader::read_uleb128","value":"pub fn read_uleb128(&mut Self) -> Result<u64>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Read an unsigned LEB128 encoded integer.\n","sig":null,"attributes":[{"value":"/ Read an unsigned LEB128 encoded integer.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":462450,"byte_end":462494,"line_start":414,"line_end":414,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1266},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":462639,"byte_end":462655,"line_start":420,"line_end":420,"column_start":8,"column_end":24},"name":"read_uleb128_u32","qualname":"::read::reader::Reader::read_uleb128_u32","value":"pub fn read_uleb128_u32(&mut Self) -> Result<u32>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Read an unsigned LEB128 encoded u32.\n","sig":null,"attributes":[{"value":"/ Read an unsigned LEB128 encoded u32.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":462591,"byte_end":462631,"line_start":419,"line_end":419,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1268},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":462856,"byte_end":462872,"line_start":427,"line_end":427,"column_start":8,"column_end":24},"name":"read_uleb128_u16","qualname":"::read::reader::Reader::read_uleb128_u16","value":"pub fn read_uleb128_u16(&mut Self) -> Result<u16>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Read an unsigned LEB128 encoded u16.\n","sig":null,"attributes":[{"value":"/ Read an unsigned LEB128 encoded u16.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":462808,"byte_end":462848,"line_start":426,"line_end":426,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1269},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":462993,"byte_end":463005,"line_start":432,"line_end":432,"column_start":8,"column_end":20},"name":"read_sleb128","qualname":"::read::reader::Reader::read_sleb128","value":"pub fn read_sleb128(&mut Self) -> Result<i64>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Read a signed LEB128 encoded integer.\n","sig":null,"attributes":[{"value":"/ Read a signed LEB128 encoded integer.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":462944,"byte_end":462985,"line_start":431,"line_end":431,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1270},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":463256,"byte_end":463275,"line_start":440,"line_end":440,"column_start":8,"column_end":27},"name":"read_initial_length","qualname":"::read::reader::Reader::read_initial_length","value":"pub fn read_initial_length(&mut Self) -> Result<(Self::Offset, Format)>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Read an initial length field.","sig":null,"attributes":[{"value":"/ Read an initial length field.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":463080,"byte_end":463113,"line_start":436,"line_end":436,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":463118,"byte_end":463121,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ This field is encoded as either a 32-bit length or","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":463126,"byte_end":463180,"line_start":438,"line_end":438,"column_start":5,"column_end":59}},{"value":"/ a 64-bit length, and the returned `Format` indicates which.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":463185,"byte_end":463248,"line_start":439,"line_end":439,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1273},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":463909,"byte_end":463921,"line_start":456,"line_end":456,"column_start":8,"column_end":20},"name":"read_address","qualname":"::read::reader::Reader::read_address","value":"pub fn read_address(&mut Self, u8) -> Result<u64>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Read an address-sized integer, and return it as a `u64`.\n","sig":null,"attributes":[{"value":"/ Read an address-sized integer, and return it as a `u64`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":463841,"byte_end":463901,"line_start":455,"line_end":455,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1274},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":464461,"byte_end":464470,"line_start":470,"line_end":470,"column_start":8,"column_end":17},"name":"read_word","qualname":"::read::reader::Reader::read_word","value":"pub fn read_word(&mut Self, Format) -> Result<Self::Offset>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Parse a word-sized integer according to the DWARF format.","sig":null,"attributes":[{"value":"/ Parse a word-sized integer according to the DWARF format.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":464270,"byte_end":464331,"line_start":466,"line_end":466,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":464336,"byte_end":464339,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ These are always used to encode section offsets or lengths,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":464344,"byte_end":464407,"line_start":468,"line_end":468,"column_start":5,"column_end":68}},{"value":"/ and so have a type of `Self::Offset`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":464412,"byte_end":464453,"line_start":469,"line_end":469,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1275},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":464815,"byte_end":464826,"line_start":479,"line_end":479,"column_start":8,"column_end":19},"name":"read_length","qualname":"::read::reader::Reader::read_length","value":"pub fn read_length(&mut Self, Format) -> Result<Self::Offset>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Parse a word-sized section length according to the DWARF format.\n","sig":null,"attributes":[{"value":"/ Parse a word-sized section length according to the DWARF format.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":464725,"byte_end":464793,"line_start":477,"line_end":477,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":464798,"byte_end":464807,"line_start":478,"line_end":478,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":465012,"byte_end":465023,"line_start":485,"line_end":485,"column_start":8,"column_end":19},"name":"read_offset","qualname":"::read::reader::Reader::read_offset","value":"pub fn read_offset(&mut Self, Format) -> Result<Self::Offset>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Parse a word-sized section offset according to the DWARF format.\n","sig":null,"attributes":[{"value":"/ Parse a word-sized section offset according to the DWARF format.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":464922,"byte_end":464990,"line_start":483,"line_end":483,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":464995,"byte_end":465004,"line_start":484,"line_end":484,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1277},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":465251,"byte_end":465268,"line_start":492,"line_end":492,"column_start":8,"column_end":25},"name":"read_sized_offset","qualname":"::read::reader::Reader::read_sized_offset","value":"pub fn read_sized_offset(&mut Self, u8) -> Result<Self::Offset>","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Parse a section offset of the given size.","sig":null,"attributes":[{"value":"/ Parse a section offset of the given size.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":465119,"byte_end":465164,"line_start":489,"line_end":489,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":465169,"byte_end":465172,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ This is used for `DW_FORM_ref_addr` values in DWARF version 2.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":465177,"byte_end":465243,"line_start":491,"line_end":491,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":6933},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":466288,"byte_end":466299,"line_start":19,"line_end":19,"column_start":12,"column_end":23},"name":"DebugAbbrev","qualname":"::read::abbrev::DebugAbbrev","value":"DebugAbbrev {  }","parent":null,"children":[{"krate":0,"index":6935}],"decl_id":null,"docs":" The `DebugAbbrev` struct represents the abbreviations describing\n `DebuggingInformationEntry`s' attribute names and forms found in the\n `.debug_abbrev` section.\n","sig":null,"attributes":[{"value":"/ The `DebugAbbrev` struct represents the abbreviations describing","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":466067,"byte_end":466135,"line_start":15,"line_end":15,"column_start":1,"column_end":69}},{"value":"/ `DebuggingInformationEntry`s' attribute names and forms found in the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":466136,"byte_end":466208,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/ `.debug_abbrev` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":466209,"byte_end":466237,"line_start":17,"line_end":17,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":467040,"byte_end":467043,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugAbbrev<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugAbbrev` instance from the data in the `.debug_abbrev`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugAbbrev` instance from the data in the `.debug_abbrev`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":466434,"byte_end":466513,"line_start":27,"line_end":27,"column_start":5,"column_end":84}},{"value":"/ section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":466518,"byte_end":466530,"line_start":28,"line_end":28,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":466535,"byte_end":466538,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_abbrev` section and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":466543,"byte_end":466620,"line_start":30,"line_end":30,"column_start":5,"column_end":82}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":466625,"byte_end":466695,"line_start":31,"line_end":31,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":466700,"byte_end":466739,"line_start":32,"line_end":32,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":466744,"byte_end":466747,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":466752,"byte_end":466759,"line_start":34,"line_end":34,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugAbbrev, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":466764,"byte_end":466807,"line_start":35,"line_end":35,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":466812,"byte_end":466815,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":466820,"byte_end":466861,"line_start":37,"line_end":37,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_abbrev_section_somehow = || &buf;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":466866,"byte_end":466920,"line_start":38,"line_end":38,"column_start":5,"column_end":59}},{"value":"/ let debug_abbrev = DebugAbbrev::new(read_debug_abbrev_section_somehow(), LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":466925,"byte_end":467016,"line_start":39,"line_end":39,"column_start":5,"column_end":96}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":467021,"byte_end":467028,"line_start":40,"line_end":40,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1343},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":467404,"byte_end":467417,"line_start":51,"line_end":51,"column_start":12,"column_end":25},"name":"abbreviations","qualname":"<DebugAbbrev<R>>::abbreviations","value":"pub fn abbreviations(&Self, DebugAbbrevOffset<R::Offset>)\n-> Result<Abbreviations>","parent":null,"children":[],"decl_id":null,"docs":" Parse the abbreviations at the given `offset` within this\n `.debug_abbrev` section.","sig":null,"attributes":[{"value":"/ Parse the abbreviations at the given `offset` within this","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":467219,"byte_end":467280,"line_start":47,"line_end":47,"column_start":5,"column_end":66}},{"value":"/ `.debug_abbrev` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":467285,"byte_end":467313,"line_start":48,"line_end":48,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":467318,"byte_end":467321,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ The `offset` should generally be retrieved from a unit header.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":467326,"byte_end":467392,"line_start":50,"line_end":50,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1346},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":468338,"byte_end":468344,"line_start":77,"line_end":77,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugAbbrev<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugAbbrev<R> where F: FnMut(&'a T)\n-> R","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugAbbrev` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugAbbrev` section that references the data in `self`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":467704,"byte_end":467774,"line_start":62,"line_end":62,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":467779,"byte_end":467782,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":467787,"byte_end":467852,"line_start":64,"line_end":64,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":467857,"byte_end":467860,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":467865,"byte_end":467885,"line_start":66,"line_end":66,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":467890,"byte_end":467893,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":467898,"byte_end":467916,"line_start":68,"line_end":68,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":467921,"byte_end":467966,"line_start":69,"line_end":69,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":467971,"byte_end":468055,"line_start":70,"line_end":70,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugAbbrev<Vec<u8>> = load_section();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":468060,"byte_end":468128,"line_start":71,"line_end":71,"column_start":5,"column_end":73}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":468133,"byte_end":468180,"line_start":72,"line_end":72,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":468185,"byte_end":468235,"line_start":73,"line_end":73,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":468240,"byte_end":468302,"line_start":74,"line_end":74,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":468307,"byte_end":468314,"line_start":75,"line_end":75,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":468319,"byte_end":468326,"line_start":76,"line_end":76,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":6947},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":469053,"byte_end":469066,"line_start":109,"line_end":109,"column_start":12,"column_end":25},"name":"Abbreviations","qualname":"::read::abbrev::Abbreviations","value":"Abbreviations {  }","parent":null,"children":[{"krate":0,"index":6948},{"krate":0,"index":6949}],"decl_id":null,"docs":" A set of type abbreviations.","sig":null,"attributes":[{"value":"/ A set of type abbreviations.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":468840,"byte_end":468872,"line_start":103,"line_end":103,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":468873,"byte_end":468876,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ Construct an `Abbreviations` instance with the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":468877,"byte_end":468927,"line_start":105,"line_end":105,"column_start":1,"column_end":51}},{"value":"/ [`abbreviations()`](struct.UnitHeader.html#method.abbreviations)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":468928,"byte_end":468996,"line_start":106,"line_end":106,"column_start":1,"column_end":69}},{"value":"/ method.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":468997,"byte_end":469008,"line_start":107,"line_end":107,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1360},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":470828,"byte_end":470831,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"get","qualname":"<Abbreviations>::get","value":"pub fn get(&Self, u64) -> Option<&Abbreviation>","parent":null,"children":[],"decl_id":null,"docs":" Get the abbreviation associated with the given code.\n","sig":null,"attributes":[{"value":"/ Get the abbreviation associated with the given code.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":470746,"byte_end":470802,"line_start":155,"line_end":155,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":470807,"byte_end":470816,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":6956},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":471748,"byte_end":471760,"line_start":185,"line_end":185,"column_start":12,"column_end":24},"name":"Abbreviation","qualname":"::read::abbrev::Abbreviation","value":"Abbreviation {  }","parent":null,"children":[{"krate":0,"index":6957},{"krate":0,"index":6958},{"krate":0,"index":6959},{"krate":0,"index":6960}],"decl_id":null,"docs":" An abbreviation describes the shape of a `DebuggingInformationEntry`'s type:\n its code, tag type, whether it has children, and its set of attributes.\n","sig":null,"attributes":[{"value":"/ An abbreviation describes the shape of a `DebuggingInformationEntry`'s type:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":471541,"byte_end":471621,"line_start":182,"line_end":182,"column_start":1,"column_end":81}},{"value":"/ its code, tag type, whether it has children, and its set of attributes.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":471622,"byte_end":471697,"line_start":183,"line_end":183,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1365},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":472396,"byte_end":472400,"line_start":215,"line_end":215,"column_start":12,"column_end":16},"name":"code","qualname":"<Abbreviation>::code","value":"pub fn code(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get this abbreviation's code.\n","sig":null,"attributes":[{"value":"/ Get this abbreviation's code.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":472337,"byte_end":472370,"line_start":213,"line_end":213,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":472375,"byte_end":472384,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":472504,"byte_end":472507,"line_start":221,"line_end":221,"column_start":12,"column_end":15},"name":"tag","qualname":"<Abbreviation>::tag","value":"pub fn tag(&Self) -> constants::DwTag","parent":null,"children":[],"decl_id":null,"docs":" Get this abbreviation's tag.\n","sig":null,"attributes":[{"value":"/ Get this abbreviation's tag.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":472446,"byte_end":472478,"line_start":219,"line_end":219,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":472483,"byte_end":472492,"line_start":220,"line_end":220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1367},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":472665,"byte_end":472677,"line_start":227,"line_end":227,"column_start":12,"column_end":24},"name":"has_children","qualname":"<Abbreviation>::has_children","value":"pub fn has_children(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if this abbreviation's type has children, false otherwise.\n","sig":null,"attributes":[{"value":"/ Return true if this abbreviation's type has children, false otherwise.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":472565,"byte_end":472639,"line_start":225,"line_end":225,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":472644,"byte_end":472653,"line_start":226,"line_end":226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":472827,"byte_end":472837,"line_start":233,"line_end":233,"column_start":12,"column_end":22},"name":"attributes","qualname":"<Abbreviation>::attributes","value":"pub fn attributes(&Self) -> &[AttributeSpecification]","parent":null,"children":[],"decl_id":null,"docs":" Get this abbreviation's attributes.\n","sig":null,"attributes":[{"value":"/ Get this abbreviation's attributes.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":472762,"byte_end":472801,"line_start":231,"line_end":231,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":472806,"byte_end":472815,"line_start":232,"line_end":232,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":6982},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":476957,"byte_end":476979,"line_start":376,"line_end":376,"column_start":12,"column_end":34},"name":"AttributeSpecification","qualname":"::read::abbrev::AttributeSpecification","value":"AttributeSpecification {  }","parent":null,"children":[{"krate":0,"index":6983},{"krate":0,"index":6984},{"krate":0,"index":6985}],"decl_id":null,"docs":" The description of an attribute in an abbreviated type. It is a pair of name\n and form.\n","sig":null,"attributes":[{"value":"/ The description of an attribute in an abbreviated type. It is a pair of name","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":476806,"byte_end":476886,"line_start":373,"line_end":373,"column_start":1,"column_end":81}},{"value":"/ and form.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":476887,"byte_end":476900,"line_start":374,"line_end":374,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1396},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":477239,"byte_end":477242,"line_start":386,"line_end":386,"column_start":12,"column_end":15},"name":"new","qualname":"<AttributeSpecification>::new","value":"pub fn new(constants::DwAt, constants::DwForm, Option<i64>)\n-> AttributeSpecification","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `AttributeSpecification` from the given name and form\n and implicit const value.\n","sig":null,"attributes":[{"value":"/ Construct a new `AttributeSpecification` from the given name and form","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":477106,"byte_end":477179,"line_start":383,"line_end":383,"column_start":5,"column_end":78}},{"value":"/ and implicit const value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":477184,"byte_end":477213,"line_start":384,"line_end":384,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":477218,"byte_end":477227,"line_start":385,"line_end":385,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1397},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":477820,"byte_end":477824,"line_start":404,"line_end":404,"column_start":12,"column_end":16},"name":"name","qualname":"<AttributeSpecification>::name","value":"pub fn name(&Self) -> constants::DwAt","parent":null,"children":[],"decl_id":null,"docs":" Get the attribute's name.\n","sig":null,"attributes":[{"value":"/ Get the attribute's name.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":477765,"byte_end":477794,"line_start":402,"line_end":402,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":477799,"byte_end":477808,"line_start":403,"line_end":403,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":477937,"byte_end":477941,"line_start":410,"line_end":410,"column_start":12,"column_end":16},"name":"form","qualname":"<AttributeSpecification>::form","value":"pub fn form(&Self) -> constants::DwForm","parent":null,"children":[],"decl_id":null,"docs":" Get the attribute's form.\n","sig":null,"attributes":[{"value":"/ Get the attribute's form.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":477882,"byte_end":477911,"line_start":408,"line_end":408,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":477916,"byte_end":477925,"line_start":409,"line_end":409,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1399},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":478072,"byte_end":478092,"line_start":416,"line_end":416,"column_start":12,"column_end":32},"name":"implicit_const_value","qualname":"<AttributeSpecification>::implicit_const_value","value":"pub fn implicit_const_value(&Self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" Get the attribute's implicit const value.\n","sig":null,"attributes":[{"value":"/ Get the attribute's implicit const value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":478001,"byte_end":478046,"line_start":414,"line_end":414,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":478051,"byte_end":478060,"line_start":415,"line_end":415,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":478494,"byte_end":478498,"line_start":428,"line_end":428,"column_start":12,"column_end":16},"name":"size","qualname":"<AttributeSpecification>::size","value":"pub fn size<R: Reader>(&Self, &UnitHeader<R>) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Return the size of the attribute, in bytes.","sig":null,"attributes":[{"value":"/ Return the size of the attribute, in bytes.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":478276,"byte_end":478323,"line_start":424,"line_end":424,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":478328,"byte_end":478331,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ Note that because some attributes are variably sized, the size cannot","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":478336,"byte_end":478409,"line_start":426,"line_end":426,"column_start":5,"column_end":78}},{"value":"/ always be known without parsing, in which case we return `None`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":478414,"byte_end":478482,"line_start":427,"line_end":427,"column_start":5,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":6998},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":499026,"byte_end":499038,"line_start":8,"line_end":8,"column_start":12,"column_end":24},"name":"DebugAranges","qualname":"::read::aranges::DebugAranges","value":"DebugAranges {  }","parent":null,"children":[{"krate":0,"index":7000}],"decl_id":null,"docs":" The `DebugAranges` struct represents the DWARF address range information\n found in the `.debug_aranges` section.\n","sig":null,"attributes":[{"value":"/ The `DebugAranges` struct represents the DWARF address range information","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":498856,"byte_end":498932,"line_start":5,"line_end":5,"column_start":1,"column_end":77}},{"value":"/ found in the `.debug_aranges` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":498933,"byte_end":498975,"line_start":6,"line_end":6,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1450},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":499749,"byte_end":499752,"line_start":31,"line_end":31,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugAranges<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugAranges` instance from the data in the `.debug_aranges`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugAranges` instance from the data in the `.debug_aranges`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":499161,"byte_end":499242,"line_start":16,"line_end":16,"column_start":5,"column_end":86}},{"value":"/ section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":499247,"byte_end":499259,"line_start":17,"line_end":17,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":499264,"byte_end":499267,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_aranges` section and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":499272,"byte_end":499350,"line_start":19,"line_end":19,"column_start":5,"column_end":83}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":499355,"byte_end":499425,"line_start":20,"line_end":20,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":499430,"byte_end":499469,"line_start":21,"line_end":21,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":499474,"byte_end":499477,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":499482,"byte_end":499489,"line_start":23,"line_end":23,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugAranges, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":499494,"byte_end":499538,"line_start":24,"line_end":24,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":499543,"byte_end":499546,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":499551,"byte_end":499570,"line_start":26,"line_end":26,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_aranges_section = || &buf;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":499575,"byte_end":499622,"line_start":27,"line_end":27,"column_start":5,"column_end":52}},{"value":"/ let debug_aranges =","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":499627,"byte_end":499650,"line_start":28,"line_end":28,"column_start":5,"column_end":28}},{"value":"/     DebugAranges::new(read_debug_aranges_section(), LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":499655,"byte_end":499725,"line_start":29,"line_end":29,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":499730,"byte_end":499737,"line_start":30,"line_end":30,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1453},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":500076,"byte_end":500083,"line_start":42,"line_end":42,"column_start":12,"column_end":19},"name":"headers","qualname":"<DebugAranges<R>>::headers","value":"pub fn headers(&Self) -> ArangeHeaderIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate the sets of entries in the `.debug_aranges` section.","sig":null,"attributes":[{"value":"/ Iterate the sets of entries in the `.debug_aranges` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":499938,"byte_end":500002,"line_start":39,"line_end":39,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":500007,"byte_end":500010,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ Each set of entries belongs to a single unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":500015,"byte_end":500064,"line_start":41,"line_end":41,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1454},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":500319,"byte_end":500325,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"header","qualname":"<DebugAranges<R>>::header","value":"pub fn header(&Self, DebugArangesOffset<R::Offset>) -> Result<ArangeHeader<R>>","parent":null,"children":[],"decl_id":null,"docs":" Get the header at the given offset.\n","sig":null,"attributes":[{"value":"/ Get the header at the given offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":500268,"byte_end":500307,"line_start":49,"line_end":49,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1457},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":501201,"byte_end":501207,"line_start":73,"line_end":73,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugAranges<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugAranges<R> where F: FnMut(&'a T)\n-> R","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugAranges` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugAranges` section that references the data in `self`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":500565,"byte_end":500636,"line_start":58,"line_end":58,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":500641,"byte_end":500644,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":500649,"byte_end":500714,"line_start":60,"line_end":60,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":500719,"byte_end":500722,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":500727,"byte_end":500747,"line_start":62,"line_end":62,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":500752,"byte_end":500755,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":500760,"byte_end":500778,"line_start":64,"line_end":64,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":500783,"byte_end":500828,"line_start":65,"line_end":65,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":500833,"byte_end":500917,"line_start":66,"line_end":66,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugAranges<Vec<u8>> = load_section();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":500922,"byte_end":500991,"line_start":67,"line_end":67,"column_start":5,"column_end":74}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":500996,"byte_end":501043,"line_start":68,"line_end":68,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":501048,"byte_end":501098,"line_start":69,"line_end":69,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":501103,"byte_end":501165,"line_start":70,"line_end":70,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":501170,"byte_end":501177,"line_start":71,"line_end":71,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":501182,"byte_end":501189,"line_start":72,"line_end":72,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":7012},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":501734,"byte_end":501750,"line_start":99,"line_end":99,"column_start":12,"column_end":28},"name":"ArangeHeaderIter","qualname":"::read::aranges::ArangeHeaderIter","value":"ArangeHeaderIter {  }","parent":null,"children":[{"krate":0,"index":7014},{"krate":0,"index":7015}],"decl_id":null,"docs":" An iterator over the headers of a `.debug_aranges` section.\n","sig":null,"attributes":[{"value":"/ An iterator over the headers of a `.debug_aranges` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":501635,"byte_end":501698,"line_start":97,"line_end":97,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1470},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":501922,"byte_end":501926,"line_start":106,"line_end":106,"column_start":12,"column_end":16},"name":"next","qualname":"<ArangeHeaderIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<ArangeHeader<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next header.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next header.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":501866,"byte_end":501910,"line_start":105,"line_end":105,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":7022},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":502871,"byte_end":502883,"line_start":139,"line_end":139,"column_start":12,"column_end":24},"name":"ArangeHeader","qualname":"::read::aranges::ArangeHeader","value":"ArangeHeader {  }","parent":null,"children":[{"krate":0,"index":7025},{"krate":0,"index":7026},{"krate":0,"index":7027},{"krate":0,"index":7028},{"krate":0,"index":7029},{"krate":0,"index":7030}],"decl_id":null,"docs":" A header for a set of entries in the `.debug_arange` section.","sig":null,"attributes":[{"value":"/ A header for a set of entries in the `.debug_arange` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":502704,"byte_end":502769,"line_start":135,"line_end":135,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":502770,"byte_end":502773,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ These entries all belong to a single unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":502774,"byte_end":502820,"line_start":137,"line_end":137,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1476},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":505393,"byte_end":505399,"line_start":212,"line_end":212,"column_start":12,"column_end":18},"name":"offset","qualname":"<ArangeHeader<R, Offset>>::offset","value":"pub fn offset(&Self) -> DebugArangesOffset<Offset>","parent":null,"children":[],"decl_id":null,"docs":" Return the offset of this header within the `.debug_aranges` section.\n","sig":null,"attributes":[{"value":"/ Return the offset of this header within the `.debug_aranges` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":505294,"byte_end":505367,"line_start":210,"line_end":210,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":505372,"byte_end":505381,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1477},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":505563,"byte_end":505569,"line_start":218,"line_end":218,"column_start":12,"column_end":18},"name":"length","qualname":"<ArangeHeader<R, Offset>>::length","value":"pub fn length(&Self) -> Offset","parent":null,"children":[],"decl_id":null,"docs":" Return the length of this set of entries, including the header.\n","sig":null,"attributes":[{"value":"/ Return the length of this set of entries, including the header.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":505470,"byte_end":505537,"line_start":216,"line_end":216,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":505542,"byte_end":505551,"line_start":217,"line_end":217,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1478},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":505705,"byte_end":505713,"line_start":224,"line_end":224,"column_start":12,"column_end":20},"name":"encoding","qualname":"<ArangeHeader<R, Offset>>::encoding","value":"pub fn encoding(&Self) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding parameters for this set of entries.\n","sig":null,"attributes":[{"value":"/ Return the encoding parameters for this set of entries.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":505620,"byte_end":505679,"line_start":222,"line_end":222,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":505684,"byte_end":505693,"line_start":223,"line_end":223,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1479},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":505846,"byte_end":505858,"line_start":230,"line_end":230,"column_start":12,"column_end":24},"name":"segment_size","qualname":"<ArangeHeader<R, Offset>>::segment_size","value":"pub fn segment_size(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Return the segment size for this set of entries.\n","sig":null,"attributes":[{"value":"/ Return the segment size for this set of entries.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":505768,"byte_end":505820,"line_start":228,"line_end":228,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":505825,"byte_end":505834,"line_start":229,"line_end":229,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1480},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":506019,"byte_end":506036,"line_start":236,"line_end":236,"column_start":12,"column_end":29},"name":"debug_info_offset","qualname":"<ArangeHeader<R, Offset>>::debug_info_offset","value":"pub fn debug_info_offset(&Self) -> DebugInfoOffset<Offset>","parent":null,"children":[],"decl_id":null,"docs":" Return the offset into the .debug_info section for this set of arange entries.\n","sig":null,"attributes":[{"value":"/ Return the offset into the .debug_info section for this set of arange entries.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":505911,"byte_end":505993,"line_start":234,"line_end":234,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":505998,"byte_end":506007,"line_start":235,"line_end":235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1481},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":506183,"byte_end":506190,"line_start":242,"line_end":242,"column_start":12,"column_end":19},"name":"entries","qualname":"<ArangeHeader<R, Offset>>::entries","value":"pub fn entries(&Self) -> ArangeEntryIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Return the arange entries in this set.\n","sig":null,"attributes":[{"value":"/ Return the arange entries in this set.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":506115,"byte_end":506157,"line_start":240,"line_end":240,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":506162,"byte_end":506171,"line_start":241,"line_end":241,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":7054},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":506584,"byte_end":506599,"line_start":256,"line_end":256,"column_start":12,"column_end":27},"name":"ArangeEntryIter","qualname":"::read::aranges::ArangeEntryIter","value":"ArangeEntryIter {  }","parent":null,"children":[{"krate":0,"index":7056},{"krate":0,"index":7057},{"krate":0,"index":7058}],"decl_id":null,"docs":" An iterator over the aranges from a `.debug_aranges` section.","sig":null,"attributes":[{"value":"/ An iterator over the aranges from a `.debug_aranges` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":506390,"byte_end":506455,"line_start":251,"line_end":251,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":506456,"byte_end":506459,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ Can be [used with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":506460,"byte_end":506481,"line_start":253,"line_end":253,"column_start":1,"column_end":22}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":506482,"byte_end":506548,"line_start":254,"line_end":254,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1484},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":507111,"byte_end":507115,"line_start":269,"line_end":269,"column_start":12,"column_end":16},"name":"next","qualname":"<ArangeEntryIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<ArangeEntry>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator and return the next arange.","sig":null,"attributes":[{"value":"/ Advance the iterator and return the next arange.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":506717,"byte_end":506769,"line_start":263,"line_end":263,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":506774,"byte_end":506777,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ Returns the newly parsed arange as `Ok(Some(arange))`. Returns `Ok(None)`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":506782,"byte_end":506859,"line_start":265,"line_end":265,"column_start":5,"column_end":82}},{"value":"/ when iteration is complete and all aranges have already been parsed and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":506864,"byte_end":506939,"line_start":266,"line_end":266,"column_start":5,"column_end":80}},{"value":"/ yielded. If an error occurs while parsing the next arange, then this error","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":506944,"byte_end":507022,"line_start":267,"line_end":267,"column_start":5,"column_end":83}},{"value":"/ is returned as `Err(e)`, and all subsequent calls return `Ok(None)`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":507027,"byte_end":507099,"line_start":268,"line_end":268,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":7065},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":507979,"byte_end":507990,"line_start":300,"line_end":300,"column_start":12,"column_end":23},"name":"ArangeEntry","qualname":"::read::aranges::ArangeEntry","value":"ArangeEntry {  }","parent":null,"children":[{"krate":0,"index":7066},{"krate":0,"index":7067},{"krate":0,"index":7068}],"decl_id":null,"docs":" A single parsed arange.\n","sig":null,"attributes":[{"value":"/ A single parsed arange.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":507884,"byte_end":507911,"line_start":298,"line_end":298,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":509460,"byte_end":509467,"line_start":348,"line_end":348,"column_start":12,"column_end":19},"name":"segment","qualname":"<ArangeEntry>::segment","value":"pub fn segment(&Self) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Return the segment selector of this arange.\n","sig":null,"attributes":[{"value":"/ Return the segment selector of this arange.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":509387,"byte_end":509434,"line_start":346,"line_end":346,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":509439,"byte_end":509448,"line_start":347,"line_end":347,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1489},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":509598,"byte_end":509605,"line_start":354,"line_end":354,"column_start":12,"column_end":19},"name":"address","qualname":"<ArangeEntry>::address","value":"pub fn address(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Return the beginning address of this arange.\n","sig":null,"attributes":[{"value":"/ Return the beginning address of this arange.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":509524,"byte_end":509572,"line_start":352,"line_end":352,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":509577,"byte_end":509586,"line_start":353,"line_end":353,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1490},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":509717,"byte_end":509723,"line_start":360,"line_end":360,"column_start":12,"column_end":18},"name":"length","qualname":"<ArangeEntry>::length","value":"pub fn length(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Return the length of this arange.\n","sig":null,"attributes":[{"value":"/ Return the length of this arange.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":509654,"byte_end":509691,"line_start":358,"line_end":358,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":509696,"byte_end":509705,"line_start":359,"line_end":359,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1491},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":509818,"byte_end":509823,"line_start":366,"line_end":366,"column_start":12,"column_end":17},"name":"range","qualname":"<ArangeEntry>::range","value":"pub fn range(&Self) -> Range","parent":null,"children":[],"decl_id":null,"docs":" Return the range.\n","sig":null,"attributes":[{"value":"/ Return the range.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":509771,"byte_end":509792,"line_start":364,"line_end":364,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":509797,"byte_end":509806,"line_start":365,"line_end":365,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":7084},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":519227,"byte_end":519239,"line_start":12,"line_end":12,"column_start":12,"column_end":24},"name":"DebugCuIndex","qualname":"::read::index::DebugCuIndex","value":"DebugCuIndex {  }","parent":null,"children":[{"krate":0,"index":7086}],"decl_id":null,"docs":" The data in the `.debug_cu_index` section of a `.dwp` file.","sig":null,"attributes":[{"value":"/ The data in the `.debug_cu_index` section of a `.dwp` file.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":519055,"byte_end":519118,"line_start":8,"line_end":8,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":519119,"byte_end":519122,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This section contains the compilation unit index.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":519123,"byte_end":519176,"line_start":10,"line_end":10,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1528},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":519473,"byte_end":519476,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugCuIndex<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugCuIndex` instance from the data in the `.debug_cu_index`\n section.\n","sig":null,"attributes":[{"value":"/ Construct a new `DebugCuIndex` instance from the data in the `.debug_cu_index`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":519362,"byte_end":519444,"line_start":20,"line_end":20,"column_start":5,"column_end":87}},{"value":"/ section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":519449,"byte_end":519461,"line_start":21,"line_end":21,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1538},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":519947,"byte_end":519952,"line_start":45,"line_end":45,"column_start":12,"column_end":17},"name":"index","qualname":"<DebugCuIndex<R>>::index","value":"pub fn index(Self) -> Result<UnitIndex<R>>","parent":null,"children":[],"decl_id":null,"docs":" Parse the index header.\n","sig":null,"attributes":[{"value":"/ Parse the index header.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":519908,"byte_end":519935,"line_start":44,"line_end":44,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":7098},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":520198,"byte_end":520210,"line_start":54,"line_end":54,"column_start":12,"column_end":24},"name":"DebugTuIndex","qualname":"::read::index::DebugTuIndex","value":"DebugTuIndex {  }","parent":null,"children":[{"krate":0,"index":7100}],"decl_id":null,"docs":" The data in the `.debug_tu_index` section of a `.dwp` file.","sig":null,"attributes":[{"value":"/ The data in the `.debug_tu_index` section of a `.dwp` file.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":520033,"byte_end":520096,"line_start":50,"line_end":50,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":520097,"byte_end":520100,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ This section contains the type unit index.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":520101,"byte_end":520147,"line_start":52,"line_end":52,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1542},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":520444,"byte_end":520447,"line_start":64,"line_end":64,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugTuIndex<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugTuIndex` instance from the data in the `.debug_tu_index`\n section.\n","sig":null,"attributes":[{"value":"/ Construct a new `DebugTuIndex` instance from the data in the `.debug_tu_index`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":520333,"byte_end":520415,"line_start":62,"line_end":62,"column_start":5,"column_end":87}},{"value":"/ section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":520420,"byte_end":520432,"line_start":63,"line_end":63,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1552},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":520918,"byte_end":520923,"line_start":87,"line_end":87,"column_start":12,"column_end":17},"name":"index","qualname":"<DebugTuIndex<R>>::index","value":"pub fn index(Self) -> Result<UnitIndex<R>>","parent":null,"children":[],"decl_id":null,"docs":" Parse the index header.\n","sig":null,"attributes":[{"value":"/ Parse the index header.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":520879,"byte_end":520906,"line_start":86,"line_end":86,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":7112},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":521145,"byte_end":521154,"line_start":96,"line_end":96,"column_start":12,"column_end":21},"name":"UnitIndex","qualname":"::read::index::UnitIndex","value":"UnitIndex {  }","parent":null,"children":[{"krate":0,"index":7114},{"krate":0,"index":7115},{"krate":0,"index":7116},{"krate":0,"index":7117},{"krate":0,"index":7118},{"krate":0,"index":7119},{"krate":0,"index":7120},{"krate":0,"index":7122},{"krate":0,"index":7123}],"decl_id":null,"docs":" The partially parsed index from a `DebugCuIndex` or `DebugTuIndex`.\n","sig":null,"attributes":[{"value":"/ The partially parsed index from a `DebugCuIndex` or `DebugTuIndex`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":521038,"byte_end":521109,"line_start":94,"line_end":94,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1559},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":525417,"byte_end":525421,"line_start":204,"line_end":204,"column_start":12,"column_end":16},"name":"find","qualname":"<UnitIndex<R>>::find","value":"pub fn find(&Self, u64) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Find `id` in the index hash table, and return the row index.","sig":null,"attributes":[{"value":"/ Find `id` in the index hash table, and return the row index.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":525181,"byte_end":525245,"line_start":200,"line_end":200,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":525250,"byte_end":525253,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ `id` may be a compilation unit ID if this index is from `.debug_cu_index`,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":525258,"byte_end":525336,"line_start":202,"line_end":202,"column_start":5,"column_end":83}},{"value":"/ or a type signature if this index is from `.debug_tu_index`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":525341,"byte_end":525405,"line_start":203,"line_end":203,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1560},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":526457,"byte_end":526465,"line_start":231,"line_end":231,"column_start":12,"column_end":20},"name":"sections","qualname":"<UnitIndex<R>>::sections","value":"pub fn sections(&Self, u32) -> Result<UnitIndexSectionIterator<, R>>","parent":null,"children":[],"decl_id":null,"docs":" Return the section offsets and sizes for the given row index.\n","sig":null,"attributes":[{"value":"/ Return the section offsets and sizes for the given row index.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":526380,"byte_end":526445,"line_start":230,"line_end":230,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1561},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":527260,"byte_end":527267,"line_start":255,"line_end":255,"column_start":12,"column_end":19},"name":"version","qualname":"<UnitIndex<R>>::version","value":"pub fn version(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Return the version.\n","sig":null,"attributes":[{"value":"/ Return the version.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":527225,"byte_end":527248,"line_start":254,"line_end":254,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1562},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":527362,"byte_end":527375,"line_start":260,"line_end":260,"column_start":12,"column_end":25},"name":"section_count","qualname":"<UnitIndex<R>>::section_count","value":"pub fn section_count(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Return the number of sections.\n","sig":null,"attributes":[{"value":"/ Return the number of sections.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":527316,"byte_end":527350,"line_start":259,"line_end":259,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1563},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":527473,"byte_end":527483,"line_start":265,"line_end":265,"column_start":12,"column_end":22},"name":"unit_count","qualname":"<UnitIndex<R>>::unit_count","value":"pub fn unit_count(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Return the number of units.\n","sig":null,"attributes":[{"value":"/ Return the number of units.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":527430,"byte_end":527461,"line_start":264,"line_end":264,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1564},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":527578,"byte_end":527588,"line_start":270,"line_end":270,"column_start":12,"column_end":22},"name":"slot_count","qualname":"<UnitIndex<R>>::slot_count","value":"pub fn slot_count(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Return the number of slots.\n","sig":null,"attributes":[{"value":"/ Return the number of slots.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":527535,"byte_end":527566,"line_start":269,"line_end":269,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":7130},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":527752,"byte_end":527776,"line_start":277,"line_end":277,"column_start":12,"column_end":36},"name":"UnitIndexSectionIterator","qualname":"::read::index::UnitIndexSectionIterator","value":"UnitIndexSectionIterator {  }","parent":null,"children":[{"krate":0,"index":7133},{"krate":0,"index":7134},{"krate":0,"index":7135}],"decl_id":null,"docs":" An iterator over the section offsets and sizes for a row in a `UnitIndex`.\n","sig":null,"attributes":[{"value":"/ An iterator over the section offsets and sizes for a row in a `UnitIndex`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":527638,"byte_end":527716,"line_start":275,"line_end":275,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":7144},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":528503,"byte_end":528519,"line_start":301,"line_end":301,"column_start":12,"column_end":28},"name":"UnitIndexSection","qualname":"::read::index::UnitIndexSection","value":"UnitIndexSection { section, offset, size }","parent":null,"children":[{"krate":0,"index":7145},{"krate":0,"index":7146},{"krate":0,"index":7147}],"decl_id":null,"docs":" Information about a unit's contribution to a section in a `.dwp` file.\n","sig":null,"attributes":[{"value":"/ Information about a unit's contribution to a section in a `.dwp` file.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":528372,"byte_end":528446,"line_start":299,"line_end":299,"column_start":1,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":7145},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":528556,"byte_end":528563,"line_start":303,"line_end":303,"column_start":9,"column_end":16},"name":"section","qualname":"::read::index::UnitIndexSection::section","value":"common::SectionId","parent":{"krate":0,"index":7144},"children":[],"decl_id":null,"docs":" The section kind.\n","sig":null,"attributes":[{"value":"/ The section kind.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":528526,"byte_end":528547,"line_start":302,"line_end":302,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":7146},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":528651,"byte_end":528657,"line_start":305,"line_end":305,"column_start":9,"column_end":15},"name":"offset","qualname":"::read::index::UnitIndexSection::offset","value":"u32","parent":{"krate":0,"index":7144},"children":[],"decl_id":null,"docs":" The base offset of the unit's contribution to the section.\n","sig":null,"attributes":[{"value":"/ The base offset of the unit's contribution to the section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":528580,"byte_end":528642,"line_start":304,"line_end":304,"column_start":5,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":7147},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":528732,"byte_end":528736,"line_start":307,"line_end":307,"column_start":9,"column_end":13},"name":"size","qualname":"::read::index::UnitIndexSection::size","value":"u32","parent":{"krate":0,"index":7144},"children":[],"decl_id":null,"docs":" The size of the unit's contribution to the section.\n","sig":null,"attributes":[{"value":"/ The size of the unit's contribution to the section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":528668,"byte_end":528723,"line_start":306,"line_end":306,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":7160},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":537820,"byte_end":537829,"line_start":17,"line_end":17,"column_start":12,"column_end":21},"name":"DebugLine","qualname":"::read::line::DebugLine","value":"DebugLine {  }","parent":null,"children":[{"krate":0,"index":7162}],"decl_id":null,"docs":" The `DebugLine` struct contains the source location to instruction mapping\n found in the `.debug_line` section.\n","sig":null,"attributes":[{"value":"/ The `DebugLine` struct contains the source location to instruction mapping","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":537651,"byte_end":537729,"line_start":14,"line_end":14,"column_start":1,"column_end":79}},{"value":"/ found in the `.debug_line` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":537730,"byte_end":537769,"line_start":15,"line_end":15,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1644},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":538550,"byte_end":538553,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugLine<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugLine` instance from the data in the `.debug_line`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugLine` instance from the data in the `.debug_line`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":537960,"byte_end":538035,"line_start":25,"line_end":25,"column_start":5,"column_end":80}},{"value":"/ section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":538040,"byte_end":538052,"line_start":26,"line_end":26,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":538057,"byte_end":538060,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_line` section and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":538065,"byte_end":538140,"line_start":28,"line_end":28,"column_start":5,"column_end":80}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":538145,"byte_end":538215,"line_start":29,"line_end":29,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":538220,"byte_end":538259,"line_start":30,"line_end":30,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":538264,"byte_end":538267,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":538272,"byte_end":538279,"line_start":32,"line_end":32,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugLine, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":538284,"byte_end":538325,"line_start":33,"line_end":33,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":538330,"byte_end":538333,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":538338,"byte_end":538379,"line_start":35,"line_end":35,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_line_section_somehow = || &buf;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":538384,"byte_end":538436,"line_start":36,"line_end":36,"column_start":5,"column_end":57}},{"value":"/ let debug_line = DebugLine::new(read_debug_line_section_somehow(), LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":538441,"byte_end":538526,"line_start":37,"line_end":37,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":538531,"byte_end":538538,"line_start":38,"line_end":38,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1647},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":539875,"byte_end":539882,"line_start":69,"line_end":69,"column_start":12,"column_end":19},"name":"program","qualname":"<DebugLine<R>>::program","value":"pub fn program(&Self, DebugLineOffset<R::Offset>, u8, Option<R>, Option<R>)\n-> Result<IncompleteLineProgram<R>>","parent":null,"children":[],"decl_id":null,"docs":" Parse the line number program whose header is at the given `offset` in the\n `.debug_line` section.","sig":null,"attributes":[{"value":"/ Parse the line number program whose header is at the given `offset` in the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":538723,"byte_end":538801,"line_start":45,"line_end":45,"column_start":5,"column_end":83}},{"value":"/ `.debug_line` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":538806,"byte_end":538832,"line_start":46,"line_end":46,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":538837,"byte_end":538840,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ The `address_size` must match the compilation unit that the lines apply to.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":538845,"byte_end":538924,"line_start":48,"line_end":48,"column_start":5,"column_end":84}},{"value":"/ The `comp_dir` should be from the `DW_AT_comp_dir` attribute of the compilation","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":538929,"byte_end":539012,"line_start":49,"line_end":49,"column_start":5,"column_end":88}},{"value":"/ unit. The `comp_name` should be from the `DW_AT_name` attribute of the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":539017,"byte_end":539091,"line_start":50,"line_end":50,"column_start":5,"column_end":79}},{"value":"/ compilation unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":539096,"byte_end":539117,"line_start":51,"line_end":51,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":539122,"byte_end":539125,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":539130,"byte_end":539148,"line_start":53,"line_end":53,"column_start":5,"column_end":23}},{"value":"/ use gimli::{DebugLine, DebugLineOffset, IncompleteLineProgram, EndianSlice, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":539153,"byte_end":539247,"line_start":54,"line_end":54,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":539252,"byte_end":539255,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":539260,"byte_end":539279,"line_start":56,"line_end":56,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_line_section_somehow = || &buf;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":539284,"byte_end":539336,"line_start":57,"line_end":57,"column_start":5,"column_end":57}},{"value":"/ let debug_line = DebugLine::new(read_debug_line_section_somehow(), LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":539341,"byte_end":539426,"line_start":58,"line_end":58,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":539431,"byte_end":539434,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ // In a real example, we'd grab the offset via a compilation unit","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":539439,"byte_end":539508,"line_start":60,"line_end":60,"column_start":5,"column_end":74}},{"value":"/ // entry's `DW_AT_stmt_list` attribute, and the address size from that","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":539513,"byte_end":539587,"line_start":61,"line_end":61,"column_start":5,"column_end":79}},{"value":"/ // unit directly.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":539592,"byte_end":539613,"line_start":62,"line_end":62,"column_start":5,"column_end":26}},{"value":"/ let offset = DebugLineOffset(0);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":539618,"byte_end":539654,"line_start":63,"line_end":63,"column_start":5,"column_end":41}},{"value":"/ let address_size = 8;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":539659,"byte_end":539684,"line_start":64,"line_end":64,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":539689,"byte_end":539692,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ let program = debug_line.program(offset, address_size, None, None)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":539697,"byte_end":539767,"line_start":66,"line_end":66,"column_start":5,"column_end":75}},{"value":"/     .expect(\"should have found a header at that offset, and parsed it OK\");","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":539772,"byte_end":539851,"line_start":67,"line_end":67,"column_start":5,"column_end":84}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":539856,"byte_end":539863,"line_start":68,"line_end":68,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1650},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":541001,"byte_end":541007,"line_start":100,"line_end":100,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugLine<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugLine<R> where F: FnMut(&'a T) ->\nR","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugLine` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugLine` section that references the data in `self`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":540371,"byte_end":540439,"line_start":85,"line_end":85,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":540444,"byte_end":540447,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":540452,"byte_end":540517,"line_start":87,"line_end":87,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":540522,"byte_end":540525,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":540530,"byte_end":540550,"line_start":89,"line_end":89,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":540555,"byte_end":540558,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":540563,"byte_end":540581,"line_start":91,"line_end":91,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":540586,"byte_end":540631,"line_start":92,"line_end":92,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":540636,"byte_end":540720,"line_start":93,"line_end":93,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugLine<Vec<u8>> = load_section();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":540725,"byte_end":540791,"line_start":94,"line_end":94,"column_start":5,"column_end":71}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":540796,"byte_end":540843,"line_start":95,"line_end":95,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":540848,"byte_end":540898,"line_start":96,"line_end":96,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":540903,"byte_end":540965,"line_start":97,"line_end":97,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":540970,"byte_end":540977,"line_start":98,"line_end":98,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":540982,"byte_end":540989,"line_start":99,"line_end":99,"column_start":5,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":1661},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":541637,"byte_end":541654,"line_start":126,"line_end":126,"column_start":10,"column_end":27},"name":"LineNumberProgram","qualname":"::read::line::LineNumberProgram","value":"dyn LineProgram<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `LineNumberProgram` has been renamed to `LineProgram`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `LineNumberProgram` has been renamed to `LineProgram`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":541464,"byte_end":541534,"line_start":124,"line_end":124,"column_start":1,"column_end":71}},{"value":"deprecated(note =\n             \"LineNumberProgram has been renamed to LineProgram, use that instead.\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":541535,"byte_end":541627,"line_start":125,"line_end":125,"column_start":1,"column_end":93}}]},{"kind":"Trait","id":{"krate":0,"index":1664},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":541892,"byte_end":541903,"line_start":131,"line_end":131,"column_start":11,"column_end":22},"name":"LineProgram","qualname":"::read::line::LineProgram","value":"LineProgram<R, Offset = <R as Reader>::Offset>","parent":null,"children":[{"krate":0,"index":1667},{"krate":0,"index":1668}],"decl_id":null,"docs":" A `LineProgram` provides access to a `LineProgramHeader` and\n a way to add files to the files table if necessary. Gimli consumers should\n never need to use or see this trait.\n","sig":null,"attributes":[{"value":"/ A `LineProgram` provides access to a `LineProgramHeader` and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":541697,"byte_end":541761,"line_start":128,"line_end":128,"column_start":1,"column_end":65}},{"value":"/ a way to add files to the files table if necessary. Gimli consumers should","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":541762,"byte_end":541840,"line_start":129,"line_end":129,"column_start":1,"column_end":79}},{"value":"/ never need to use or see this trait.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":541841,"byte_end":541881,"line_start":130,"line_end":130,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1667},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":542069,"byte_end":542075,"line_start":137,"line_end":137,"column_start":8,"column_end":14},"name":"header","qualname":"::read::line::LineProgram::header","value":"pub fn header(&Self) -> &LineProgramHeader<R, Offset>","parent":{"krate":0,"index":1664},"children":[],"decl_id":null,"docs":" Get a reference to the held `LineProgramHeader`.\n","sig":null,"attributes":[{"value":"/ Get a reference to the held `LineProgramHeader`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":542009,"byte_end":542061,"line_start":136,"line_end":136,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1668},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":542175,"byte_end":542183,"line_start":139,"line_end":139,"column_start":8,"column_end":16},"name":"add_file","qualname":"::read::line::LineProgram::add_file","value":"pub fn add_file(&mut Self, FileEntry<R, Offset>)","parent":{"krate":0,"index":1664},"children":[],"decl_id":null,"docs":" Add a file to the file table if necessary.\n","sig":null,"attributes":[{"value":"/ Add a file to the file table if necessary.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":542121,"byte_end":542167,"line_start":138,"line_end":138,"column_start":5,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":1680},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":543076,"byte_end":543088,"line_start":170,"line_end":170,"column_start":10,"column_end":22},"name":"StateMachine","qualname":"::read::line::StateMachine","value":"LineRows<R, Program, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `StateMachine` has been renamed to `LineRows`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `StateMachine` has been renamed to `LineRows`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":542919,"byte_end":542981,"line_start":168,"line_end":168,"column_start":1,"column_end":63}},{"value":"deprecated(note =\n             \"StateMachine has been renamed to LineRows, use that instead.\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":542982,"byte_end":543066,"line_start":169,"line_end":169,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":7174},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":543469,"byte_end":543477,"line_start":178,"line_end":178,"column_start":12,"column_end":20},"name":"LineRows","qualname":"::read::line::LineRows","value":"LineRows {  }","parent":null,"children":[{"krate":0,"index":7178},{"krate":0,"index":7179},{"krate":0,"index":7180}],"decl_id":null,"docs":" Executes a `LineProgram` to iterate over the rows in the matrix of line number information.","sig":null,"attributes":[{"value":"/ Executes a `LineProgram` to iterate over the rows in the matrix of line number information.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":543142,"byte_end":543237,"line_start":172,"line_end":172,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":543238,"byte_end":543241,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ \"The hypothetical machine used by a consumer of the line number information","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":543242,"byte_end":543321,"line_start":174,"line_end":174,"column_start":1,"column_end":80}},{"value":"/ to expand the byte-coded instruction stream into a matrix of line number","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":543322,"byte_end":543398,"line_start":175,"line_end":175,"column_start":1,"column_end":77}},{"value":"/ information.\" -- Section 6.2.1","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":543399,"byte_end":543433,"line_start":176,"line_end":176,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1698},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":544999,"byte_end":545005,"line_start":230,"line_end":230,"column_start":12,"column_end":18},"name":"header","qualname":"<LineRows<R, Program, Offset>>::header","value":"pub fn header(&Self) -> &LineProgramHeader<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the header for this state machine's line number\n program.\n","sig":null,"attributes":[{"value":"/ Get a reference to the header for this state machine's line number","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":544886,"byte_end":544956,"line_start":227,"line_end":227,"column_start":5,"column_end":75}},{"value":"/ program.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":544961,"byte_end":544973,"line_start":228,"line_end":228,"column_start":5,"column_end":17}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":544978,"byte_end":544987,"line_start":229,"line_end":229,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1699},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":545631,"byte_end":545639,"line_start":244,"line_end":244,"column_start":12,"column_end":20},"name":"next_row","qualname":"<LineRows<R, Program, Offset>>::next_row","value":"pub fn next_row(&mut Self)\n-> Result<Option<(&LineProgramHeader<R, Offset>, &LineRow)>>","parent":null,"children":[],"decl_id":null,"docs":" Parse and execute the next instructions in the line number program until\n another row in the line number matrix is computed.","sig":null,"attributes":[{"value":"/ Parse and execute the next instructions in the line number program until","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":545089,"byte_end":545165,"line_start":234,"line_end":234,"column_start":5,"column_end":81}},{"value":"/ another row in the line number matrix is computed.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":545170,"byte_end":545224,"line_start":235,"line_end":235,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":545229,"byte_end":545232,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ The freshly computed row is returned as `Ok(Some((header, row)))`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":545237,"byte_end":545307,"line_start":237,"line_end":237,"column_start":5,"column_end":75}},{"value":"/ If the matrix is complete, and there are no more new rows in the line","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":545312,"byte_end":545385,"line_start":238,"line_end":238,"column_start":5,"column_end":78}},{"value":"/ number matrix, then `Ok(None)` is returned. If there was an error parsing","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":545390,"byte_end":545467,"line_start":239,"line_end":239,"column_start":5,"column_end":82}},{"value":"/ an instruction, then `Err(e)` is returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":545472,"byte_end":545518,"line_start":240,"line_end":240,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":545523,"byte_end":545526,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ Unfortunately, the references mean that this cannot be a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":545531,"byte_end":545591,"line_start":242,"line_end":242,"column_start":5,"column_end":65}},{"value":"/ `FallibleIterator`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":545596,"byte_end":545619,"line_start":243,"line_end":243,"column_start":5,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":1700},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":546635,"byte_end":546641,"line_start":267,"line_end":267,"column_start":10,"column_end":16},"name":"Opcode","qualname":"::read::line::Opcode","value":"LineInstruction<R, <R as Reader>::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `Opcode` has been renamed to `LineInstruction`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `Opcode` has been renamed to `LineInstruction`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":546476,"byte_end":546539,"line_start":265,"line_end":265,"column_start":1,"column_end":64}},{"value":"deprecated(note =\n             \"Opcode has been renamed to LineInstruction, use that instead.\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":546540,"byte_end":546625,"line_start":266,"line_end":266,"column_start":1,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7194},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":547843,"byte_end":547850,"line_start":299,"line_end":299,"column_start":5,"column_end":12},"name":"Special","qualname":"::read::line::LineInstruction::Special","value":"LineInstruction::Special(u8)","parent":{"krate":0,"index":7191},"children":[],"decl_id":null,"docs":" > ### 6.2.5.1 Special Opcodes\n >\n > Each ubyte special opcode has the following effect on the state machine:\n >\n >   1. Add a signed integer to the line register.\n >\n >   2. Modify the operation pointer by incrementing the address and\n >   op_index registers as described below.\n >\n >   3. Append a row to the matrix using the current values of the state\n >   machine registers.\n >\n >   4. Set the basic_block register to “false.”\n >\n >   5. Set the prologue_end register to “false.”\n >\n >   6. Set the epilogue_begin register to “false.”\n >\n >   7. Set the discriminator register to 0.\n >\n > All of the special opcodes do those same seven things; they differ from\n > one another only in what values they add to the line, address and\n > op_index registers.\n","sig":null,"attributes":[{"value":"/ > ### 6.2.5.1 Special Opcodes","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":546912,"byte_end":546945,"line_start":276,"line_end":276,"column_start":5,"column_end":38}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":546950,"byte_end":546955,"line_start":277,"line_end":277,"column_start":5,"column_end":10}},{"value":"/ > Each ubyte special opcode has the following effect on the state machine:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":546960,"byte_end":547038,"line_start":278,"line_end":278,"column_start":5,"column_end":83}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":547043,"byte_end":547048,"line_start":279,"line_end":279,"column_start":5,"column_end":10}},{"value":"/ >   1. Add a signed integer to the line register.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":547053,"byte_end":547106,"line_start":280,"line_end":280,"column_start":5,"column_end":58}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":547111,"byte_end":547116,"line_start":281,"line_end":281,"column_start":5,"column_end":10}},{"value":"/ >   2. Modify the operation pointer by incrementing the address and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":547121,"byte_end":547192,"line_start":282,"line_end":282,"column_start":5,"column_end":76}},{"value":"/ >   op_index registers as described below.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":547197,"byte_end":547243,"line_start":283,"line_end":283,"column_start":5,"column_end":51}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":547248,"byte_end":547253,"line_start":284,"line_end":284,"column_start":5,"column_end":10}},{"value":"/ >   3. Append a row to the matrix using the current values of the state","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":547258,"byte_end":547333,"line_start":285,"line_end":285,"column_start":5,"column_end":80}},{"value":"/ >   machine registers.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":547338,"byte_end":547364,"line_start":286,"line_end":286,"column_start":5,"column_end":31}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":547369,"byte_end":547374,"line_start":287,"line_end":287,"column_start":5,"column_end":10}},{"value":"/ >   4. Set the basic_block register to “false.”","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":547379,"byte_end":547434,"line_start":288,"line_end":288,"column_start":5,"column_end":56}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":547439,"byte_end":547444,"line_start":289,"line_end":289,"column_start":5,"column_end":10}},{"value":"/ >   5. Set the prologue_end register to “false.”","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":547449,"byte_end":547505,"line_start":290,"line_end":290,"column_start":5,"column_end":57}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":547510,"byte_end":547515,"line_start":291,"line_end":291,"column_start":5,"column_end":10}},{"value":"/ >   6. Set the epilogue_begin register to “false.”","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":547520,"byte_end":547578,"line_start":292,"line_end":292,"column_start":5,"column_end":59}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":547583,"byte_end":547588,"line_start":293,"line_end":293,"column_start":5,"column_end":10}},{"value":"/ >   7. Set the discriminator register to 0.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":547593,"byte_end":547640,"line_start":294,"line_end":294,"column_start":5,"column_end":52}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":547645,"byte_end":547650,"line_start":295,"line_end":295,"column_start":5,"column_end":10}},{"value":"/ > All of the special opcodes do those same seven things; they differ from","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":547655,"byte_end":547732,"line_start":296,"line_end":296,"column_start":5,"column_end":82}},{"value":"/ > one another only in what values they add to the line, address and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":547737,"byte_end":547808,"line_start":297,"line_end":297,"column_start":5,"column_end":76}},{"value":"/ > op_index registers.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":547813,"byte_end":547838,"line_start":298,"line_end":298,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7197},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":548136,"byte_end":548140,"line_start":305,"line_end":305,"column_start":5,"column_end":9},"name":"Copy","qualname":"::read::line::LineInstruction::Copy","value":"LineInstruction::Copy","parent":{"krate":0,"index":7191},"children":[],"decl_id":null,"docs":" \"[`LineInstruction::Copy`] appends a row to the matrix using the current\n values of the state machine registers. Then it sets the discriminator\n register to 0, and sets the basic_block, prologue_end and epilogue_begin\n registers to “false.”\"\n","sig":null,"attributes":[{"value":"/ \"[`LineInstruction::Copy`] appends a row to the matrix using the current","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":547861,"byte_end":547937,"line_start":301,"line_end":301,"column_start":5,"column_end":81}},{"value":"/ values of the state machine registers. Then it sets the discriminator","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":547942,"byte_end":548015,"line_start":302,"line_end":302,"column_start":5,"column_end":78}},{"value":"/ register to 0, and sets the basic_block, prologue_end and epilogue_begin","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":548020,"byte_end":548096,"line_start":303,"line_end":303,"column_start":5,"column_end":81}},{"value":"/ registers to “false.”\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":548101,"byte_end":548131,"line_start":304,"line_end":304,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7199},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":548355,"byte_end":548364,"line_start":310,"line_end":310,"column_start":5,"column_end":14},"name":"AdvancePc","qualname":"::read::line::LineInstruction::AdvancePc","value":"LineInstruction::AdvancePc(u64)","parent":{"krate":0,"index":7191},"children":[],"decl_id":null,"docs":" \"The DW_LNS_advance_pc opcode takes a single unsigned LEB128 operand as\n the operation advance and modifies the address and op_index registers\n [the same as `LineInstruction::Special`]\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNS_advance_pc opcode takes a single unsigned LEB128 operand as","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":548147,"byte_end":548222,"line_start":307,"line_end":307,"column_start":5,"column_end":80}},{"value":"/ the operation advance and modifies the address and op_index registers","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":548227,"byte_end":548300,"line_start":308,"line_end":308,"column_start":5,"column_end":78}},{"value":"/ [the same as `LineInstruction::Special`]\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":548305,"byte_end":548350,"line_start":309,"line_end":309,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7202},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":548525,"byte_end":548536,"line_start":314,"line_end":314,"column_start":5,"column_end":16},"name":"AdvanceLine","qualname":"::read::line::LineInstruction::AdvanceLine","value":"LineInstruction::AdvanceLine(i64)","parent":{"krate":0,"index":7191},"children":[],"decl_id":null,"docs":" \"The DW_LNS_advance_line opcode takes a single signed LEB128 operand and\n adds that value to the line register of the state machine.\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNS_advance_line opcode takes a single signed LEB128 operand and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":548376,"byte_end":548452,"line_start":312,"line_end":312,"column_start":5,"column_end":81}},{"value":"/ adds that value to the line register of the state machine.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":548457,"byte_end":548520,"line_start":313,"line_end":313,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7205},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":548689,"byte_end":548696,"line_start":318,"line_end":318,"column_start":5,"column_end":12},"name":"SetFile","qualname":"::read::line::LineInstruction::SetFile","value":"LineInstruction::SetFile(u64)","parent":{"krate":0,"index":7191},"children":[],"decl_id":null,"docs":" \"The DW_LNS_set_file opcode takes a single unsigned LEB128 operand and\n stores it in the file register of the state machine.\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNS_set_file opcode takes a single unsigned LEB128 operand and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":548548,"byte_end":548622,"line_start":316,"line_end":316,"column_start":5,"column_end":79}},{"value":"/ stores it in the file register of the state machine.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":548627,"byte_end":548684,"line_start":317,"line_end":317,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7208},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":548853,"byte_end":548862,"line_start":322,"line_end":322,"column_start":5,"column_end":14},"name":"SetColumn","qualname":"::read::line::LineInstruction::SetColumn","value":"LineInstruction::SetColumn(u64)","parent":{"krate":0,"index":7191},"children":[],"decl_id":null,"docs":" \"The DW_LNS_set_column opcode takes a single unsigned LEB128 operand and\n stores it in the column register of the state machine.\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNS_set_column opcode takes a single unsigned LEB128 operand and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":548708,"byte_end":548784,"line_start":320,"line_end":320,"column_start":5,"column_end":81}},{"value":"/ stores it in the column register of the state machine.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":548789,"byte_end":548848,"line_start":321,"line_end":321,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7211},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":549045,"byte_end":549060,"line_start":327,"line_end":327,"column_start":5,"column_end":20},"name":"NegateStatement","qualname":"::read::line::LineInstruction::NegateStatement","value":"LineInstruction::NegateStatement","parent":{"krate":0,"index":7191},"children":[],"decl_id":null,"docs":" \"The DW_LNS_negate_stmt opcode takes no operands. It sets the is_stmt\n register of the state machine to the logical negation of its current\n value.\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNS_negate_stmt opcode takes no operands. It sets the is_stmt","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":548874,"byte_end":548947,"line_start":324,"line_end":324,"column_start":5,"column_end":78}},{"value":"/ register of the state machine to the logical negation of its current","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":548952,"byte_end":549024,"line_start":325,"line_end":325,"column_start":5,"column_end":77}},{"value":"/ value.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":549029,"byte_end":549040,"line_start":326,"line_end":326,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7213},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":549207,"byte_end":549220,"line_start":331,"line_end":331,"column_start":5,"column_end":18},"name":"SetBasicBlock","qualname":"::read::line::LineInstruction::SetBasicBlock","value":"LineInstruction::SetBasicBlock","parent":{"krate":0,"index":7191},"children":[],"decl_id":null,"docs":" \"The DW_LNS_set_basic_block opcode takes no operands. It sets the\n basic_block register of the state machine to “true.”\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNS_set_basic_block opcode takes no operands. It sets the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":549067,"byte_end":549136,"line_start":329,"line_end":329,"column_start":5,"column_end":74}},{"value":"/ basic_block register of the state machine to “true.”\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":549141,"byte_end":549202,"line_start":330,"line_end":330,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7215},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":549975,"byte_end":549985,"line_start":344,"line_end":344,"column_start":5,"column_end":15},"name":"ConstAddPc","qualname":"::read::line::LineInstruction::ConstAddPc","value":"LineInstruction::ConstAddPc","parent":{"krate":0,"index":7191},"children":[],"decl_id":null,"docs":" > The DW_LNS_const_add_pc opcode takes no operands. It advances the\n > address and op_index registers by the increments corresponding to\n > special opcode 255.\n >\n > When the line number program needs to advance the address by a small\n > amount, it can use a single special opcode, which occupies a single\n > byte. When it needs to advance the address by up to twice the range of\n > the last special opcode, it can use DW_LNS_const_add_pc followed by a\n > special opcode, for a total of two bytes. Only if it needs to advance\n > the address by more than twice that range will it need to use both\n > DW_LNS_advance_pc and a special opcode, requiring three or more bytes.\n","sig":null,"attributes":[{"value":"/ > The DW_LNS_const_add_pc opcode takes no operands. It advances the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":549227,"byte_end":549298,"line_start":333,"line_end":333,"column_start":5,"column_end":76}},{"value":"/ > address and op_index registers by the increments corresponding to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":549303,"byte_end":549374,"line_start":334,"line_end":334,"column_start":5,"column_end":76}},{"value":"/ > special opcode 255.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":549379,"byte_end":549404,"line_start":335,"line_end":335,"column_start":5,"column_end":30}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":549409,"byte_end":549414,"line_start":336,"line_end":336,"column_start":5,"column_end":10}},{"value":"/ > When the line number program needs to advance the address by a small","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":549419,"byte_end":549493,"line_start":337,"line_end":337,"column_start":5,"column_end":79}},{"value":"/ > amount, it can use a single special opcode, which occupies a single","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":549498,"byte_end":549571,"line_start":338,"line_end":338,"column_start":5,"column_end":78}},{"value":"/ > byte. When it needs to advance the address by up to twice the range of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":549576,"byte_end":549652,"line_start":339,"line_end":339,"column_start":5,"column_end":81}},{"value":"/ > the last special opcode, it can use DW_LNS_const_add_pc followed by a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":549657,"byte_end":549732,"line_start":340,"line_end":340,"column_start":5,"column_end":80}},{"value":"/ > special opcode, for a total of two bytes. Only if it needs to advance","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":549737,"byte_end":549812,"line_start":341,"line_end":341,"column_start":5,"column_end":80}},{"value":"/ > the address by more than twice that range will it need to use both","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":549817,"byte_end":549889,"line_start":342,"line_end":342,"column_start":5,"column_end":77}},{"value":"/ > DW_LNS_advance_pc and a special opcode, requiring three or more bytes.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":549894,"byte_end":549970,"line_start":343,"line_end":343,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7217},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":550385,"byte_end":550395,"line_start":351,"line_end":351,"column_start":5,"column_end":15},"name":"FixedAddPc","qualname":"::read::line::LineInstruction::FixedAddPc","value":"LineInstruction::FixedAddPc(u16)","parent":{"krate":0,"index":7191},"children":[],"decl_id":null,"docs":" > The DW_LNS_fixed_advance_pc opcode takes a single uhalf (unencoded)\n > operand and adds it to the address register of the state machine and\n > sets the op_index register to 0. This is the only standard opcode whose\n > operand is not a variable length number. It also does not multiply the\n > operand by the minimum_instruction_length field of the header.\n","sig":null,"attributes":[{"value":"/ > The DW_LNS_fixed_advance_pc opcode takes a single uhalf (unencoded)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":549992,"byte_end":550065,"line_start":346,"line_end":346,"column_start":5,"column_end":78}},{"value":"/ > operand and adds it to the address register of the state machine and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":550070,"byte_end":550144,"line_start":347,"line_end":347,"column_start":5,"column_end":79}},{"value":"/ > sets the op_index register to 0. This is the only standard opcode whose","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":550149,"byte_end":550226,"line_start":348,"line_end":348,"column_start":5,"column_end":82}},{"value":"/ > operand is not a variable length number. It also does not multiply the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":550231,"byte_end":550307,"line_start":349,"line_end":349,"column_start":5,"column_end":81}},{"value":"/ > operand by the minimum_instruction_length field of the header.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":550312,"byte_end":550380,"line_start":350,"line_end":350,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7220},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":550499,"byte_end":550513,"line_start":354,"line_end":354,"column_start":5,"column_end":19},"name":"SetPrologueEnd","qualname":"::read::line::LineInstruction::SetPrologueEnd","value":"LineInstruction::SetPrologueEnd","parent":{"krate":0,"index":7191},"children":[],"decl_id":null,"docs":" \"[`LineInstruction::SetPrologueEnd`] sets the prologue_end register to “true”.\"\n","sig":null,"attributes":[{"value":"/ \"[`LineInstruction::SetPrologueEnd`] sets the prologue_end register to “true”.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":550407,"byte_end":550494,"line_start":353,"line_end":353,"column_start":5,"column_end":88}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7222},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":550624,"byte_end":550640,"line_start":358,"line_end":358,"column_start":5,"column_end":21},"name":"SetEpilogueBegin","qualname":"::read::line::LineInstruction::SetEpilogueBegin","value":"LineInstruction::SetEpilogueBegin","parent":{"krate":0,"index":7191},"children":[],"decl_id":null,"docs":" \"[`LineInstruction::SetEpilogueBegin`] sets the epilogue_begin register to\n “true”.\"\n","sig":null,"attributes":[{"value":"/ \"[`LineInstruction::SetEpilogueBegin`] sets the epilogue_begin register to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":550520,"byte_end":550598,"line_start":356,"line_end":356,"column_start":5,"column_end":83}},{"value":"/ “true”.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":550603,"byte_end":550619,"line_start":357,"line_end":357,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7224},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":550794,"byte_end":550800,"line_start":362,"line_end":362,"column_start":5,"column_end":11},"name":"SetIsa","qualname":"::read::line::LineInstruction::SetIsa","value":"LineInstruction::SetIsa(u64)","parent":{"krate":0,"index":7191},"children":[],"decl_id":null,"docs":" \"The DW_LNS_set_isa opcode takes a single unsigned LEB128 operand and\n stores that value in the isa register of the state machine.\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNS_set_isa opcode takes a single unsigned LEB128 operand and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":550647,"byte_end":550720,"line_start":360,"line_end":360,"column_start":5,"column_end":78}},{"value":"/ stores that value in the isa register of the state machine.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":550725,"byte_end":550789,"line_start":361,"line_end":361,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7227},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":550867,"byte_end":550883,"line_start":365,"line_end":365,"column_start":5,"column_end":21},"name":"UnknownStandard0","qualname":"::read::line::LineInstruction::UnknownStandard0","value":"LineInstruction::UnknownStandard0(constants::DwLns)","parent":{"krate":0,"index":7191},"children":[],"decl_id":null,"docs":" An unknown standard opcode with zero operands.\n","sig":null,"attributes":[{"value":"/ An unknown standard opcode with zero operands.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":550812,"byte_end":550862,"line_start":364,"line_end":364,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7230},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":550961,"byte_end":550977,"line_start":368,"line_end":368,"column_start":5,"column_end":21},"name":"UnknownStandard1","qualname":"::read::line::LineInstruction::UnknownStandard1","value":"LineInstruction::UnknownStandard1(constants::DwLns, u64)","parent":{"krate":0,"index":7191},"children":[],"decl_id":null,"docs":" An unknown standard opcode with one operand.\n","sig":null,"attributes":[{"value":"/ An unknown standard opcode with one operand.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":550908,"byte_end":550956,"line_start":367,"line_end":367,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7234},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":551066,"byte_end":551082,"line_start":371,"line_end":371,"column_start":5,"column_end":21},"name":"UnknownStandardN","qualname":"::read::line::LineInstruction::UnknownStandardN","value":"LineInstruction::UnknownStandardN(constants::DwLns, R)","parent":{"krate":0,"index":7191},"children":[],"decl_id":null,"docs":" An unknown standard opcode with multiple operands.\n","sig":null,"attributes":[{"value":"/ An unknown standard opcode with multiple operands.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":551007,"byte_end":551061,"line_start":370,"line_end":370,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7238},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":551652,"byte_end":551663,"line_start":380,"line_end":380,"column_start":5,"column_end":16},"name":"EndSequence","qualname":"::read::line::LineInstruction::EndSequence","value":"LineInstruction::EndSequence","parent":{"krate":0,"index":7191},"children":[],"decl_id":null,"docs":" > [`LineInstruction::EndSequence`] sets the end_sequence register of the state\n > machine to “true” and appends a row to the matrix using the current\n > values of the state-machine registers. Then it resets the registers to\n > the initial values specified above (see Section 6.2.2). Every line\n > number program sequence must end with a DW_LNE_end_sequence instruction\n > which creates a row whose address is that of the byte after the last\n > target machine instruction of the sequence.\n","sig":null,"attributes":[{"value":"/ > [`LineInstruction::EndSequence`] sets the end_sequence register of the state","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":551110,"byte_end":551192,"line_start":373,"line_end":373,"column_start":5,"column_end":87}},{"value":"/ > machine to “true” and appends a row to the matrix using the current","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":551197,"byte_end":551274,"line_start":374,"line_end":374,"column_start":5,"column_end":78}},{"value":"/ > values of the state-machine registers. Then it resets the registers to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":551279,"byte_end":551355,"line_start":375,"line_end":375,"column_start":5,"column_end":81}},{"value":"/ > the initial values specified above (see Section 6.2.2). Every line","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":551360,"byte_end":551432,"line_start":376,"line_end":376,"column_start":5,"column_end":77}},{"value":"/ > number program sequence must end with a DW_LNE_end_sequence instruction","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":551437,"byte_end":551514,"line_start":377,"line_end":377,"column_start":5,"column_end":82}},{"value":"/ > which creates a row whose address is that of the byte after the last","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":551519,"byte_end":551593,"line_start":378,"line_end":378,"column_start":5,"column_end":79}},{"value":"/ > target machine instruction of the sequence.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":551598,"byte_end":551647,"line_start":379,"line_end":379,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7240},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":552173,"byte_end":552183,"line_start":390,"line_end":390,"column_start":5,"column_end":15},"name":"SetAddress","qualname":"::read::line::LineInstruction::SetAddress","value":"LineInstruction::SetAddress(u64)","parent":{"krate":0,"index":7191},"children":[],"decl_id":null,"docs":" > The DW_LNE_set_address opcode takes a single relocatable address as an\n > operand. The size of the operand is the size of an address on the target\n > machine. It sets the address register to the value given by the\n > relocatable address and sets the op_index register to 0.\n >\n > All of the other line number program opcodes that affect the address\n > register add a delta to it. This instruction stores a relocatable value\n > into it instead.\n","sig":null,"attributes":[{"value":"/ > The DW_LNE_set_address opcode takes a single relocatable address as an","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":551670,"byte_end":551746,"line_start":382,"line_end":382,"column_start":5,"column_end":81}},{"value":"/ > operand. The size of the operand is the size of an address on the target","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":551751,"byte_end":551829,"line_start":383,"line_end":383,"column_start":5,"column_end":83}},{"value":"/ > machine. It sets the address register to the value given by the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":551834,"byte_end":551903,"line_start":384,"line_end":384,"column_start":5,"column_end":74}},{"value":"/ > relocatable address and sets the op_index register to 0.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":551908,"byte_end":551970,"line_start":385,"line_end":385,"column_start":5,"column_end":67}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":551975,"byte_end":551980,"line_start":386,"line_end":386,"column_start":5,"column_end":10}},{"value":"/ > All of the other line number program opcodes that affect the address","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":551985,"byte_end":552059,"line_start":387,"line_end":387,"column_start":5,"column_end":79}},{"value":"/ > register add a delta to it. This instruction stores a relocatable value","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":552064,"byte_end":552141,"line_start":388,"line_end":388,"column_start":5,"column_end":82}},{"value":"/ > into it instead.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":552146,"byte_end":552168,"line_start":389,"line_end":389,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7243},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":552337,"byte_end":552347,"line_start":394,"line_end":394,"column_start":5,"column_end":15},"name":"DefineFile","qualname":"::read::line::LineInstruction::DefineFile","value":"LineInstruction::DefineFile(FileEntry<R, Offset>)","parent":{"krate":0,"index":7191},"children":[],"decl_id":null,"docs":" Defines a new source file in the line number program and appends it to\n the line number program header's list of source files.\n","sig":null,"attributes":[{"value":"/ Defines a new source file in the line number program and appends it to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":552195,"byte_end":552269,"line_start":392,"line_end":392,"column_start":5,"column_end":79}},{"value":"/ the line number program header's list of source files.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":552274,"byte_end":552332,"line_start":393,"line_end":393,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7246},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":552545,"byte_end":552561,"line_start":399,"line_end":399,"column_start":5,"column_end":21},"name":"SetDiscriminator","qualname":"::read::line::LineInstruction::SetDiscriminator","value":"LineInstruction::SetDiscriminator(u64)","parent":{"krate":0,"index":7191},"children":[],"decl_id":null,"docs":" \"The DW_LNE_set_discriminator opcode takes a single parameter, an\n unsigned LEB128 integer. It sets the discriminator register to the new\n value.\"\n","sig":null,"attributes":[{"value":"/ \"The DW_LNE_set_discriminator opcode takes a single parameter, an","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":552376,"byte_end":552445,"line_start":396,"line_end":396,"column_start":5,"column_end":74}},{"value":"/ unsigned LEB128 integer. It sets the discriminator register to the new","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":552450,"byte_end":552524,"line_start":397,"line_end":397,"column_start":5,"column_end":79}},{"value":"/ value.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":552529,"byte_end":552540,"line_start":398,"line_end":398,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7249},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":552648,"byte_end":552663,"line_start":402,"line_end":402,"column_start":5,"column_end":20},"name":"UnknownExtended","qualname":"::read::line::LineInstruction::UnknownExtended","value":"LineInstruction::UnknownExtended(constants::DwLne, R)","parent":{"krate":0,"index":7191},"children":[],"decl_id":null,"docs":" An unknown extended opcode and the slice of its unparsed operands.\n","sig":null,"attributes":[{"value":"/ An unknown extended opcode and the slice of its unparsed operands.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":552573,"byte_end":552643,"line_start":401,"line_end":401,"column_start":5,"column_end":75}}]},{"kind":"Enum","id":{"krate":0,"index":7191},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":546791,"byte_end":546806,"line_start":271,"line_end":271,"column_start":10,"column_end":25},"name":"LineInstruction","qualname":"::read::line::LineInstruction","value":"pub enum LineInstruction<R, Offset = <R as Reader>::Offset> where\n         R: Reader<Offset = Offset>, Offset: ReaderOffset {\n    Special(u8),\n    Copy,\n    AdvancePc(u64),\n    AdvanceLine(i64),\n    SetFile(u64),\n    SetColumn(u64),\n    NegateStatement,\n    SetBasicBlock,\n    ConstAddPc,\n    FixedAddPc(u16),\n    SetPrologueEnd,\n    SetEpilogueBegin,\n    SetIsa(u64),\n    UnknownStandard0(constants::DwLns),\n    UnknownStandard1(constants::DwLns, u64),\n    UnknownStandardN(constants::DwLns, R),\n    EndSequence,\n    SetAddress(u64),\n    DefineFile(FileEntry<R, Offset>),\n    SetDiscriminator(u64),\n    UnknownExtended(constants::DwLne, R),\n}","parent":null,"children":[{"krate":0,"index":7194},{"krate":0,"index":7197},{"krate":0,"index":7199},{"krate":0,"index":7202},{"krate":0,"index":7205},{"krate":0,"index":7208},{"krate":0,"index":7211},{"krate":0,"index":7213},{"krate":0,"index":7215},{"krate":0,"index":7217},{"krate":0,"index":7220},{"krate":0,"index":7222},{"krate":0,"index":7224},{"krate":0,"index":7227},{"krate":0,"index":7230},{"krate":0,"index":7234},{"krate":0,"index":7238},{"krate":0,"index":7240},{"krate":0,"index":7243},{"krate":0,"index":7246},{"krate":0,"index":7249}],"decl_id":null,"docs":" A parsed line number program instruction.\n","sig":null,"attributes":[{"value":"/ A parsed line number program instruction.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":546691,"byte_end":546736,"line_start":269,"line_end":269,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1711},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":560234,"byte_end":560245,"line_start":577,"line_end":577,"column_start":10,"column_end":21},"name":"OpcodesIter","qualname":"::read::line::OpcodesIter","value":"LineInstructions<R>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `OpcodesIter` has been renamed to `LineInstructions`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `OpcodesIter` has been renamed to `LineInstructions`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":560063,"byte_end":560132,"line_start":575,"line_end":575,"column_start":1,"column_end":70}},{"value":"deprecated(note =\n             \"OpcodesIter has been renamed to LineInstructions, use that instead.\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":560133,"byte_end":560224,"line_start":576,"line_end":576,"column_start":1,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":7279},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":560481,"byte_end":560497,"line_start":585,"line_end":585,"column_start":12,"column_end":28},"name":"LineInstructions","qualname":"::read::line::LineInstructions","value":"LineInstructions {  }","parent":null,"children":[{"krate":0,"index":7281}],"decl_id":null,"docs":" An iterator yielding parsed instructions.","sig":null,"attributes":[{"value":"/ An iterator yielding parsed instructions.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":560273,"byte_end":560318,"line_start":579,"line_end":579,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":560319,"byte_end":560322,"line_start":580,"line_end":580,"column_start":1,"column_end":4}},{"value":"/ See","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":560323,"byte_end":560330,"line_start":581,"line_end":581,"column_start":1,"column_end":8}},{"value":"/ [`LineProgramHeader::instructions`](./struct.LineProgramHeader.html#method.instructions)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":560331,"byte_end":560423,"line_start":582,"line_end":582,"column_start":1,"column_end":93}},{"value":"/ for more details.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":560424,"byte_end":560445,"line_start":583,"line_end":583,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1718},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":561477,"byte_end":561493,"line_start":611,"line_end":611,"column_start":12,"column_end":28},"name":"next_instruction","qualname":"<LineInstructions<R>>::next_instruction","value":"pub fn next_instruction(&mut Self, &LineProgramHeader<R>)\n-> Result<Option<LineInstruction<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator and return the next instruction.","sig":null,"attributes":[{"value":"/ Advance the iterator and return the next instruction.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":560884,"byte_end":560941,"line_start":599,"line_end":599,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":560946,"byte_end":560949,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ Returns the newly parsed instruction as `Ok(Some(instruction))`. Returns","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":560954,"byte_end":561030,"line_start":601,"line_end":601,"column_start":5,"column_end":81}},{"value":"/ `Ok(None)` when iteration is complete and all instructions have already been","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":561035,"byte_end":561115,"line_start":602,"line_end":602,"column_start":5,"column_end":85}},{"value":"/ parsed and yielded. If an error occurs while parsing the next attribute,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":561120,"byte_end":561196,"line_start":603,"line_end":603,"column_start":5,"column_end":81}},{"value":"/ then this error is returned as `Err(e)`, and all subsequent calls return","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":561201,"byte_end":561277,"line_start":604,"line_end":604,"column_start":5,"column_end":81}},{"value":"/ `Ok(None)`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":561282,"byte_end":561297,"line_start":605,"line_end":605,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":561302,"byte_end":561305,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ Unfortunately, the `header` parameter means that this cannot be a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":561310,"byte_end":561379,"line_start":607,"line_end":607,"column_start":5,"column_end":74}},{"value":"/ `FallibleIterator`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":561384,"byte_end":561407,"line_start":608,"line_end":608,"column_start":5,"column_end":28}},{"value":"allow(clippy :: inline_always)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":561412,"byte_end":561443,"line_start":609,"line_end":609,"column_start":5,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":561448,"byte_end":561465,"line_start":610,"line_end":610,"column_start":5,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":1719},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":562065,"byte_end":562078,"line_start":631,"line_end":631,"column_start":10,"column_end":23},"name":"LineNumberRow","qualname":"::read::line::LineNumberRow","value":"LineRow","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `LineNumberRow` has been renamed to `LineRow`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `LineNumberRow` has been renamed to `LineRow`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":561908,"byte_end":561970,"line_start":629,"line_end":629,"column_start":1,"column_end":63}},{"value":"deprecated(note =\n             \"LineNumberRow has been renamed to LineRow, use that instead.\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":561971,"byte_end":562055,"line_start":630,"line_end":630,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":7288},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":562299,"byte_end":562306,"line_start":637,"line_end":637,"column_start":12,"column_end":19},"name":"LineRow","qualname":"::read::line::LineRow","value":"LineRow {  }","parent":null,"children":[{"krate":0,"index":7289},{"krate":0,"index":7290},{"krate":0,"index":7291},{"krate":0,"index":7292},{"krate":0,"index":7293},{"krate":0,"index":7294},{"krate":0,"index":7295},{"krate":0,"index":7296},{"krate":0,"index":7297},{"krate":0,"index":7298},{"krate":0,"index":7299},{"krate":0,"index":7300}],"decl_id":null,"docs":" A row in the line number program's resulting matrix.","sig":null,"attributes":[{"value":"/ A row in the line number program's resulting matrix.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":562091,"byte_end":562147,"line_start":633,"line_end":633,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":562148,"byte_end":562151,"line_start":634,"line_end":634,"column_start":1,"column_end":4}},{"value":"/ Each row is a copy of the registers of the state machine, as defined in section 6.2.2.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":562152,"byte_end":562242,"line_start":635,"line_end":635,"column_start":1,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":1721},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":562683,"byte_end":562686,"line_start":654,"line_end":654,"column_start":12,"column_end":15},"name":"new","qualname":"<LineRow>::new","value":"pub fn new<R: Reader>(&LineProgramHeader<R>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a line number row in the initial state for the given program.\n","sig":null,"attributes":[{"value":"/ Create a line number row in the initial state for the given program.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":562599,"byte_end":562671,"line_start":653,"line_end":653,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1723},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":563806,"byte_end":563813,"line_start":681,"line_end":681,"column_start":12,"column_end":19},"name":"address","qualname":"<LineRow>::address","value":"pub fn address(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" \"The program-counter value corresponding to a machine instruction\n generated by the compiler.\"\n","sig":null,"attributes":[{"value":"/ \"The program-counter value corresponding to a machine instruction","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":563675,"byte_end":563744,"line_start":678,"line_end":678,"column_start":5,"column_end":74}},{"value":"/ generated by the compiler.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":563749,"byte_end":563780,"line_start":679,"line_end":679,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":563785,"byte_end":563794,"line_start":680,"line_end":680,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1724},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":564291,"byte_end":564299,"line_start":693,"line_end":693,"column_start":12,"column_end":20},"name":"op_index","qualname":"<LineRow>::op_index","value":"pub fn op_index(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" > An unsigned integer representing the index of an operation within a VLIW\n > instruction. The index of the first operation is 0. For non-VLIW\n > architectures, this register will always be 0.\n >\n > The address and op_index registers, taken together, form an operation\n > pointer that can reference any individual operation with the\n > instruction stream.\n","sig":null,"attributes":[{"value":"/ > An unsigned integer representing the index of an operation within a VLIW","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":563864,"byte_end":563942,"line_start":685,"line_end":685,"column_start":5,"column_end":83}},{"value":"/ > instruction. The index of the first operation is 0. For non-VLIW","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":563947,"byte_end":564017,"line_start":686,"line_end":686,"column_start":5,"column_end":75}},{"value":"/ > architectures, this register will always be 0.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":564022,"byte_end":564074,"line_start":687,"line_end":687,"column_start":5,"column_end":57}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":564079,"byte_end":564084,"line_start":688,"line_end":688,"column_start":5,"column_end":10}},{"value":"/ > The address and op_index registers, taken together, form an operation","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":564089,"byte_end":564164,"line_start":689,"line_end":689,"column_start":5,"column_end":80}},{"value":"/ > pointer that can reference any individual operation with the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":564169,"byte_end":564235,"line_start":690,"line_end":690,"column_start":5,"column_end":71}},{"value":"/ > instruction stream.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":564240,"byte_end":564265,"line_start":691,"line_end":691,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":564270,"byte_end":564279,"line_start":692,"line_end":692,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1725},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":564493,"byte_end":564503,"line_start":700,"line_end":700,"column_start":12,"column_end":22},"name":"file_index","qualname":"<LineRow>::file_index","value":"pub fn file_index(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" \"An unsigned integer indicating the identity of the source file\n corresponding to a machine instruction.\"\n","sig":null,"attributes":[{"value":"/ \"An unsigned integer indicating the identity of the source file","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":564351,"byte_end":564418,"line_start":697,"line_end":697,"column_start":5,"column_end":72}},{"value":"/ corresponding to a machine instruction.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":564423,"byte_end":564467,"line_start":698,"line_end":698,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":564472,"byte_end":564481,"line_start":699,"line_end":699,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1726},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":564644,"byte_end":564648,"line_start":706,"line_end":706,"column_start":12,"column_end":16},"name":"file","qualname":"<LineRow>::file","value":"pub fn file<'header, R: Reader>(&Self, &'header LineProgramHeader<R>)\n-> Option<&'header FileEntry<R>>","parent":null,"children":[],"decl_id":null,"docs":" The source file corresponding to the current machine instruction.\n","sig":null,"attributes":[{"value":"/ The source file corresponding to the current machine instruction.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":564549,"byte_end":564618,"line_start":704,"line_end":704,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":564623,"byte_end":564632,"line_start":705,"line_end":705,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1729},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":565114,"byte_end":565118,"line_start":718,"line_end":718,"column_start":12,"column_end":16},"name":"line","qualname":"<LineRow>::line","value":"pub fn line(&Self) -> Option<NonZeroU64>","parent":null,"children":[],"decl_id":null,"docs":" \"An unsigned integer indicating a source line number. Lines are numbered\n beginning at 1. The compiler may emit the value 0 in cases where an\n instruction cannot be attributed to any source line.\"\n Line number values of 0 are represented as `None`.\n","sig":null,"attributes":[{"value":"/ \"An unsigned integer indicating a source line number. Lines are numbered","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":564815,"byte_end":564891,"line_start":713,"line_end":713,"column_start":5,"column_end":81}},{"value":"/ beginning at 1. The compiler may emit the value 0 in cases where an","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":564896,"byte_end":564967,"line_start":714,"line_end":714,"column_start":5,"column_end":76}},{"value":"/ instruction cannot be attributed to any source line.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":564972,"byte_end":565029,"line_start":715,"line_end":715,"column_start":5,"column_end":62}},{"value":"/ Line number values of 0 are represented as `None`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":565034,"byte_end":565088,"line_start":716,"line_end":716,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":565093,"byte_end":565102,"line_start":717,"line_end":717,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1730},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":565447,"byte_end":565453,"line_start":726,"line_end":726,"column_start":12,"column_end":18},"name":"column","qualname":"<LineRow>::column","value":"pub fn column(&Self) -> ColumnType","parent":null,"children":[],"decl_id":null,"docs":" \"An unsigned integer indicating a column number within a source\n line. Columns are numbered beginning at 1. The value 0 is reserved to\n indicate that a statement begins at the “left edge” of the line.\"\n","sig":null,"attributes":[{"value":"/ \"An unsigned integer indicating a column number within a source","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":565198,"byte_end":565265,"line_start":722,"line_end":722,"column_start":5,"column_end":72}},{"value":"/ line. Columns are numbered beginning at 1. The value 0 is reserved to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":565270,"byte_end":565343,"line_start":723,"line_end":723,"column_start":5,"column_end":78}},{"value":"/ indicate that a statement begins at the “left edge” of the line.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":565348,"byte_end":565421,"line_start":724,"line_end":724,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":565426,"byte_end":565435,"line_start":725,"line_end":725,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1731},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":565890,"byte_end":565897,"line_start":737,"line_end":737,"column_start":12,"column_end":19},"name":"is_stmt","qualname":"<LineRow>::is_stmt","value":"pub fn is_stmt(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" \"A boolean indicating that the current instruction is a recommended\n breakpoint location. A recommended breakpoint location is intended to\n “represent” a line, a statement and/or a semantically distinct subpart\n of a statement.\"\n","sig":null,"attributes":[{"value":"/ \"A boolean indicating that the current instruction is a recommended","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":565607,"byte_end":565678,"line_start":732,"line_end":732,"column_start":5,"column_end":76}},{"value":"/ breakpoint location. A recommended breakpoint location is intended to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":565683,"byte_end":565756,"line_start":733,"line_end":733,"column_start":5,"column_end":78}},{"value":"/ “represent” a line, a statement and/or a semantically distinct subpart","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":565761,"byte_end":565839,"line_start":734,"line_end":734,"column_start":5,"column_end":79}},{"value":"/ of a statement.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":565844,"byte_end":565864,"line_start":735,"line_end":735,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":565869,"byte_end":565878,"line_start":736,"line_end":736,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1732},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":566071,"byte_end":566082,"line_start":744,"line_end":744,"column_start":12,"column_end":23},"name":"basic_block","qualname":"<LineRow>::basic_block","value":"pub fn basic_block(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" \"A boolean indicating that the current instruction is the beginning of a\n basic block.\"\n","sig":null,"attributes":[{"value":"/ \"A boolean indicating that the current instruction is the beginning of a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":565947,"byte_end":566023,"line_start":741,"line_end":741,"column_start":5,"column_end":81}},{"value":"/ basic block.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":566028,"byte_end":566045,"line_start":742,"line_end":742,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":566050,"byte_end":566059,"line_start":743,"line_end":743,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1733},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":566431,"byte_end":566443,"line_start":753,"line_end":753,"column_start":12,"column_end":24},"name":"end_sequence","qualname":"<LineRow>::end_sequence","value":"pub fn end_sequence(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" \"A boolean indicating that the current address is that of the first byte\n after the end of a sequence of target machine instructions. end_sequence\n terminates a sequence of lines; therefore other information in the same\n row is not meaningful.\"\n","sig":null,"attributes":[{"value":"/ \"A boolean indicating that the current address is that of the first byte","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":566136,"byte_end":566212,"line_start":748,"line_end":748,"column_start":5,"column_end":81}},{"value":"/ after the end of a sequence of target machine instructions. end_sequence","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":566217,"byte_end":566293,"line_start":749,"line_end":749,"column_start":5,"column_end":81}},{"value":"/ terminates a sequence of lines; therefore other information in the same","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":566298,"byte_end":566373,"line_start":750,"line_end":750,"column_start":5,"column_end":80}},{"value":"/ row is not meaningful.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":566378,"byte_end":566405,"line_start":751,"line_end":751,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":566410,"byte_end":566419,"line_start":752,"line_end":752,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1734},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":566692,"byte_end":566704,"line_start":761,"line_end":761,"column_start":12,"column_end":24},"name":"prologue_end","qualname":"<LineRow>::prologue_end","value":"pub fn prologue_end(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" \"A boolean indicating that the current address is one (of possibly many)\n where execution should be suspended for an entry breakpoint of a\n function.\"\n","sig":null,"attributes":[{"value":"/ \"A boolean indicating that the current address is one (of possibly many)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":566498,"byte_end":566574,"line_start":757,"line_end":757,"column_start":5,"column_end":81}},{"value":"/ where execution should be suspended for an entry breakpoint of a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":566579,"byte_end":566647,"line_start":758,"line_end":758,"column_start":5,"column_end":73}},{"value":"/ function.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":566652,"byte_end":566666,"line_start":759,"line_end":759,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":566671,"byte_end":566680,"line_start":760,"line_end":760,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1735},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":566952,"byte_end":566966,"line_start":769,"line_end":769,"column_start":12,"column_end":26},"name":"epilogue_begin","qualname":"<LineRow>::epilogue_begin","value":"pub fn epilogue_begin(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" \"A boolean indicating that the current address is one (of possibly many)\n where execution should be suspended for an exit breakpoint of a\n function.\"\n","sig":null,"attributes":[{"value":"/ \"A boolean indicating that the current address is one (of possibly many)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":566759,"byte_end":566835,"line_start":765,"line_end":765,"column_start":5,"column_end":81}},{"value":"/ where execution should be suspended for an exit breakpoint of a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":566840,"byte_end":566907,"line_start":766,"line_end":766,"column_start":5,"column_end":72}},{"value":"/ function.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":566912,"byte_end":566926,"line_start":767,"line_end":767,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":566931,"byte_end":566940,"line_start":768,"line_end":768,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1736},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":567473,"byte_end":567476,"line_start":782,"line_end":782,"column_start":12,"column_end":15},"name":"isa","qualname":"<LineRow>::isa","value":"pub fn isa(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Tag for the current instruction set architecture.","sig":null,"attributes":[{"value":"/ Tag for the current instruction set architecture.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":567023,"byte_end":567076,"line_start":773,"line_end":773,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":567081,"byte_end":567084,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ > An unsigned integer whose value encodes the applicable instruction set","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":567089,"byte_end":567165,"line_start":775,"line_end":775,"column_start":5,"column_end":81}},{"value":"/ > architecture for the current instruction.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":567170,"byte_end":567217,"line_start":776,"line_end":776,"column_start":5,"column_end":52}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":567222,"byte_end":567227,"line_start":777,"line_end":777,"column_start":5,"column_end":10}},{"value":"/ > The encoding of instruction sets should be shared by all users of a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":567232,"byte_end":567305,"line_start":778,"line_end":778,"column_start":5,"column_end":78}},{"value":"/ > given architecture. It is recommended that this encoding be defined by","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":567310,"byte_end":567386,"line_start":779,"line_end":779,"column_start":5,"column_end":81}},{"value":"/ > the ABI authoring committee for each architecture.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":567391,"byte_end":567447,"line_start":780,"line_end":780,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":567452,"byte_end":567461,"line_start":781,"line_end":781,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1737},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":567960,"byte_end":567973,"line_start":793,"line_end":793,"column_start":12,"column_end":25},"name":"discriminator","qualname":"<LineRow>::discriminator","value":"pub fn discriminator(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" \"An unsigned integer identifying the block to which the current\n instruction belongs. Discriminator values are assigned arbitrarily by\n the DWARF producer and serve to distinguish among multiple blocks that\n may all be associated with the same source file, line, and column. Where\n only one block exists for a given source position, the discriminator\n value should be zero.\"\n","sig":null,"attributes":[{"value":"/ \"An unsigned integer identifying the block to which the current","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":567521,"byte_end":567588,"line_start":786,"line_end":786,"column_start":5,"column_end":72}},{"value":"/ instruction belongs. Discriminator values are assigned arbitrarily by","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":567593,"byte_end":567666,"line_start":787,"line_end":787,"column_start":5,"column_end":78}},{"value":"/ the DWARF producer and serve to distinguish among multiple blocks that","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":567671,"byte_end":567745,"line_start":788,"line_end":788,"column_start":5,"column_end":79}},{"value":"/ may all be associated with the same source file, line, and column. Where","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":567750,"byte_end":567826,"line_start":789,"line_end":789,"column_start":5,"column_end":81}},{"value":"/ only one block exists for a given source position, the discriminator","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":567831,"byte_end":567903,"line_start":790,"line_end":790,"column_start":5,"column_end":77}},{"value":"/ value should be zero.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":567908,"byte_end":567934,"line_start":791,"line_end":791,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":567939,"byte_end":567948,"line_start":792,"line_end":792,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1738},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":568229,"byte_end":568236,"line_start":802,"line_end":802,"column_start":12,"column_end":19},"name":"execute","qualname":"<LineRow>::execute","value":"pub fn execute<R, Program>(&mut Self, LineInstruction<R>, &mut Program)\n-> bool where Program: LineProgram<R>, R: Reader","parent":null,"children":[],"decl_id":null,"docs":" Execute the given instruction, and return true if a new row in the\n line number matrix needs to be generated.","sig":null,"attributes":[{"value":"/ Execute the given instruction, and return true if a new row in the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":568028,"byte_end":568098,"line_start":797,"line_end":797,"column_start":5,"column_end":75}},{"value":"/ line number matrix needs to be generated.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":568103,"byte_end":568148,"line_start":798,"line_end":798,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":568153,"byte_end":568156,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ Unknown opcodes are treated as no-ops.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":568161,"byte_end":568203,"line_start":800,"line_end":800,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":568208,"byte_end":568217,"line_start":801,"line_end":801,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1741},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":571369,"byte_end":571374,"line_start":908,"line_end":908,"column_start":12,"column_end":17},"name":"reset","qualname":"<LineRow>::reset","value":"pub fn reset<R: Reader>(&mut Self, &LineProgramHeader<R>)","parent":null,"children":[],"decl_id":null,"docs":" Perform any reset that was required after copying the previous row.\n","sig":null,"attributes":[{"value":"/ Perform any reset that was required after copying the previous row.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":571272,"byte_end":571343,"line_start":906,"line_end":906,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":571348,"byte_end":571357,"line_start":907,"line_end":907,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7314},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":574601,"byte_end":574609,"line_start":992,"line_end":992,"column_start":5,"column_end":13},"name":"LeftEdge","qualname":"::read::line::ColumnType::LeftEdge","value":"ColumnType::LeftEdge","parent":{"krate":0,"index":7313},"children":[],"decl_id":null,"docs":" The `LeftEdge` means that the statement begins at the start of the new\n line.\n","sig":null,"attributes":[{"value":"/ The `LeftEdge` means that the statement begins at the start of the new","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":574508,"byte_end":574582,"line_start":990,"line_end":990,"column_start":5,"column_end":79}},{"value":"/ line.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":574587,"byte_end":574596,"line_start":991,"line_end":991,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7316},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":574665,"byte_end":574671,"line_start":994,"line_end":994,"column_start":5,"column_end":11},"name":"Column","qualname":"::read::line::ColumnType::Column","value":"ColumnType::Column(NonZeroU64)","parent":{"krate":0,"index":7313},"children":[],"decl_id":null,"docs":" A column number, whose range begins at 1.\n","sig":null,"attributes":[{"value":"/ A column number, whose range begins at 1.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":574615,"byte_end":574660,"line_start":993,"line_end":993,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":7313},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":574491,"byte_end":574501,"line_start":989,"line_end":989,"column_start":10,"column_end":20},"name":"ColumnType","qualname":"::read::line::ColumnType","value":"pub enum ColumnType { LeftEdge, Column(NonZeroU64), }","parent":null,"children":[{"krate":0,"index":7314},{"krate":0,"index":7316}],"decl_id":null,"docs":" The type of column that a row is referring to.\n","sig":null,"attributes":[{"value":"/ The type of column that a row is referring to.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":574369,"byte_end":574419,"line_start":987,"line_end":987,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":1750},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":574865,"byte_end":574883,"line_start":999,"line_end":999,"column_start":10,"column_end":28},"name":"LineNumberSequence","qualname":"::read::line::LineNumberSequence","value":"LineSequence<R>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `LineNumberSequence` has been renamed to `LineSequence`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `LineNumberSequence` has been renamed to `LineSequence`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":574688,"byte_end":574760,"line_start":997,"line_end":997,"column_start":1,"column_end":73}},{"value":"deprecated(note =\n             \"LineNumberSequence has been renamed to LineSequence, use that instead.\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":574761,"byte_end":574855,"line_start":998,"line_end":998,"column_start":1,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":7335},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":575150,"byte_end":575162,"line_start":1005,"line_end":1005,"column_start":12,"column_end":24},"name":"LineSequence","qualname":"::read::line::LineSequence","value":"LineSequence { start, end }","parent":null,"children":[{"krate":0,"index":7337},{"krate":0,"index":7338},{"krate":0,"index":7339}],"decl_id":null,"docs":" A sequence within a line number program.  A sequence, as defined in section\n 6.2.5 of the standard, is a linear subset of a line number program within\n which addresses are monotonically increasing.\n","sig":null,"attributes":[{"value":"/ A sequence within a line number program.  A sequence, as defined in section","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":574907,"byte_end":574986,"line_start":1001,"line_end":1001,"column_start":1,"column_end":80}},{"value":"/ 6.2.5 of the standard, is a linear subset of a line number program within","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":574987,"byte_end":575064,"line_start":1002,"line_end":1002,"column_start":1,"column_end":78}},{"value":"/ which addresses are monotonically increasing.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":575065,"byte_end":575114,"line_start":1003,"line_end":1003,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":7337},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":575283,"byte_end":575288,"line_start":1008,"line_end":1008,"column_start":9,"column_end":14},"name":"start","qualname":"::read::line::LineSequence::start","value":"u64","parent":{"krate":0,"index":7335},"children":[],"decl_id":null,"docs":" The first address that is covered by this sequence within the line number\n program.\n","sig":null,"attributes":[{"value":"/ The first address that is covered by this sequence within the line number","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":575180,"byte_end":575257,"line_start":1006,"line_end":1006,"column_start":5,"column_end":82}},{"value":"/ program.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":575262,"byte_end":575274,"line_start":1007,"line_end":1007,"column_start":5,"column_end":17}}]},{"kind":"Field","id":{"krate":0,"index":7338},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":575408,"byte_end":575411,"line_start":1011,"line_end":1011,"column_start":9,"column_end":12},"name":"end","qualname":"::read::line::LineSequence::end","value":"u64","parent":{"krate":0,"index":7335},"children":[],"decl_id":null,"docs":" The first address that is *not* covered by this sequence within the line\n number program.\n","sig":null,"attributes":[{"value":"/ The first address that is *not* covered by this sequence within the line","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":575299,"byte_end":575375,"line_start":1009,"line_end":1009,"column_start":5,"column_end":81}},{"value":"/ number program.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":575380,"byte_end":575399,"line_start":1010,"line_end":1010,"column_start":5,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":1752},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":575663,"byte_end":575686,"line_start":1019,"line_end":1019,"column_start":10,"column_end":33},"name":"LineNumberProgramHeader","qualname":"::read::line::LineNumberProgramHeader","value":"LineProgramHeader<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `LineNumberProgramHeader` has been renamed to `LineProgramHeader`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `LineNumberProgramHeader` has been renamed to `LineProgramHeader`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":575460,"byte_end":575542,"line_start":1015,"line_end":1015,"column_start":1,"column_end":83}},{"value":"deprecated(note =\n             \"LineNumberProgramHeader has been renamed to LineProgramHeader, use that instead.\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":575543,"byte_end":575653,"line_start":1016,"line_end":1018,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":7346},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":575899,"byte_end":575916,"line_start":1024,"line_end":1024,"column_start":12,"column_end":29},"name":"LineProgramHeader","qualname":"::read::line::LineProgramHeader","value":"LineProgramHeader {  }","parent":null,"children":[{"krate":0,"index":7349},{"krate":0,"index":7350},{"krate":0,"index":7351},{"krate":0,"index":7352},{"krate":0,"index":7353},{"krate":0,"index":7354},{"krate":0,"index":7355},{"krate":0,"index":7356},{"krate":0,"index":7357},{"krate":0,"index":7358},{"krate":0,"index":7359},{"krate":0,"index":7360},{"krate":0,"index":7361},{"krate":0,"index":7362}],"decl_id":null,"docs":" A header for a line number program in the `.debug_line` section, as defined\n in section 6.2.4 of the standard.\n","sig":null,"attributes":[{"value":"/ A header for a line number program in the `.debug_line` section, as defined","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":575731,"byte_end":575810,"line_start":1021,"line_end":1021,"column_start":1,"column_end":80}},{"value":"/ in section 6.2.4 of the standard.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":575811,"byte_end":575848,"line_start":1022,"line_end":1022,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1758},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":577990,"byte_end":577996,"line_start":1083,"line_end":1083,"column_start":12,"column_end":18},"name":"offset","qualname":"<LineProgramHeader<R, Offset>>::offset","value":"pub fn offset(&Self) -> DebugLineOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Return the offset of the line number program header in the `.debug_line` section.\n","sig":null,"attributes":[{"value":"/ Return the offset of the line number program header in the `.debug_line` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":577893,"byte_end":577978,"line_start":1082,"line_end":1082,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1759},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":578202,"byte_end":578213,"line_start":1089,"line_end":1089,"column_start":12,"column_end":23},"name":"unit_length","qualname":"<LineProgramHeader<R, Offset>>::unit_length","value":"pub fn unit_length(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" Return the length of the line number program and header, not including\n the length of the encoded length itself.\n","sig":null,"attributes":[{"value":"/ Return the length of the line number program and header, not including","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":578067,"byte_end":578141,"line_start":1087,"line_end":1087,"column_start":5,"column_end":79}},{"value":"/ the length of the encoded length itself.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":578146,"byte_end":578190,"line_start":1088,"line_end":1088,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1760},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":578350,"byte_end":578358,"line_start":1094,"line_end":1094,"column_start":12,"column_end":20},"name":"encoding","qualname":"<LineProgramHeader<R, Offset>>::encoding","value":"pub fn encoding(&Self) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding parameters for this header's line program.\n","sig":null,"attributes":[{"value":"/ Return the encoding parameters for this header's line program.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":578272,"byte_end":578338,"line_start":1093,"line_end":1093,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1761},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":578475,"byte_end":578482,"line_start":1099,"line_end":1099,"column_start":12,"column_end":19},"name":"version","qualname":"<LineProgramHeader<R, Offset>>::version","value":"pub fn version(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Get the version of this header's line program.\n","sig":null,"attributes":[{"value":"/ Get the version of this header's line program.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":578413,"byte_end":578463,"line_start":1098,"line_end":1098,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1762},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":578676,"byte_end":578689,"line_start":1105,"line_end":1105,"column_start":12,"column_end":25},"name":"header_length","qualname":"<LineProgramHeader<R, Offset>>::header_length","value":"pub fn header_length(&Self) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the encoded line number program header, not including\n the length of the encoded length itself.\n","sig":null,"attributes":[{"value":"/ Get the length of the encoded line number program header, not including","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":578540,"byte_end":578615,"line_start":1103,"line_end":1103,"column_start":5,"column_end":80}},{"value":"/ the length of the encoded length itself.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":578620,"byte_end":578664,"line_start":1104,"line_end":1104,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1763},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":578816,"byte_end":578828,"line_start":1110,"line_end":1110,"column_start":12,"column_end":24},"name":"address_size","qualname":"<LineProgramHeader<R, Offset>>::address_size","value":"pub fn address_size(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the size in bytes of a target machine address.\n","sig":null,"attributes":[{"value":"/ Get the size in bytes of a target machine address.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":578750,"byte_end":578804,"line_start":1109,"line_end":1109,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1764},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":578966,"byte_end":578972,"line_start":1115,"line_end":1115,"column_start":12,"column_end":18},"name":"format","qualname":"<LineProgramHeader<R, Offset>>::format","value":"pub fn format(&Self) -> Format","parent":null,"children":[],"decl_id":null,"docs":" Whether this line program is encoded in 64- or 32-bit DWARF.\n","sig":null,"attributes":[{"value":"/ Whether this line program is encoded in 64- or 32-bit DWARF.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":578890,"byte_end":578954,"line_start":1114,"line_end":1114,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1765},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":579112,"byte_end":579125,"line_start":1120,"line_end":1120,"column_start":12,"column_end":25},"name":"line_encoding","qualname":"<LineProgramHeader<R, Offset>>::line_encoding","value":"pub fn line_encoding(&Self) -> LineEncoding","parent":null,"children":[],"decl_id":null,"docs":" Get the line encoding parameters for this header's line program.\n","sig":null,"attributes":[{"value":"/ Get the line encoding parameters for this header's line program.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":579032,"byte_end":579100,"line_start":1119,"line_end":1119,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1766},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":579303,"byte_end":579329,"line_start":1126,"line_end":1126,"column_start":12,"column_end":38},"name":"minimum_instruction_length","qualname":"<LineProgramHeader<R, Offset>>::minimum_instruction_length","value":"pub fn minimum_instruction_length(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum instruction length any instruction in this header's line\n program may have.\n","sig":null,"attributes":[{"value":"/ Get the minimum instruction length any instruction in this header's line","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":579189,"byte_end":579265,"line_start":1124,"line_end":1124,"column_start":5,"column_end":81}},{"value":"/ program may have.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":579270,"byte_end":579291,"line_start":1125,"line_end":1125,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1767},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":579527,"byte_end":579561,"line_start":1132,"line_end":1132,"column_start":12,"column_end":46},"name":"maximum_operations_per_instruction","qualname":"<LineProgramHeader<R, Offset>>::maximum_operations_per_instruction","value":"pub fn maximum_operations_per_instruction(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the maximum number of operations each instruction in this header's\n line program may have.\n","sig":null,"attributes":[{"value":"/ Get the maximum number of operations each instruction in this header's","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":579410,"byte_end":579484,"line_start":1130,"line_end":1130,"column_start":5,"column_end":79}},{"value":"/ line program may have.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":579489,"byte_end":579515,"line_start":1131,"line_end":1131,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1768},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":579753,"byte_end":579768,"line_start":1138,"line_end":1138,"column_start":12,"column_end":27},"name":"default_is_stmt","qualname":"<LineProgramHeader<R, Offset>>::default_is_stmt","value":"pub fn default_is_stmt(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Get the default value of the `is_stmt` register for this header's line\n program.\n","sig":null,"attributes":[{"value":"/ Get the default value of the `is_stmt` register for this header's line","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":579650,"byte_end":579724,"line_start":1136,"line_end":1136,"column_start":5,"column_end":79}},{"value":"/ program.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":579729,"byte_end":579741,"line_start":1137,"line_end":1137,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1769},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":579905,"byte_end":579914,"line_start":1143,"line_end":1143,"column_start":12,"column_end":21},"name":"line_base","qualname":"<LineProgramHeader<R, Offset>>::line_base","value":"pub fn line_base(&Self) -> i8","parent":null,"children":[],"decl_id":null,"docs":" Get the line base for this header's line program.\n","sig":null,"attributes":[{"value":"/ Get the line base for this header's line program.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":579840,"byte_end":579893,"line_start":1142,"line_end":1142,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1770},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":580044,"byte_end":580054,"line_start":1148,"line_end":1148,"column_start":12,"column_end":22},"name":"line_range","qualname":"<LineProgramHeader<R, Offset>>::line_range","value":"pub fn line_range(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the line range for this header's line program.\n","sig":null,"attributes":[{"value":"/ Get the line range for this header's line program.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":579978,"byte_end":580032,"line_start":1147,"line_end":1147,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1771},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":580182,"byte_end":580193,"line_start":1153,"line_end":1153,"column_start":12,"column_end":23},"name":"opcode_base","qualname":"<LineProgramHeader<R, Offset>>::opcode_base","value":"pub fn opcode_base(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get opcode base for this header's line program.\n","sig":null,"attributes":[{"value":"/ Get opcode base for this header's line program.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":580119,"byte_end":580170,"line_start":1152,"line_end":1152,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1772},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":580364,"byte_end":580387,"line_start":1159,"line_end":1159,"column_start":12,"column_end":35},"name":"standard_opcode_lengths","qualname":"<LineProgramHeader<R, Offset>>::standard_opcode_lengths","value":"pub fn standard_opcode_lengths(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" An array of `u8` that specifies the number of LEB128 operands for\n each of the standard opcodes.\n","sig":null,"attributes":[{"value":"/ An array of `u8` that specifies the number of LEB128 operands for","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":580245,"byte_end":580314,"line_start":1157,"line_end":1157,"column_start":5,"column_end":74}},{"value":"/ each of the standard opcodes.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":580319,"byte_end":580352,"line_start":1158,"line_end":1158,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1773},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":580504,"byte_end":580526,"line_start":1164,"line_end":1164,"column_start":12,"column_end":34},"name":"directory_entry_format","qualname":"<LineProgramHeader<R, Offset>>::directory_entry_format","value":"pub fn directory_entry_format(&Self) -> &[FileEntryFormat]","parent":null,"children":[],"decl_id":null,"docs":" Get the format of a directory entry.\n","sig":null,"attributes":[{"value":"/ Get the format of a directory entry.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":580452,"byte_end":580492,"line_start":1163,"line_end":1163,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1774},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":580869,"byte_end":580888,"line_start":1172,"line_end":1172,"column_start":12,"column_end":31},"name":"include_directories","qualname":"<LineProgramHeader<R, Offset>>::include_directories","value":"pub fn include_directories(&Self) -> &[AttributeValue<R, Offset>]","parent":null,"children":[],"decl_id":null,"docs":" Get the set of include directories for this header's line program.","sig":null,"attributes":[{"value":"/ Get the set of include directories for this header's line program.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":580610,"byte_end":580680,"line_start":1168,"line_end":1168,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":580685,"byte_end":580688,"line_start":1169,"line_end":1169,"column_start":5,"column_end":8}},{"value":"/ For DWARF version <= 4, the compilation's current directory is not included","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":580693,"byte_end":580772,"line_start":1170,"line_end":1170,"column_start":5,"column_end":84}},{"value":"/ in the return value, but is implicitly considered to be in the set per spec.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":580777,"byte_end":580857,"line_start":1171,"line_end":1171,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1775},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":581134,"byte_end":581143,"line_start":1179,"line_end":1179,"column_start":12,"column_end":21},"name":"directory","qualname":"<LineProgramHeader<R, Offset>>::directory","value":"pub fn directory(&Self, u64) -> Option<AttributeValue<R, Offset>>","parent":null,"children":[],"decl_id":null,"docs":" The include directory with the given directory index.","sig":null,"attributes":[{"value":"/ The include directory with the given directory index.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":580979,"byte_end":581036,"line_start":1176,"line_end":1176,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":581041,"byte_end":581044,"line_start":1177,"line_end":1177,"column_start":5,"column_end":8}},{"value":"/ A directory index of 0 corresponds to the compilation unit directory.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":581049,"byte_end":581122,"line_start":1178,"line_end":1178,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1776},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":581660,"byte_end":581682,"line_start":1193,"line_end":1193,"column_start":12,"column_end":34},"name":"file_name_entry_format","qualname":"<LineProgramHeader<R, Offset>>::file_name_entry_format","value":"pub fn file_name_entry_format(&Self) -> &[FileEntryFormat]","parent":null,"children":[],"decl_id":null,"docs":" Get the format of a file name entry.\n","sig":null,"attributes":[{"value":"/ Get the format of a file name entry.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":581608,"byte_end":581648,"line_start":1192,"line_end":1192,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1777},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":581944,"byte_end":581962,"line_start":1201,"line_end":1201,"column_start":12,"column_end":30},"name":"file_has_timestamp","qualname":"<LineProgramHeader<R, Offset>>::file_has_timestamp","value":"pub fn file_has_timestamp(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if the file entries may have valid timestamps.","sig":null,"attributes":[{"value":"/ Return true if the file entries may have valid timestamps.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":581766,"byte_end":581828,"line_start":1197,"line_end":1197,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":581833,"byte_end":581836,"line_start":1198,"line_end":1198,"column_start":5,"column_end":8}},{"value":"/ Only returns false if we definitely know that all timestamp fields","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":581841,"byte_end":581911,"line_start":1199,"line_end":1199,"column_start":5,"column_end":75}},{"value":"/ are invalid.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":581916,"byte_end":581932,"line_start":1200,"line_end":1200,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1779},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":582351,"byte_end":582364,"line_start":1213,"line_end":1213,"column_start":12,"column_end":25},"name":"file_has_size","qualname":"<LineProgramHeader<R, Offset>>::file_has_size","value":"pub fn file_has_size(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if the file entries may have valid sizes.","sig":null,"attributes":[{"value":"/ Return true if the file entries may have valid sizes.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":582183,"byte_end":582240,"line_start":1209,"line_end":1209,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":582245,"byte_end":582248,"line_start":1210,"line_end":1210,"column_start":5,"column_end":8}},{"value":"/ Only returns false if we definitely know that all size fields","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":582253,"byte_end":582318,"line_start":1211,"line_end":1211,"column_start":5,"column_end":70}},{"value":"/ are invalid.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":582323,"byte_end":582339,"line_start":1212,"line_end":1212,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1781},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":582660,"byte_end":582672,"line_start":1222,"line_end":1222,"column_start":12,"column_end":24},"name":"file_has_md5","qualname":"<LineProgramHeader<R, Offset>>::file_has_md5","value":"pub fn file_has_md5(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if the file name entry format contains an MD5 field.\n","sig":null,"attributes":[{"value":"/ Return true if the file name entry format contains an MD5 field.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":582580,"byte_end":582648,"line_start":1221,"line_end":1221,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1783},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":582907,"byte_end":582917,"line_start":1229,"line_end":1229,"column_start":12,"column_end":22},"name":"file_names","qualname":"<LineProgramHeader<R, Offset>>::file_names","value":"pub fn file_names(&Self) -> &[FileEntry<R, Offset>]","parent":null,"children":[],"decl_id":null,"docs":" Get the list of source files that appear in this header's line program.\n","sig":null,"attributes":[{"value":"/ Get the list of source files that appear in this header's line program.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":582820,"byte_end":582895,"line_start":1228,"line_end":1228,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1784},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":583233,"byte_end":583237,"line_start":1238,"line_end":1238,"column_start":12,"column_end":16},"name":"file","qualname":"<LineProgramHeader<R, Offset>>::file","value":"pub fn file(&Self, u64) -> Option<&FileEntry<R, Offset>>","parent":null,"children":[],"decl_id":null,"docs":" The source file with the given file index.","sig":null,"attributes":[{"value":"/ The source file with the given file index.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":582994,"byte_end":583040,"line_start":1233,"line_end":1233,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":583045,"byte_end":583048,"line_start":1234,"line_end":1234,"column_start":5,"column_end":8}},{"value":"/ A file index of 0 corresponds to the compilation unit file.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":583053,"byte_end":583116,"line_start":1235,"line_end":1235,"column_start":5,"column_end":68}},{"value":"/ Note that a file index of 0 is invalid for DWARF version <= 4,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":583121,"byte_end":583187,"line_start":1236,"line_end":1236,"column_start":5,"column_end":71}},{"value":"/ but we support it anyway.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":583192,"byte_end":583221,"line_start":1237,"line_end":1237,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1785},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":584303,"byte_end":584318,"line_start":1269,"line_end":1269,"column_start":12,"column_end":27},"name":"raw_program_buf","qualname":"<LineProgramHeader<R, Offset>>::raw_program_buf","value":"pub fn raw_program_buf(&Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Get the raw, un-parsed `EndianSlice` containing this header's line number\n program.","sig":null,"attributes":[{"value":"/ Get the raw, un-parsed `EndianSlice` containing this header's line number","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":583606,"byte_end":583683,"line_start":1251,"line_end":1251,"column_start":5,"column_end":82}},{"value":"/ program.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":583688,"byte_end":583700,"line_start":1252,"line_end":1252,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":583705,"byte_end":583708,"line_start":1253,"line_end":1253,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":583713,"byte_end":583720,"line_start":1254,"line_end":1254,"column_start":5,"column_end":12}},{"value":"/ # fn foo() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":583725,"byte_end":583741,"line_start":1255,"line_end":1255,"column_start":5,"column_end":21}},{"value":"/ use gimli::{LineProgramHeader, EndianSlice, NativeEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":583746,"byte_end":583808,"line_start":1256,"line_end":1256,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":583813,"byte_end":583816,"line_start":1257,"line_end":1257,"column_start":5,"column_end":8}},{"value":"/ fn get_line_number_program_header<'a>() -> LineProgramHeader<EndianSlice<'a, NativeEndian>> {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":583821,"byte_end":583918,"line_start":1258,"line_end":1258,"column_start":5,"column_end":102}},{"value":"/     // Get a line number program header from some offset in a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":583923,"byte_end":583988,"line_start":1259,"line_end":1259,"column_start":5,"column_end":70}},{"value":"/     // `.debug_line` section...","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":583993,"byte_end":584028,"line_start":1260,"line_end":1260,"column_start":5,"column_end":40}},{"value":"/ #   unimplemented!()","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":584033,"byte_end":584057,"line_start":1261,"line_end":1261,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":584062,"byte_end":584067,"line_start":1262,"line_end":1262,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":584072,"byte_end":584075,"line_start":1263,"line_end":1263,"column_start":5,"column_end":8}},{"value":"/ let header = get_line_number_program_header();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":584080,"byte_end":584130,"line_start":1264,"line_end":1264,"column_start":5,"column_end":55}},{"value":"/ let raw_program = header.raw_program_buf();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":584135,"byte_end":584182,"line_start":1265,"line_end":1265,"column_start":5,"column_end":52}},{"value":"/ println!(\"The length of the raw program in bytes is {}\", raw_program.len());","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":584187,"byte_end":584267,"line_start":1266,"line_end":1266,"column_start":5,"column_end":85}},{"value":"/ # }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":584272,"byte_end":584279,"line_start":1267,"line_end":1267,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":584284,"byte_end":584291,"line_start":1268,"line_end":1268,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1786},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":584491,"byte_end":584503,"line_start":1275,"line_end":1275,"column_start":12,"column_end":24},"name":"instructions","qualname":"<LineProgramHeader<R, Offset>>::instructions","value":"pub fn instructions(&Self) -> LineInstructions<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the instructions in this header's line number program, parsing\n them as we go.\n","sig":null,"attributes":[{"value":"/ Iterate over the instructions in this header's line number program, parsing","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":584377,"byte_end":584456,"line_start":1273,"line_end":1273,"column_start":5,"column_end":84}},{"value":"/ them as we go.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":584461,"byte_end":584479,"line_start":1274,"line_end":1274,"column_start":5,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":1790},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":589431,"byte_end":589458,"line_start":1427,"line_end":1427,"column_start":10,"column_end":37},"name":"IncompleteLineNumberProgram","qualname":"::read::line::IncompleteLineNumberProgram","value":"IncompleteLineProgram<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `IncompleteLineNumberProgram` has been renamed to `IncompleteLineProgram`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `IncompleteLineNumberProgram` has been renamed to `IncompleteLineProgram`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":589212,"byte_end":589302,"line_start":1423,"line_end":1423,"column_start":1,"column_end":91}},{"value":"deprecated(note =\n             \"IncompleteLineNumberProgram has been renamed to IncompleteLineProgram, use that instead.\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":589303,"byte_end":589421,"line_start":1424,"line_end":1426,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":7386},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":589620,"byte_end":589641,"line_start":1431,"line_end":1431,"column_start":12,"column_end":33},"name":"IncompleteLineProgram","qualname":"::read::line::IncompleteLineProgram","value":"IncompleteLineProgram {  }","parent":null,"children":[{"krate":0,"index":7389}],"decl_id":null,"docs":" A line number program that has not been run to completion.\n","sig":null,"attributes":[{"value":"/ A line number program that has not been run to completion.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":589507,"byte_end":589569,"line_start":1429,"line_end":1429,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1796},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":589973,"byte_end":589979,"line_start":1445,"line_end":1445,"column_start":12,"column_end":18},"name":"header","qualname":"<IncompleteLineProgram<R, Offset>>::header","value":"pub fn header(&Self) -> &LineProgramHeader<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the `LineProgramHeader` for this program.\n","sig":null,"attributes":[{"value":"/ Retrieve the `LineProgramHeader` for this program.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":589907,"byte_end":589961,"line_start":1444,"line_end":1444,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1797},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":590184,"byte_end":590188,"line_start":1451,"line_end":1451,"column_start":12,"column_end":16},"name":"rows","qualname":"<IncompleteLineProgram<R, Offset>>::rows","value":"pub fn rows(Self) -> OneShotLineRows<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `LineRows` for executing this program to iterate\n over rows in the line information matrix.\n","sig":null,"attributes":[{"value":"/ Construct a new `LineRows` for executing this program to iterate","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":590054,"byte_end":590122,"line_start":1449,"line_end":1449,"column_start":5,"column_end":73}},{"value":"/ over rows in the line information matrix.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":590127,"byte_end":590172,"line_start":1450,"line_end":1450,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1798},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":591178,"byte_end":591187,"line_start":1476,"line_end":1476,"column_start":12,"column_end":21},"name":"sequences","qualname":"<IncompleteLineProgram<R, Offset>>::sequences","value":"pub fn sequences(Self)\n-> Result<(CompleteLineProgram<R, Offset>, Vec<LineSequence<R>>)>","parent":null,"children":[],"decl_id":null,"docs":" Execute the line number program, completing the `IncompleteLineProgram`\n into a `CompleteLineProgram` and producing an array of sequences within\n the line number program that can later be used with\n `CompleteLineProgram::resume_from`.","sig":null,"attributes":[{"value":"/ Execute the line number program, completing the `IncompleteLineProgram`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":590273,"byte_end":590348,"line_start":1455,"line_end":1455,"column_start":5,"column_end":80}},{"value":"/ into a `CompleteLineProgram` and producing an array of sequences within","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":590353,"byte_end":590428,"line_start":1456,"line_end":1456,"column_start":5,"column_end":80}},{"value":"/ the line number program that can later be used with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":590433,"byte_end":590488,"line_start":1457,"line_end":1457,"column_start":5,"column_end":60}},{"value":"/ `CompleteLineProgram::resume_from`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":590493,"byte_end":590532,"line_start":1458,"line_end":1458,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":590537,"byte_end":590540,"line_start":1459,"line_end":1459,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":590545,"byte_end":590552,"line_start":1460,"line_end":1460,"column_start":5,"column_end":12}},{"value":"/ # fn foo() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":590557,"byte_end":590573,"line_start":1461,"line_end":1461,"column_start":5,"column_end":21}},{"value":"/ use gimli::{IncompleteLineProgram, EndianSlice, NativeEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":590578,"byte_end":590644,"line_start":1462,"line_end":1462,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":590649,"byte_end":590652,"line_start":1463,"line_end":1463,"column_start":5,"column_end":8}},{"value":"/ fn get_line_number_program<'a>() -> IncompleteLineProgram<EndianSlice<'a, NativeEndian>> {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":590657,"byte_end":590751,"line_start":1464,"line_end":1464,"column_start":5,"column_end":99}},{"value":"/     // Get a line number program from some offset in a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":590756,"byte_end":590814,"line_start":1465,"line_end":1465,"column_start":5,"column_end":63}},{"value":"/     // `.debug_line` section...","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":590819,"byte_end":590854,"line_start":1466,"line_end":1466,"column_start":5,"column_end":40}},{"value":"/ #   unimplemented!()","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":590859,"byte_end":590883,"line_start":1467,"line_end":1467,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":590888,"byte_end":590893,"line_start":1468,"line_end":1468,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":590898,"byte_end":590901,"line_start":1469,"line_end":1469,"column_start":5,"column_end":8}},{"value":"/ let program = get_line_number_program();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":590906,"byte_end":590950,"line_start":1470,"line_end":1470,"column_start":5,"column_end":49}},{"value":"/ let (program, sequences) = program.sequences().unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":590955,"byte_end":591015,"line_start":1471,"line_end":1471,"column_start":5,"column_end":65}},{"value":"/ println!(\"There are {} sequences in this line number program\", sequences.len());","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":591020,"byte_end":591104,"line_start":1472,"line_end":1472,"column_start":5,"column_end":89}},{"value":"/ # }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":591109,"byte_end":591116,"line_start":1473,"line_end":1473,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":591121,"byte_end":591128,"line_start":1474,"line_end":1474,"column_start":5,"column_end":12}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":591133,"byte_end":591166,"line_start":1475,"line_end":1475,"column_start":5,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":1799},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":592742,"byte_end":592767,"line_start":1520,"line_end":1520,"column_start":10,"column_end":35},"name":"CompleteLineNumberProgram","qualname":"::read::line::CompleteLineNumberProgram","value":"CompleteLineProgram<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Deprecated. `CompleteLineNumberProgram` has been renamed to `CompleteLineProgram`.\n","sig":null,"attributes":[{"value":"/ Deprecated. `CompleteLineNumberProgram` has been renamed to `CompleteLineProgram`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":592531,"byte_end":592617,"line_start":1516,"line_end":1516,"column_start":1,"column_end":87}},{"value":"deprecated(note =\n             \"CompleteLineNumberProgram has been renamed to CompleteLineProgram, use that instead.\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":592618,"byte_end":592732,"line_start":1517,"line_end":1519,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":7413},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":592934,"byte_end":592953,"line_start":1524,"line_end":1524,"column_start":12,"column_end":31},"name":"CompleteLineProgram","qualname":"::read::line::CompleteLineProgram","value":"CompleteLineProgram {  }","parent":null,"children":[{"krate":0,"index":7416}],"decl_id":null,"docs":" A line number program that has previously been run to completion.\n","sig":null,"attributes":[{"value":"/ A line number program that has previously been run to completion.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":592814,"byte_end":592883,"line_start":1522,"line_end":1522,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1805},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":593283,"byte_end":593289,"line_start":1538,"line_end":1538,"column_start":12,"column_end":18},"name":"header","qualname":"<CompleteLineProgram<R, Offset>>::header","value":"pub fn header(&Self) -> &LineProgramHeader<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the `LineProgramHeader` for this program.\n","sig":null,"attributes":[{"value":"/ Retrieve the `LineProgramHeader` for this program.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":593217,"byte_end":593271,"line_start":1537,"line_end":1537,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1806},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":594154,"byte_end":594165,"line_start":1563,"line_end":1563,"column_start":12,"column_end":23},"name":"resume_from","qualname":"<CompleteLineProgram<R, Offset>>::resume_from","value":"pub fn resume_from<'program>(&'program Self, &LineSequence<R>)\n-> ResumedLineRows","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `LineRows` for executing the subset of the line\n number program identified by 'sequence' and  generating the line information\n matrix.","sig":null,"attributes":[{"value":"/ Construct a new `LineRows` for executing the subset of the line","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":593364,"byte_end":593431,"line_start":1542,"line_end":1542,"column_start":5,"column_end":72}},{"value":"/ number program identified by 'sequence' and  generating the line information","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":593436,"byte_end":593516,"line_start":1543,"line_end":1543,"column_start":5,"column_end":85}},{"value":"/ matrix.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":593521,"byte_end":593532,"line_start":1544,"line_end":1544,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":593537,"byte_end":593540,"line_start":1545,"line_end":1545,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":593545,"byte_end":593552,"line_start":1546,"line_end":1546,"column_start":5,"column_end":12}},{"value":"/ # fn foo() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":593557,"byte_end":593573,"line_start":1547,"line_end":1547,"column_start":5,"column_end":21}},{"value":"/ use gimli::{IncompleteLineProgram, EndianSlice, NativeEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":593578,"byte_end":593644,"line_start":1548,"line_end":1548,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":593649,"byte_end":593652,"line_start":1549,"line_end":1549,"column_start":5,"column_end":8}},{"value":"/ fn get_line_number_program<'a>() -> IncompleteLineProgram<EndianSlice<'a, NativeEndian>> {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":593657,"byte_end":593751,"line_start":1550,"line_end":1550,"column_start":5,"column_end":99}},{"value":"/     // Get a line number program from some offset in a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":593756,"byte_end":593814,"line_start":1551,"line_end":1551,"column_start":5,"column_end":63}},{"value":"/     // `.debug_line` section...","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":593819,"byte_end":593854,"line_start":1552,"line_end":1552,"column_start":5,"column_end":40}},{"value":"/ #   unimplemented!()","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":593859,"byte_end":593883,"line_start":1553,"line_end":1553,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":593888,"byte_end":593893,"line_start":1554,"line_end":1554,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":593898,"byte_end":593901,"line_start":1555,"line_end":1555,"column_start":5,"column_end":8}},{"value":"/ let program = get_line_number_program();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":593906,"byte_end":593950,"line_start":1556,"line_end":1556,"column_start":5,"column_end":49}},{"value":"/ let (program, sequences) = program.sequences().unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":593955,"byte_end":594015,"line_start":1557,"line_end":1557,"column_start":5,"column_end":65}},{"value":"/ for sequence in &sequences {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":594020,"byte_end":594052,"line_start":1558,"line_end":1558,"column_start":5,"column_end":37}},{"value":"/     let mut sm = program.resume_from(sequence);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":594057,"byte_end":594108,"line_start":1559,"line_end":1559,"column_start":5,"column_end":56}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":594113,"byte_end":594118,"line_start":1560,"line_end":1560,"column_start":5,"column_end":10}},{"value":"/ # }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":594123,"byte_end":594130,"line_start":1561,"line_end":1561,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":594135,"byte_end":594142,"line_start":1562,"line_end":1562,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":7440},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":594458,"byte_end":594467,"line_start":1573,"line_end":1573,"column_start":12,"column_end":21},"name":"FileEntry","qualname":"::read::line::FileEntry","value":"FileEntry {  }","parent":null,"children":[{"krate":0,"index":7443},{"krate":0,"index":7444},{"krate":0,"index":7445},{"krate":0,"index":7446},{"krate":0,"index":7447}],"decl_id":null,"docs":" An entry in the `LineProgramHeader`'s `file_names` set.\n","sig":null,"attributes":[{"value":"/ An entry in the `LineProgramHeader`'s `file_names` set.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":594342,"byte_end":594401,"line_start":1571,"line_end":1571,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1813},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":595650,"byte_end":595659,"line_start":1612,"line_end":1612,"column_start":12,"column_end":21},"name":"path_name","qualname":"<FileEntry<R, Offset>>::path_name","value":"pub fn path_name(&Self) -> AttributeValue<R, Offset>","parent":null,"children":[],"decl_id":null,"docs":" > A slice containing the full or relative path name of\n > a source file. If the entry contains a file name or a relative path\n > name, the file is located relative to either the compilation directory\n > (as specified by the DW_AT_comp_dir attribute given in the compilation\n > unit) or one of the directories in the include_directories section.\n","sig":null,"attributes":[{"value":"/ > A slice containing the full or relative path name of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":595262,"byte_end":595320,"line_start":1607,"line_end":1607,"column_start":5,"column_end":63}},{"value":"/ > a source file. If the entry contains a file name or a relative path","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":595325,"byte_end":595398,"line_start":1608,"line_end":1608,"column_start":5,"column_end":78}},{"value":"/ > name, the file is located relative to either the compilation directory","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":595403,"byte_end":595479,"line_start":1609,"line_end":1609,"column_start":5,"column_end":81}},{"value":"/ > (as specified by the DW_AT_comp_dir attribute given in the compilation","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":595484,"byte_end":595560,"line_start":1610,"line_end":1610,"column_start":5,"column_end":81}},{"value":"/ > unit) or one of the directories in the include_directories section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":595565,"byte_end":595638,"line_start":1611,"line_end":1611,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1814},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":596324,"byte_end":596339,"line_start":1627,"line_end":1627,"column_start":12,"column_end":27},"name":"directory_index","qualname":"<FileEntry<R, Offset>>::directory_index","value":"pub fn directory_index(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" > An unsigned LEB128 number representing the directory index of the\n > directory in which the file was found.\n >\n > ...\n >\n > The directory index represents an entry in the include_directories\n > section of the line number program header. The index is 0 if the file\n > was found in the current directory of the compilation, 1 if it was found\n > in the first directory in the include_directories section, and so\n > on. The directory index is ignored for file names that represent full\n > path names.\n","sig":null,"attributes":[{"value":"/ > An unsigned LEB128 number representing the directory index of the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":595740,"byte_end":595811,"line_start":1616,"line_end":1616,"column_start":5,"column_end":76}},{"value":"/ > directory in which the file was found.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":595816,"byte_end":595860,"line_start":1617,"line_end":1617,"column_start":5,"column_end":49}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":595865,"byte_end":595870,"line_start":1618,"line_end":1618,"column_start":5,"column_end":10}},{"value":"/ > ...","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":595875,"byte_end":595884,"line_start":1619,"line_end":1619,"column_start":5,"column_end":14}},{"value":"/ >","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":595889,"byte_end":595894,"line_start":1620,"line_end":1620,"column_start":5,"column_end":10}},{"value":"/ > The directory index represents an entry in the include_directories","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":595899,"byte_end":595971,"line_start":1621,"line_end":1621,"column_start":5,"column_end":77}},{"value":"/ > section of the line number program header. The index is 0 if the file","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":595976,"byte_end":596051,"line_start":1622,"line_end":1622,"column_start":5,"column_end":80}},{"value":"/ > was found in the current directory of the compilation, 1 if it was found","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":596056,"byte_end":596134,"line_start":1623,"line_end":1623,"column_start":5,"column_end":83}},{"value":"/ > in the first directory in the include_directories section, and so","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":596139,"byte_end":596210,"line_start":1624,"line_end":1624,"column_start":5,"column_end":76}},{"value":"/ > on. The directory index is ignored for file names that represent full","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":596215,"byte_end":596290,"line_start":1625,"line_end":1625,"column_start":5,"column_end":80}},{"value":"/ > path names.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":596295,"byte_end":596312,"line_start":1626,"line_end":1626,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":1815},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":596524,"byte_end":596533,"line_start":1634,"line_end":1634,"column_start":12,"column_end":21},"name":"directory","qualname":"<FileEntry<R, Offset>>::directory","value":"pub fn directory(&Self, &LineProgramHeader<R>)\n-> Option<AttributeValue<R, Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Get this file's directory.","sig":null,"attributes":[{"value":"/ Get this file's directory.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":596396,"byte_end":596426,"line_start":1631,"line_end":1631,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":596431,"byte_end":596434,"line_start":1632,"line_end":1632,"column_start":5,"column_end":8}},{"value":"/ A directory index of 0 corresponds to the compilation unit directory.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":596439,"byte_end":596512,"line_start":1633,"line_end":1633,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1816},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":596781,"byte_end":596790,"line_start":1640,"line_end":1640,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<FileEntry<R, Offset>>::timestamp","value":"pub fn timestamp(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The implementation-defined time of last modification of the file,\n or 0 if not available.\n","sig":null,"attributes":[{"value":"/ The implementation-defined time of last modification of the file,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":596669,"byte_end":596738,"line_start":1638,"line_end":1638,"column_start":5,"column_end":74}},{"value":"/ or 0 if not available.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":596743,"byte_end":596769,"line_start":1639,"line_end":1639,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1817},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":597037,"byte_end":597054,"line_start":1648,"line_end":1648,"column_start":12,"column_end":29},"name":"last_modification","qualname":"<FileEntry<R, Offset>>::last_modification","value":"pub fn last_modification(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" \"An unsigned LEB128 number representing the time of last modification of\n the file, or 0 if not available.\"\n","sig":null,"attributes":[{"value":"/ \"An unsigned LEB128 number representing the time of last modification of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":596841,"byte_end":596917,"line_start":1644,"line_end":1644,"column_start":5,"column_end":81}},{"value":"/ the file, or 0 if not available.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":596922,"byte_end":596959,"line_start":1645,"line_end":1645,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1818},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":597174,"byte_end":597178,"line_start":1653,"line_end":1653,"column_start":12,"column_end":16},"name":"size","qualname":"<FileEntry<R, Offset>>::size","value":"pub fn size(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The size of the file in bytes, or 0 if not available.\n","sig":null,"attributes":[{"value":"/ The size of the file in bytes, or 0 if not available.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":597105,"byte_end":597162,"line_start":1652,"line_end":1652,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1819},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":597410,"byte_end":597416,"line_start":1661,"line_end":1661,"column_start":12,"column_end":18},"name":"length","qualname":"<FileEntry<R, Offset>>::length","value":"pub fn length(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" \"An unsigned LEB128 number representing the length in bytes of the file,\n or 0 if not available.\"\n","sig":null,"attributes":[{"value":"/ \"An unsigned LEB128 number representing the length in bytes of the file,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":597224,"byte_end":597300,"line_start":1657,"line_end":1657,"column_start":5,"column_end":81}},{"value":"/ or 0 if not available.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":597305,"byte_end":597332,"line_start":1658,"line_end":1658,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1820},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":597600,"byte_end":597603,"line_start":1668,"line_end":1668,"column_start":12,"column_end":15},"name":"md5","qualname":"<FileEntry<R, Offset>>::md5","value":"pub fn md5(&Self) -> &[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" A 16-byte MD5 digest of the file contents.","sig":null,"attributes":[{"value":"/ A 16-byte MD5 digest of the file contents.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":597462,"byte_end":597508,"line_start":1665,"line_end":1665,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":597513,"byte_end":597516,"line_start":1666,"line_end":1666,"column_start":5,"column_end":8}},{"value":"/ Only valid if `LineProgramHeader::file_has_md5` returns `true`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":597521,"byte_end":597588,"line_start":1667,"line_end":1667,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":7476},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":597783,"byte_end":597798,"line_start":1675,"line_end":1675,"column_start":12,"column_end":27},"name":"FileEntryFormat","qualname":"::read::line::FileEntryFormat","value":"FileEntryFormat { content_type, form }","parent":null,"children":[{"krate":0,"index":7477},{"krate":0,"index":7478}],"decl_id":null,"docs":" The format of a component of an include directory or file name entry.\n","sig":null,"attributes":[{"value":"/ The format of a component of an include directory or file name entry.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":597653,"byte_end":597726,"line_start":1673,"line_end":1673,"column_start":1,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":7477},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":597879,"byte_end":597891,"line_start":1677,"line_end":1677,"column_start":9,"column_end":21},"name":"content_type","qualname":"::read::line::FileEntryFormat::content_type","value":"constants::DwLnct","parent":{"krate":0,"index":7476},"children":[],"decl_id":null,"docs":" The type of information that is represented by the component.\n","sig":null,"attributes":[{"value":"/ The type of information that is represented by the component.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":597805,"byte_end":597870,"line_start":1676,"line_end":1676,"column_start":5,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":7478},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":597971,"byte_end":597975,"line_start":1680,"line_end":1680,"column_start":9,"column_end":13},"name":"form","qualname":"::read::line::FileEntryFormat::form","value":"constants::DwForm","parent":{"krate":0,"index":7476},"children":[],"decl_id":null,"docs":" The encoding form of the component value.\n","sig":null,"attributes":[{"value":"/ The encoding form of the component value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":597917,"byte_end":597962,"line_start":1679,"line_end":1679,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":7499},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":647318,"byte_end":647326,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"DebugLoc","qualname":"::read::loclists::DebugLoc","value":"DebugLoc {  }","parent":null,"children":[{"krate":0,"index":7501}],"decl_id":null,"docs":" The raw contents of the `.debug_loc` section.\n","sig":null,"attributes":[{"value":"/ The raw contents of the `.debug_loc` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":647218,"byte_end":647267,"line_start":12,"line_end":12,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1930},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":648038,"byte_end":648041,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugLoc<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugLoc` instance from the data in the `.debug_loc`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugLoc` instance from the data in the `.debug_loc`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":647456,"byte_end":647529,"line_start":22,"line_end":22,"column_start":5,"column_end":78}},{"value":"/ section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":647534,"byte_end":647546,"line_start":23,"line_end":23,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":647551,"byte_end":647554,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_loc` section and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":647559,"byte_end":647633,"line_start":25,"line_end":25,"column_start":5,"column_end":79}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":647638,"byte_end":647708,"line_start":26,"line_end":26,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":647713,"byte_end":647752,"line_start":27,"line_end":27,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":647757,"byte_end":647760,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":647765,"byte_end":647772,"line_start":29,"line_end":29,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugLoc, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":647777,"byte_end":647817,"line_start":30,"line_end":30,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":647822,"byte_end":647825,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":647830,"byte_end":647871,"line_start":32,"line_end":32,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_loc_section_somehow = || &buf;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":647876,"byte_end":647927,"line_start":33,"line_end":33,"column_start":5,"column_end":56}},{"value":"/ let debug_loc = DebugLoc::new(read_debug_loc_section_somehow(), LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":647932,"byte_end":648014,"line_start":34,"line_end":34,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":648019,"byte_end":648026,"line_start":35,"line_end":35,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":7513},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":648570,"byte_end":648583,"line_start":60,"line_end":60,"column_start":12,"column_end":25},"name":"DebugLocLists","qualname":"::read::loclists::DebugLocLists","value":"DebugLocLists {  }","parent":null,"children":[{"krate":0,"index":7515}],"decl_id":null,"docs":" The `DebugLocLists` struct represents the DWARF data\n found in the `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ The `DebugLocLists` struct represents the DWARF data","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":648419,"byte_end":648475,"line_start":57,"line_end":57,"column_start":1,"column_end":57}},{"value":"/ found in the `.debug_loclists` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":648476,"byte_end":648519,"line_start":58,"line_end":58,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1941},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":649329,"byte_end":649332,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugLocLists<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugLocLists` instance from the data in the `.debug_loclists`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugLocLists` instance from the data in the `.debug_loclists`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":648707,"byte_end":648790,"line_start":68,"line_end":68,"column_start":5,"column_end":88}},{"value":"/ section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":648795,"byte_end":648807,"line_start":69,"line_end":69,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":648812,"byte_end":648815,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_loclists` section and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":648820,"byte_end":648899,"line_start":71,"line_end":71,"column_start":5,"column_end":84}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":648904,"byte_end":648974,"line_start":72,"line_end":72,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":648979,"byte_end":649018,"line_start":73,"line_end":73,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":649023,"byte_end":649026,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":649031,"byte_end":649038,"line_start":75,"line_end":75,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugLocLists, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":649043,"byte_end":649088,"line_start":76,"line_end":76,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":649093,"byte_end":649096,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":649101,"byte_end":649142,"line_start":78,"line_end":78,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_loclists_section_somehow = || &buf;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":649147,"byte_end":649203,"line_start":79,"line_end":79,"column_start":5,"column_end":61}},{"value":"/ let debug_loclists = DebugLocLists::new(read_debug_loclists_section_somehow(), LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":649208,"byte_end":649305,"line_start":80,"line_end":80,"column_start":5,"column_end":102}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":649310,"byte_end":649317,"line_start":81,"line_end":81,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1952},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":649999,"byte_end":650028,"line_start":111,"line_end":111,"column_start":12,"column_end":41},"name":"default_for_encoding_and_file","qualname":"<DebugLocListsBase<Offset>>::default_for_encoding_and_file","value":"pub fn default_for_encoding_and_file(Encoding, DwarfFileType)\n-> DebugLocListsBase<Offset>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DebugLocListsBase` with the default value of DW_AT_loclists_base\n for the given `Encoding` and `DwarfFileType`.\n","sig":null,"attributes":[{"value":"/ Returns a `DebugLocListsBase` with the default value of DW_AT_loclists_base","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":649854,"byte_end":649933,"line_start":109,"line_end":109,"column_start":5,"column_end":84}},{"value":"/ for the given `Encoding` and `DwarfFileType`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":649938,"byte_end":649987,"line_start":110,"line_end":110,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":7527},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":650743,"byte_end":650756,"line_start":128,"line_end":128,"column_start":12,"column_end":25},"name":"LocationLists","qualname":"::read::loclists::LocationLists","value":"LocationLists {  }","parent":null,"children":[{"krate":0,"index":7529},{"krate":0,"index":7530}],"decl_id":null,"docs":" The DWARF data found in `.debug_loc` and `.debug_loclists` sections.\n","sig":null,"attributes":[{"value":"/ The DWARF data found in `.debug_loc` and `.debug_loclists` sections.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":650620,"byte_end":650692,"line_start":126,"line_end":126,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1955},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":650992,"byte_end":650995,"line_start":136,"line_end":136,"column_start":12,"column_end":15},"name":"new","qualname":"<LocationLists<R>>::new","value":"pub fn new(DebugLoc<R>, DebugLocLists<R>) -> LocationLists<R>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `LocationLists` instance from the data in the `.debug_loc` and\n `.debug_loclists` sections.\n","sig":null,"attributes":[{"value":"/ Construct a new `LocationLists` instance from the data in the `.debug_loc` and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":650862,"byte_end":650944,"line_start":134,"line_end":134,"column_start":5,"column_end":87}},{"value":"/ `.debug_loclists` sections.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":650949,"byte_end":650980,"line_start":135,"line_end":135,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1958},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":651831,"byte_end":651837,"line_start":160,"line_end":160,"column_start":12,"column_end":18},"name":"borrow","qualname":"<LocationLists<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> LocationLists<R> where F: FnMut(&'a T)\n-> R","parent":null,"children":[],"decl_id":null,"docs":" Create a `LocationLists` that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `LocationLists` that references the data in `self`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":651201,"byte_end":651265,"line_start":145,"line_end":145,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":651270,"byte_end":651273,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":651278,"byte_end":651343,"line_start":147,"line_end":147,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":651348,"byte_end":651351,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":651356,"byte_end":651376,"line_start":149,"line_end":149,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":651381,"byte_end":651384,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":651389,"byte_end":651407,"line_start":151,"line_end":151,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":651412,"byte_end":651457,"line_start":152,"line_end":152,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":651462,"byte_end":651546,"line_start":153,"line_end":153,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::LocationLists<Vec<u8>> = load_section();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":651551,"byte_end":651621,"line_start":154,"line_end":154,"column_start":5,"column_end":75}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":651626,"byte_end":651673,"line_start":155,"line_end":155,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":651678,"byte_end":651728,"line_start":156,"line_end":156,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":651733,"byte_end":651795,"line_start":157,"line_end":157,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":651800,"byte_end":651807,"line_start":158,"line_end":158,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":651812,"byte_end":651819,"line_start":159,"line_end":159,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1964},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":652653,"byte_end":652662,"line_start":183,"line_end":183,"column_start":12,"column_end":21},"name":"locations","qualname":"<LocationLists<R>>::locations","value":"pub fn locations(&Self, LocationListsOffset<R::Offset>, Encoding, u64,\n                 &DebugAddr<R>, DebugAddrBase<R::Offset>)\n-> Result<LocListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the `LocationListEntry`s starting at the given offset.","sig":null,"attributes":[{"value":"/ Iterate over the `LocationListEntry`s starting at the given offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":652157,"byte_end":652228,"line_start":172,"line_end":172,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":652233,"byte_end":652236,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ The `unit_encoding` must match the compilation unit that the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":652241,"byte_end":652305,"line_start":174,"line_end":174,"column_start":5,"column_end":69}},{"value":"/ offset was contained in.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":652310,"byte_end":652338,"line_start":175,"line_end":175,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":652343,"byte_end":652346,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ The `base_address` should be obtained from the `DW_AT_low_pc` attribute in the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":652351,"byte_end":652433,"line_start":177,"line_end":177,"column_start":5,"column_end":87}},{"value":"/ `DW_TAG_compile_unit` entry for the compilation unit that contains this location","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":652438,"byte_end":652522,"line_start":178,"line_end":178,"column_start":5,"column_end":89}},{"value":"/ list.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":652527,"byte_end":652536,"line_start":179,"line_end":179,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":652541,"byte_end":652544,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":652549,"byte_end":652570,"line_start":181,"line_end":181,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":652575,"byte_end":652641,"line_start":182,"line_end":182,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1965},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":653280,"byte_end":653293,"line_start":202,"line_end":202,"column_start":12,"column_end":25},"name":"locations_dwo","qualname":"<LocationLists<R>>::locations_dwo","value":"pub fn locations_dwo(&Self, LocationListsOffset<R::Offset>, Encoding, u64,\n                     &DebugAddr<R>, DebugAddrBase<R::Offset>)\n-> Result<LocListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Similar to `locations`, but with special handling for .dwo files.\n This should only been used when this `LocationLists` was loaded from a\n .dwo file.\n","sig":null,"attributes":[{"value":"/ Similar to `locations`, but with special handling for .dwo files.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":653101,"byte_end":653170,"line_start":199,"line_end":199,"column_start":5,"column_end":74}},{"value":"/ This should only been used when this `LocationLists` was loaded from a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":653175,"byte_end":653249,"line_start":200,"line_end":200,"column_start":5,"column_end":79}},{"value":"/ .dwo file.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":653254,"byte_end":653268,"line_start":201,"line_end":201,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1966},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":654166,"byte_end":654179,"line_start":228,"line_end":228,"column_start":12,"column_end":25},"name":"raw_locations","qualname":"<LocationLists<R>>::raw_locations","value":"pub fn raw_locations(&Self, LocationListsOffset<R::Offset>, Encoding)\n-> Result<RawLocListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the raw `LocationListEntry`s starting at the given offset.","sig":null,"attributes":[{"value":"/ Iterate over the raw `LocationListEntry`s starting at the given offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":653736,"byte_end":653811,"line_start":218,"line_end":218,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":653816,"byte_end":653819,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ The `unit_encoding` must match the compilation unit that the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":653824,"byte_end":653888,"line_start":220,"line_end":220,"column_start":5,"column_end":69}},{"value":"/ offset was contained in.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":653893,"byte_end":653921,"line_start":221,"line_end":221,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":653926,"byte_end":653929,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ This iterator does not perform any processing of the location entries,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":653934,"byte_end":654008,"line_start":223,"line_end":223,"column_start":5,"column_end":79}},{"value":"/ such as handling base addresses.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":654013,"byte_end":654049,"line_start":224,"line_end":224,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":654054,"byte_end":654057,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":654062,"byte_end":654083,"line_start":226,"line_end":226,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":654088,"byte_end":654154,"line_start":227,"line_end":227,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1967},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":654833,"byte_end":654850,"line_start":245,"line_end":245,"column_start":12,"column_end":29},"name":"raw_locations_dwo","qualname":"<LocationLists<R>>::raw_locations_dwo","value":"pub fn raw_locations_dwo(&Self, LocationListsOffset<R::Offset>, Encoding)\n-> Result<RawLocListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Similar to `raw_locations`, but with special handling for .dwo files.\n This should only been used when this `LocationLists` was loaded from a\n .dwo file.\n","sig":null,"attributes":[{"value":"/ Similar to `raw_locations`, but with special handling for .dwo files.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":654650,"byte_end":654723,"line_start":242,"line_end":242,"column_start":5,"column_end":78}},{"value":"/ This should only been used when this `LocationLists` was loaded from a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":654728,"byte_end":654802,"line_start":243,"line_end":243,"column_start":5,"column_end":79}},{"value":"/ .dwo file.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":654807,"byte_end":654821,"line_start":244,"line_end":244,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1968},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":655877,"byte_end":655887,"line_start":272,"line_end":272,"column_start":12,"column_end":22},"name":"get_offset","qualname":"<LocationLists<R>>::get_offset","value":"pub fn get_offset(&Self, Encoding, DebugLocListsBase<R::Offset>,\n                  DebugLocListsIndex<R::Offset>)\n-> Result<LocationListsOffset<R::Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `.debug_loclists` offset at the given `base` and `index`.","sig":null,"attributes":[{"value":"/ Returns the `.debug_loclists` offset at the given `base` and `index`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":655539,"byte_end":655612,"line_start":266,"line_end":266,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":655617,"byte_end":655620,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ The `base` must be the `DW_AT_loclists_base` value from the compilation unit DIE.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":655625,"byte_end":655710,"line_start":268,"line_end":268,"column_start":5,"column_end":90}},{"value":"/ This is an offset that points to the first entry following the header.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":655715,"byte_end":655789,"line_start":269,"line_end":269,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":655794,"byte_end":655797,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ The `index` is the value of a `DW_FORM_loclistx` attribute.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":655802,"byte_end":655865,"line_start":271,"line_end":271,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1970},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":656534,"byte_end":656550,"line_start":290,"line_end":290,"column_start":12,"column_end":28},"name":"lookup_offset_id","qualname":"<LocationLists<R>>::lookup_offset_id","value":"pub fn lookup_offset_id(&Self, ReaderOffsetId)\n-> Option<(SectionId, R::Offset)>","parent":null,"children":[],"decl_id":null,"docs":" Call `Reader::lookup_offset_id` for each section, and return the first match.\n","sig":null,"attributes":[{"value":"/ Call `Reader::lookup_offset_id` for each section, and return the first match.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":656441,"byte_end":656522,"line_start":289,"line_end":289,"column_start":5,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":7558},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":657196,"byte_end":657210,"line_start":311,"line_end":311,"column_start":12,"column_end":26},"name":"RawLocListIter","qualname":"::read::loclists::RawLocListIter","value":"RawLocListIter {  }","parent":null,"children":[{"krate":0,"index":7560},{"krate":0,"index":7561},{"krate":0,"index":7562}],"decl_id":null,"docs":" A raw iterator over a location list.","sig":null,"attributes":[{"value":"/ A raw iterator over a location list.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":657011,"byte_end":657051,"line_start":306,"line_end":306,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":657052,"byte_end":657055,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ This iterator does not perform any processing of the location entries,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":657056,"byte_end":657130,"line_start":308,"line_end":308,"column_start":1,"column_end":75}},{"value":"/ such as handling base addresses.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":657131,"byte_end":657167,"line_start":309,"line_end":309,"column_start":1,"column_end":37}}]},{"kind":"StructVariant","id":{"krate":0,"index":7568},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":657439,"byte_end":657458,"line_start":321,"line_end":321,"column_start":5,"column_end":24},"name":"AddressOrOffsetPair","qualname":"::read::loclists::RawLocListEntry::AddressOrOffsetPair","value":"RawLocListEntry::AddressOrOffsetPair { begin, end, data }","parent":{"krate":0,"index":7566},"children":[],"decl_id":null,"docs":" A location from DWARF version <= 4.\n","sig":null,"attributes":[{"value":"/ A location from DWARF version <= 4.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":657395,"byte_end":657434,"line_start":320,"line_end":320,"column_start":5,"column_end":44}}]},{"kind":"StructVariant","id":{"krate":0,"index":7572},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":657708,"byte_end":657719,"line_start":330,"line_end":330,"column_start":5,"column_end":16},"name":"BaseAddress","qualname":"::read::loclists::RawLocListEntry::BaseAddress","value":"RawLocListEntry::BaseAddress { addr }","parent":{"krate":0,"index":7566},"children":[],"decl_id":null,"docs":" DW_LLE_base_address\n","sig":null,"attributes":[{"value":"/ DW_LLE_base_address","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":657680,"byte_end":657703,"line_start":329,"line_end":329,"column_start":5,"column_end":28}}]},{"kind":"StructVariant","id":{"krate":0,"index":7574},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":657806,"byte_end":657818,"line_start":335,"line_end":335,"column_start":5,"column_end":17},"name":"BaseAddressx","qualname":"::read::loclists::RawLocListEntry::BaseAddressx","value":"RawLocListEntry::BaseAddressx { addr }","parent":{"krate":0,"index":7566},"children":[],"decl_id":null,"docs":" DW_LLE_base_addressx\n","sig":null,"attributes":[{"value":"/ DW_LLE_base_addressx","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":657777,"byte_end":657801,"line_start":334,"line_end":334,"column_start":5,"column_end":29}}]},{"kind":"StructVariant","id":{"krate":0,"index":7576},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":657925,"byte_end":657935,"line_start":340,"line_end":340,"column_start":5,"column_end":15},"name":"StartxEndx","qualname":"::read::loclists::RawLocListEntry::StartxEndx","value":"RawLocListEntry::StartxEndx { begin, end, data }","parent":{"krate":0,"index":7566},"children":[],"decl_id":null,"docs":" DW_LLE_startx_endx\n","sig":null,"attributes":[{"value":"/ DW_LLE_startx_endx","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":657898,"byte_end":657920,"line_start":339,"line_end":339,"column_start":5,"column_end":27}}]},{"kind":"StructVariant","id":{"krate":0,"index":7580},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":658164,"byte_end":658176,"line_start":349,"line_end":349,"column_start":5,"column_end":17},"name":"StartxLength","qualname":"::read::loclists::RawLocListEntry::StartxLength","value":"RawLocListEntry::StartxLength { begin, length, data }","parent":{"krate":0,"index":7566},"children":[],"decl_id":null,"docs":" DW_LLE_startx_length\n","sig":null,"attributes":[{"value":"/ DW_LLE_startx_length","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":658135,"byte_end":658159,"line_start":348,"line_end":348,"column_start":5,"column_end":29}}]},{"kind":"StructVariant","id":{"krate":0,"index":7584},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":658387,"byte_end":658397,"line_start":358,"line_end":358,"column_start":5,"column_end":15},"name":"OffsetPair","qualname":"::read::loclists::RawLocListEntry::OffsetPair","value":"RawLocListEntry::OffsetPair { begin, end, data }","parent":{"krate":0,"index":7566},"children":[],"decl_id":null,"docs":" DW_LLE_offset_pair\n","sig":null,"attributes":[{"value":"/ DW_LLE_offset_pair","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":658360,"byte_end":658382,"line_start":357,"line_end":357,"column_start":5,"column_end":27}}]},{"kind":"StructVariant","id":{"krate":0,"index":7588},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":658585,"byte_end":658600,"line_start":367,"line_end":367,"column_start":5,"column_end":20},"name":"DefaultLocation","qualname":"::read::loclists::RawLocListEntry::DefaultLocation","value":"RawLocListEntry::DefaultLocation { data }","parent":{"krate":0,"index":7566},"children":[],"decl_id":null,"docs":" DW_LLE_default_location\n","sig":null,"attributes":[{"value":"/ DW_LLE_default_location","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":658553,"byte_end":658580,"line_start":366,"line_end":366,"column_start":5,"column_end":32}}]},{"kind":"StructVariant","id":{"krate":0,"index":7590},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":658691,"byte_end":658699,"line_start":372,"line_end":372,"column_start":5,"column_end":13},"name":"StartEnd","qualname":"::read::loclists::RawLocListEntry::StartEnd","value":"RawLocListEntry::StartEnd { begin, end, data }","parent":{"krate":0,"index":7566},"children":[],"decl_id":null,"docs":" DW_LLE_start_end\n","sig":null,"attributes":[{"value":"/ DW_LLE_start_end","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":658666,"byte_end":658686,"line_start":371,"line_end":371,"column_start":5,"column_end":25}}]},{"kind":"StructVariant","id":{"krate":0,"index":7594},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":658883,"byte_end":658894,"line_start":381,"line_end":381,"column_start":5,"column_end":16},"name":"StartLength","qualname":"::read::loclists::RawLocListEntry::StartLength","value":"RawLocListEntry::StartLength { begin, length, data }","parent":{"krate":0,"index":7566},"children":[],"decl_id":null,"docs":" DW_LLE_start_length\n","sig":null,"attributes":[{"value":"/ DW_LLE_start_length","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":658855,"byte_end":658878,"line_start":380,"line_end":380,"column_start":5,"column_end":28}}]},{"kind":"Enum","id":{"krate":0,"index":7566},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":657362,"byte_end":657377,"line_start":319,"line_end":319,"column_start":10,"column_end":25},"name":"RawLocListEntry","qualname":"::read::loclists::RawLocListEntry","value":"pub enum RawLocListEntry<R: Reader> {\n    AddressOrOffsetPair {\n        begin: u64,\n        end: u64,\n        data: Expression<R>,\n    },\n    BaseAddress {\n        addr: u64,\n    },\n    BaseAddressx {\n        addr: DebugAddrIndex<R::Offset>,\n    },\n    StartxEndx {\n        begin: DebugAddrIndex<R::Offset>,\n        end: DebugAddrIndex<R::Offset>,\n        data: Expression<R>,\n    },\n    StartxLength {\n        begin: DebugAddrIndex<R::Offset>,\n        length: u64,\n        data: Expression<R>,\n    },\n    OffsetPair {\n        begin: u64,\n        end: u64,\n        data: Expression<R>,\n    },\n    DefaultLocation {\n        data: Expression<R>,\n    },\n    StartEnd {\n        begin: u64,\n        end: u64,\n        data: Expression<R>,\n    },\n    StartLength {\n        begin: u64,\n        length: u64,\n        data: Expression<R>,\n    },\n}","parent":null,"children":[{"krate":0,"index":7568},{"krate":0,"index":7572},{"krate":0,"index":7574},{"krate":0,"index":7576},{"krate":0,"index":7580},{"krate":0,"index":7584},{"krate":0,"index":7588},{"krate":0,"index":7590},{"krate":0,"index":7594}],"decl_id":null,"docs":" A raw entry in .debug_loclists.\n","sig":null,"attributes":[{"value":"/ A raw entry in .debug_loclists.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":657293,"byte_end":657328,"line_start":317,"line_end":317,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1980},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":663304,"byte_end":663308,"line_start":482,"line_end":482,"column_start":12,"column_end":16},"name":"next","qualname":"<RawLocListIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<RawLocListEntry<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next location.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next location.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":663246,"byte_end":663292,"line_start":481,"line_end":481,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":7604},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":664380,"byte_end":664391,"line_start":518,"line_end":518,"column_start":12,"column_end":23},"name":"LocListIter","qualname":"::read::loclists::LocListIter","value":"LocListIter {  }","parent":null,"children":[{"krate":0,"index":7606},{"krate":0,"index":7607},{"krate":0,"index":7608},{"krate":0,"index":7609}],"decl_id":null,"docs":" An iterator over a location list.","sig":null,"attributes":[{"value":"/ An iterator over a location list.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":664100,"byte_end":664137,"line_start":512,"line_end":512,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":664138,"byte_end":664141,"line_start":513,"line_end":513,"column_start":1,"column_end":4}},{"value":"/ This iterator internally handles processing of base address selection entries","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":664142,"byte_end":664223,"line_start":514,"line_end":514,"column_start":1,"column_end":82}},{"value":"/ and list end entries.  Thus, it only returns location entries that are valid","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":664224,"byte_end":664304,"line_start":515,"line_end":515,"column_start":1,"column_end":81}},{"value":"/ and already adjusted for the base address.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":664305,"byte_end":664351,"line_start":516,"line_end":516,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1985},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":665191,"byte_end":665195,"line_start":548,"line_end":548,"column_start":12,"column_end":16},"name":"next","qualname":"<LocListIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<LocationListEntry<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next location.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next location.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":665133,"byte_end":665179,"line_start":547,"line_end":547,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":7613},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":668061,"byte_end":668078,"line_start":627,"line_end":627,"column_start":12,"column_end":29},"name":"LocationListEntry","qualname":"::read::loclists::LocationListEntry","value":"LocationListEntry { range, data }","parent":null,"children":[{"krate":0,"index":7615},{"krate":0,"index":7616}],"decl_id":null,"docs":" A location list entry from the `.debug_loc` or `.debug_loclists` sections.\n","sig":null,"attributes":[{"value":"/ A location list entry from the `.debug_loc` or `.debug_loclists` sections.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":667920,"byte_end":667998,"line_start":625,"line_end":625,"column_start":1,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":7615},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":668159,"byte_end":668164,"line_start":629,"line_end":629,"column_start":9,"column_end":14},"name":"range","qualname":"::read::loclists::LocationListEntry::range","value":"read::rnglists::Range","parent":{"krate":0,"index":7613},"children":[],"decl_id":null,"docs":" The address range that this location is valid for.\n","sig":null,"attributes":[{"value":"/ The address range that this location is valid for.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":668096,"byte_end":668150,"line_start":628,"line_end":628,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":7616},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":668241,"byte_end":668245,"line_start":632,"line_end":632,"column_start":9,"column_end":13},"name":"data","qualname":"::read::loclists::LocationListEntry::data","value":"read::op::Expression<R>","parent":{"krate":0,"index":7613},"children":[],"decl_id":null,"docs":" The data containing a single location description.\n","sig":null,"attributes":[{"value":"/ The data containing a single location description.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":668178,"byte_end":668232,"line_start":631,"line_end":631,"column_start":5,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":2019},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/lookup.rs","byte_start":698863,"byte_end":698869,"line_start":17,"line_end":17,"column_start":10,"column_end":16},"name":"Header","qualname":"::read::lookup::LookupParser::Header","value":"type Header;","parent":{"krate":0,"index":2017},"children":[],"decl_id":null,"docs":" The type of the produced header.\n","sig":null,"attributes":[{"value":"/ The type of the produced header.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/lookup.rs","byte_start":698817,"byte_end":698853,"line_start":16,"line_end":16,"column_start":5,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":2020},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/lookup.rs","byte_start":698920,"byte_end":698925,"line_start":19,"line_end":19,"column_start":10,"column_end":15},"name":"Entry","qualname":"::read::lookup::LookupParser::Entry","value":"type Entry;","parent":{"krate":0,"index":2017},"children":[],"decl_id":null,"docs":" The type of the produced entry.\n","sig":null,"attributes":[{"value":"/ The type of the produced entry.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/lookup.rs","byte_start":698875,"byte_end":698910,"line_start":18,"line_end":18,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7704},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":704838,"byte_end":704845,"line_start":17,"line_end":17,"column_start":5,"column_end":12},"name":"UnitRef","qualname":"::read::op::DieReference::UnitRef","value":"DieReference::UnitRef(UnitOffset<T>)","parent":{"krate":0,"index":7702},"children":[],"decl_id":null,"docs":" A CU-relative reference.\n","sig":null,"attributes":[{"value":"/ A CU-relative reference.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":704805,"byte_end":704833,"line_start":16,"line_end":16,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7707},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":704904,"byte_end":704916,"line_start":19,"line_end":19,"column_start":5,"column_end":17},"name":"DebugInfoRef","qualname":"::read::op::DieReference::DebugInfoRef","value":"DieReference::DebugInfoRef(DebugInfoOffset<T>)","parent":{"krate":0,"index":7702},"children":[],"decl_id":null,"docs":" A section-relative reference.\n","sig":null,"attributes":[{"value":"/ A section-relative reference.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":704866,"byte_end":704899,"line_start":18,"line_end":18,"column_start":5,"column_end":38}}]},{"kind":"Enum","id":{"krate":0,"index":7702},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":704775,"byte_end":704787,"line_start":15,"line_end":15,"column_start":10,"column_end":22},"name":"DieReference","qualname":"::read::op::DieReference","value":"pub enum DieReference<T = usize> {\n    UnitRef(UnitOffset<T>),\n    DebugInfoRef(DebugInfoOffset<T>),\n}","parent":null,"children":[{"krate":0,"index":7704},{"krate":0,"index":7707}],"decl_id":null,"docs":" A reference to a DIE, either relative to the current CU or\n relative to the section.\n","sig":null,"attributes":[{"value":"/ A reference to a DIE, either relative to the current CU or","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":704629,"byte_end":704691,"line_start":12,"line_end":12,"column_start":1,"column_end":63}},{"value":"/ relative to the section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":704692,"byte_end":704720,"line_start":13,"line_end":13,"column_start":1,"column_end":29}}]},{"kind":"StructVariant","id":{"krate":0,"index":7732},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":705681,"byte_end":705686,"line_start":40,"line_end":40,"column_start":5,"column_end":10},"name":"Deref","qualname":"::read::op::Operation::Deref","value":"Operation::Deref { base_type, size, space }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Dereference the topmost value of the stack.\n","sig":null,"attributes":[{"value":"/ Dereference the topmost value of the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":705629,"byte_end":705676,"line_start":39,"line_end":39,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7736},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706058,"byte_end":706062,"line_start":50,"line_end":50,"column_start":5,"column_end":9},"name":"Drop","qualname":"::read::op::Operation::Drop","value":"Operation::Drop","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Drop an item from the stack.\n","sig":null,"attributes":[{"value":"/ Drop an item from the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706021,"byte_end":706053,"line_start":49,"line_end":49,"column_start":5,"column_end":37}}]},{"kind":"StructVariant","id":{"krate":0,"index":7738},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706221,"byte_end":706225,"line_start":54,"line_end":54,"column_start":5,"column_end":9},"name":"Pick","qualname":"::read::op::Operation::Pick","value":"Operation::Pick { index }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Pick an item from the stack and push it on top of the stack.\n This operation handles `DW_OP_pick`, `DW_OP_dup`, and\n `DW_OP_over`.\n","sig":null,"attributes":[{"value":"/ Pick an item from the stack and push it on top of the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706068,"byte_end":706132,"line_start":51,"line_end":51,"column_start":5,"column_end":69}},{"value":"/ This operation handles `DW_OP_pick`, `DW_OP_dup`, and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706137,"byte_end":706194,"line_start":52,"line_end":52,"column_start":5,"column_end":62}},{"value":"/ `DW_OP_over`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706199,"byte_end":706216,"line_start":53,"line_end":53,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7740},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706367,"byte_end":706371,"line_start":59,"line_end":59,"column_start":5,"column_end":9},"name":"Swap","qualname":"::read::op::Operation::Swap","value":"Operation::Swap","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Swap the top two stack items.\n","sig":null,"attributes":[{"value":"/ Swap the top two stack items.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706329,"byte_end":706362,"line_start":58,"line_end":58,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7742},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706419,"byte_end":706422,"line_start":61,"line_end":61,"column_start":5,"column_end":8},"name":"Rot","qualname":"::read::op::Operation::Rot","value":"Operation::Rot","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Rotate the top three stack items.\n","sig":null,"attributes":[{"value":"/ Rotate the top three stack items.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706377,"byte_end":706414,"line_start":60,"line_end":60,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7744},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706485,"byte_end":706488,"line_start":63,"line_end":63,"column_start":5,"column_end":8},"name":"Abs","qualname":"::read::op::Operation::Abs","value":"Operation::Abs","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Take the absolute value of the top of the stack.\n","sig":null,"attributes":[{"value":"/ Take the absolute value of the top of the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706428,"byte_end":706480,"line_start":62,"line_end":62,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7746},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706552,"byte_end":706555,"line_start":65,"line_end":65,"column_start":5,"column_end":8},"name":"And","qualname":"::read::op::Operation::And","value":"Operation::And","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Bitwise `and` of the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Bitwise `and` of the top two values on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706494,"byte_end":706547,"line_start":64,"line_end":64,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7748},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706609,"byte_end":706612,"line_start":67,"line_end":67,"column_start":5,"column_end":8},"name":"Div","qualname":"::read::op::Operation::Div","value":"Operation::Div","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Divide the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Divide the top two values on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706561,"byte_end":706604,"line_start":66,"line_end":66,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7750},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706668,"byte_end":706673,"line_start":69,"line_end":69,"column_start":5,"column_end":10},"name":"Minus","qualname":"::read::op::Operation::Minus","value":"Operation::Minus","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Subtract the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Subtract the top two values on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706618,"byte_end":706663,"line_start":68,"line_end":68,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7752},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706731,"byte_end":706734,"line_start":71,"line_end":71,"column_start":5,"column_end":8},"name":"Mod","qualname":"::read::op::Operation::Mod","value":"Operation::Mod","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Modulus of the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Modulus of the top two values on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706679,"byte_end":706726,"line_start":70,"line_end":70,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7754},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706790,"byte_end":706793,"line_start":73,"line_end":73,"column_start":5,"column_end":8},"name":"Mul","qualname":"::read::op::Operation::Mul","value":"Operation::Mul","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Multiply the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Multiply the top two values on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706740,"byte_end":706785,"line_start":72,"line_end":72,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7756},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706836,"byte_end":706839,"line_start":75,"line_end":75,"column_start":5,"column_end":8},"name":"Neg","qualname":"::read::op::Operation::Neg","value":"Operation::Neg","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Negate the top of the stack.\n","sig":null,"attributes":[{"value":"/ Negate the top of the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706799,"byte_end":706831,"line_start":74,"line_end":74,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7758},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706892,"byte_end":706895,"line_start":77,"line_end":77,"column_start":5,"column_end":8},"name":"Not","qualname":"::read::op::Operation::Not","value":"Operation::Not","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Bitwise `not` of the top of the stack.\n","sig":null,"attributes":[{"value":"/ Bitwise `not` of the top of the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706845,"byte_end":706887,"line_start":76,"line_end":76,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7760},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706958,"byte_end":706960,"line_start":79,"line_end":79,"column_start":5,"column_end":7},"name":"Or","qualname":"::read::op::Operation::Or","value":"Operation::Or","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Bitwise `or` of the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Bitwise `or` of the top two values on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706901,"byte_end":706953,"line_start":78,"line_end":78,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7762},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":707011,"byte_end":707015,"line_start":81,"line_end":81,"column_start":5,"column_end":9},"name":"Plus","qualname":"::read::op::Operation::Plus","value":"Operation::Plus","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Add the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Add the top two values on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":706966,"byte_end":707006,"line_start":80,"line_end":80,"column_start":5,"column_end":45}}]},{"kind":"StructVariant","id":{"krate":0,"index":7764},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":707079,"byte_end":707091,"line_start":83,"line_end":83,"column_start":5,"column_end":17},"name":"PlusConstant","qualname":"::read::op::Operation::PlusConstant","value":"Operation::PlusConstant { value }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Add a constant to the topmost value on the stack.\n","sig":null,"attributes":[{"value":"/ Add a constant to the topmost value on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":707021,"byte_end":707074,"line_start":82,"line_end":82,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7766},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":707283,"byte_end":707286,"line_start":89,"line_end":89,"column_start":5,"column_end":8},"name":"Shl","qualname":"::read::op::Operation::Shl","value":"Operation::Shl","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Logical left shift of the 2nd value on the stack by the number\n of bits given by the topmost value on the stack.\n","sig":null,"attributes":[{"value":"/ Logical left shift of the 2nd value on the stack by the number","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":707155,"byte_end":707221,"line_start":87,"line_end":87,"column_start":5,"column_end":71}},{"value":"/ of bits given by the topmost value on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":707226,"byte_end":707278,"line_start":88,"line_end":88,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7768},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":707413,"byte_end":707416,"line_start":92,"line_end":92,"column_start":5,"column_end":8},"name":"Shr","qualname":"::read::op::Operation::Shr","value":"Operation::Shr","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Right shift of the 2nd value on the stack by the number of\n bits given by the topmost value on the stack.\n","sig":null,"attributes":[{"value":"/ Right shift of the 2nd value on the stack by the number of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":707292,"byte_end":707354,"line_start":90,"line_end":90,"column_start":5,"column_end":67}},{"value":"/ bits given by the topmost value on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":707359,"byte_end":707408,"line_start":91,"line_end":91,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7770},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":707553,"byte_end":707557,"line_start":95,"line_end":95,"column_start":5,"column_end":9},"name":"Shra","qualname":"::read::op::Operation::Shra","value":"Operation::Shra","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Arithmetic left shift of the 2nd value on the stack by the\n number of bits given by the topmost value on the stack.\n","sig":null,"attributes":[{"value":"/ Arithmetic left shift of the 2nd value on the stack by the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":707422,"byte_end":707484,"line_start":93,"line_end":93,"column_start":5,"column_end":67}},{"value":"/ number of bits given by the topmost value on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":707489,"byte_end":707548,"line_start":94,"line_end":94,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7772},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":707621,"byte_end":707624,"line_start":97,"line_end":97,"column_start":5,"column_end":8},"name":"Xor","qualname":"::read::op::Operation::Xor","value":"Operation::Xor","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Bitwise `xor` of the top two values on the stack.\n","sig":null,"attributes":[{"value":"/ Bitwise `xor` of the top two values on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":707563,"byte_end":707616,"line_start":96,"line_end":96,"column_start":5,"column_end":58}}]},{"kind":"StructVariant","id":{"krate":0,"index":7774},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":707700,"byte_end":707703,"line_start":99,"line_end":99,"column_start":5,"column_end":8},"name":"Bra","qualname":"::read::op::Operation::Bra","value":"Operation::Bra { target }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Branch to the target location if the top of stack is nonzero.\n","sig":null,"attributes":[{"value":"/ Branch to the target location if the top of stack is nonzero.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":707630,"byte_end":707695,"line_start":98,"line_end":98,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7776},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":707849,"byte_end":707851,"line_start":104,"line_end":104,"column_start":5,"column_end":7},"name":"Eq","qualname":"::read::op::Operation::Eq","value":"Operation::Eq","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Compare the top two stack values for equality.\n","sig":null,"attributes":[{"value":"/ Compare the top two stack values for equality.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":707794,"byte_end":707844,"line_start":103,"line_end":103,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7778},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":707910,"byte_end":707912,"line_start":106,"line_end":106,"column_start":5,"column_end":7},"name":"Ge","qualname":"::read::op::Operation::Ge","value":"Operation::Ge","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Compare the top two stack values using `>=`.\n","sig":null,"attributes":[{"value":"/ Compare the top two stack values using `>=`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":707857,"byte_end":707905,"line_start":105,"line_end":105,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7780},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":707970,"byte_end":707972,"line_start":108,"line_end":108,"column_start":5,"column_end":7},"name":"Gt","qualname":"::read::op::Operation::Gt","value":"Operation::Gt","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Compare the top two stack values using `>`.\n","sig":null,"attributes":[{"value":"/ Compare the top two stack values using `>`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":707918,"byte_end":707965,"line_start":107,"line_end":107,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7782},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":708031,"byte_end":708033,"line_start":110,"line_end":110,"column_start":5,"column_end":7},"name":"Le","qualname":"::read::op::Operation::Le","value":"Operation::Le","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Compare the top two stack values using `<=`.\n","sig":null,"attributes":[{"value":"/ Compare the top two stack values using `<=`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":707978,"byte_end":708026,"line_start":109,"line_end":109,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7784},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":708091,"byte_end":708093,"line_start":112,"line_end":112,"column_start":5,"column_end":7},"name":"Lt","qualname":"::read::op::Operation::Lt","value":"Operation::Lt","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Compare the top two stack values using `<`.\n","sig":null,"attributes":[{"value":"/ Compare the top two stack values using `<`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":708039,"byte_end":708086,"line_start":111,"line_end":111,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7786},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":708152,"byte_end":708154,"line_start":114,"line_end":114,"column_start":5,"column_end":7},"name":"Ne","qualname":"::read::op::Operation::Ne","value":"Operation::Ne","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Compare the top two stack values using `!=`.\n","sig":null,"attributes":[{"value":"/ Compare the top two stack values using `!=`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":708099,"byte_end":708147,"line_start":113,"line_end":113,"column_start":5,"column_end":53}}]},{"kind":"StructVariant","id":{"krate":0,"index":7788},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":708213,"byte_end":708217,"line_start":116,"line_end":116,"column_start":5,"column_end":9},"name":"Skip","qualname":"::read::op::Operation::Skip","value":"Operation::Skip { target }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Unconditional branch to the target location.\n","sig":null,"attributes":[{"value":"/ Unconditional branch to the target location.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":708160,"byte_end":708208,"line_start":115,"line_end":115,"column_start":5,"column_end":53}}]},{"kind":"StructVariant","id":{"krate":0,"index":7790},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":708408,"byte_end":708424,"line_start":122,"line_end":122,"column_start":5,"column_end":21},"name":"UnsignedConstant","qualname":"::read::op::Operation::UnsignedConstant","value":"Operation::UnsignedConstant { value }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Push an unsigned constant value on the stack.  This handles multiple\n DWARF opcodes.\n","sig":null,"attributes":[{"value":"/ Push an unsigned constant value on the stack.  This handles multiple","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":708308,"byte_end":708380,"line_start":120,"line_end":120,"column_start":5,"column_end":77}},{"value":"/ DWARF opcodes.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":708385,"byte_end":708403,"line_start":121,"line_end":121,"column_start":5,"column_end":23}}]},{"kind":"StructVariant","id":{"krate":0,"index":7792},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":708586,"byte_end":708600,"line_start":128,"line_end":128,"column_start":5,"column_end":19},"name":"SignedConstant","qualname":"::read::op::Operation::SignedConstant","value":"Operation::SignedConstant { value }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Push a signed constant value on the stack.  This handles multiple\n DWARF opcodes.\n","sig":null,"attributes":[{"value":"/ Push a signed constant value on the stack.  This handles multiple","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":708489,"byte_end":708558,"line_start":126,"line_end":126,"column_start":5,"column_end":74}},{"value":"/ DWARF opcodes.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":708563,"byte_end":708581,"line_start":127,"line_end":127,"column_start":5,"column_end":23}}]},{"kind":"StructVariant","id":{"krate":0,"index":7794},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":708786,"byte_end":708794,"line_start":135,"line_end":135,"column_start":5,"column_end":13},"name":"Register","qualname":"::read::op::Operation::Register","value":"Operation::Register { register }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Indicate that this piece's location is in the given register.","sig":null,"attributes":[{"value":"/ Indicate that this piece's location is in the given register.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":708665,"byte_end":708730,"line_start":132,"line_end":132,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":708735,"byte_end":708738,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ Completes the piece or expression.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":708743,"byte_end":708781,"line_start":134,"line_end":134,"column_start":5,"column_end":43}}]},{"kind":"StructVariant","id":{"krate":0,"index":7796},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":708985,"byte_end":708999,"line_start":141,"line_end":141,"column_start":5,"column_end":19},"name":"RegisterOffset","qualname":"::read::op::Operation::RegisterOffset","value":"Operation::RegisterOffset { register, offset, base_type }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Find the value of the given register, add the offset, and then\n push the resulting sum on the stack.\n","sig":null,"attributes":[{"value":"/ Find the value of the given register, add the offset, and then","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":708869,"byte_end":708935,"line_start":139,"line_end":139,"column_start":5,"column_end":71}},{"value":"/ push the resulting sum on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":708940,"byte_end":708980,"line_start":140,"line_end":140,"column_start":5,"column_end":45}}]},{"kind":"StructVariant","id":{"krate":0,"index":7800},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":709371,"byte_end":709382,"line_start":151,"line_end":151,"column_start":5,"column_end":16},"name":"FrameOffset","qualname":"::read::op::Operation::FrameOffset","value":"Operation::FrameOffset { offset }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Compute the frame base (using `DW_AT_frame_base`), add the\n given offset, and then push the resulting sum on the stack.\n","sig":null,"attributes":[{"value":"/ Compute the frame base (using `DW_AT_frame_base`), add the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":709236,"byte_end":709298,"line_start":149,"line_end":149,"column_start":5,"column_end":67}},{"value":"/ given offset, and then push the resulting sum on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":709303,"byte_end":709366,"line_start":150,"line_end":150,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7802},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":709470,"byte_end":709473,"line_start":156,"line_end":156,"column_start":5,"column_end":8},"name":"Nop","qualname":"::read::op::Operation::Nop","value":"Operation::Nop","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" No operation.\n","sig":null,"attributes":[{"value":"/ No operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":709448,"byte_end":709465,"line_start":155,"line_end":155,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7804},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":709525,"byte_end":709542,"line_start":158,"line_end":158,"column_start":5,"column_end":22},"name":"PushObjectAddress","qualname":"::read::op::Operation::PushObjectAddress","value":"Operation::PushObjectAddress","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Push the object address on the stack.\n","sig":null,"attributes":[{"value":"/ Push the object address on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":709479,"byte_end":709520,"line_start":157,"line_end":157,"column_start":5,"column_end":46}}]},{"kind":"StructVariant","id":{"krate":0,"index":7806},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":709697,"byte_end":709701,"line_start":162,"line_end":162,"column_start":5,"column_end":9},"name":"Call","qualname":"::read::op::Operation::Call","value":"Operation::Call { offset }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Evaluate a DWARF expression as a subroutine.  The expression\n comes from the `DW_AT_location` attribute of the indicated\n DIE.\n","sig":null,"attributes":[{"value":"/ Evaluate a DWARF expression as a subroutine.  The expression","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":709548,"byte_end":709612,"line_start":159,"line_end":159,"column_start":5,"column_end":69}},{"value":"/ comes from the `DW_AT_location` attribute of the indicated","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":709617,"byte_end":709679,"line_start":160,"line_end":160,"column_start":5,"column_end":67}},{"value":"/ DIE.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":709684,"byte_end":709692,"line_start":161,"line_end":161,"column_start":5,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7808},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":709870,"byte_end":709873,"line_start":168,"line_end":168,"column_start":5,"column_end":8},"name":"TLS","qualname":"::read::op::Operation::TLS","value":"Operation::TLS","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Compute the address of a thread-local variable and push it on\n the stack.\n","sig":null,"attributes":[{"value":"/ Compute the address of a thread-local variable and push it on","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":709781,"byte_end":709846,"line_start":166,"line_end":166,"column_start":5,"column_end":70}},{"value":"/ the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":709851,"byte_end":709865,"line_start":167,"line_end":167,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7810},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":709940,"byte_end":709952,"line_start":170,"line_end":170,"column_start":5,"column_end":17},"name":"CallFrameCFA","qualname":"::read::op::Operation::CallFrameCFA","value":"Operation::CallFrameCFA","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Compute the call frame CFA and push it on the stack.\n","sig":null,"attributes":[{"value":"/ Compute the call frame CFA and push it on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":709879,"byte_end":709935,"line_start":169,"line_end":169,"column_start":5,"column_end":61}}]},{"kind":"StructVariant","id":{"krate":0,"index":7812},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":709985,"byte_end":709990,"line_start":172,"line_end":172,"column_start":5,"column_end":10},"name":"Piece","qualname":"::read::op::Operation::Piece","value":"Operation::Piece { size_in_bits, bit_offset }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Terminate a piece.\n","sig":null,"attributes":[{"value":"/ Terminate a piece.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":709958,"byte_end":709980,"line_start":171,"line_end":171,"column_start":5,"column_end":27}}]},{"kind":"StructVariant","id":{"krate":0,"index":7815},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":710442,"byte_end":710455,"line_start":184,"line_end":184,"column_start":5,"column_end":18},"name":"ImplicitValue","qualname":"::read::op::Operation::ImplicitValue","value":"Operation::ImplicitValue { data }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" The object has no location, but has a known constant value.","sig":null,"attributes":[{"value":"/ The object has no location, but has a known constant value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":710280,"byte_end":710343,"line_start":180,"line_end":180,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":710348,"byte_end":710351,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_implicit_value`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":710356,"byte_end":710394,"line_start":182,"line_end":182,"column_start":5,"column_end":43}},{"value":"/ Completes the piece or expression.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":710399,"byte_end":710437,"line_start":183,"line_end":183,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7817},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":710694,"byte_end":710704,"line_start":192,"line_end":192,"column_start":5,"column_end":15},"name":"StackValue","qualname":"::read::op::Operation::StackValue","value":"Operation::StackValue","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" The object has no location, but its value is at the top of the stack.","sig":null,"attributes":[{"value":"/ The object has no location, but its value is at the top of the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":710525,"byte_end":710598,"line_start":188,"line_end":188,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":710603,"byte_end":710606,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_stack_value`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":710611,"byte_end":710646,"line_start":190,"line_end":190,"column_start":5,"column_end":40}},{"value":"/ Completes the piece or expression.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":710651,"byte_end":710689,"line_start":191,"line_end":191,"column_start":5,"column_end":43}}]},{"kind":"StructVariant","id":{"krate":0,"index":7819},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":710931,"byte_end":710946,"line_start":198,"line_end":198,"column_start":5,"column_end":20},"name":"ImplicitPointer","qualname":"::read::op::Operation::ImplicitPointer","value":"Operation::ImplicitPointer { value, byte_offset }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" The object is a pointer to a value which has no actual location,\n such as an implicit value or a stack value.","sig":null,"attributes":[{"value":"/ The object is a pointer to a value which has no actual location,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":710710,"byte_end":710778,"line_start":193,"line_end":193,"column_start":5,"column_end":73}},{"value":"/ such as an implicit value or a stack value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":710783,"byte_end":710830,"line_start":194,"line_end":194,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":710835,"byte_end":710838,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_implicit_pointer`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":710843,"byte_end":710883,"line_start":196,"line_end":196,"column_start":5,"column_end":45}},{"value":"/ Completes the piece or expression.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":710888,"byte_end":710926,"line_start":197,"line_end":197,"column_start":5,"column_end":43}}]},{"kind":"StructVariant","id":{"krate":0,"index":7822},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":711340,"byte_end":711350,"line_start":207,"line_end":207,"column_start":5,"column_end":15},"name":"EntryValue","qualname":"::read::op::Operation::EntryValue","value":"Operation::EntryValue { expression }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Evaluate an expression at the entry to the current subprogram, and push it on the stack.","sig":null,"attributes":[{"value":"/ Evaluate an expression at the entry to the current subprogram, and push it on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":711195,"byte_end":711287,"line_start":204,"line_end":204,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":711292,"byte_end":711295,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_entry_value`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":711300,"byte_end":711335,"line_start":206,"line_end":206,"column_start":5,"column_end":40}}]},{"kind":"StructVariant","id":{"krate":0,"index":7824},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":711758,"byte_end":711770,"line_start":218,"line_end":218,"column_start":5,"column_end":17},"name":"ParameterRef","qualname":"::read::op::Operation::ParameterRef","value":"Operation::ParameterRef { offset }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" This represents a parameter that was optimized out.","sig":null,"attributes":[{"value":"/ This represents a parameter that was optimized out.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":711431,"byte_end":711486,"line_start":211,"line_end":211,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":711491,"byte_end":711494,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ The offset points to the definition of the parameter, and is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":711499,"byte_end":711563,"line_start":213,"line_end":213,"column_start":5,"column_end":69}},{"value":"/ matched to the `DW_TAG_GNU_call_site_parameter` in the caller that also","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":711568,"byte_end":711643,"line_start":214,"line_end":214,"column_start":5,"column_end":80}},{"value":"/ points to the same definition of the parameter.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":711648,"byte_end":711699,"line_start":215,"line_end":215,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":711704,"byte_end":711707,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_GNU_parameter_ref`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":711712,"byte_end":711753,"line_start":217,"line_end":217,"column_start":5,"column_end":46}}]},{"kind":"StructVariant","id":{"krate":0,"index":7826},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":711955,"byte_end":711962,"line_start":225,"line_end":225,"column_start":5,"column_end":12},"name":"Address","qualname":"::read::op::Operation::Address","value":"Operation::Address { address }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Relocate the address if needed, and push it on the stack.","sig":null,"attributes":[{"value":"/ Relocate the address if needed, and push it on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":711848,"byte_end":711909,"line_start":222,"line_end":222,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":711914,"byte_end":711917,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_addr`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":711922,"byte_end":711950,"line_start":224,"line_end":224,"column_start":5,"column_end":33}}]},{"kind":"StructVariant","id":{"krate":0,"index":7828},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":712198,"byte_end":712210,"line_start":233,"line_end":233,"column_start":5,"column_end":17},"name":"AddressIndex","qualname":"::read::op::Operation::AddressIndex","value":"Operation::AddressIndex { index }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Read the address at the given index in `.debug_addr, relocate the address if needed,\n and push it on the stack.","sig":null,"attributes":[{"value":"/ Read the address at the given index in `.debug_addr, relocate the address if needed,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":712029,"byte_end":712117,"line_start":229,"line_end":229,"column_start":5,"column_end":93}},{"value":"/ and push it on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":712122,"byte_end":712151,"line_start":230,"line_end":230,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":712156,"byte_end":712159,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_addrx`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":712164,"byte_end":712193,"line_start":232,"line_end":232,"column_start":5,"column_end":34}}]},{"kind":"StructVariant","id":{"krate":0,"index":7830},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":712485,"byte_end":712498,"line_start":241,"line_end":241,"column_start":5,"column_end":18},"name":"ConstantIndex","qualname":"::read::op::Operation::ConstantIndex","value":"Operation::ConstantIndex { index }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Read the address at the given index in `.debug_addr, and push it on the stack.\n Do not relocate the address.","sig":null,"attributes":[{"value":"/ Read the address at the given index in `.debug_addr, and push it on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":712318,"byte_end":712400,"line_start":237,"line_end":237,"column_start":5,"column_end":87}},{"value":"/ Do not relocate the address.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":712405,"byte_end":712437,"line_start":238,"line_end":238,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":712442,"byte_end":712445,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_constx`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":712450,"byte_end":712480,"line_start":240,"line_end":240,"column_start":5,"column_end":35}}]},{"kind":"StructVariant","id":{"krate":0,"index":7832},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":712744,"byte_end":712756,"line_start":248,"line_end":248,"column_start":5,"column_end":17},"name":"TypedLiteral","qualname":"::read::op::Operation::TypedLiteral","value":"Operation::TypedLiteral { base_type, value }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Interpret the value bytes as a constant of a given type, and push it on the stack.","sig":null,"attributes":[{"value":"/ Interpret the value bytes as a constant of a given type, and push it on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":712606,"byte_end":712692,"line_start":245,"line_end":245,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":712697,"byte_end":712700,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_const_type`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":712705,"byte_end":712739,"line_start":247,"line_end":247,"column_start":5,"column_end":39}}]},{"kind":"StructVariant","id":{"krate":0,"index":7835},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":713029,"byte_end":713036,"line_start":257,"line_end":257,"column_start":5,"column_end":12},"name":"Convert","qualname":"::read::op::Operation::Convert","value":"Operation::Convert { base_type }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Pop the top stack entry, convert it to a different type, and push it on the stack.","sig":null,"attributes":[{"value":"/ Pop the top stack entry, convert it to a different type, and push it on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":712894,"byte_end":712980,"line_start":254,"line_end":254,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":712985,"byte_end":712988,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_convert`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":712993,"byte_end":713024,"line_start":256,"line_end":256,"column_start":5,"column_end":36}}]},{"kind":"StructVariant","id":{"krate":0,"index":7837},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":713297,"byte_end":713308,"line_start":265,"line_end":265,"column_start":5,"column_end":16},"name":"Reinterpret","qualname":"::read::op::Operation::Reinterpret","value":"Operation::Reinterpret { base_type }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" Pop the top stack entry, reinterpret the bits in its value as a different type,\n and push it on the stack.","sig":null,"attributes":[{"value":"/ Pop the top stack entry, reinterpret the bits in its value as a different type,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":713127,"byte_end":713210,"line_start":261,"line_end":261,"column_start":5,"column_end":88}},{"value":"/ and push it on the stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":713215,"byte_end":713244,"line_start":262,"line_end":262,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":713249,"byte_end":713252,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_reinterpret`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":713257,"byte_end":713292,"line_start":264,"line_end":264,"column_start":5,"column_end":40}}]},{"kind":"StructVariant","id":{"krate":0,"index":7839},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":713563,"byte_end":713572,"line_start":273,"line_end":273,"column_start":5,"column_end":14},"name":"WasmLocal","qualname":"::read::op::Operation::WasmLocal","value":"Operation::WasmLocal { index }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" The index of a local in the currently executing function.","sig":null,"attributes":[{"value":"/ The index of a local in the currently executing function.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":713399,"byte_end":713460,"line_start":269,"line_end":269,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":713465,"byte_end":713468,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_WASM_location 0x00`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":713473,"byte_end":713515,"line_start":271,"line_end":271,"column_start":5,"column_end":47}},{"value":"/ Completes the piece or expression.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":713520,"byte_end":713558,"line_start":272,"line_end":272,"column_start":5,"column_end":43}}]},{"kind":"StructVariant","id":{"krate":0,"index":7841},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":713801,"byte_end":713811,"line_start":281,"line_end":281,"column_start":5,"column_end":15},"name":"WasmGlobal","qualname":"::read::op::Operation::WasmGlobal","value":"Operation::WasmGlobal { index }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" The index of a global.","sig":null,"attributes":[{"value":"/ The index of a global.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":713642,"byte_end":713668,"line_start":277,"line_end":277,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":713673,"byte_end":713676,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_WASM_location 0x01` or `DW_OP_WASM_location 0x03`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":713681,"byte_end":713753,"line_start":279,"line_end":279,"column_start":5,"column_end":77}},{"value":"/ Completes the piece or expression.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":713758,"byte_end":713796,"line_start":280,"line_end":280,"column_start":5,"column_end":43}}]},{"kind":"StructVariant","id":{"krate":0,"index":7843},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":714031,"byte_end":714040,"line_start":289,"line_end":289,"column_start":5,"column_end":14},"name":"WasmStack","qualname":"::read::op::Operation::WasmStack","value":"Operation::WasmStack { index }","parent":{"krate":0,"index":7729},"children":[],"decl_id":null,"docs":" The index of an item on the operand stack.","sig":null,"attributes":[{"value":"/ The index of an item on the operand stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":713882,"byte_end":713928,"line_start":285,"line_end":285,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":713933,"byte_end":713936,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ Represents `DW_OP_WASM_location 0x02`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":713941,"byte_end":713983,"line_start":287,"line_end":287,"column_start":5,"column_end":47}},{"value":"/ Completes the piece or expression.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":713988,"byte_end":714026,"line_start":288,"line_end":288,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":7729},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":705514,"byte_end":705523,"line_start":34,"line_end":34,"column_start":10,"column_end":19},"name":"Operation","qualname":"::read::op::Operation","value":"pub enum Operation<R, Offset = <R as Reader>::Offset> where R: Reader<Offset =\n         Offset>, Offset: ReaderOffset {\n    Deref {\n        base_type: UnitOffset<Offset>,\n        size: u8,\n        space: bool,\n    },\n    Drop,\n    Pick {\n        index: u8,\n    },\n    Swap,\n    Rot,\n    Abs,\n    And,\n    Div,\n    Minus,\n    Mod,\n    Mul,\n    Neg,\n    Not,\n    Or,\n    Plus,\n    PlusConstant {\n        value: u64,\n    },\n    Shl,\n    Shr,\n    Shra,\n    Xor,\n    Bra {\n        target: i16,\n    },\n    Eq,\n    Ge,\n    Gt,\n    Le,\n    Lt,\n    Ne,\n    Skip {\n        target: i16,\n    },\n    UnsignedConstant {\n        value: u64,\n    },\n    SignedConstant {\n        value: i64,\n    },\n    Register {\n        register: Register,\n    },\n    RegisterOffset {\n        register: Register,\n        offset: i64,\n        base_type: UnitOffset<Offset>,\n    },\n    FrameOffset {\n        offset: i64,\n    },\n    Nop,\n    PushObjectAddress,\n    Call {\n        offset: DieReference<Offset>,\n    },\n    TLS,\n    CallFrameCFA,\n    Piece {\n        size_in_bits: u64,\n        bit_offset: Option<u64>,\n    },\n    ImplicitValue {\n        data: R,\n    },\n    StackValue,\n    ImplicitPointer {\n        value: DebugInfoOffset<Offset>,\n        byte_offset: i64,\n    },\n    EntryValue {\n        expression: R,\n    },\n    ParameterRef {\n        offset: UnitOffset<Offset>,\n    },\n    Address {\n        address: u64,\n    },\n    AddressIndex {\n        index: DebugAddrIndex<Offset>,\n    },\n    ConstantIndex {\n        index: DebugAddrIndex<Offset>,\n    },\n    TypedLiteral {\n        base_type: UnitOffset<Offset>,\n        value: R,\n    },\n    Convert {\n        base_type: UnitOffset<Offset>,\n    },\n    Reinterpret {\n        base_type: UnitOffset<Offset>,\n    },\n    WasmLocal {\n        index: u32,\n    },\n    WasmGlobal {\n        index: u32,\n    },\n    WasmStack {\n        index: u32,\n    },\n}","parent":null,"children":[{"krate":0,"index":7732},{"krate":0,"index":7736},{"krate":0,"index":7738},{"krate":0,"index":7740},{"krate":0,"index":7742},{"krate":0,"index":7744},{"krate":0,"index":7746},{"krate":0,"index":7748},{"krate":0,"index":7750},{"krate":0,"index":7752},{"krate":0,"index":7754},{"krate":0,"index":7756},{"krate":0,"index":7758},{"krate":0,"index":7760},{"krate":0,"index":7762},{"krate":0,"index":7764},{"krate":0,"index":7766},{"krate":0,"index":7768},{"krate":0,"index":7770},{"krate":0,"index":7772},{"krate":0,"index":7774},{"krate":0,"index":7776},{"krate":0,"index":7778},{"krate":0,"index":7780},{"krate":0,"index":7782},{"krate":0,"index":7784},{"krate":0,"index":7786},{"krate":0,"index":7788},{"krate":0,"index":7790},{"krate":0,"index":7792},{"krate":0,"index":7794},{"krate":0,"index":7796},{"krate":0,"index":7800},{"krate":0,"index":7802},{"krate":0,"index":7804},{"krate":0,"index":7806},{"krate":0,"index":7808},{"krate":0,"index":7810},{"krate":0,"index":7812},{"krate":0,"index":7815},{"krate":0,"index":7817},{"krate":0,"index":7819},{"krate":0,"index":7822},{"krate":0,"index":7824},{"krate":0,"index":7826},{"krate":0,"index":7828},{"krate":0,"index":7830},{"krate":0,"index":7832},{"krate":0,"index":7835},{"krate":0,"index":7837},{"krate":0,"index":7839},{"krate":0,"index":7841},{"krate":0,"index":7843}],"decl_id":null,"docs":" A single decoded DWARF expression operation.","sig":null,"attributes":[{"value":"/ A single decoded DWARF expression operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":704941,"byte_end":704989,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":704990,"byte_end":704993,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ DWARF expression evaluation is done in two parts: first the raw","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":704994,"byte_end":705061,"line_start":24,"line_end":24,"column_start":1,"column_end":68}},{"value":"/ bytes of the next part of the expression are decoded; and then the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":705062,"byte_end":705132,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/ decoded operation is evaluated.  This approach lets other","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":705133,"byte_end":705194,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/ consumers inspect the DWARF expression without reimplementing the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":705195,"byte_end":705264,"line_start":27,"line_end":27,"column_start":1,"column_end":70}},{"value":"/ decoding operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":705265,"byte_end":705288,"line_start":28,"line_end":28,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":705289,"byte_end":705292,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Multiple DWARF opcodes may decode into a single `Operation`.  For","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":705293,"byte_end":705362,"line_start":30,"line_end":30,"column_start":1,"column_end":70}},{"value":"/ example, both `DW_OP_deref` and `DW_OP_xderef` are represented","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":705363,"byte_end":705429,"line_start":31,"line_end":31,"column_start":1,"column_end":67}},{"value":"/ using `Operation::Deref`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":705430,"byte_end":705459,"line_start":32,"line_end":32,"column_start":1,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7889},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":714667,"byte_end":714672,"line_start":312,"line_end":312,"column_start":5,"column_end":10},"name":"Empty","qualname":"::read::op::Location::Empty","value":"Location::Empty","parent":{"krate":0,"index":7886},"children":[],"decl_id":null,"docs":" The piece is empty.  Ordinarily this means the piece has been\n optimized away.\n","sig":null,"attributes":[{"value":"/ The piece is empty.  Ordinarily this means the piece has been","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":714573,"byte_end":714638,"line_start":310,"line_end":310,"column_start":5,"column_end":70}},{"value":"/ optimized away.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":714643,"byte_end":714662,"line_start":311,"line_end":311,"column_start":5,"column_end":24}}]},{"kind":"StructVariant","id":{"krate":0,"index":7891},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":714720,"byte_end":714728,"line_start":314,"line_end":314,"column_start":5,"column_end":13},"name":"Register","qualname":"::read::op::Location::Register","value":"Location::Register { register }","parent":{"krate":0,"index":7886},"children":[],"decl_id":null,"docs":" The piece is found in a register.\n","sig":null,"attributes":[{"value":"/ The piece is found in a register.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":714678,"byte_end":714715,"line_start":313,"line_end":313,"column_start":5,"column_end":42}}]},{"kind":"StructVariant","id":{"krate":0,"index":7893},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":714841,"byte_end":714848,"line_start":319,"line_end":319,"column_start":5,"column_end":12},"name":"Address","qualname":"::read::op::Location::Address","value":"Location::Address { address }","parent":{"krate":0,"index":7886},"children":[],"decl_id":null,"docs":" The piece is found in memory.\n","sig":null,"attributes":[{"value":"/ The piece is found in memory.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":714803,"byte_end":714836,"line_start":318,"line_end":318,"column_start":5,"column_end":38}}]},{"kind":"StructVariant","id":{"krate":0,"index":7895},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":714967,"byte_end":714972,"line_start":324,"line_end":324,"column_start":5,"column_end":10},"name":"Value","qualname":"::read::op::Location::Value","value":"Location::Value { value }","parent":{"krate":0,"index":7886},"children":[],"decl_id":null,"docs":" The piece has no location but its value is known.\n","sig":null,"attributes":[{"value":"/ The piece has no location but its value is known.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":714909,"byte_end":714962,"line_start":323,"line_end":323,"column_start":5,"column_end":58}}]},{"kind":"StructVariant","id":{"krate":0,"index":7897},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":715088,"byte_end":715093,"line_start":329,"line_end":329,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::read::op::Location::Bytes","value":"Location::Bytes { value }","parent":{"krate":0,"index":7886},"children":[],"decl_id":null,"docs":" The piece is represented by some constant bytes.\n","sig":null,"attributes":[{"value":"/ The piece is represented by some constant bytes.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":715031,"byte_end":715083,"line_start":328,"line_end":328,"column_start":5,"column_end":57}}]},{"kind":"StructVariant","id":{"krate":0,"index":7899},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":715220,"byte_end":715235,"line_start":334,"line_end":334,"column_start":5,"column_end":20},"name":"ImplicitPointer","qualname":"::read::op::Location::ImplicitPointer","value":"Location::ImplicitPointer { value, byte_offset }","parent":{"krate":0,"index":7886},"children":[],"decl_id":null,"docs":" The piece is a pointer to a value which has no actual location.\n","sig":null,"attributes":[{"value":"/ The piece is a pointer to a value which has no actual location.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":715148,"byte_end":715215,"line_start":333,"line_end":333,"column_start":5,"column_end":72}}]},{"kind":"Enum","id":{"krate":0,"index":7886},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":714459,"byte_end":714467,"line_start":305,"line_end":305,"column_start":10,"column_end":18},"name":"Location","qualname":"::read::op::Location","value":"pub enum Location<R, Offset = <R as Reader>::Offset> where R: Reader<Offset =\n         Offset>, Offset: ReaderOffset {\n    Empty,\n    Register {\n        register: Register,\n    },\n    Address {\n        address: u64,\n    },\n    Value {\n        value: Value,\n    },\n    Bytes {\n        value: R,\n    },\n    ImplicitPointer {\n        value: DebugInfoOffset<Offset>,\n        byte_offset: i64,\n    },\n}","parent":null,"children":[{"krate":0,"index":7889},{"krate":0,"index":7891},{"krate":0,"index":7893},{"krate":0,"index":7895},{"krate":0,"index":7897},{"krate":0,"index":7899}],"decl_id":null,"docs":" A single location of a piece of the result of a DWARF expression.\n","sig":null,"attributes":[{"value":"/ A single location of a piece of the result of a DWARF expression.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":714339,"byte_end":714408,"line_start":303,"line_end":303,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2104},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":715639,"byte_end":715647,"line_start":348,"line_end":348,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Location<R, Offset>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if the piece is empty.\n","sig":null,"attributes":[{"value":"/ Return true if the piece is empty.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":715589,"byte_end":715627,"line_start":347,"line_end":347,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":7921},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":715898,"byte_end":715903,"line_start":359,"line_end":359,"column_start":12,"column_end":17},"name":"Piece","qualname":"::read::op::Piece","value":"Piece { size_in_bits, bit_offset, location }","parent":null,"children":[{"krate":0,"index":7924},{"krate":0,"index":7925},{"krate":0,"index":7926}],"decl_id":null,"docs":" The description of a single piece of the result of a DWARF\n expression.\n","sig":null,"attributes":[{"value":"/ The description of a single piece of the result of a DWARF","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":715767,"byte_end":715829,"line_start":356,"line_end":356,"column_start":1,"column_end":63}},{"value":"/ expression.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":715830,"byte_end":715845,"line_start":357,"line_end":357,"column_start":1,"column_end":16}}]},{"kind":"Field","id":{"krate":0,"index":7924},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":716144,"byte_end":716156,"line_start":366,"line_end":366,"column_start":9,"column_end":21},"name":"size_in_bits","qualname":"::read::op::Piece::size_in_bits","value":"core::option::Option<u64>","parent":{"krate":0,"index":7921},"children":[],"decl_id":null,"docs":" If given, the size of the piece in bits.  If `None`, there\n must be only one piece whose size is all of the object.\n","sig":null,"attributes":[{"value":"/ If given, the size of the piece in bits.  If `None`, there","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":716009,"byte_end":716071,"line_start":364,"line_end":364,"column_start":5,"column_end":67}},{"value":"/ must be only one piece whose size is all of the object.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":716076,"byte_end":716135,"line_start":365,"line_end":365,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":7925},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":716782,"byte_end":716792,"line_start":378,"line_end":378,"column_start":9,"column_end":19},"name":"bit_offset","qualname":"::read::op::Piece::bit_offset","value":"core::option::Option<u64>","parent":{"krate":0,"index":7921},"children":[],"decl_id":null,"docs":" If given, the bit offset of the piece within the location.\n If the location is a `Location::Register` or `Location::Value`,\n then this offset is from the least significant bit end of\n the register or value.\n If the location is a `Location::Address` then the offset uses\n the bit numbering and direction conventions of the language\n and target system.","sig":null,"attributes":[{"value":"/ If given, the bit offset of the piece within the location.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":716175,"byte_end":716237,"line_start":367,"line_end":367,"column_start":5,"column_end":67}},{"value":"/ If the location is a `Location::Register` or `Location::Value`,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":716242,"byte_end":716309,"line_start":368,"line_end":368,"column_start":5,"column_end":72}},{"value":"/ then this offset is from the least significant bit end of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":716314,"byte_end":716375,"line_start":369,"line_end":369,"column_start":5,"column_end":66}},{"value":"/ the register or value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":716380,"byte_end":716406,"line_start":370,"line_end":370,"column_start":5,"column_end":31}},{"value":"/ If the location is a `Location::Address` then the offset uses","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":716411,"byte_end":716476,"line_start":371,"line_end":371,"column_start":5,"column_end":70}},{"value":"/ the bit numbering and direction conventions of the language","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":716481,"byte_end":716544,"line_start":372,"line_end":372,"column_start":5,"column_end":68}},{"value":"/ and target system.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":716549,"byte_end":716571,"line_start":373,"line_end":373,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":716576,"byte_end":716579,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ If `None`, the piece starts at the location. If the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":716584,"byte_end":716639,"line_start":375,"line_end":375,"column_start":5,"column_end":60}},{"value":"/ location is a register whose size is larger than the piece,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":716644,"byte_end":716707,"line_start":376,"line_end":376,"column_start":5,"column_end":68}},{"value":"/ then placement within the register is defined by the ABI.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":716712,"byte_end":716773,"line_start":377,"line_end":377,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":7926},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":716856,"byte_end":716864,"line_start":380,"line_end":380,"column_start":9,"column_end":17},"name":"location","qualname":"::read::op::Piece::location","value":"read::op::Location<R, Offset>","parent":{"krate":0,"index":7921},"children":[],"decl_id":null,"docs":" Where this piece is to be found.\n","sig":null,"attributes":[{"value":"/ Where this piece is to be found.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":716811,"byte_end":716847,"line_start":379,"line_end":379,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2112},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":717903,"byte_end":717908,"line_start":413,"line_end":413,"column_start":12,"column_end":17},"name":"parse","qualname":"<Operation<R, Offset>>::parse","value":"pub fn parse(&mut R, Encoding) -> Result<Operation<R, Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a single DWARF expression operation.","sig":null,"attributes":[{"value":"/ Parse a single DWARF expression operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":717562,"byte_end":717608,"line_start":405,"line_end":405,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":717613,"byte_end":717616,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ This is useful when examining a DWARF expression for reasons other","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":717621,"byte_end":717691,"line_start":407,"line_end":407,"column_start":5,"column_end":75}},{"value":"/ than direct evaluation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":717696,"byte_end":717723,"line_start":408,"line_end":408,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":717728,"byte_end":717731,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ `bytes` points to a the operation to decode.  It should point into","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":717736,"byte_end":717806,"line_start":410,"line_end":410,"column_start":5,"column_end":75}},{"value":"/ the same array as `bytecode`, which should be the entire","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":717811,"byte_end":717871,"line_start":411,"line_end":411,"column_start":5,"column_end":65}},{"value":"/ expression.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":717876,"byte_end":717891,"line_start":412,"line_end":412,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7997},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":735262,"byte_end":735270,"line_start":844,"line_end":844,"column_start":5,"column_end":13},"name":"Complete","qualname":"::read::op::EvaluationResult::Complete","value":"EvaluationResult::Complete","parent":{"krate":0,"index":7995},"children":[],"decl_id":null,"docs":" The `Evaluation` is complete, and `Evaluation::result()` can be called.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` is complete, and `Evaluation::result()` can be called.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":735182,"byte_end":735257,"line_start":843,"line_end":843,"column_start":5,"column_end":80}}]},{"kind":"StructVariant","id":{"krate":0,"index":7999},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":735492,"byte_end":735506,"line_start":848,"line_end":848,"column_start":5,"column_end":19},"name":"RequiresMemory","qualname":"::read::op::EvaluationResult::RequiresMemory","value":"EvaluationResult::RequiresMemory { address, size, space, base_type }","parent":{"krate":0,"index":7995},"children":[],"decl_id":null,"docs":" The `Evaluation` needs a value from memory to proceed further.  Once the\n caller determines what value to provide it should resume the `Evaluation`\n by calling `Evaluation::resume_with_memory`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs a value from memory to proceed further.  Once the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":735276,"byte_end":735352,"line_start":845,"line_end":845,"column_start":5,"column_end":81}},{"value":"/ caller determines what value to provide it should resume the `Evaluation`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":735357,"byte_end":735434,"line_start":846,"line_end":846,"column_start":5,"column_end":82}},{"value":"/ by calling `Evaluation::resume_with_memory`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":735439,"byte_end":735487,"line_start":847,"line_end":847,"column_start":5,"column_end":53}}]},{"kind":"StructVariant","id":{"krate":0,"index":8004},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":736167,"byte_end":736183,"line_start":862,"line_end":862,"column_start":5,"column_end":21},"name":"RequiresRegister","qualname":"::read::op::EvaluationResult::RequiresRegister","value":"EvaluationResult::RequiresRegister { register, base_type }","parent":{"krate":0,"index":7995},"children":[],"decl_id":null,"docs":" The `Evaluation` needs a value from a register to proceed further.  Once\n the caller determines what value to provide it should resume the\n `Evaluation` by calling `Evaluation::resume_with_register`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs a value from a register to proceed further.  Once","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":735945,"byte_end":736021,"line_start":859,"line_end":859,"column_start":5,"column_end":81}},{"value":"/ the caller determines what value to provide it should resume the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":736026,"byte_end":736094,"line_start":860,"line_end":860,"column_start":5,"column_end":73}},{"value":"/ `Evaluation` by calling `Evaluation::resume_with_register`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":736099,"byte_end":736162,"line_start":861,"line_end":861,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8007},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":736747,"byte_end":736764,"line_start":873,"line_end":873,"column_start":5,"column_end":22},"name":"RequiresFrameBase","qualname":"::read::op::EvaluationResult::RequiresFrameBase","value":"EvaluationResult::RequiresFrameBase","parent":{"krate":0,"index":7995},"children":[],"decl_id":null,"docs":" The `Evaluation` needs the frame base address to proceed further.  Once\n the caller determines what value to provide it should resume the\n `Evaluation` by calling `Evaluation::resume_with_frame_base`.  The frame\n base address is the address produced by the location description in the\n `DW_AT_frame_base` attribute of the current function.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs the frame base address to proceed further.  Once","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":736371,"byte_end":736446,"line_start":868,"line_end":868,"column_start":5,"column_end":80}},{"value":"/ the caller determines what value to provide it should resume the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":736451,"byte_end":736519,"line_start":869,"line_end":869,"column_start":5,"column_end":73}},{"value":"/ `Evaluation` by calling `Evaluation::resume_with_frame_base`.  The frame","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":736524,"byte_end":736600,"line_start":870,"line_end":870,"column_start":5,"column_end":81}},{"value":"/ base address is the address produced by the location description in the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":736605,"byte_end":736680,"line_start":871,"line_end":871,"column_start":5,"column_end":80}},{"value":"/ `DW_AT_frame_base` attribute of the current function.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":736685,"byte_end":736742,"line_start":872,"line_end":872,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8009},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":736980,"byte_end":736991,"line_start":877,"line_end":877,"column_start":5,"column_end":16},"name":"RequiresTls","qualname":"::read::op::EvaluationResult::RequiresTls","value":"EvaluationResult::RequiresTls(u64)","parent":{"krate":0,"index":7995},"children":[],"decl_id":null,"docs":" The `Evaluation` needs a value from TLS to proceed further.  Once the\n caller determines what value to provide it should resume the\n `Evaluation` by calling `Evaluation::resume_with_tls`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs a value from TLS to proceed further.  Once the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":736770,"byte_end":736843,"line_start":874,"line_end":874,"column_start":5,"column_end":78}},{"value":"/ caller determines what value to provide it should resume the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":736848,"byte_end":736912,"line_start":875,"line_end":875,"column_start":5,"column_end":69}},{"value":"/ `Evaluation` by calling `Evaluation::resume_with_tls`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":736917,"byte_end":736975,"line_start":876,"line_end":876,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8012},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":737214,"byte_end":737234,"line_start":881,"line_end":881,"column_start":5,"column_end":25},"name":"RequiresCallFrameCfa","qualname":"::read::op::EvaluationResult::RequiresCallFrameCfa","value":"EvaluationResult::RequiresCallFrameCfa","parent":{"krate":0,"index":7995},"children":[],"decl_id":null,"docs":" The `Evaluation` needs the CFA to proceed further.  Once the caller\n determines what value to provide it should resume the `Evaluation` by\n calling `Evaluation::resume_with_call_frame_cfa`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs the CFA to proceed further.  Once the caller","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":737002,"byte_end":737073,"line_start":878,"line_end":878,"column_start":5,"column_end":76}},{"value":"/ determines what value to provide it should resume the `Evaluation` by","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":737078,"byte_end":737151,"line_start":879,"line_end":879,"column_start":5,"column_end":78}},{"value":"/ calling `Evaluation::resume_with_call_frame_cfa`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":737156,"byte_end":737209,"line_start":880,"line_end":880,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8014},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":737492,"byte_end":737510,"line_start":886,"line_end":886,"column_start":5,"column_end":23},"name":"RequiresAtLocation","qualname":"::read::op::EvaluationResult::RequiresAtLocation","value":"EvaluationResult::RequiresAtLocation(DieReference<R::Offset>)","parent":{"krate":0,"index":7995},"children":[],"decl_id":null,"docs":" The `Evaluation` needs the DWARF expression at the given location to\n proceed further.  Once the caller determines what value to provide it\n should resume the `Evaluation` by calling\n `Evaluation::resume_with_at_location`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs the DWARF expression at the given location to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":737240,"byte_end":737312,"line_start":882,"line_end":882,"column_start":5,"column_end":77}},{"value":"/ proceed further.  Once the caller determines what value to provide it","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":737317,"byte_end":737390,"line_start":883,"line_end":883,"column_start":5,"column_end":78}},{"value":"/ should resume the `Evaluation` by calling","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":737395,"byte_end":737440,"line_start":884,"line_end":884,"column_start":5,"column_end":50}},{"value":"/ `Evaluation::resume_with_at_location`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":737445,"byte_end":737487,"line_start":885,"line_end":885,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8017},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":737828,"byte_end":737846,"line_start":891,"line_end":891,"column_start":5,"column_end":23},"name":"RequiresEntryValue","qualname":"::read::op::EvaluationResult::RequiresEntryValue","value":"EvaluationResult::RequiresEntryValue(Expression<R>)","parent":{"krate":0,"index":7995},"children":[],"decl_id":null,"docs":" The `Evaluation` needs the value produced by evaluating a DWARF\n expression at the entry point of the current subprogram.  Once the\n caller determines what value to provide it should resume the\n `Evaluation` by calling `Evaluation::resume_with_entry_value`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs the value produced by evaluating a DWARF","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":737541,"byte_end":737608,"line_start":887,"line_end":887,"column_start":5,"column_end":72}},{"value":"/ expression at the entry point of the current subprogram.  Once the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":737613,"byte_end":737683,"line_start":888,"line_end":888,"column_start":5,"column_end":75}},{"value":"/ caller determines what value to provide it should resume the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":737688,"byte_end":737752,"line_start":889,"line_end":889,"column_start":5,"column_end":69}},{"value":"/ `Evaluation` by calling `Evaluation::resume_with_entry_value`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":737757,"byte_end":737823,"line_start":890,"line_end":890,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8020},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":738141,"byte_end":738161,"line_start":896,"line_end":896,"column_start":5,"column_end":25},"name":"RequiresParameterRef","qualname":"::read::op::EvaluationResult::RequiresParameterRef","value":"EvaluationResult::RequiresParameterRef(UnitOffset<R::Offset>)","parent":{"krate":0,"index":7995},"children":[],"decl_id":null,"docs":" The `Evaluation` needs the value of the parameter at the given location\n in the current function's caller.  Once the caller determines what value\n to provide it should resume the `Evaluation` by calling\n `Evaluation::resume_with_parameter_ref`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs the value of the parameter at the given location","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":737867,"byte_end":737942,"line_start":892,"line_end":892,"column_start":5,"column_end":80}},{"value":"/ in the current function's caller.  Once the caller determines what value","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":737947,"byte_end":738023,"line_start":893,"line_end":893,"column_start":5,"column_end":81}},{"value":"/ to provide it should resume the `Evaluation` by calling","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":738028,"byte_end":738087,"line_start":894,"line_end":894,"column_start":5,"column_end":64}},{"value":"/ `Evaluation::resume_with_parameter_ref`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":738092,"byte_end":738136,"line_start":895,"line_end":895,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8023},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":738423,"byte_end":738447,"line_start":900,"line_end":900,"column_start":5,"column_end":29},"name":"RequiresRelocatedAddress","qualname":"::read::op::EvaluationResult::RequiresRelocatedAddress","value":"EvaluationResult::RequiresRelocatedAddress(u64)","parent":{"krate":0,"index":7995},"children":[],"decl_id":null,"docs":" The `Evaluation` needs an address to be relocated to proceed further.\n Once the caller determines what value to provide it should resume the\n `Evaluation` by calling `Evaluation::resume_with_relocated_address`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs an address to be relocated to proceed further.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":738190,"byte_end":738263,"line_start":897,"line_end":897,"column_start":5,"column_end":78}},{"value":"/ Once the caller determines what value to provide it should resume the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":738268,"byte_end":738341,"line_start":898,"line_end":898,"column_start":5,"column_end":78}},{"value":"/ `Evaluation` by calling `Evaluation::resume_with_relocated_address`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":738346,"byte_end":738418,"line_start":899,"line_end":899,"column_start":5,"column_end":77}}]},{"kind":"StructVariant","id":{"krate":0,"index":8026},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":738737,"byte_end":738759,"line_start":905,"line_end":905,"column_start":5,"column_end":27},"name":"RequiresIndexedAddress","qualname":"::read::op::EvaluationResult::RequiresIndexedAddress","value":"EvaluationResult::RequiresIndexedAddress { index, relocate }","parent":{"krate":0,"index":7995},"children":[],"decl_id":null,"docs":" The `Evaluation` needs an address from the `.debug_addr` section.\n This address may also need to be relocated.\n Once the caller determines what value to provide it should resume the\n `Evaluation` by calling `Evaluation::resume_with_indexed_address`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs an address from the `.debug_addr` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":738458,"byte_end":738527,"line_start":901,"line_end":901,"column_start":5,"column_end":74}},{"value":"/ This address may also need to be relocated.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":738532,"byte_end":738579,"line_start":902,"line_end":902,"column_start":5,"column_end":52}},{"value":"/ Once the caller determines what value to provide it should resume the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":738584,"byte_end":738657,"line_start":903,"line_end":903,"column_start":5,"column_end":78}},{"value":"/ `Evaluation` by calling `Evaluation::resume_with_indexed_address`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":738662,"byte_end":738732,"line_start":904,"line_end":904,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8029},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":739287,"byte_end":739303,"line_start":916,"line_end":916,"column_start":5,"column_end":21},"name":"RequiresBaseType","qualname":"::read::op::EvaluationResult::RequiresBaseType","value":"EvaluationResult::RequiresBaseType(UnitOffset<R::Offset>)","parent":{"krate":0,"index":7995},"children":[],"decl_id":null,"docs":" The `Evaluation` needs the `ValueType` for the base type DIE at\n the give unit offset.  Once the caller determines what value to provide it\n should resume the `Evaluation` by calling\n `Evaluation::resume_with_base_type`.\n","sig":null,"attributes":[{"value":"/ The `Evaluation` needs the `ValueType` for the base type DIE at","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":739037,"byte_end":739104,"line_start":912,"line_end":912,"column_start":5,"column_end":72}},{"value":"/ the give unit offset.  Once the caller determines what value to provide it","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":739109,"byte_end":739187,"line_start":913,"line_end":913,"column_start":5,"column_end":83}},{"value":"/ should resume the `Evaluation` by calling","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":739192,"byte_end":739237,"line_start":914,"line_end":914,"column_start":5,"column_end":50}},{"value":"/ `Evaluation::resume_with_base_type`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":739242,"byte_end":739282,"line_start":915,"line_end":915,"column_start":5,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":7995},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":735148,"byte_end":735164,"line_start":842,"line_end":842,"column_start":10,"column_end":26},"name":"EvaluationResult","qualname":"::read::op::EvaluationResult","value":"pub enum EvaluationResult<R: Reader> {\n    Complete,\n    RequiresMemory {\n        address: u64,\n        size: u8,\n        space: Option<u64>,\n        base_type: UnitOffset<R::Offset>,\n    },\n    RequiresRegister {\n        register: Register,\n        base_type: UnitOffset<R::Offset>,\n    },\n    RequiresFrameBase,\n    RequiresTls(u64),\n    RequiresCallFrameCfa,\n    RequiresAtLocation(DieReference<R::Offset>),\n    RequiresEntryValue(Expression<R>),\n    RequiresParameterRef(UnitOffset<R::Offset>),\n    RequiresRelocatedAddress(u64),\n    RequiresIndexedAddress {\n        index: DebugAddrIndex<R::Offset>,\n        relocate: bool,\n    },\n    RequiresBaseType(UnitOffset<R::Offset>),\n}","parent":null,"children":[{"krate":0,"index":7997},{"krate":0,"index":7999},{"krate":0,"index":8004},{"krate":0,"index":8007},{"krate":0,"index":8009},{"krate":0,"index":8012},{"krate":0,"index":8014},{"krate":0,"index":8017},{"krate":0,"index":8020},{"krate":0,"index":8023},{"krate":0,"index":8026},{"krate":0,"index":8029}],"decl_id":null,"docs":" The state of an `Evaluation` after evaluating a DWARF expression.\n The evaluation is either `Complete`, or it requires more data\n to continue, as described by the variant.\n","sig":null,"attributes":[{"value":"/ The state of an `Evaluation` after evaluating a DWARF expression.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":734929,"byte_end":734998,"line_start":838,"line_end":838,"column_start":1,"column_end":70}},{"value":"/ The evaluation is either `Complete`, or it requires more data","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":734999,"byte_end":735064,"line_start":839,"line_end":839,"column_start":1,"column_end":66}},{"value":"/ to continue, as described by the variant.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":735065,"byte_end":735110,"line_start":840,"line_end":840,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":8041},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":739458,"byte_end":739468,"line_start":921,"line_end":921,"column_start":12,"column_end":22},"name":"Expression","qualname":"::read::op::Expression","value":"","parent":null,"children":[],"decl_id":null,"docs":" The bytecode for a DWARF expression or location description.\n","sig":null,"attributes":[{"value":"/ The bytecode for a DWARF expression or location description.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":739331,"byte_end":739395,"line_start":919,"line_end":919,"column_start":1,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":8044},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":739480,"byte_end":739485,"line_start":921,"line_end":921,"column_start":34,"column_end":39},"name":"0","qualname":"::read::op::Expression::0","value":"R","parent":{"krate":0,"index":8041},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2115},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":740368,"byte_end":740378,"line_start":944,"line_end":944,"column_start":12,"column_end":22},"name":"evaluation","qualname":"<Expression<R>>::evaluation","value":"pub fn evaluation(Self, Encoding) -> Evaluation<R>","parent":null,"children":[],"decl_id":null,"docs":" Create an evaluation for this expression.","sig":null,"attributes":[{"value":"/ Create an evaluation for this expression.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":739525,"byte_end":739570,"line_start":924,"line_end":924,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":739575,"byte_end":739578,"line_start":925,"line_end":925,"column_start":5,"column_end":8}},{"value":"/ The `encoding` is determined by the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":739583,"byte_end":739622,"line_start":926,"line_end":926,"column_start":5,"column_end":44}},{"value":"/ [`CompilationUnitHeader`](struct.CompilationUnitHeader.html) or","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":739627,"byte_end":739694,"line_start":927,"line_end":927,"column_start":5,"column_end":72}},{"value":"/ [`TypeUnitHeader`](struct.TypeUnitHeader.html) that this expression","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":739699,"byte_end":739770,"line_start":928,"line_end":928,"column_start":5,"column_end":76}},{"value":"/ relates to.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":739775,"byte_end":739790,"line_start":929,"line_end":929,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":739795,"byte_end":739798,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":739803,"byte_end":739817,"line_start":931,"line_end":931,"column_start":5,"column_end":19}},{"value":"/ ```rust,no_run","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":739822,"byte_end":739840,"line_start":932,"line_end":932,"column_start":5,"column_end":23}},{"value":"/ use gimli::Expression;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":739845,"byte_end":739871,"line_start":933,"line_end":933,"column_start":5,"column_end":31}},{"value":"/ # let endian = gimli::LittleEndian;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":739876,"byte_end":739915,"line_start":934,"line_end":934,"column_start":5,"column_end":44}},{"value":"/ # let debug_info = gimli::DebugInfo::from(gimli::EndianSlice::new(&[], endian));","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":739920,"byte_end":740004,"line_start":935,"line_end":935,"column_start":5,"column_end":89}},{"value":"/ # let unit = debug_info.units().next().unwrap().unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":740009,"byte_end":740070,"line_start":936,"line_end":936,"column_start":5,"column_end":66}},{"value":"/ # let bytecode = gimli::EndianSlice::new(&[], endian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":740075,"byte_end":740133,"line_start":937,"line_end":937,"column_start":5,"column_end":63}},{"value":"/ let expression = gimli::Expression(bytecode);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":740138,"byte_end":740187,"line_start":938,"line_end":938,"column_start":5,"column_end":54}},{"value":"/ let mut eval = expression.evaluation(unit.encoding());","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":740192,"byte_end":740250,"line_start":939,"line_end":939,"column_start":5,"column_end":63}},{"value":"/ let mut result = eval.evaluate().unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":740255,"byte_end":740301,"line_start":940,"line_end":940,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":740306,"byte_end":740313,"line_start":941,"line_end":941,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"read\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":740318,"byte_end":740342,"line_start":942,"line_end":942,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":740347,"byte_end":740356,"line_start":943,"line_end":943,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2116},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":740549,"byte_end":740559,"line_start":949,"line_end":949,"column_start":12,"column_end":22},"name":"operations","qualname":"<Expression<R>>::operations","value":"pub fn operations(Self, Encoding) -> OperationIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator for the operations in the expression.\n","sig":null,"attributes":[{"value":"/ Return an iterator for the operations in the expression.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":740477,"byte_end":740537,"line_start":948,"line_end":948,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":8068},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":740794,"byte_end":740807,"line_start":959,"line_end":959,"column_start":12,"column_end":25},"name":"OperationIter","qualname":"::read::op::OperationIter","value":"OperationIter {  }","parent":null,"children":[{"krate":0,"index":8070},{"krate":0,"index":8071}],"decl_id":null,"docs":" An iterator for the operations in an expression.\n","sig":null,"attributes":[{"value":"/ An iterator for the operations in an expression.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":740700,"byte_end":740752,"line_start":957,"line_end":957,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2119},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":740958,"byte_end":740962,"line_start":966,"line_end":966,"column_start":12,"column_end":16},"name":"next","qualname":"<OperationIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<Operation<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Read the next operation in an expression.\n","sig":null,"attributes":[{"value":"/ Read the next operation in an expression.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":740901,"byte_end":740946,"line_start":965,"line_end":965,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2120},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":741364,"byte_end":741375,"line_start":980,"line_end":980,"column_start":12,"column_end":23},"name":"offset_from","qualname":"<OperationIter<R>>::offset_from","value":"pub fn offset_from(&Self, &Expression<R>) -> R::Offset","parent":null,"children":[],"decl_id":null,"docs":" Return the current byte offset of the iterator.\n","sig":null,"attributes":[{"value":"/ Return the current byte offset of the iterator.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":741301,"byte_end":741352,"line_start":979,"line_end":979,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":2121},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":743097,"byte_end":743114,"line_start":1031,"line_end":1031,"column_start":11,"column_end":28},"name":"EvaluationStorage","qualname":"::read::op::EvaluationStorage","value":"EvaluationStorage<R: Reader>","parent":null,"children":[{"krate":0,"index":2123},{"krate":0,"index":2124},{"krate":0,"index":2125}],"decl_id":null,"docs":" Specification of what storage should be used for [`Evaluation`].","sig":null,"attributes":[{"value":"/ Specification of what storage should be used for [`Evaluation`].","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":741481,"byte_end":741549,"line_start":985,"line_end":985,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":741550,"byte_end":741553,"line_start":986,"line_end":986,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":741788,"byte_end":741791,"line_start":994,"line_end":994,"column_start":1,"column_end":4}},{"value":"/ If you need to avoid [`Evaluation`] from allocating memory, e.g. for signal safety,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":741792,"byte_end":741879,"line_start":995,"line_end":995,"column_start":1,"column_end":88}},{"value":"/ you can provide you own storage specification:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":741880,"byte_end":741930,"line_start":996,"line_end":996,"column_start":1,"column_end":51}},{"value":"/ ```rust,no_run","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":741931,"byte_end":741949,"line_start":997,"line_end":997,"column_start":1,"column_end":19}},{"value":"/ # use gimli::*;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":741950,"byte_end":741969,"line_start":998,"line_end":998,"column_start":1,"column_end":20}},{"value":"/ # let bytecode = EndianSlice::new(&[], LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":741970,"byte_end":742027,"line_start":999,"line_end":999,"column_start":1,"column_end":58}},{"value":"/ # let encoding = unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742028,"byte_end":742066,"line_start":1000,"line_end":1000,"column_start":1,"column_end":39}},{"value":"/ # let get_register_value = |_, _| Value::Generic(42);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742067,"byte_end":742124,"line_start":1001,"line_end":1001,"column_start":1,"column_end":58}},{"value":"/ # let get_frame_base = || 0xdeadbeef;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742125,"byte_end":742166,"line_start":1002,"line_end":1002,"column_start":1,"column_end":42}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742167,"byte_end":742172,"line_start":1003,"line_end":1003,"column_start":1,"column_end":6}},{"value":"/ struct StoreOnStack;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742173,"byte_end":742197,"line_start":1004,"line_end":1004,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742198,"byte_end":742201,"line_start":1005,"line_end":1005,"column_start":1,"column_end":4}},{"value":"/ impl<R: Reader> EvaluationStorage<R> for StoreOnStack {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742202,"byte_end":742261,"line_start":1006,"line_end":1006,"column_start":1,"column_end":60}},{"value":"/     type Stack = [Value; 64];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742262,"byte_end":742295,"line_start":1007,"line_end":1007,"column_start":1,"column_end":34}},{"value":"/     type ExpressionStack = [(R, R); 4];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742296,"byte_end":742339,"line_start":1008,"line_end":1008,"column_start":1,"column_end":44}},{"value":"/     type Result = [Piece<R>; 1];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742340,"byte_end":742376,"line_start":1009,"line_end":1009,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742377,"byte_end":742382,"line_start":1010,"line_end":1010,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742383,"byte_end":742386,"line_start":1011,"line_end":1011,"column_start":1,"column_end":4}},{"value":"/ let mut eval = Evaluation::<_, StoreOnStack>::new_in(bytecode, encoding);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742387,"byte_end":742464,"line_start":1012,"line_end":1012,"column_start":1,"column_end":78}},{"value":"/ let mut result = eval.evaluate().unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742465,"byte_end":742511,"line_start":1013,"line_end":1013,"column_start":1,"column_end":47}},{"value":"/ while result != EvaluationResult::Complete {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742512,"byte_end":742560,"line_start":1014,"line_end":1014,"column_start":1,"column_end":49}},{"value":"/   match result {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742561,"byte_end":742581,"line_start":1015,"line_end":1015,"column_start":1,"column_end":21}},{"value":"/     EvaluationResult::RequiresRegister { register, base_type } => {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742582,"byte_end":742653,"line_start":1016,"line_end":1016,"column_start":1,"column_end":72}},{"value":"/       let value = get_register_value(register, base_type);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742654,"byte_end":742716,"line_start":1017,"line_end":1017,"column_start":1,"column_end":63}},{"value":"/       result = eval.resume_with_register(value).unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742717,"byte_end":742778,"line_start":1018,"line_end":1018,"column_start":1,"column_end":62}},{"value":"/     },","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742779,"byte_end":742789,"line_start":1019,"line_end":1019,"column_start":1,"column_end":11}},{"value":"/     EvaluationResult::RequiresFrameBase => {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742790,"byte_end":742838,"line_start":1020,"line_end":1020,"column_start":1,"column_end":49}},{"value":"/       let frame_base = get_frame_base();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742839,"byte_end":742883,"line_start":1021,"line_end":1021,"column_start":1,"column_end":45}},{"value":"/       result = eval.resume_with_frame_base(frame_base).unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742884,"byte_end":742952,"line_start":1022,"line_end":1022,"column_start":1,"column_end":69}},{"value":"/     },","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742953,"byte_end":742963,"line_start":1023,"line_end":1023,"column_start":1,"column_end":11}},{"value":"/     _ => unimplemented!(),","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742964,"byte_end":742994,"line_start":1024,"line_end":1024,"column_start":1,"column_end":31}},{"value":"/   };","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":742995,"byte_end":743003,"line_start":1025,"line_end":1025,"column_start":1,"column_end":9}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":743004,"byte_end":743009,"line_start":1026,"line_end":1026,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":743010,"byte_end":743013,"line_start":1027,"line_end":1027,"column_start":1,"column_end":4}},{"value":"/ let result = eval.as_result();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":743014,"byte_end":743048,"line_start":1028,"line_end":1028,"column_start":1,"column_end":35}},{"value":"/ println!(\"{:?}\", result);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":743049,"byte_end":743078,"line_start":1029,"line_end":1029,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":743079,"byte_end":743086,"line_start":1030,"line_end":1030,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":2123},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":743188,"byte_end":743193,"line_start":1033,"line_end":1033,"column_start":10,"column_end":15},"name":"Stack","qualname":"::read::op::EvaluationStorage::Stack","value":"type Stack: ArrayLike<Item = Value>;","parent":{"krate":0,"index":2121},"children":[],"decl_id":null,"docs":" The storage used for the evaluation stack.\n","sig":null,"attributes":[{"value":"/ The storage used for the evaluation stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":743132,"byte_end":743178,"line_start":1032,"line_end":1032,"column_start":5,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":2124},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":743280,"byte_end":743295,"line_start":1035,"line_end":1035,"column_start":10,"column_end":25},"name":"ExpressionStack","qualname":"::read::op::EvaluationStorage::ExpressionStack","value":"type ExpressionStack: ArrayLike<Item = (R, R)>;","parent":{"krate":0,"index":2121},"children":[],"decl_id":null,"docs":" The storage used for the expression stack.\n","sig":null,"attributes":[{"value":"/ The storage used for the expression stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":743224,"byte_end":743270,"line_start":1034,"line_end":1034,"column_start":5,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":2125},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":743374,"byte_end":743380,"line_start":1037,"line_end":1037,"column_start":10,"column_end":16},"name":"Result","qualname":"::read::op::EvaluationStorage::Result","value":"type Result: ArrayLike<Item = Piece<R>>;","parent":{"krate":0,"index":2121},"children":[],"decl_id":null,"docs":" The storage used for the results.\n","sig":null,"attributes":[{"value":"/ The storage used for the results.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":743327,"byte_end":743364,"line_start":1036,"line_end":1036,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":8080},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":745620,"byte_end":745630,"line_start":1093,"line_end":1093,"column_start":12,"column_end":22},"name":"Evaluation","qualname":"::read::op::Evaluation","value":"Evaluation {  }","parent":null,"children":[{"krate":0,"index":8083},{"krate":0,"index":8084},{"krate":0,"index":8085},{"krate":0,"index":8086},{"krate":0,"index":8087},{"krate":0,"index":8088},{"krate":0,"index":8089},{"krate":0,"index":8090},{"krate":0,"index":8091},{"krate":0,"index":8092},{"krate":0,"index":8093}],"decl_id":null,"docs":" A DWARF expression evaluator.","sig":null,"attributes":[{"value":"/ A DWARF expression evaluator.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":743598,"byte_end":743631,"line_start":1047,"line_end":1047,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":743632,"byte_end":743635,"line_start":1048,"line_end":1048,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":743636,"byte_end":743647,"line_start":1049,"line_end":1049,"column_start":1,"column_end":12}},{"value":"/ A DWARF expression may require additional data to produce a final result,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":743648,"byte_end":743725,"line_start":1050,"line_end":1050,"column_start":1,"column_end":78}},{"value":"/ such as the value of a register or a memory location.  Once initial setup","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":743726,"byte_end":743803,"line_start":1051,"line_end":1051,"column_start":1,"column_end":78}},{"value":"/ is complete (i.e. `set_initial_value()`, `set_object_address()`) the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":743804,"byte_end":743876,"line_start":1052,"line_end":1052,"column_start":1,"column_end":73}},{"value":"/ consumer calls the `evaluate()` method.  That returns an `EvaluationResult`,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":743877,"byte_end":743957,"line_start":1053,"line_end":1053,"column_start":1,"column_end":81}},{"value":"/ which is either `EvaluationResult::Complete` or a value indicating what","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":743958,"byte_end":744033,"line_start":1054,"line_end":1054,"column_start":1,"column_end":76}},{"value":"/ data is needed to resume the `Evaluation`.  The consumer is responsible for","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":744034,"byte_end":744113,"line_start":1055,"line_end":1055,"column_start":1,"column_end":80}},{"value":"/ producing that data and resuming the computation with the correct method,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":744114,"byte_end":744191,"line_start":1056,"line_end":1056,"column_start":1,"column_end":78}},{"value":"/ as documented for `EvaluationResult`.  Only once an `EvaluationResult::Complete`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":744192,"byte_end":744276,"line_start":1057,"line_end":1057,"column_start":1,"column_end":85}},{"value":"/ is returned can the consumer call `result()`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":744277,"byte_end":744326,"line_start":1058,"line_end":1058,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":744327,"byte_end":744330,"line_start":1059,"line_end":1059,"column_start":1,"column_end":4}},{"value":"/ This design allows the consumer of `Evaluation` to decide how and when to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":744331,"byte_end":744408,"line_start":1060,"line_end":1060,"column_start":1,"column_end":78}},{"value":"/ produce the required data and resume the computation.  The `Evaluation` can","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":744409,"byte_end":744488,"line_start":1061,"line_end":1061,"column_start":1,"column_end":80}},{"value":"/ be driven synchronously (as shown below) or by some asynchronous mechanism","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":744489,"byte_end":744567,"line_start":1062,"line_end":1062,"column_start":1,"column_end":79}},{"value":"/ such as futures.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":744568,"byte_end":744588,"line_start":1063,"line_end":1063,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":744589,"byte_end":744592,"line_start":1064,"line_end":1064,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":744593,"byte_end":744607,"line_start":1065,"line_end":1065,"column_start":1,"column_end":15}},{"value":"/ ```rust,no_run","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":744608,"byte_end":744626,"line_start":1066,"line_end":1066,"column_start":1,"column_end":19}},{"value":"/ use gimli::{EndianSlice, Evaluation, EvaluationResult, Format, LittleEndian, Value};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":744627,"byte_end":744715,"line_start":1067,"line_end":1067,"column_start":1,"column_end":89}},{"value":"/ # let bytecode = EndianSlice::new(&[], LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":744716,"byte_end":744773,"line_start":1068,"line_end":1068,"column_start":1,"column_end":58}},{"value":"/ # let encoding = unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":744774,"byte_end":744812,"line_start":1069,"line_end":1069,"column_start":1,"column_end":39}},{"value":"/ # let get_register_value = |_, _| Value::Generic(42);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":744813,"byte_end":744870,"line_start":1070,"line_end":1070,"column_start":1,"column_end":58}},{"value":"/ # let get_frame_base = || 0xdeadbeef;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":744871,"byte_end":744912,"line_start":1071,"line_end":1071,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":744913,"byte_end":744916,"line_start":1072,"line_end":1072,"column_start":1,"column_end":4}},{"value":"/ let mut eval = Evaluation::new(bytecode, encoding);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":744917,"byte_end":744972,"line_start":1073,"line_end":1073,"column_start":1,"column_end":56}},{"value":"/ let mut result = eval.evaluate().unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":744973,"byte_end":745019,"line_start":1074,"line_end":1074,"column_start":1,"column_end":47}},{"value":"/ while result != EvaluationResult::Complete {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":745020,"byte_end":745068,"line_start":1075,"line_end":1075,"column_start":1,"column_end":49}},{"value":"/   match result {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":745069,"byte_end":745089,"line_start":1076,"line_end":1076,"column_start":1,"column_end":21}},{"value":"/     EvaluationResult::RequiresRegister { register, base_type } => {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":745090,"byte_end":745161,"line_start":1077,"line_end":1077,"column_start":1,"column_end":72}},{"value":"/       let value = get_register_value(register, base_type);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":745162,"byte_end":745224,"line_start":1078,"line_end":1078,"column_start":1,"column_end":63}},{"value":"/       result = eval.resume_with_register(value).unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":745225,"byte_end":745286,"line_start":1079,"line_end":1079,"column_start":1,"column_end":62}},{"value":"/     },","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":745287,"byte_end":745297,"line_start":1080,"line_end":1080,"column_start":1,"column_end":11}},{"value":"/     EvaluationResult::RequiresFrameBase => {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":745298,"byte_end":745346,"line_start":1081,"line_end":1081,"column_start":1,"column_end":49}},{"value":"/       let frame_base = get_frame_base();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":745347,"byte_end":745391,"line_start":1082,"line_end":1082,"column_start":1,"column_end":45}},{"value":"/       result = eval.resume_with_frame_base(frame_base).unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":745392,"byte_end":745460,"line_start":1083,"line_end":1083,"column_start":1,"column_end":69}},{"value":"/     },","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":745461,"byte_end":745471,"line_start":1084,"line_end":1084,"column_start":1,"column_end":11}},{"value":"/     _ => unimplemented!(),","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":745472,"byte_end":745502,"line_start":1085,"line_end":1085,"column_start":1,"column_end":31}},{"value":"/   };","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":745503,"byte_end":745511,"line_start":1086,"line_end":1086,"column_start":1,"column_end":9}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":745512,"byte_end":745517,"line_start":1087,"line_end":1087,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":745518,"byte_end":745521,"line_start":1088,"line_end":1088,"column_start":1,"column_end":4}},{"value":"/ let result = eval.result();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":745522,"byte_end":745553,"line_start":1089,"line_end":1089,"column_start":1,"column_end":32}},{"value":"/ println!(\"{:?}\", result);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":745554,"byte_end":745583,"line_start":1090,"line_end":1090,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":745584,"byte_end":745591,"line_start":1091,"line_end":1091,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2133},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":746620,"byte_end":746623,"line_start":1125,"line_end":1125,"column_start":12,"column_end":15},"name":"new","qualname":"<Evaluation<R>>::new","value":"pub fn new(R, Encoding) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new DWARF expression evaluator.","sig":null,"attributes":[{"value":"/ Create a new DWARF expression evaluator.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":746414,"byte_end":746458,"line_start":1121,"line_end":1121,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":746463,"byte_end":746466,"line_start":1122,"line_end":1122,"column_start":5,"column_end":8}},{"value":"/ The new evaluator is created without an initial value, without","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":746471,"byte_end":746537,"line_start":1123,"line_end":1123,"column_start":5,"column_end":71}},{"value":"/ an object address, and without a maximum number of iterations.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":746542,"byte_end":746608,"line_start":1124,"line_end":1124,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2134},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":746867,"byte_end":746873,"line_start":1133,"line_end":1133,"column_start":12,"column_end":18},"name":"result","qualname":"<Evaluation<R>>::result","value":"pub fn result(Self) -> Vec<Piece<R>>","parent":null,"children":[],"decl_id":null,"docs":" Get the result of this `Evaluation`.","sig":null,"attributes":[{"value":"/ Get the result of this `Evaluation`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":746719,"byte_end":746759,"line_start":1129,"line_end":1129,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":746764,"byte_end":746767,"line_start":1130,"line_end":1130,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":746772,"byte_end":746784,"line_start":1131,"line_end":1131,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` has not been driven to completion.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":746789,"byte_end":746855,"line_start":1132,"line_end":1132,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2138},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":747414,"byte_end":747420,"line_start":1148,"line_end":1148,"column_start":12,"column_end":18},"name":"new_in","qualname":"<Evaluation<R, S>>::new_in","value":"pub fn new_in(R, Encoding) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new DWARF expression evaluator.","sig":null,"attributes":[{"value":"/ Create a new DWARF expression evaluator.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":747208,"byte_end":747252,"line_start":1144,"line_end":1144,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":747257,"byte_end":747260,"line_start":1145,"line_end":1145,"column_start":5,"column_end":8}},{"value":"/ The new evaluator is created without an initial value, without","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":747265,"byte_end":747331,"line_start":1146,"line_end":1146,"column_start":5,"column_end":71}},{"value":"/ an object address, and without a maximum number of iterations.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":747336,"byte_end":747402,"line_start":1147,"line_end":1147,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2139},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":748585,"byte_end":748602,"line_start":1179,"line_end":1179,"column_start":12,"column_end":29},"name":"set_initial_value","qualname":"<Evaluation<R, S>>::set_initial_value","value":"pub fn set_initial_value(&mut Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" Set an initial value to be pushed on the DWARF expression\n evaluator's stack.  This can be used in cases like\n `DW_AT_vtable_elem_location`, which require a value on the\n stack before evaluation commences.  If no initial value is\n set, and the expression uses an opcode requiring the initial\n value, then evaluation will fail with an error.","sig":null,"attributes":[{"value":"/ Set an initial value to be pushed on the DWARF expression","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":748052,"byte_end":748113,"line_start":1169,"line_end":1169,"column_start":5,"column_end":66}},{"value":"/ evaluator's stack.  This can be used in cases like","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":748118,"byte_end":748172,"line_start":1170,"line_end":1170,"column_start":5,"column_end":59}},{"value":"/ `DW_AT_vtable_elem_location`, which require a value on the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":748177,"byte_end":748239,"line_start":1171,"line_end":1171,"column_start":5,"column_end":67}},{"value":"/ stack before evaluation commences.  If no initial value is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":748244,"byte_end":748306,"line_start":1172,"line_end":1172,"column_start":5,"column_end":67}},{"value":"/ set, and the expression uses an opcode requiring the initial","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":748311,"byte_end":748375,"line_start":1173,"line_end":1173,"column_start":5,"column_end":69}},{"value":"/ value, then evaluation will fail with an error.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":748380,"byte_end":748431,"line_start":1174,"line_end":1174,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":748436,"byte_end":748439,"line_start":1175,"line_end":1175,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":748444,"byte_end":748456,"line_start":1176,"line_end":1176,"column_start":5,"column_end":17}},{"value":"/ Panics if `set_initial_value()` has already been called, or if","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":748461,"byte_end":748527,"line_start":1177,"line_end":1177,"column_start":5,"column_end":71}},{"value":"/ `evaluate()` has already been called.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":748532,"byte_end":748573,"line_start":1178,"line_end":1178,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2140},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":749188,"byte_end":749206,"line_start":1194,"line_end":1194,"column_start":12,"column_end":30},"name":"set_object_address","qualname":"<Evaluation<R, S>>::set_object_address","value":"pub fn set_object_address(&mut Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" Set the enclosing object's address, as used by\n `DW_OP_push_object_address`.  If no object address is set, and\n the expression uses an opcode requiring the object address,\n then evaluation will fail with an error.\n","sig":null,"attributes":[{"value":"/ Set the enclosing object's address, as used by","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":748938,"byte_end":748988,"line_start":1190,"line_end":1190,"column_start":5,"column_end":55}},{"value":"/ `DW_OP_push_object_address`.  If no object address is set, and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":748993,"byte_end":749059,"line_start":1191,"line_end":1191,"column_start":5,"column_end":71}},{"value":"/ the expression uses an opcode requiring the object address,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":749064,"byte_end":749127,"line_start":1192,"line_end":1192,"column_start":5,"column_end":68}},{"value":"/ then evaluation will fail with an error.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":749132,"byte_end":749176,"line_start":1193,"line_end":1193,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2141},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":749812,"byte_end":749830,"line_start":1207,"line_end":1207,"column_start":12,"column_end":30},"name":"set_max_iterations","qualname":"<Evaluation<R, S>>::set_max_iterations","value":"pub fn set_max_iterations(&mut Self, u32)","parent":null,"children":[],"decl_id":null,"docs":" Set the maximum number of iterations to be allowed by the\n expression evaluator.","sig":null,"attributes":[{"value":"/ Set the maximum number of iterations to be allowed by the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":749286,"byte_end":749347,"line_start":1198,"line_end":1198,"column_start":5,"column_end":66}},{"value":"/ expression evaluator.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":749352,"byte_end":749377,"line_start":1199,"line_end":1199,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":749382,"byte_end":749385,"line_start":1200,"line_end":1200,"column_start":5,"column_end":8}},{"value":"/ An iteration corresponds approximately to the evaluation of a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":749390,"byte_end":749455,"line_start":1201,"line_end":1201,"column_start":5,"column_end":70}},{"value":"/ single operation in an expression (\"approximately\" because the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":749460,"byte_end":749526,"line_start":1202,"line_end":1202,"column_start":5,"column_end":71}},{"value":"/ implementation may allow two such operations in some cases).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":749531,"byte_end":749595,"line_start":1203,"line_end":1203,"column_start":5,"column_end":69}},{"value":"/ The default is not to have a maximum; once set, it's not","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":749600,"byte_end":749660,"line_start":1204,"line_end":1204,"column_start":5,"column_end":65}},{"value":"/ possible to go back to this default state.  This value can be","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":749665,"byte_end":749730,"line_start":1205,"line_end":1205,"column_start":5,"column_end":70}},{"value":"/ set to avoid denial of service attacks by bad DWARF bytecode.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":749735,"byte_end":749800,"line_start":1206,"line_end":1206,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2147},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":763700,"byte_end":763709,"line_start":1595,"line_end":1595,"column_start":12,"column_end":21},"name":"as_result","qualname":"<Evaluation<R, S>>::as_result","value":"pub fn as_result(&Self) -> &[Piece<R>]","parent":null,"children":[],"decl_id":null,"docs":" Get the result of this `Evaluation`.","sig":null,"attributes":[{"value":"/ Get the result of this `Evaluation`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":763552,"byte_end":763592,"line_start":1591,"line_end":1591,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":763597,"byte_end":763600,"line_start":1592,"line_end":1592,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":763605,"byte_end":763617,"line_start":1593,"line_end":1593,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` has not been driven to completion.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":763622,"byte_end":763688,"line_start":1594,"line_end":1594,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2148},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":764300,"byte_end":764308,"line_start":1609,"line_end":1609,"column_start":12,"column_end":20},"name":"evaluate","qualname":"<Evaluation<R, S>>::evaluate","value":"pub fn evaluate(&mut Self) -> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Evaluate a DWARF expression.  This method should only ever be called\n once.  If the returned `EvaluationResult` is not\n `EvaluationResult::Complete`, the caller should provide the required\n value and resume the evaluation by calling the appropriate resume_with\n method on `Evaluation`.\n","sig":null,"attributes":[{"value":"/ Evaluate a DWARF expression.  This method should only ever be called","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":763971,"byte_end":764043,"line_start":1604,"line_end":1604,"column_start":5,"column_end":77}},{"value":"/ once.  If the returned `EvaluationResult` is not","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":764048,"byte_end":764100,"line_start":1605,"line_end":1605,"column_start":5,"column_end":57}},{"value":"/ `EvaluationResult::Complete`, the caller should provide the required","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":764105,"byte_end":764177,"line_start":1606,"line_end":1606,"column_start":5,"column_end":77}},{"value":"/ value and resume the evaluation by calling the appropriate resume_with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":764182,"byte_end":764256,"line_start":1607,"line_end":1607,"column_start":5,"column_end":79}},{"value":"/ method on `Evaluation`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":764261,"byte_end":764288,"line_start":1608,"line_end":1608,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2149},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":765483,"byte_end":765501,"line_start":1639,"line_end":1639,"column_start":12,"column_end":30},"name":"resume_with_memory","qualname":"<Evaluation<R, S>>::resume_with_memory","value":"pub fn resume_with_memory(&mut Self, Value) -> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided memory `value`.  This will apply\n the provided memory value to the evaluation and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided memory `value`.  This will apply","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":765081,"byte_end":765159,"line_start":1632,"line_end":1632,"column_start":5,"column_end":83}},{"value":"/ the provided memory value to the evaluation and continue evaluating","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":765164,"byte_end":765235,"line_start":1633,"line_end":1633,"column_start":5,"column_end":76}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":765240,"byte_end":765313,"line_start":1634,"line_end":1634,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":765318,"byte_end":765345,"line_start":1635,"line_end":1635,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":765350,"byte_end":765353,"line_start":1636,"line_end":1636,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":765358,"byte_end":765370,"line_start":1637,"line_end":1637,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresMemory`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":765375,"byte_end":765471,"line_start":1638,"line_end":1638,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":2150},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":766382,"byte_end":766402,"line_start":1660,"line_end":1660,"column_start":12,"column_end":32},"name":"resume_with_register","qualname":"<Evaluation<R, S>>::resume_with_register","value":"pub fn resume_with_register(&mut Self, Value) -> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `register` value.  This will apply\n the provided register value to the evaluation and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `register` value.  This will apply","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":765974,"byte_end":766054,"line_start":1653,"line_end":1653,"column_start":5,"column_end":85}},{"value":"/ the provided register value to the evaluation and continue evaluating","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":766059,"byte_end":766132,"line_start":1654,"line_end":1654,"column_start":5,"column_end":78}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":766137,"byte_end":766210,"line_start":1655,"line_end":1655,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":766215,"byte_end":766242,"line_start":1656,"line_end":1656,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":766247,"byte_end":766250,"line_start":1657,"line_end":1657,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":766255,"byte_end":766267,"line_start":1658,"line_end":1658,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresRegister`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":766272,"byte_end":766370,"line_start":1659,"line_end":1659,"column_start":5,"column_end":103}}]},{"kind":"Method","id":{"krate":0,"index":2151},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":767445,"byte_end":767467,"line_start":1683,"line_end":1683,"column_start":12,"column_end":34},"name":"resume_with_frame_base","qualname":"<Evaluation<R, S>>::resume_with_frame_base","value":"pub fn resume_with_frame_base(&mut Self, u64) -> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `frame_base`.  This will\n apply the provided frame base value to the evaluation and continue\n evaluating opcodes until the evaluation is completed, reaches an error,\n or needs more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `frame_base`.  This will","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":767038,"byte_end":767108,"line_start":1676,"line_end":1676,"column_start":5,"column_end":75}},{"value":"/ apply the provided frame base value to the evaluation and continue","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":767113,"byte_end":767183,"line_start":1677,"line_end":1677,"column_start":5,"column_end":75}},{"value":"/ evaluating opcodes until the evaluation is completed, reaches an error,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":767188,"byte_end":767263,"line_start":1678,"line_end":1678,"column_start":5,"column_end":80}},{"value":"/ or needs more information again.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":767268,"byte_end":767304,"line_start":1679,"line_end":1679,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":767309,"byte_end":767312,"line_start":1680,"line_end":1680,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":767317,"byte_end":767329,"line_start":1681,"line_end":1681,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresFrameBase`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":767334,"byte_end":767433,"line_start":1682,"line_end":1682,"column_start":5,"column_end":104}}]},{"kind":"Method","id":{"krate":0,"index":2152},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":768402,"byte_end":768417,"line_start":1704,"line_end":1704,"column_start":12,"column_end":27},"name":"resume_with_tls","qualname":"<Evaluation<R, S>>::resume_with_tls","value":"pub fn resume_with_tls(&mut Self, u64) -> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `value`.  This will apply\n the provided TLS value to the evaluation and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `value`.  This will apply","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":768013,"byte_end":768084,"line_start":1697,"line_end":1697,"column_start":5,"column_end":76}},{"value":"/ the provided TLS value to the evaluation and continue evaluating","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":768089,"byte_end":768157,"line_start":1698,"line_end":1698,"column_start":5,"column_end":73}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":768162,"byte_end":768235,"line_start":1699,"line_end":1699,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":768240,"byte_end":768267,"line_start":1700,"line_end":1700,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":768272,"byte_end":768275,"line_start":1701,"line_end":1701,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":768280,"byte_end":768292,"line_start":1702,"line_end":1702,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresTls`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":768297,"byte_end":768390,"line_start":1703,"line_end":1703,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":2153},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":769291,"byte_end":769317,"line_start":1725,"line_end":1725,"column_start":12,"column_end":38},"name":"resume_with_call_frame_cfa","qualname":"<Evaluation<R, S>>::resume_with_call_frame_cfa","value":"pub fn resume_with_call_frame_cfa(&mut Self, u64)\n-> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `cfa`.  This will\n apply the provided CFA value to the evaluation and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `cfa`.  This will","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":768895,"byte_end":768958,"line_start":1718,"line_end":1718,"column_start":5,"column_end":68}},{"value":"/ apply the provided CFA value to the evaluation and continue evaluating","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":768963,"byte_end":769037,"line_start":1719,"line_end":1719,"column_start":5,"column_end":79}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":769042,"byte_end":769115,"line_start":1720,"line_end":1720,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":769120,"byte_end":769147,"line_start":1721,"line_end":1721,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":769152,"byte_end":769155,"line_start":1722,"line_end":1722,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":769160,"byte_end":769172,"line_start":1723,"line_end":1723,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresCallFrameCfa`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":769177,"byte_end":769279,"line_start":1724,"line_end":1724,"column_start":5,"column_end":107}}]},{"kind":"Method","id":{"krate":0,"index":2154},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":770196,"byte_end":770219,"line_start":1746,"line_end":1746,"column_start":12,"column_end":35},"name":"resume_with_at_location","qualname":"<Evaluation<R, S>>::resume_with_at_location","value":"pub fn resume_with_at_location(&mut Self, R) -> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `bytes`.  This will\n continue processing the evaluation with the new expression provided\n until the evaluation is completed, reaches an error, or needs more\n information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `bytes`.  This will","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":769811,"byte_end":769876,"line_start":1739,"line_end":1739,"column_start":5,"column_end":70}},{"value":"/ continue processing the evaluation with the new expression provided","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":769881,"byte_end":769952,"line_start":1740,"line_end":1740,"column_start":5,"column_end":76}},{"value":"/ until the evaluation is completed, reaches an error, or needs more","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":769957,"byte_end":770027,"line_start":1741,"line_end":1741,"column_start":5,"column_end":75}},{"value":"/ information again.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":770032,"byte_end":770054,"line_start":1742,"line_end":1742,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":770059,"byte_end":770062,"line_start":1743,"line_end":1743,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":770067,"byte_end":770079,"line_start":1744,"line_end":1744,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresAtLocation`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":770084,"byte_end":770184,"line_start":1745,"line_end":1745,"column_start":5,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":2156},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":771393,"byte_end":771416,"line_start":1772,"line_end":1772,"column_start":12,"column_end":35},"name":"resume_with_entry_value","qualname":"<Evaluation<R, S>>::resume_with_entry_value","value":"pub fn resume_with_entry_value(&mut Self, Value)\n-> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `entry_value`.  This will\n apply the provided entry value to the evaluation and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `entry_value`.  This will","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":770989,"byte_end":771060,"line_start":1765,"line_end":1765,"column_start":5,"column_end":76}},{"value":"/ apply the provided entry value to the evaluation and continue evaluating","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":771065,"byte_end":771141,"line_start":1766,"line_end":1766,"column_start":5,"column_end":81}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":771146,"byte_end":771219,"line_start":1767,"line_end":1767,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":771224,"byte_end":771251,"line_start":1768,"line_end":1768,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":771256,"byte_end":771259,"line_start":1769,"line_end":1769,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":771264,"byte_end":771276,"line_start":1770,"line_end":1770,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresEntryValue`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":771281,"byte_end":771381,"line_start":1771,"line_end":1771,"column_start":5,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":2157},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":772328,"byte_end":772353,"line_start":1793,"line_end":1793,"column_start":12,"column_end":37},"name":"resume_with_parameter_ref","qualname":"<Evaluation<R, S>>::resume_with_parameter_ref","value":"pub fn resume_with_parameter_ref(&mut Self, u64)\n-> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `parameter_value`.  This will\n apply the provided parameter value to the evaluation and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `parameter_value`.  This will","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":771914,"byte_end":771989,"line_start":1786,"line_end":1786,"column_start":5,"column_end":80}},{"value":"/ apply the provided parameter value to the evaluation and continue evaluating","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":771994,"byte_end":772074,"line_start":1787,"line_end":1787,"column_start":5,"column_end":85}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":772079,"byte_end":772152,"line_start":1788,"line_end":1788,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":772157,"byte_end":772184,"line_start":1789,"line_end":1789,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":772189,"byte_end":772192,"line_start":1790,"line_end":1790,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":772197,"byte_end":772209,"line_start":1791,"line_end":1791,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresParameterRef`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":772214,"byte_end":772316,"line_start":1792,"line_end":1792,"column_start":5,"column_end":107}}]},{"kind":"Method","id":{"krate":0,"index":2158},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":773348,"byte_end":773377,"line_start":1818,"line_end":1818,"column_start":12,"column_end":41},"name":"resume_with_relocated_address","qualname":"<Evaluation<R, S>>::resume_with_relocated_address","value":"pub fn resume_with_relocated_address(&mut Self, u64)\n-> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided relocated `address`.  This will use the\n provided relocated address for the operation that required it, and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided relocated `address`.  This will use the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":772902,"byte_end":772987,"line_start":1810,"line_end":1810,"column_start":5,"column_end":90}},{"value":"/ provided relocated address for the operation that required it, and continue evaluating","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":772992,"byte_end":773082,"line_start":1811,"line_end":1811,"column_start":5,"column_end":95}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":773087,"byte_end":773160,"line_start":1812,"line_end":1812,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":773165,"byte_end":773192,"line_start":1813,"line_end":1813,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":773197,"byte_end":773200,"line_start":1814,"line_end":1814,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":773205,"byte_end":773217,"line_start":1815,"line_end":1815,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":773222,"byte_end":773282,"line_start":1816,"line_end":1816,"column_start":5,"column_end":65}},{"value":"/ `EvaluationResult::RequiresRelocatedAddress`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":773287,"byte_end":773336,"line_start":1817,"line_end":1817,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2159},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":774339,"byte_end":774366,"line_start":1840,"line_end":1840,"column_start":12,"column_end":39},"name":"resume_with_indexed_address","qualname":"<Evaluation<R, S>>::resume_with_indexed_address","value":"pub fn resume_with_indexed_address(&mut Self, u64)\n-> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided indexed `address`.  This will use the\n provided indexed address for the operation that required it, and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided indexed `address`.  This will use the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":773899,"byte_end":773982,"line_start":1832,"line_end":1832,"column_start":5,"column_end":88}},{"value":"/ provided indexed address for the operation that required it, and continue evaluating","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":773987,"byte_end":774075,"line_start":1833,"line_end":1833,"column_start":5,"column_end":93}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":774080,"byte_end":774153,"line_start":1834,"line_end":1834,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":774158,"byte_end":774185,"line_start":1835,"line_end":1835,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":774190,"byte_end":774193,"line_start":1836,"line_end":1836,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":774198,"byte_end":774210,"line_start":1837,"line_end":1837,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":774215,"byte_end":774275,"line_start":1838,"line_end":1838,"column_start":5,"column_end":65}},{"value":"/ `EvaluationResult::RequiresIndexedAddress`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":774280,"byte_end":774327,"line_start":1839,"line_end":1839,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2160},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":775296,"byte_end":775317,"line_start":1861,"line_end":1861,"column_start":12,"column_end":33},"name":"resume_with_base_type","qualname":"<Evaluation<R, S>>::resume_with_base_type","value":"pub fn resume_with_base_type(&mut Self, ValueType)\n-> Result<EvaluationResult<R>>","parent":null,"children":[],"decl_id":null,"docs":" Resume the `Evaluation` with the provided `base_type`.  This will use the\n provided base type for the operation that required it, and continue evaluating\n opcodes until the evaluation is completed, reaches an error, or needs\n more information again.","sig":null,"attributes":[{"value":"/ Resume the `Evaluation` with the provided `base_type`.  This will use the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":774882,"byte_end":774959,"line_start":1854,"line_end":1854,"column_start":5,"column_end":82}},{"value":"/ provided base type for the operation that required it, and continue evaluating","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":774964,"byte_end":775046,"line_start":1855,"line_end":1855,"column_start":5,"column_end":87}},{"value":"/ opcodes until the evaluation is completed, reaches an error, or needs","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":775051,"byte_end":775124,"line_start":1856,"line_end":1856,"column_start":5,"column_end":78}},{"value":"/ more information again.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":775129,"byte_end":775156,"line_start":1857,"line_end":1857,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":775161,"byte_end":775164,"line_start":1858,"line_end":1858,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":775169,"byte_end":775181,"line_start":1859,"line_end":1859,"column_start":5,"column_end":17}},{"value":"/ Panics if this `Evaluation` did not previously stop with `EvaluationResult::RequiresBaseType`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":775186,"byte_end":775284,"line_start":1860,"line_end":1860,"column_start":5,"column_end":103}}]},{"kind":"Struct","id":{"krate":0,"index":8098},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":847406,"byte_end":847419,"line_start":8,"line_end":8,"column_start":12,"column_end":25},"name":"PubNamesEntry","qualname":"::read::pubnames::PubNamesEntry","value":"PubNamesEntry {  }","parent":null,"children":[{"krate":0,"index":8100},{"krate":0,"index":8101},{"krate":0,"index":8102}],"decl_id":null,"docs":" A single parsed pubname.\n","sig":null,"attributes":[{"value":"/ A single parsed pubname.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":847342,"byte_end":847370,"line_start":6,"line_end":6,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2209},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":847633,"byte_end":847637,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"name","qualname":"<PubNamesEntry<R>>::name","value":"pub fn name(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the name this entry refers to.\n","sig":null,"attributes":[{"value":"/ Returns the name this entry refers to.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":847579,"byte_end":847621,"line_start":15,"line_end":15,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2210},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":847819,"byte_end":847837,"line_start":22,"line_end":22,"column_start":12,"column_end":30},"name":"unit_header_offset","qualname":"<PubNamesEntry<R>>::unit_header_offset","value":"pub fn unit_header_offset(&Self) -> DebugInfoOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset into the .debug_info section for the header of the compilation unit\n which contains this name.\n","sig":null,"attributes":[{"value":"/ Returns the offset into the .debug_info section for the header of the compilation unit","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":847683,"byte_end":847773,"line_start":20,"line_end":20,"column_start":5,"column_end":95}},{"value":"/ which contains this name.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":847778,"byte_end":847807,"line_start":21,"line_end":21,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2211},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":848045,"byte_end":848055,"line_start":28,"line_end":28,"column_start":12,"column_end":22},"name":"die_offset","qualname":"<PubNamesEntry<R>>::die_offset","value":"pub fn die_offset(&Self) -> UnitOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset into the compilation unit for the debugging information entry which\n has this name.\n","sig":null,"attributes":[{"value":"/ Returns the offset into the compilation unit for the debugging information entry which","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":847920,"byte_end":848010,"line_start":26,"line_end":26,"column_start":5,"column_end":95}},{"value":"/ has this name.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":848015,"byte_end":848033,"line_start":27,"line_end":27,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":8109},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":848596,"byte_end":848609,"line_start":50,"line_end":50,"column_start":12,"column_end":25},"name":"DebugPubNames","qualname":"::read::pubnames::DebugPubNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" The `DebugPubNames` struct represents the DWARF public names information\n found in the `.debug_pubnames` section.\n","sig":null,"attributes":[{"value":"/ The `DebugPubNames` struct represents the DWARF public names information","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":848440,"byte_end":848516,"line_start":47,"line_end":47,"column_start":1,"column_end":77}},{"value":"/ found in the `.debug_pubnames` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":848517,"byte_end":848560,"line_start":48,"line_end":48,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2218},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849387,"byte_end":849390,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugPubNames<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugPubNames` instance from the data in the `.debug_pubnames`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugPubNames` instance from the data in the `.debug_pubnames`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":848775,"byte_end":848858,"line_start":56,"line_end":56,"column_start":5,"column_end":88}},{"value":"/ section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":848863,"byte_end":848875,"line_start":57,"line_end":57,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":848880,"byte_end":848883,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_pubnames` section and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":848888,"byte_end":848967,"line_start":59,"line_end":59,"column_start":5,"column_end":84}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":848972,"byte_end":849042,"line_start":60,"line_end":60,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849047,"byte_end":849086,"line_start":61,"line_end":61,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849091,"byte_end":849094,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849099,"byte_end":849106,"line_start":63,"line_end":63,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugPubNames, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849111,"byte_end":849156,"line_start":64,"line_end":64,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849161,"byte_end":849164,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849169,"byte_end":849188,"line_start":66,"line_end":66,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_pubnames_section_somehow = || &buf;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849193,"byte_end":849249,"line_start":67,"line_end":67,"column_start":5,"column_end":61}},{"value":"/ let debug_pubnames =","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849254,"byte_end":849278,"line_start":68,"line_end":68,"column_start":5,"column_end":29}},{"value":"/     DebugPubNames::new(read_debug_pubnames_section_somehow(), LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849283,"byte_end":849363,"line_start":69,"line_end":69,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849368,"byte_end":849375,"line_start":70,"line_end":70,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2221},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":850141,"byte_end":850146,"line_start":92,"line_end":92,"column_start":12,"column_end":17},"name":"items","qualname":"<DebugPubNames<R>>::items","value":"pub fn items(&Self) -> PubNamesEntryIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate the pubnames in the `.debug_pubnames` section.","sig":null,"attributes":[{"value":"/ Iterate the pubnames in the `.debug_pubnames` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849572,"byte_end":849630,"line_start":77,"line_end":77,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849635,"byte_end":849638,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849643,"byte_end":849650,"line_start":79,"line_end":79,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugPubNames, EndianSlice, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849655,"byte_end":849713,"line_start":80,"line_end":80,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849718,"byte_end":849721,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849726,"byte_end":849745,"line_start":82,"line_end":82,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_pubnames_section_somehow = || &buf;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849750,"byte_end":849806,"line_start":83,"line_end":83,"column_start":5,"column_end":61}},{"value":"/ let debug_pubnames =","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849811,"byte_end":849835,"line_start":84,"line_end":84,"column_start":5,"column_end":29}},{"value":"/     DebugPubNames::new(read_debug_pubnames_section_somehow(), LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849840,"byte_end":849920,"line_start":85,"line_end":85,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849925,"byte_end":849928,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ let mut iter = debug_pubnames.items();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849933,"byte_end":849975,"line_start":87,"line_end":87,"column_start":5,"column_end":47}},{"value":"/ while let Some(pubname) = iter.next().unwrap() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849980,"byte_end":850032,"line_start":88,"line_end":88,"column_start":5,"column_end":57}},{"value":"/   println!(\"pubname {} found!\", pubname.name().to_string_lossy());","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":850037,"byte_end":850107,"line_start":89,"line_end":89,"column_start":5,"column_end":75}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":850112,"byte_end":850117,"line_start":90,"line_end":90,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":850122,"byte_end":850129,"line_start":91,"line_end":91,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":8119},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":850776,"byte_end":850793,"line_start":118,"line_end":118,"column_start":12,"column_end":29},"name":"PubNamesEntryIter","qualname":"::read::pubnames::PubNamesEntryIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the pubnames from a `.debug_pubnames` section.","sig":null,"attributes":[{"value":"/ An iterator over the pubnames from a `.debug_pubnames` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":850580,"byte_end":850647,"line_start":113,"line_end":113,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":850648,"byte_end":850651,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ Can be [used with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":850652,"byte_end":850673,"line_start":115,"line_end":115,"column_start":1,"column_end":22}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":850674,"byte_end":850740,"line_start":116,"line_end":116,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2231},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":851314,"byte_end":851318,"line_start":128,"line_end":128,"column_start":12,"column_end":16},"name":"next","qualname":"<PubNamesEntryIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<PubNamesEntry<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator and return the next pubname.","sig":null,"attributes":[{"value":"/ Advance the iterator and return the next pubname.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":850907,"byte_end":850960,"line_start":121,"line_end":121,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":850965,"byte_end":850968,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ Returns the newly parsed pubname as `Ok(Some(pubname))`. Returns","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":850973,"byte_end":851041,"line_start":123,"line_end":123,"column_start":5,"column_end":73}},{"value":"/ `Ok(None)` when iteration is complete and all pubnames have already been","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":851046,"byte_end":851122,"line_start":124,"line_end":124,"column_start":5,"column_end":81}},{"value":"/ parsed and yielded. If an error occurs while parsing the next pubname,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":851127,"byte_end":851201,"line_start":125,"line_end":125,"column_start":5,"column_end":79}},{"value":"/ then this error is returned as `Err(e)`, and all subsequent calls return","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":851206,"byte_end":851282,"line_start":126,"line_end":126,"column_start":5,"column_end":81}},{"value":"/ `Ok(None)`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":851287,"byte_end":851302,"line_start":127,"line_end":127,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8129},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":852007,"byte_end":852020,"line_start":8,"line_end":8,"column_start":12,"column_end":25},"name":"PubTypesEntry","qualname":"::read::pubtypes::PubTypesEntry","value":"PubTypesEntry {  }","parent":null,"children":[{"krate":0,"index":8131},{"krate":0,"index":8132},{"krate":0,"index":8133}],"decl_id":null,"docs":" A single parsed pubtype.\n","sig":null,"attributes":[{"value":"/ A single parsed pubtype.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":851943,"byte_end":851971,"line_start":6,"line_end":6,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2275},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":852246,"byte_end":852250,"line_start":16,"line_end":16,"column_start":12,"column_end":16},"name":"name","qualname":"<PubTypesEntry<R>>::name","value":"pub fn name(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns the name of the type this entry refers to.\n","sig":null,"attributes":[{"value":"/ Returns the name of the type this entry refers to.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":852180,"byte_end":852234,"line_start":15,"line_end":15,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2276},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":852446,"byte_end":852464,"line_start":22,"line_end":22,"column_start":12,"column_end":30},"name":"unit_header_offset","qualname":"<PubTypesEntry<R>>::unit_header_offset","value":"pub fn unit_header_offset(&Self) -> DebugInfoOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset into the .debug_info section for the header of the compilation unit\n which contains the type with this name.\n","sig":null,"attributes":[{"value":"/ Returns the offset into the .debug_info section for the header of the compilation unit","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":852296,"byte_end":852386,"line_start":20,"line_end":20,"column_start":5,"column_end":95}},{"value":"/ which contains the type with this name.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":852391,"byte_end":852434,"line_start":21,"line_end":21,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2277},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":852682,"byte_end":852692,"line_start":28,"line_end":28,"column_start":12,"column_end":22},"name":"die_offset","qualname":"<PubTypesEntry<R>>::die_offset","value":"pub fn die_offset(&Self) -> UnitOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset into the compilation unit for the debugging information entry which\n the type with this name.\n","sig":null,"attributes":[{"value":"/ Returns the offset into the compilation unit for the debugging information entry which","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":852547,"byte_end":852637,"line_start":26,"line_end":26,"column_start":5,"column_end":95}},{"value":"/ the type with this name.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":852642,"byte_end":852670,"line_start":27,"line_end":27,"column_start":5,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":8140},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":853229,"byte_end":853242,"line_start":50,"line_end":50,"column_start":12,"column_end":25},"name":"DebugPubTypes","qualname":"::read::pubtypes::DebugPubTypes","value":"","parent":null,"children":[],"decl_id":null,"docs":" The `DebugPubTypes` struct represents the DWARF public types information\n found in the `.debug_info` section.\n","sig":null,"attributes":[{"value":"/ The `DebugPubTypes` struct represents the DWARF public types information","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":853077,"byte_end":853153,"line_start":47,"line_end":47,"column_start":1,"column_end":77}},{"value":"/ found in the `.debug_info` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":853154,"byte_end":853193,"line_start":48,"line_end":48,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2284},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":854004,"byte_end":854007,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugPubTypes<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugPubTypes` instance from the data in the `.debug_pubtypes`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugPubTypes` instance from the data in the `.debug_pubtypes`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":853408,"byte_end":853491,"line_start":56,"line_end":56,"column_start":5,"column_end":88}},{"value":"/ section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":853496,"byte_end":853508,"line_start":57,"line_end":57,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":853513,"byte_end":853516,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_pubtypes` section and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":853521,"byte_end":853600,"line_start":59,"line_end":59,"column_start":5,"column_end":84}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":853605,"byte_end":853675,"line_start":60,"line_end":60,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":853680,"byte_end":853719,"line_start":61,"line_end":61,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":853724,"byte_end":853727,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":853732,"byte_end":853739,"line_start":63,"line_end":63,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugPubTypes, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":853744,"byte_end":853789,"line_start":64,"line_end":64,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":853794,"byte_end":853797,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":853802,"byte_end":853821,"line_start":66,"line_end":66,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_pubtypes_somehow = || &buf;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":853826,"byte_end":853874,"line_start":67,"line_end":67,"column_start":5,"column_end":53}},{"value":"/ let debug_pubtypes =","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":853879,"byte_end":853903,"line_start":68,"line_end":68,"column_start":5,"column_end":29}},{"value":"/     DebugPubTypes::new(read_debug_pubtypes_somehow(), LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":853908,"byte_end":853980,"line_start":69,"line_end":69,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":853985,"byte_end":853992,"line_start":70,"line_end":70,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2287},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":854758,"byte_end":854763,"line_start":92,"line_end":92,"column_start":12,"column_end":17},"name":"items","qualname":"<DebugPubTypes<R>>::items","value":"pub fn items(&Self) -> PubTypesEntryIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate the pubtypes in the `.debug_pubtypes` section.","sig":null,"attributes":[{"value":"/ Iterate the pubtypes in the `.debug_pubtypes` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":854189,"byte_end":854247,"line_start":77,"line_end":77,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":854252,"byte_end":854255,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":854260,"byte_end":854267,"line_start":79,"line_end":79,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugPubTypes, EndianSlice, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":854272,"byte_end":854330,"line_start":80,"line_end":80,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":854335,"byte_end":854338,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":854343,"byte_end":854362,"line_start":82,"line_end":82,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_pubtypes_section_somehow = || &buf;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":854367,"byte_end":854423,"line_start":83,"line_end":83,"column_start":5,"column_end":61}},{"value":"/ let debug_pubtypes =","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":854428,"byte_end":854452,"line_start":84,"line_end":84,"column_start":5,"column_end":29}},{"value":"/     DebugPubTypes::new(read_debug_pubtypes_section_somehow(), LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":854457,"byte_end":854537,"line_start":85,"line_end":85,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":854542,"byte_end":854545,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ let mut iter = debug_pubtypes.items();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":854550,"byte_end":854592,"line_start":87,"line_end":87,"column_start":5,"column_end":47}},{"value":"/ while let Some(pubtype) = iter.next().unwrap() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":854597,"byte_end":854649,"line_start":88,"line_end":88,"column_start":5,"column_end":57}},{"value":"/   println!(\"pubtype {} found!\", pubtype.name().to_string_lossy());","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":854654,"byte_end":854724,"line_start":89,"line_end":89,"column_start":5,"column_end":75}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":854729,"byte_end":854734,"line_start":90,"line_end":90,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":854739,"byte_end":854746,"line_start":91,"line_end":91,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":8150},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":855393,"byte_end":855410,"line_start":118,"line_end":118,"column_start":12,"column_end":29},"name":"PubTypesEntryIter","qualname":"::read::pubtypes::PubTypesEntryIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the pubtypes from a `.debug_pubtypes` section.","sig":null,"attributes":[{"value":"/ An iterator over the pubtypes from a `.debug_pubtypes` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":855197,"byte_end":855264,"line_start":113,"line_end":113,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":855265,"byte_end":855268,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ Can be [used with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":855269,"byte_end":855290,"line_start":115,"line_end":115,"column_start":1,"column_end":22}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":855291,"byte_end":855357,"line_start":116,"line_end":116,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2297},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":855931,"byte_end":855935,"line_start":128,"line_end":128,"column_start":12,"column_end":16},"name":"next","qualname":"<PubTypesEntryIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<PubTypesEntry<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator and return the next pubtype.","sig":null,"attributes":[{"value":"/ Advance the iterator and return the next pubtype.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":855524,"byte_end":855577,"line_start":121,"line_end":121,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":855582,"byte_end":855585,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ Returns the newly parsed pubtype as `Ok(Some(pubtype))`. Returns","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":855590,"byte_end":855658,"line_start":123,"line_end":123,"column_start":5,"column_end":73}},{"value":"/ `Ok(None)` when iteration is complete and all pubtypes have already been","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":855663,"byte_end":855739,"line_start":124,"line_end":124,"column_start":5,"column_end":81}},{"value":"/ parsed and yielded. If an error occurs while parsing the next pubtype,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":855744,"byte_end":855818,"line_start":125,"line_end":125,"column_start":5,"column_end":79}},{"value":"/ then this error is returned as `Err(e)`, and all subsequent calls return","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":855823,"byte_end":855899,"line_start":126,"line_end":126,"column_start":5,"column_end":81}},{"value":"/ `Ok(None)`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":855904,"byte_end":855919,"line_start":127,"line_end":127,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8160},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":856771,"byte_end":856782,"line_start":14,"line_end":14,"column_start":12,"column_end":23},"name":"DebugRanges","qualname":"::read::rnglists::DebugRanges","value":"DebugRanges {  }","parent":null,"children":[{"krate":0,"index":8162}],"decl_id":null,"docs":" The raw contents of the `.debug_ranges` section.\n","sig":null,"attributes":[{"value":"/ The raw contents of the `.debug_ranges` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":856668,"byte_end":856720,"line_start":12,"line_end":12,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2362},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":857521,"byte_end":857524,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugRanges<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugRanges` instance from the data in the `.debug_ranges`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugRanges` instance from the data in the `.debug_ranges`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":856915,"byte_end":856994,"line_start":22,"line_end":22,"column_start":5,"column_end":84}},{"value":"/ section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":856999,"byte_end":857011,"line_start":23,"line_end":23,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":857016,"byte_end":857019,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_ranges` section and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":857024,"byte_end":857101,"line_start":25,"line_end":25,"column_start":5,"column_end":82}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":857106,"byte_end":857176,"line_start":26,"line_end":26,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":857181,"byte_end":857220,"line_start":27,"line_end":27,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":857225,"byte_end":857228,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":857233,"byte_end":857240,"line_start":29,"line_end":29,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugRanges, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":857245,"byte_end":857288,"line_start":30,"line_end":30,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":857293,"byte_end":857296,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":857301,"byte_end":857342,"line_start":32,"line_end":32,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_ranges_section_somehow = || &buf;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":857347,"byte_end":857401,"line_start":33,"line_end":33,"column_start":5,"column_end":59}},{"value":"/ let debug_ranges = DebugRanges::new(read_debug_ranges_section_somehow(), LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":857406,"byte_end":857497,"line_start":34,"line_end":34,"column_start":5,"column_end":96}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":857502,"byte_end":857509,"line_start":35,"line_end":35,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":8174},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":858057,"byte_end":858070,"line_start":60,"line_end":60,"column_start":12,"column_end":25},"name":"DebugRngLists","qualname":"::read::rnglists::DebugRngLists","value":"DebugRngLists {  }","parent":null,"children":[{"krate":0,"index":8176}],"decl_id":null,"docs":" The `DebugRngLists` struct represents the contents of the\n `.debug_rnglists` section.\n","sig":null,"attributes":[{"value":"/ The `DebugRngLists` struct represents the contents of the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":857914,"byte_end":857975,"line_start":57,"line_end":57,"column_start":1,"column_end":62}},{"value":"/ `.debug_rnglists` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":857976,"byte_end":858006,"line_start":58,"line_end":58,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2373},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":858828,"byte_end":858831,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugRngLists<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugRngLists` instance from the data in the\n `.debug_rnglists` section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugRngLists` instance from the data in the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":858194,"byte_end":858259,"line_start":68,"line_end":68,"column_start":5,"column_end":70}},{"value":"/ `.debug_rnglists` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":858264,"byte_end":858294,"line_start":69,"line_end":69,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":858299,"byte_end":858302,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_rnglists`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":858307,"byte_end":858374,"line_start":71,"line_end":71,"column_start":5,"column_end":72}},{"value":"/ section and present it as a `&[u8]` slice. That means using some ELF","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":858379,"byte_end":858451,"line_start":72,"line_end":72,"column_start":5,"column_end":77}},{"value":"/ loader on Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":858456,"byte_end":858505,"line_start":73,"line_end":73,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":858510,"byte_end":858513,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":858518,"byte_end":858525,"line_start":75,"line_end":75,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugRngLists, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":858530,"byte_end":858575,"line_start":76,"line_end":76,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":858580,"byte_end":858583,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":858588,"byte_end":858629,"line_start":78,"line_end":78,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_rnglists_section_somehow = || &buf;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":858634,"byte_end":858690,"line_start":79,"line_end":79,"column_start":5,"column_end":61}},{"value":"/ let debug_rnglists =","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":858695,"byte_end":858719,"line_start":80,"line_end":80,"column_start":5,"column_end":29}},{"value":"/     DebugRngLists::new(read_debug_rnglists_section_somehow(), LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":858724,"byte_end":858804,"line_start":81,"line_end":81,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":858809,"byte_end":858816,"line_start":82,"line_end":82,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2384},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":859515,"byte_end":859544,"line_start":113,"line_end":113,"column_start":12,"column_end":41},"name":"default_for_encoding_and_file","qualname":"<DebugRngListsBase<Offset>>::default_for_encoding_and_file","value":"pub fn default_for_encoding_and_file(Encoding, DwarfFileType)\n-> DebugRngListsBase<Offset>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DebugRngListsBase` with the default value of DW_AT_rnglists_base\n for the given `Encoding` and `DwarfFileType`.\n","sig":null,"attributes":[{"value":"/ Returns a `DebugRngListsBase` with the default value of DW_AT_rnglists_base","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":859370,"byte_end":859449,"line_start":111,"line_end":111,"column_start":5,"column_end":84}},{"value":"/ for the given `Encoding` and `DwarfFileType`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":859454,"byte_end":859503,"line_start":112,"line_end":112,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":8188},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":860262,"byte_end":860272,"line_start":130,"line_end":130,"column_start":12,"column_end":22},"name":"RangeLists","qualname":"::read::rnglists::RangeLists","value":"RangeLists {  }","parent":null,"children":[{"krate":0,"index":8190},{"krate":0,"index":8191}],"decl_id":null,"docs":" The DWARF data found in `.debug_ranges` and `.debug_rnglists` sections.\n","sig":null,"attributes":[{"value":"/ The DWARF data found in `.debug_ranges` and `.debug_rnglists` sections.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":860136,"byte_end":860211,"line_start":128,"line_end":128,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2387},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":860511,"byte_end":860514,"line_start":138,"line_end":138,"column_start":12,"column_end":15},"name":"new","qualname":"<RangeLists<R>>::new","value":"pub fn new(DebugRanges<R>, DebugRngLists<R>) -> RangeLists<R>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `RangeLists` instance from the data in the `.debug_ranges` and\n `.debug_rnglists` sections.\n","sig":null,"attributes":[{"value":"/ Construct a new `RangeLists` instance from the data in the `.debug_ranges` and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":860381,"byte_end":860463,"line_start":136,"line_end":136,"column_start":5,"column_end":87}},{"value":"/ `.debug_rnglists` sections.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":860468,"byte_end":860499,"line_start":137,"line_end":137,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2388},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":860745,"byte_end":860757,"line_start":146,"line_end":146,"column_start":12,"column_end":24},"name":"debug_ranges","qualname":"<RangeLists<R>>::debug_ranges","value":"pub fn debug_ranges(&Self) -> &DebugRanges<R>","parent":null,"children":[],"decl_id":null,"docs":" Return the `.debug_ranges` section.\n","sig":null,"attributes":[{"value":"/ Return the `.debug_ranges` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":860694,"byte_end":860733,"line_start":145,"line_end":145,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2389},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":860977,"byte_end":860993,"line_start":153,"line_end":153,"column_start":12,"column_end":28},"name":"set_debug_ranges","qualname":"<RangeLists<R>>::set_debug_ranges","value":"pub fn set_debug_ranges(&mut Self, DebugRanges<R>)","parent":null,"children":[],"decl_id":null,"docs":" Replace the `.debug_ranges` section.","sig":null,"attributes":[{"value":"/ Replace the `.debug_ranges` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":860824,"byte_end":860864,"line_start":150,"line_end":150,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":860869,"byte_end":860872,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ This is useful for `.dwo` files when using the GNU split-dwarf extension to DWARF 4.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":860877,"byte_end":860965,"line_start":152,"line_end":152,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":2390},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":861143,"byte_end":861157,"line_start":158,"line_end":158,"column_start":12,"column_end":26},"name":"debug_rnglists","qualname":"<RangeLists<R>>::debug_rnglists","value":"pub fn debug_rnglists(&Self) -> &DebugRngLists<R>","parent":null,"children":[],"decl_id":null,"docs":" Return the `.debug_rnglists` section.\n","sig":null,"attributes":[{"value":"/ Return the `.debug_rnglists` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":861090,"byte_end":861131,"line_start":157,"line_end":157,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2393},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":861878,"byte_end":861884,"line_start":179,"line_end":179,"column_start":12,"column_end":18},"name":"borrow","qualname":"<RangeLists<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> RangeLists<R> where F: FnMut(&'a T) ->\nR","parent":null,"children":[],"decl_id":null,"docs":" Create a `RangeLists` that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `RangeLists` that references the data in `self`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":861254,"byte_end":861315,"line_start":164,"line_end":164,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":861320,"byte_end":861323,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":861328,"byte_end":861393,"line_start":166,"line_end":166,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":861398,"byte_end":861401,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":861406,"byte_end":861426,"line_start":168,"line_end":168,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":861431,"byte_end":861434,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":861439,"byte_end":861457,"line_start":170,"line_end":170,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":861462,"byte_end":861507,"line_start":171,"line_end":171,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":861512,"byte_end":861596,"line_start":172,"line_end":172,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::RangeLists<Vec<u8>> = load_section();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":861601,"byte_end":861668,"line_start":173,"line_end":173,"column_start":5,"column_end":72}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":861673,"byte_end":861720,"line_start":174,"line_end":174,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":861725,"byte_end":861775,"line_start":175,"line_end":175,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":861780,"byte_end":861842,"line_start":176,"line_end":176,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":861847,"byte_end":861854,"line_start":177,"line_end":177,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":861859,"byte_end":861866,"line_start":178,"line_end":178,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2399},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":862704,"byte_end":862710,"line_start":201,"line_end":201,"column_start":12,"column_end":18},"name":"ranges","qualname":"<RangeLists<R>>::ranges","value":"pub fn ranges(&Self, RangeListsOffset<R::Offset>, Encoding, u64,\n              &DebugAddr<R>, DebugAddrBase<R::Offset>)\n-> Result<RngListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the `Range` list entries starting at the given offset.","sig":null,"attributes":[{"value":"/ Iterate over the `Range` list entries starting at the given offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":862201,"byte_end":862272,"line_start":191,"line_end":191,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":862277,"byte_end":862280,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ The `unit_version` and `address_size` must match the compilation unit that the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":862285,"byte_end":862367,"line_start":193,"line_end":193,"column_start":5,"column_end":87}},{"value":"/ offset was contained in.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":862372,"byte_end":862400,"line_start":194,"line_end":194,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":862405,"byte_end":862408,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ The `base_address` should be obtained from the `DW_AT_low_pc` attribute in the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":862413,"byte_end":862495,"line_start":196,"line_end":196,"column_start":5,"column_end":87}},{"value":"/ `DW_TAG_compile_unit` entry for the compilation unit that contains this range list.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":862500,"byte_end":862587,"line_start":197,"line_end":197,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":862592,"byte_end":862595,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":862600,"byte_end":862621,"line_start":199,"line_end":199,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":862626,"byte_end":862692,"line_start":200,"line_end":200,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2400},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":863566,"byte_end":863576,"line_start":227,"line_end":227,"column_start":12,"column_end":22},"name":"raw_ranges","qualname":"<RangeLists<R>>::raw_ranges","value":"pub fn raw_ranges(&Self, RangeListsOffset<R::Offset>, Encoding)\n-> Result<RawRngListIter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the `RawRngListEntry`ies starting at the given offset.","sig":null,"attributes":[{"value":"/ Iterate over the `RawRngListEntry`ies starting at the given offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":863143,"byte_end":863214,"line_start":217,"line_end":217,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":863219,"byte_end":863222,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ The `unit_encoding` must match the compilation unit that the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":863227,"byte_end":863291,"line_start":219,"line_end":219,"column_start":5,"column_end":69}},{"value":"/ offset was contained in.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":863296,"byte_end":863324,"line_start":220,"line_end":220,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":863329,"byte_end":863332,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ This iterator does not perform any processing of the range entries,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":863337,"byte_end":863408,"line_start":222,"line_end":222,"column_start":5,"column_end":76}},{"value":"/ such as handling base addresses.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":863413,"byte_end":863449,"line_start":223,"line_end":223,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":863454,"byte_end":863457,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":863462,"byte_end":863483,"line_start":225,"line_end":225,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":863488,"byte_end":863554,"line_start":226,"line_end":226,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2401},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":864498,"byte_end":864508,"line_start":250,"line_end":250,"column_start":12,"column_end":22},"name":"get_offset","qualname":"<RangeLists<R>>::get_offset","value":"pub fn get_offset(&Self, Encoding, DebugRngListsBase<R::Offset>,\n                  DebugRngListsIndex<R::Offset>)\n-> Result<RangeListsOffset<R::Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `.debug_rnglists` offset at the given `base` and `index`.","sig":null,"attributes":[{"value":"/ Returns the `.debug_rnglists` offset at the given `base` and `index`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":864051,"byte_end":864124,"line_start":241,"line_end":241,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":864129,"byte_end":864132,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ The `base` must be the `DW_AT_rnglists_base` value from the compilation unit DIE.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":864137,"byte_end":864222,"line_start":243,"line_end":243,"column_start":5,"column_end":90}},{"value":"/ This is an offset that points to the first entry following the header.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":864227,"byte_end":864301,"line_start":244,"line_end":244,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":864306,"byte_end":864309,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ The `index` is the value of a `DW_FORM_rnglistx` attribute.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":864314,"byte_end":864377,"line_start":246,"line_end":246,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":864382,"byte_end":864385,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ The `unit_encoding` must match the compilation unit that the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":864390,"byte_end":864454,"line_start":248,"line_end":248,"column_start":5,"column_end":69}},{"value":"/ index was contained in.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":864459,"byte_end":864486,"line_start":249,"line_end":249,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2403},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":865149,"byte_end":865165,"line_start":268,"line_end":268,"column_start":12,"column_end":28},"name":"lookup_offset_id","qualname":"<RangeLists<R>>::lookup_offset_id","value":"pub fn lookup_offset_id(&Self, ReaderOffsetId)\n-> Option<(SectionId, R::Offset)>","parent":null,"children":[],"decl_id":null,"docs":" Call `Reader::lookup_offset_id` for each section, and return the first match.\n","sig":null,"attributes":[{"value":"/ Call `Reader::lookup_offset_id` for each section, and return the first match.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":865056,"byte_end":865137,"line_start":267,"line_end":267,"column_start":5,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":8219},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":865761,"byte_end":865775,"line_start":288,"line_end":288,"column_start":12,"column_end":26},"name":"RawRngListIter","qualname":"::read::rnglists::RawRngListIter","value":"RawRngListIter {  }","parent":null,"children":[{"krate":0,"index":8221},{"krate":0,"index":8222},{"krate":0,"index":8223}],"decl_id":null,"docs":" A raw iterator over an address range list.","sig":null,"attributes":[{"value":"/ A raw iterator over an address range list.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":865573,"byte_end":865619,"line_start":283,"line_end":283,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":865620,"byte_end":865623,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ This iterator does not perform any processing of the range entries,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":865624,"byte_end":865695,"line_start":285,"line_end":285,"column_start":1,"column_end":72}},{"value":"/ such as handling base addresses.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":865696,"byte_end":865732,"line_start":286,"line_end":286,"column_start":1,"column_end":37}}]},{"kind":"StructVariant","id":{"krate":0,"index":8229},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":865994,"byte_end":866013,"line_start":298,"line_end":298,"column_start":5,"column_end":24},"name":"AddressOrOffsetPair","qualname":"::read::rnglists::RawRngListEntry::AddressOrOffsetPair","value":"RawRngListEntry::AddressOrOffsetPair { begin, end }","parent":{"krate":0,"index":8227},"children":[],"decl_id":null,"docs":" A range from DWARF version <= 4.\n","sig":null,"attributes":[{"value":"/ A range from DWARF version <= 4.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":865953,"byte_end":865989,"line_start":297,"line_end":297,"column_start":5,"column_end":41}}]},{"kind":"StructVariant","id":{"krate":0,"index":8232},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":866211,"byte_end":866222,"line_start":305,"line_end":305,"column_start":5,"column_end":16},"name":"BaseAddress","qualname":"::read::rnglists::RawRngListEntry::BaseAddress","value":"RawRngListEntry::BaseAddress { addr }","parent":{"krate":0,"index":8227},"children":[],"decl_id":null,"docs":" DW_RLE_base_address\n","sig":null,"attributes":[{"value":"/ DW_RLE_base_address","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":866183,"byte_end":866206,"line_start":304,"line_end":304,"column_start":5,"column_end":28}}]},{"kind":"StructVariant","id":{"krate":0,"index":8234},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":866309,"byte_end":866321,"line_start":310,"line_end":310,"column_start":5,"column_end":17},"name":"BaseAddressx","qualname":"::read::rnglists::RawRngListEntry::BaseAddressx","value":"RawRngListEntry::BaseAddressx { addr }","parent":{"krate":0,"index":8227},"children":[],"decl_id":null,"docs":" DW_RLE_base_addressx\n","sig":null,"attributes":[{"value":"/ DW_RLE_base_addressx","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":866280,"byte_end":866304,"line_start":309,"line_end":309,"column_start":5,"column_end":29}}]},{"kind":"StructVariant","id":{"krate":0,"index":8236},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":866420,"byte_end":866430,"line_start":315,"line_end":315,"column_start":5,"column_end":15},"name":"StartxEndx","qualname":"::read::rnglists::RawRngListEntry::StartxEndx","value":"RawRngListEntry::StartxEndx { begin, end }","parent":{"krate":0,"index":8227},"children":[],"decl_id":null,"docs":" DW_RLE_startx_endx\n","sig":null,"attributes":[{"value":"/ DW_RLE_startx_endx","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":866393,"byte_end":866415,"line_start":314,"line_end":314,"column_start":5,"column_end":27}}]},{"kind":"StructVariant","id":{"krate":0,"index":8239},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":866591,"byte_end":866603,"line_start":322,"line_end":322,"column_start":5,"column_end":17},"name":"StartxLength","qualname":"::read::rnglists::RawRngListEntry::StartxLength","value":"RawRngListEntry::StartxLength { begin, length }","parent":{"krate":0,"index":8227},"children":[],"decl_id":null,"docs":" DW_RLE_startx_length\n","sig":null,"attributes":[{"value":"/ DW_RLE_startx_length","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":866562,"byte_end":866586,"line_start":321,"line_end":321,"column_start":5,"column_end":29}}]},{"kind":"StructVariant","id":{"krate":0,"index":8242},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":866754,"byte_end":866764,"line_start":329,"line_end":329,"column_start":5,"column_end":15},"name":"OffsetPair","qualname":"::read::rnglists::RawRngListEntry::OffsetPair","value":"RawRngListEntry::OffsetPair { begin, end }","parent":{"krate":0,"index":8227},"children":[],"decl_id":null,"docs":" DW_RLE_offset_pair\n","sig":null,"attributes":[{"value":"/ DW_RLE_offset_pair","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":866727,"byte_end":866749,"line_start":328,"line_end":328,"column_start":5,"column_end":27}}]},{"kind":"StructVariant","id":{"krate":0,"index":8245},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":866893,"byte_end":866901,"line_start":336,"line_end":336,"column_start":5,"column_end":13},"name":"StartEnd","qualname":"::read::rnglists::RawRngListEntry::StartEnd","value":"RawRngListEntry::StartEnd { begin, end }","parent":{"krate":0,"index":8227},"children":[],"decl_id":null,"docs":" DW_RLE_start_end\n","sig":null,"attributes":[{"value":"/ DW_RLE_start_end","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":866868,"byte_end":866888,"line_start":335,"line_end":335,"column_start":5,"column_end":25}}]},{"kind":"StructVariant","id":{"krate":0,"index":8248},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":867033,"byte_end":867044,"line_start":343,"line_end":343,"column_start":5,"column_end":16},"name":"StartLength","qualname":"::read::rnglists::RawRngListEntry::StartLength","value":"RawRngListEntry::StartLength { begin, length }","parent":{"krate":0,"index":8227},"children":[],"decl_id":null,"docs":" DW_RLE_start_length\n","sig":null,"attributes":[{"value":"/ DW_RLE_start_length","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":867005,"byte_end":867028,"line_start":342,"line_end":342,"column_start":5,"column_end":28}}]},{"kind":"Enum","id":{"krate":0,"index":8227},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":865928,"byte_end":865943,"line_start":296,"line_end":296,"column_start":10,"column_end":25},"name":"RawRngListEntry","qualname":"::read::rnglists::RawRngListEntry","value":"pub enum RawRngListEntry<T> {\n    AddressOrOffsetPair {\n        begin: u64,\n        end: u64,\n    },\n    BaseAddress {\n        addr: u64,\n    },\n    BaseAddressx {\n        addr: DebugAddrIndex<T>,\n    },\n    StartxEndx {\n        begin: DebugAddrIndex<T>,\n        end: DebugAddrIndex<T>,\n    },\n    StartxLength {\n        begin: DebugAddrIndex<T>,\n        length: u64,\n    },\n    OffsetPair {\n        begin: u64,\n        end: u64,\n    },\n    StartEnd {\n        begin: u64,\n        end: u64,\n    },\n    StartLength {\n        begin: u64,\n        length: u64,\n    },\n}","parent":null,"children":[{"krate":0,"index":8229},{"krate":0,"index":8232},{"krate":0,"index":8234},{"krate":0,"index":8236},{"krate":0,"index":8239},{"krate":0,"index":8242},{"krate":0,"index":8245},{"krate":0,"index":8248}],"decl_id":null,"docs":" A raw entry in .debug_rnglists\n","sig":null,"attributes":[{"value":"/ A raw entry in .debug_rnglists","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":865860,"byte_end":865894,"line_start":294,"line_end":294,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2412},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":870187,"byte_end":870191,"line_start":419,"line_end":419,"column_start":12,"column_end":16},"name":"next","qualname":"<RawRngListIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<RawRngListEntry<R::Offset>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next range.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next range.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":870132,"byte_end":870175,"line_start":418,"line_end":418,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":8257},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":871271,"byte_end":871282,"line_start":455,"line_end":455,"column_start":12,"column_end":23},"name":"RngListIter","qualname":"::read::rnglists::RngListIter","value":"RngListIter {  }","parent":null,"children":[{"krate":0,"index":8259},{"krate":0,"index":8260},{"krate":0,"index":8261},{"krate":0,"index":8262}],"decl_id":null,"docs":" An iterator over an address range list.","sig":null,"attributes":[{"value":"/ An iterator over an address range list.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":870999,"byte_end":871042,"line_start":449,"line_end":449,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":871043,"byte_end":871046,"line_start":450,"line_end":450,"column_start":1,"column_end":4}},{"value":"/ This iterator internally handles processing of base addresses and different","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":871047,"byte_end":871126,"line_start":451,"line_end":451,"column_start":1,"column_end":80}},{"value":"/ entry types.  Thus, it only returns range entries that are valid","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":871127,"byte_end":871195,"line_start":452,"line_end":452,"column_start":1,"column_end":69}},{"value":"/ and already adjusted for the base address.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":871196,"byte_end":871242,"line_start":453,"line_end":453,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2417},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":872079,"byte_end":872083,"line_start":485,"line_end":485,"column_start":12,"column_end":16},"name":"next","qualname":"<RngListIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<Range>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next range.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next range.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":872024,"byte_end":872067,"line_start":484,"line_end":484,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":8284},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":875574,"byte_end":875579,"line_start":585,"line_end":585,"column_start":12,"column_end":17},"name":"Range","qualname":"::read::rnglists::Range","value":"Range { begin, end }","parent":null,"children":[{"krate":0,"index":8285},{"krate":0,"index":8286}],"decl_id":null,"docs":" An address range from the `.debug_ranges`, `.debug_rnglists`, or `.debug_aranges` sections.\n","sig":null,"attributes":[{"value":"/ An address range from the `.debug_ranges`, `.debug_rnglists`, or `.debug_aranges` sections.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":875416,"byte_end":875511,"line_start":583,"line_end":583,"column_start":1,"column_end":96}}]},{"kind":"Field","id":{"krate":0,"index":8285},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":875634,"byte_end":875639,"line_start":587,"line_end":587,"column_start":9,"column_end":14},"name":"begin","qualname":"::read::rnglists::Range::begin","value":"u64","parent":{"krate":0,"index":8284},"children":[],"decl_id":null,"docs":" The beginning address of the range.\n","sig":null,"attributes":[{"value":"/ The beginning address of the range.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":875586,"byte_end":875625,"line_start":586,"line_end":586,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":8286},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":875708,"byte_end":875711,"line_start":590,"line_end":590,"column_start":9,"column_end":12},"name":"end","qualname":"::read::rnglists::Range::end","value":"u64","parent":{"krate":0,"index":8284},"children":[],"decl_id":null,"docs":" The first address past the end of the range.\n","sig":null,"attributes":[{"value":"/ The first address past the end of the range.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":875651,"byte_end":875699,"line_start":589,"line_end":589,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":8302},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":899027,"byte_end":899035,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"DebugStr","qualname":"::read::str::DebugStr","value":"DebugStr {  }","parent":null,"children":[{"krate":0,"index":8304}],"decl_id":null,"docs":" The `DebugStr` struct represents the DWARF strings\n found in the `.debug_str` section.\n","sig":null,"attributes":[{"value":"/ The `DebugStr` struct represents the DWARF strings","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":898883,"byte_end":898937,"line_start":9,"line_end":9,"column_start":1,"column_end":55}},{"value":"/ found in the `.debug_str` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":898938,"byte_end":898976,"line_start":10,"line_end":10,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2474},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":899746,"byte_end":899749,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugStr<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugStr` instance from the data in the `.debug_str`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugStr` instance from the data in the `.debug_str`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":899164,"byte_end":899237,"line_start":20,"line_end":20,"column_start":5,"column_end":78}},{"value":"/ section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":899242,"byte_end":899254,"line_start":21,"line_end":21,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":899259,"byte_end":899262,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_str` section and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":899267,"byte_end":899341,"line_start":23,"line_end":23,"column_start":5,"column_end":79}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":899346,"byte_end":899416,"line_start":24,"line_end":24,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":899421,"byte_end":899460,"line_start":25,"line_end":25,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":899465,"byte_end":899468,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":899473,"byte_end":899480,"line_start":27,"line_end":27,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugStr, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":899485,"byte_end":899525,"line_start":28,"line_end":28,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":899530,"byte_end":899533,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":899538,"byte_end":899579,"line_start":30,"line_end":30,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_str_section_somehow = || &buf;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":899584,"byte_end":899635,"line_start":31,"line_end":31,"column_start":5,"column_end":56}},{"value":"/ let debug_str = DebugStr::new(read_debug_str_section_somehow(), LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":899640,"byte_end":899722,"line_start":32,"line_end":32,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":899727,"byte_end":899734,"line_start":33,"line_end":33,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2477},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":900460,"byte_end":900467,"line_start":52,"line_end":52,"column_start":12,"column_end":19},"name":"get_str","qualname":"<DebugStr<R>>::get_str","value":"pub fn get_str(&Self, DebugStrOffset<R::Offset>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Lookup a string from the `.debug_str` section by DebugStrOffset.","sig":null,"attributes":[{"value":"/ Lookup a string from the `.debug_str` section by DebugStrOffset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":899916,"byte_end":899984,"line_start":40,"line_end":40,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":899989,"byte_end":899992,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":899997,"byte_end":900004,"line_start":42,"line_end":42,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugStr, DebugStrOffset, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":900009,"byte_end":900065,"line_start":43,"line_end":43,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":900070,"byte_end":900073,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x01, 0x02, 0x00];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":900078,"byte_end":900113,"line_start":45,"line_end":45,"column_start":5,"column_end":40}},{"value":"/ # let offset = DebugStrOffset(0);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":900118,"byte_end":900155,"line_start":46,"line_end":46,"column_start":5,"column_end":42}},{"value":"/ # let read_debug_str_section_somehow = || &buf;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":900160,"byte_end":900211,"line_start":47,"line_end":47,"column_start":5,"column_end":56}},{"value":"/ # let debug_str_offset_somehow = || offset;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":900216,"byte_end":900263,"line_start":48,"line_end":48,"column_start":5,"column_end":52}},{"value":"/ let debug_str = DebugStr::new(read_debug_str_section_somehow(), LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":900268,"byte_end":900350,"line_start":49,"line_end":49,"column_start":5,"column_end":87}},{"value":"/ println!(\"Found string {:?}\", debug_str.get_str(debug_str_offset_somehow()));","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":900355,"byte_end":900436,"line_start":50,"line_end":50,"column_start":5,"column_end":86}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":900441,"byte_end":900448,"line_start":51,"line_end":51,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2480},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":901319,"byte_end":901325,"line_start":75,"line_end":75,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugStr<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugStr<R> where F: FnMut(&'a T) -> R","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugStr` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugStr` section that references the data in `self`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":900691,"byte_end":900758,"line_start":60,"line_end":60,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":900763,"byte_end":900766,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":900771,"byte_end":900836,"line_start":62,"line_end":62,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":900841,"byte_end":900844,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":900849,"byte_end":900869,"line_start":64,"line_end":64,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":900874,"byte_end":900877,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":900882,"byte_end":900900,"line_start":66,"line_end":66,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":900905,"byte_end":900950,"line_start":67,"line_end":67,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":900955,"byte_end":901039,"line_start":68,"line_end":68,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugStr<Vec<u8>> = load_section();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":901044,"byte_end":901109,"line_start":69,"line_end":69,"column_start":5,"column_end":70}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":901114,"byte_end":901161,"line_start":70,"line_end":70,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":901166,"byte_end":901216,"line_start":71,"line_end":71,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":901221,"byte_end":901283,"line_start":72,"line_end":72,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":901288,"byte_end":901295,"line_start":73,"line_end":73,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":901300,"byte_end":901307,"line_start":74,"line_end":74,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":8316},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":901881,"byte_end":901896,"line_start":101,"line_end":101,"column_start":12,"column_end":27},"name":"DebugStrOffsets","qualname":"::read::str::DebugStrOffsets","value":"DebugStrOffsets {  }","parent":null,"children":[{"krate":0,"index":8318}],"decl_id":null,"docs":" The raw contents of the `.debug_str_offsets` section.\n","sig":null,"attributes":[{"value":"/ The raw contents of the `.debug_str_offsets` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":901773,"byte_end":901830,"line_start":99,"line_end":99,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2493},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":902849,"byte_end":902863,"line_start":122,"line_end":122,"column_start":12,"column_end":26},"name":"get_str_offset","qualname":"<DebugStrOffsets<R>>::get_str_offset","value":"pub fn get_str_offset(&Self, Format, DebugStrOffsetsBase<R::Offset>,\n                      DebugStrOffsetsIndex<R::Offset>)\n-> Result<DebugStrOffset<R::Offset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `.debug_str` offset at the given `base` and `index`.","sig":null,"attributes":[{"value":"/ Returns the `.debug_str` offset at the given `base` and `index`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":902099,"byte_end":902167,"line_start":109,"line_end":109,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":902172,"byte_end":902175,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ A set of entries in the `.debug_str_offsets` section consists of a header","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":902180,"byte_end":902257,"line_start":111,"line_end":111,"column_start":5,"column_end":82}},{"value":"/ followed by a series of string table offsets.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":902262,"byte_end":902311,"line_start":112,"line_end":112,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":902316,"byte_end":902319,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ The `base` must be the `DW_AT_str_offsets_base` value from the compilation unit DIE.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":902324,"byte_end":902412,"line_start":114,"line_end":114,"column_start":5,"column_end":93}},{"value":"/ This is an offset that points to the first entry following the header.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":902417,"byte_end":902491,"line_start":115,"line_end":115,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":902496,"byte_end":902499,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ The `index` is the value of a `DW_FORM_strx` attribute.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":902504,"byte_end":902563,"line_start":117,"line_end":117,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":902568,"byte_end":902571,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ The `format` must be the DWARF format of the compilation unit. This format must","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":902576,"byte_end":902659,"line_start":119,"line_end":119,"column_start":5,"column_end":88}},{"value":"/ match the header. However, note that we do not parse the header to validate this,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":902664,"byte_end":902749,"line_start":120,"line_end":120,"column_start":5,"column_end":90}},{"value":"/ since locating the header is unreliable, and the GNU extensions do not emit it.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":902754,"byte_end":902837,"line_start":121,"line_end":121,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":2496},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":903975,"byte_end":903981,"line_start":153,"line_end":153,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugStrOffsets<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugStrOffsets<R> where\nF: FnMut(&'a T) -> R","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugStrOffsets` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugStrOffsets` section that references the data in `self`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":903333,"byte_end":903407,"line_start":138,"line_end":138,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":903412,"byte_end":903415,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":903420,"byte_end":903485,"line_start":140,"line_end":140,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":903490,"byte_end":903493,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":903498,"byte_end":903518,"line_start":142,"line_end":142,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":903523,"byte_end":903526,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":903531,"byte_end":903549,"line_start":144,"line_end":144,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":903554,"byte_end":903599,"line_start":145,"line_end":145,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":903604,"byte_end":903688,"line_start":146,"line_end":146,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugStrOffsets<Vec<u8>> = load_section();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":903693,"byte_end":903765,"line_start":147,"line_end":147,"column_start":5,"column_end":77}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":903770,"byte_end":903817,"line_start":148,"line_end":148,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":903822,"byte_end":903872,"line_start":149,"line_end":149,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":903877,"byte_end":903939,"line_start":150,"line_end":150,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":903944,"byte_end":903951,"line_start":151,"line_end":151,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":903956,"byte_end":903963,"line_start":152,"line_end":152,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2509},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":904653,"byte_end":904682,"line_start":183,"line_end":183,"column_start":12,"column_end":41},"name":"default_for_encoding_and_file","qualname":"<DebugStrOffsetsBase<Offset>>::default_for_encoding_and_file","value":"pub fn default_for_encoding_and_file(Encoding, DwarfFileType)\n-> DebugStrOffsetsBase<Offset>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DebugStrOffsetsBase` with the default value of DW_AT_str_offsets_base\n for the given `Encoding` and `DwarfFileType`.\n","sig":null,"attributes":[{"value":"/ Returns a `DebugStrOffsetsBase` with the default value of DW_AT_str_offsets_base","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":904503,"byte_end":904587,"line_start":181,"line_end":181,"column_start":5,"column_end":89}},{"value":"/ for the given `Encoding` and `DwarfFileType`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":904592,"byte_end":904641,"line_start":182,"line_end":182,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":8330},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":905536,"byte_end":905548,"line_start":204,"line_end":204,"column_start":12,"column_end":24},"name":"DebugLineStr","qualname":"::read::str::DebugLineStr","value":"DebugLineStr {  }","parent":null,"children":[{"krate":0,"index":8332}],"decl_id":null,"docs":" The `DebugLineStr` struct represents the DWARF strings\n found in the `.debug_line_str` section.\n","sig":null,"attributes":[{"value":"/ The `DebugLineStr` struct represents the DWARF strings","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":905383,"byte_end":905441,"line_start":201,"line_end":201,"column_start":1,"column_end":59}},{"value":"/ found in the `.debug_line_str` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":905442,"byte_end":905485,"line_start":202,"line_end":202,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2513},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":906285,"byte_end":906288,"line_start":226,"line_end":226,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugLineStr<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugLineStr` instance from the data in the `.debug_line_str`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugLineStr` instance from the data in the `.debug_line_str`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":905671,"byte_end":905753,"line_start":212,"line_end":212,"column_start":5,"column_end":87}},{"value":"/ section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":905758,"byte_end":905770,"line_start":213,"line_end":213,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":905775,"byte_end":905778,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_line_str` section and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":905783,"byte_end":905862,"line_start":215,"line_end":215,"column_start":5,"column_end":84}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":905867,"byte_end":905937,"line_start":216,"line_end":216,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":905942,"byte_end":905981,"line_start":217,"line_end":217,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":905986,"byte_end":905989,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":905994,"byte_end":906001,"line_start":219,"line_end":219,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugLineStr, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":906006,"byte_end":906050,"line_start":220,"line_end":220,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":906055,"byte_end":906058,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":906063,"byte_end":906104,"line_start":222,"line_end":222,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_line_str_section_somehow = || &buf;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":906109,"byte_end":906165,"line_start":223,"line_end":223,"column_start":5,"column_end":61}},{"value":"/ let debug_str = DebugLineStr::new(read_debug_line_str_section_somehow(), LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":906170,"byte_end":906261,"line_start":224,"line_end":224,"column_start":5,"column_end":96}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":906266,"byte_end":906273,"line_start":225,"line_end":225,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2516},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":906558,"byte_end":906565,"line_start":233,"line_end":233,"column_start":12,"column_end":19},"name":"get_str","qualname":"<DebugLineStr<R>>::get_str","value":"pub fn get_str(&Self, DebugLineStrOffset<R::Offset>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Lookup a string from the `.debug_line_str` section by DebugLineStrOffset.\n","sig":null,"attributes":[{"value":"/ Lookup a string from the `.debug_line_str` section by DebugLineStrOffset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":906469,"byte_end":906546,"line_start":232,"line_end":232,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":2519},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":907423,"byte_end":907429,"line_start":256,"line_end":256,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugLineStr<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugLineStr<R> where F: FnMut(&'a T)\n-> R","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugLineStr` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugLineStr` section that references the data in `self`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":906787,"byte_end":906858,"line_start":241,"line_end":241,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":906863,"byte_end":906866,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":906871,"byte_end":906936,"line_start":243,"line_end":243,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":906941,"byte_end":906944,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":906949,"byte_end":906969,"line_start":245,"line_end":245,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":906974,"byte_end":906977,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":906982,"byte_end":907000,"line_start":247,"line_end":247,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":907005,"byte_end":907050,"line_start":248,"line_end":248,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":907055,"byte_end":907139,"line_start":249,"line_end":249,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugLineStr<Vec<u8>> = load_section();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":907144,"byte_end":907213,"line_start":250,"line_end":250,"column_start":5,"column_end":74}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":907218,"byte_end":907265,"line_start":251,"line_end":251,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":907270,"byte_end":907320,"line_start":252,"line_end":252,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":907325,"byte_end":907387,"line_start":253,"line_end":253,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":907392,"byte_end":907399,"line_start":254,"line_end":254,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":907404,"byte_end":907411,"line_start":255,"line_end":255,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":8344},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":101794,"byte_end":101804,"line_start":250,"line_end":250,"column_start":12,"column_end":22},"name":"UnitOffset","qualname":"::read::UnitOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" An offset into the current compilation or type unit.\n","sig":null,"attributes":[{"value":"/ An offset into the current compilation or type unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":101658,"byte_end":101714,"line_start":248,"line_end":248,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":8347},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":101816,"byte_end":101821,"line_start":250,"line_end":250,"column_start":34,"column_end":39},"name":"0","qualname":"::read::UnitOffset::0","value":"T","parent":{"krate":0,"index":8344},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2676},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":910544,"byte_end":910558,"line_start":26,"line_end":26,"column_start":12,"column_end":26},"name":"to_unit_offset","qualname":"<DebugTypesOffset<T>>::to_unit_offset","value":"pub fn to_unit_offset<R>(&Self, &UnitHeader<R>) -> Option<UnitOffset<T>> where\nR: Reader<Offset = T>","parent":null,"children":[],"decl_id":null,"docs":" Convert an offset to be relative to the start of the given unit,\n instead of relative to the start of the .debug_types section.\n Returns `None` if the offset is not within the unit entries.\n","sig":null,"attributes":[{"value":"/ Convert an offset to be relative to the start of the given unit,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":910325,"byte_end":910393,"line_start":23,"line_end":23,"column_start":5,"column_end":73}},{"value":"/ instead of relative to the start of the .debug_types section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":910398,"byte_end":910463,"line_start":24,"line_end":24,"column_start":5,"column_end":70}},{"value":"/ Returns `None` if the offset is not within the unit entries.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":910468,"byte_end":910532,"line_start":25,"line_end":25,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2680},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":911172,"byte_end":911186,"line_start":43,"line_end":43,"column_start":12,"column_end":26},"name":"to_unit_offset","qualname":"<DebugInfoOffset<T>>::to_unit_offset","value":"pub fn to_unit_offset<R>(&Self, &UnitHeader<R>) -> Option<UnitOffset<T>> where\nR: Reader<Offset = T>","parent":null,"children":[],"decl_id":null,"docs":" Convert an offset to be relative to the start of the given unit,\n instead of relative to the start of the .debug_info section.\n Returns `None` if the offset is not within this unit entries.\n","sig":null,"attributes":[{"value":"/ Convert an offset to be relative to the start of the given unit,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":910953,"byte_end":911021,"line_start":40,"line_end":40,"column_start":5,"column_end":73}},{"value":"/ instead of relative to the start of the .debug_info section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":911026,"byte_end":911090,"line_start":41,"line_end":41,"column_start":5,"column_end":69}},{"value":"/ Returns `None` if the offset is not within this unit entries.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":911095,"byte_end":911160,"line_start":42,"line_end":42,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2684},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":911801,"byte_end":911821,"line_start":60,"line_end":60,"column_start":12,"column_end":32},"name":"to_debug_info_offset","qualname":"<UnitOffset<T>>::to_debug_info_offset","value":"pub fn to_debug_info_offset<R>(&Self, &UnitHeader<R>)\n-> Option<DebugInfoOffset<T>> where R: Reader<Offset = T>","parent":null,"children":[],"decl_id":null,"docs":" Convert an offset to be relative to the start of the .debug_info section,\n instead of relative to the start of the given unit. Returns None if the\n provided unit lives in the .debug_types section.\n","sig":null,"attributes":[{"value":"/ Convert an offset to be relative to the start of the .debug_info section,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":911575,"byte_end":911652,"line_start":57,"line_end":57,"column_start":5,"column_end":82}},{"value":"/ instead of relative to the start of the given unit. Returns None if the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":911657,"byte_end":911732,"line_start":58,"line_end":58,"column_start":5,"column_end":80}},{"value":"/ provided unit lives in the .debug_types section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":911737,"byte_end":911789,"line_start":59,"line_end":59,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2686},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":912287,"byte_end":912308,"line_start":71,"line_end":71,"column_start":12,"column_end":33},"name":"to_debug_types_offset","qualname":"<UnitOffset<T>>::to_debug_types_offset","value":"pub fn to_debug_types_offset<R>(&Self, &UnitHeader<R>)\n-> Option<DebugTypesOffset<T>> where R: Reader<Offset = T>","parent":null,"children":[],"decl_id":null,"docs":" Convert an offset to be relative to the start of the .debug_types section,\n instead of relative to the start of the given unit. Returns None if the\n provided unit lives in the .debug_info section.\n","sig":null,"attributes":[{"value":"/ Convert an offset to be relative to the start of the .debug_types section,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":912061,"byte_end":912139,"line_start":68,"line_end":68,"column_start":5,"column_end":83}},{"value":"/ instead of relative to the start of the given unit. Returns None if the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":912144,"byte_end":912219,"line_start":69,"line_end":69,"column_start":5,"column_end":80}},{"value":"/ provided unit lives in the .debug_info section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":912224,"byte_end":912275,"line_start":70,"line_end":70,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":8377},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":912709,"byte_end":912718,"line_start":83,"line_end":83,"column_start":12,"column_end":21},"name":"DebugInfo","qualname":"::read::unit::DebugInfo","value":"DebugInfo {  }","parent":null,"children":[{"krate":0,"index":8379}],"decl_id":null,"docs":" The `DebugInfo` struct represents the DWARF debugging information found in\n the `.debug_info` section.\n","sig":null,"attributes":[{"value":"/ The `DebugInfo` struct represents the DWARF debugging information found in","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":912549,"byte_end":912627,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/ the `.debug_info` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":912628,"byte_end":912658,"line_start":81,"line_end":81,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2691},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913439,"byte_end":913442,"line_start":105,"line_end":105,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugInfo<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugInfo` instance from the data in the `.debug_info`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugInfo` instance from the data in the `.debug_info`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":912849,"byte_end":912924,"line_start":91,"line_end":91,"column_start":5,"column_end":80}},{"value":"/ section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":912929,"byte_end":912941,"line_start":92,"line_end":92,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":912946,"byte_end":912949,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_info` section and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":912954,"byte_end":913029,"line_start":94,"line_end":94,"column_start":5,"column_end":80}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913034,"byte_end":913104,"line_start":95,"line_end":95,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913109,"byte_end":913148,"line_start":96,"line_end":96,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913153,"byte_end":913156,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913161,"byte_end":913168,"line_start":98,"line_end":98,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugInfo, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913173,"byte_end":913214,"line_start":99,"line_end":99,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913219,"byte_end":913222,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913227,"byte_end":913268,"line_start":101,"line_end":101,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_info_section_somehow = || &buf;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913273,"byte_end":913325,"line_start":102,"line_end":102,"column_start":5,"column_end":57}},{"value":"/ let debug_info = DebugInfo::new(read_debug_info_section_somehow(), LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913330,"byte_end":913415,"line_start":103,"line_end":103,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913420,"byte_end":913427,"line_start":104,"line_end":104,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2694},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":914218,"byte_end":914223,"line_start":128,"line_end":128,"column_start":12,"column_end":17},"name":"units","qualname":"<DebugInfo<R>>::units","value":"pub fn units(&Self) -> DebugInfoUnitHeadersIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate the units in this `.debug_info` section.","sig":null,"attributes":[{"value":"/ Iterate the units in this `.debug_info` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913612,"byte_end":913664,"line_start":111,"line_end":111,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913669,"byte_end":913672,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913677,"byte_end":913684,"line_start":113,"line_end":113,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugInfo, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913689,"byte_end":913730,"line_start":114,"line_end":114,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913735,"byte_end":913738,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913743,"byte_end":913762,"line_start":116,"line_end":116,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_info_section_somehow = || &buf;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913767,"byte_end":913819,"line_start":117,"line_end":117,"column_start":5,"column_end":57}},{"value":"/ let debug_info = DebugInfo::new(read_debug_info_section_somehow(), LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913824,"byte_end":913909,"line_start":118,"line_end":118,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913914,"byte_end":913917,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ let mut iter = debug_info.units();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913922,"byte_end":913960,"line_start":120,"line_end":120,"column_start":5,"column_end":43}},{"value":"/ while let Some(unit) = iter.next().unwrap() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913965,"byte_end":914014,"line_start":121,"line_end":121,"column_start":5,"column_end":54}},{"value":"/     println!(\"unit's length is {}\", unit.unit_length());","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":914019,"byte_end":914079,"line_start":122,"line_end":122,"column_start":5,"column_end":65}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":914084,"byte_end":914089,"line_start":123,"line_end":123,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":914094,"byte_end":914101,"line_start":124,"line_end":124,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":914106,"byte_end":914109,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":914114,"byte_end":914135,"line_start":126,"line_end":126,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":914140,"byte_end":914206,"line_start":127,"line_end":127,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2695},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":914531,"byte_end":914549,"line_start":138,"line_end":138,"column_start":12,"column_end":30},"name":"header_from_offset","qualname":"<DebugInfo<R>>::header_from_offset","value":"pub fn header_from_offset(&Self, DebugInfoOffset<R::Offset>)\n-> Result<UnitHeader<R>>","parent":null,"children":[],"decl_id":null,"docs":" Get the UnitHeader located at offset from this .debug_info section.","sig":null,"attributes":[{"value":"/ Get the UnitHeader located at offset from this .debug_info section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":914432,"byte_end":914503,"line_start":135,"line_end":135,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":914508,"byte_end":914511,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":914516,"byte_end":914519,"line_start":137,"line_end":137,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2698},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":915423,"byte_end":915429,"line_start":161,"line_end":161,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugInfo<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugInfo<R> where F: FnMut(&'a T) ->\nR","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugInfo` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugInfo` section that references the data in `self`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":914793,"byte_end":914861,"line_start":146,"line_end":146,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":914866,"byte_end":914869,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":914874,"byte_end":914939,"line_start":148,"line_end":148,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":914944,"byte_end":914947,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":914952,"byte_end":914972,"line_start":150,"line_end":150,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":914977,"byte_end":914980,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":914985,"byte_end":915003,"line_start":152,"line_end":152,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":915008,"byte_end":915053,"line_start":153,"line_end":153,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":915058,"byte_end":915142,"line_start":154,"line_end":154,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugInfo<Vec<u8>> = load_section();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":915147,"byte_end":915213,"line_start":155,"line_end":155,"column_start":5,"column_end":71}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":915218,"byte_end":915265,"line_start":156,"line_end":156,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":915270,"byte_end":915320,"line_start":157,"line_end":157,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":915325,"byte_end":915387,"line_start":158,"line_end":158,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":915392,"byte_end":915399,"line_start":159,"line_end":159,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":915404,"byte_end":915411,"line_start":160,"line_end":160,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":8391},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":916091,"byte_end":916115,"line_start":190,"line_end":190,"column_start":12,"column_end":36},"name":"DebugInfoUnitHeadersIter","qualname":"::read::unit::DebugInfoUnitHeadersIter","value":"DebugInfoUnitHeadersIter {  }","parent":null,"children":[{"krate":0,"index":8393},{"krate":0,"index":8394}],"decl_id":null,"docs":" An iterator over the units of a .debug_info section.","sig":null,"attributes":[{"value":"/ An iterator over the units of a .debug_info section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":915886,"byte_end":915942,"line_start":185,"line_end":185,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":915943,"byte_end":915946,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"/ See the [documentation on","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":915947,"byte_end":915976,"line_start":187,"line_end":187,"column_start":1,"column_end":30}},{"value":"/ `DebugInfo::units`](./struct.DebugInfo.html#method.units) for more detail.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":915977,"byte_end":916055,"line_start":188,"line_end":188,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":2711},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":916297,"byte_end":916301,"line_start":197,"line_end":197,"column_start":12,"column_end":16},"name":"next","qualname":"<DebugInfoUnitHeadersIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<UnitHeader<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next unit header.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next unit header.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":916236,"byte_end":916285,"line_start":196,"line_end":196,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8403},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":918222,"byte_end":918233,"line_start":258,"line_end":258,"column_start":5,"column_end":16},"name":"Compilation","qualname":"::read::unit::UnitType::Compilation","value":"UnitType::Compilation","parent":{"krate":0,"index":8401},"children":[],"decl_id":null,"docs":" In DWARF5, a unit with type `DW_UT_compile`. In previous DWARF versions,\n any unit appearing in the .debug_info section.\n","sig":null,"attributes":[{"value":"/ In DWARF5, a unit with type `DW_UT_compile`. In previous DWARF versions,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":918086,"byte_end":918162,"line_start":256,"line_end":256,"column_start":5,"column_end":81}},{"value":"/ any unit appearing in the .debug_info section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":918167,"byte_end":918217,"line_start":257,"line_end":257,"column_start":5,"column_end":55}}]},{"kind":"StructVariant","id":{"krate":0,"index":8405},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":918356,"byte_end":918360,"line_start":261,"line_end":261,"column_start":5,"column_end":9},"name":"Type","qualname":"::read::unit::UnitType::Type","value":"UnitType::Type { type_signature, type_offset }","parent":{"krate":0,"index":8401},"children":[],"decl_id":null,"docs":" In DWARF5, a unit with type `DW_UT_type`. In DWARF4, any unit appearing\n in the .debug_types section.\n","sig":null,"attributes":[{"value":"/ In DWARF5, a unit with type `DW_UT_type`. In DWARF4, any unit appearing","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":918239,"byte_end":918314,"line_start":259,"line_end":259,"column_start":5,"column_end":80}},{"value":"/ in the .debug_types section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":918319,"byte_end":918351,"line_start":260,"line_end":260,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8408},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":918700,"byte_end":918707,"line_start":269,"line_end":269,"column_start":5,"column_end":12},"name":"Partial","qualname":"::read::unit::UnitType::Partial","value":"UnitType::Partial","parent":{"krate":0,"index":8401},"children":[],"decl_id":null,"docs":" A unit with type `DW_UT_partial`. The root DIE of this unit should be a\n `DW_TAG_partial_unit`.\n","sig":null,"attributes":[{"value":"/ A unit with type `DW_UT_partial`. The root DIE of this unit should be a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":918589,"byte_end":918664,"line_start":267,"line_end":267,"column_start":5,"column_end":80}},{"value":"/ `DW_TAG_partial_unit`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":918669,"byte_end":918695,"line_start":268,"line_end":268,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8410},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":919047,"byte_end":919055,"line_start":275,"line_end":275,"column_start":5,"column_end":13},"name":"Skeleton","qualname":"::read::unit::UnitType::Skeleton","value":"UnitType::Skeleton(DwoId)","parent":{"krate":0,"index":8401},"children":[],"decl_id":null,"docs":" A unit with type `DW_UT_skeleton`. The enclosed dwo_id can be used to\n link this with the corresponding `SplitCompilation` unit in a dwo file.\n NB: The non-standard GNU split DWARF extension to DWARF 4 will instead\n be a `Compilation` unit with the dwo_id present as an attribute on the\n root DIE.\n","sig":null,"attributes":[{"value":"/ A unit with type `DW_UT_skeleton`. The enclosed dwo_id can be used to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":918713,"byte_end":918786,"line_start":270,"line_end":270,"column_start":5,"column_end":78}},{"value":"/ link this with the corresponding `SplitCompilation` unit in a dwo file.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":918791,"byte_end":918866,"line_start":271,"line_end":271,"column_start":5,"column_end":80}},{"value":"/ NB: The non-standard GNU split DWARF extension to DWARF 4 will instead","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":918871,"byte_end":918945,"line_start":272,"line_end":272,"column_start":5,"column_end":79}},{"value":"/ be a `Compilation` unit with the dwo_id present as an attribute on the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":918950,"byte_end":919024,"line_start":273,"line_end":273,"column_start":5,"column_end":79}},{"value":"/ root DIE.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":919029,"byte_end":919042,"line_start":274,"line_end":274,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8413},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":919408,"byte_end":919424,"line_start":281,"line_end":281,"column_start":5,"column_end":21},"name":"SplitCompilation","qualname":"::read::unit::UnitType::SplitCompilation","value":"UnitType::SplitCompilation(DwoId)","parent":{"krate":0,"index":8401},"children":[],"decl_id":null,"docs":" A unit with type `DW_UT_split_compile`. The enclosed dwo_id can be used to\n link this with the corresponding `Skeleton` unit in the original binary.\n NB: The non-standard GNU split DWARF extension to DWARF 4 will instead\n be a `Compilation` unit with the dwo_id present as an attribute on the\n root DIE.\n","sig":null,"attributes":[{"value":"/ A unit with type `DW_UT_split_compile`. The enclosed dwo_id can be used to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":919068,"byte_end":919146,"line_start":276,"line_end":276,"column_start":5,"column_end":83}},{"value":"/ link this with the corresponding `Skeleton` unit in the original binary.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":919151,"byte_end":919227,"line_start":277,"line_end":277,"column_start":5,"column_end":81}},{"value":"/ NB: The non-standard GNU split DWARF extension to DWARF 4 will instead","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":919232,"byte_end":919306,"line_start":278,"line_end":278,"column_start":5,"column_end":79}},{"value":"/ be a `Compilation` unit with the dwo_id present as an attribute on the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":919311,"byte_end":919385,"line_start":279,"line_end":279,"column_start":5,"column_end":79}},{"value":"/ root DIE.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":919390,"byte_end":919403,"line_start":280,"line_end":280,"column_start":5,"column_end":18}}]},{"kind":"StructVariant","id":{"krate":0,"index":8416},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":919593,"byte_end":919602,"line_start":284,"line_end":284,"column_start":5,"column_end":14},"name":"SplitType","qualname":"::read::unit::UnitType::SplitType","value":"UnitType::SplitType { type_signature, type_offset }","parent":{"krate":0,"index":8401},"children":[],"decl_id":null,"docs":" A unit with type `DW_UT_split_type`. A split type unit is identical to a\n conventional type unit except for the section in which it appears.\n","sig":null,"attributes":[{"value":"/ A unit with type `DW_UT_split_type`. A split type unit is identical to a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":919437,"byte_end":919513,"line_start":282,"line_end":282,"column_start":5,"column_end":81}},{"value":"/ conventional type unit except for the section in which it appears.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":919518,"byte_end":919588,"line_start":283,"line_end":283,"column_start":5,"column_end":75}}]},{"kind":"Enum","id":{"krate":0,"index":8401},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":918031,"byte_end":918039,"line_start":252,"line_end":252,"column_start":10,"column_end":18},"name":"UnitType","qualname":"::read::unit::UnitType","value":"pub enum UnitType<Offset> where Offset: ReaderOffset {\n    Compilation,\n    Type {\n        type_signature: DebugTypeSignature,\n        type_offset: UnitOffset<Offset>,\n    },\n    Partial,\n    Skeleton(DwoId),\n    SplitCompilation(DwoId),\n    SplitType {\n        type_signature: DebugTypeSignature,\n        type_offset: UnitOffset<Offset>,\n    },\n}","parent":null,"children":[{"krate":0,"index":8403},{"krate":0,"index":8405},{"krate":0,"index":8408},{"krate":0,"index":8410},{"krate":0,"index":8413},{"krate":0,"index":8416}],"decl_id":null,"docs":" This enum specifies the type of the unit and any type\n specific data carried in the header (e.g. the type\n signature/type offset of a type unit).\n","sig":null,"attributes":[{"value":"/ This enum specifies the type of the unit and any type","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":917821,"byte_end":917878,"line_start":248,"line_end":248,"column_start":1,"column_end":58}},{"value":"/ specific data carried in the header (e.g. the type","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":917879,"byte_end":917933,"line_start":249,"line_end":249,"column_start":1,"column_end":55}},{"value":"/ signature/type offset of a type unit).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":917934,"byte_end":917976,"line_start":250,"line_end":250,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":8438},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":920665,"byte_end":920675,"line_start":314,"line_end":314,"column_start":12,"column_end":22},"name":"UnitHeader","qualname":"::read::unit::UnitHeader","value":"UnitHeader {  }","parent":null,"children":[{"krate":0,"index":8441},{"krate":0,"index":8442},{"krate":0,"index":8443},{"krate":0,"index":8444},{"krate":0,"index":8445},{"krate":0,"index":8446}],"decl_id":null,"docs":" The common fields for the headers of compilation units and\n type units.\n","sig":null,"attributes":[{"value":"/ The common fields for the headers of compilation units and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":920530,"byte_end":920592,"line_start":311,"line_end":311,"column_start":1,"column_end":63}},{"value":"/ type units.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":920593,"byte_end":920608,"line_start":312,"line_end":312,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2724},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":921151,"byte_end":921154,"line_start":334,"line_end":334,"column_start":12,"column_end":15},"name":"new","qualname":"<UnitHeader<R, Offset>>::new","value":"pub fn new(Encoding, Offset, UnitType<Offset>, DebugAbbrevOffset<Offset>,\n           UnitSectionOffset<Offset>, R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `UnitHeader`.\n","sig":null,"attributes":[{"value":"/ Construct a new `UnitHeader`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":921106,"byte_end":921139,"line_start":333,"line_end":333,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2728},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":921780,"byte_end":921786,"line_start":360,"line_end":360,"column_start":12,"column_end":18},"name":"offset","qualname":"<UnitHeader<R, Offset>>::offset","value":"pub fn offset(&Self) -> UnitSectionOffset<Offset>","parent":null,"children":[],"decl_id":null,"docs":" Get the offset of this unit within its section.\n","sig":null,"attributes":[{"value":"/ Get the offset of this unit within its section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":921717,"byte_end":921768,"line_start":359,"line_end":359,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2729},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":921965,"byte_end":921979,"line_start":366,"line_end":366,"column_start":12,"column_end":26},"name":"size_of_header","qualname":"<UnitHeader<R, Offset>>::size_of_header","value":"pub fn size_of_header(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the serialized size of the common unit header for the given\n DWARF format.\n","sig":null,"attributes":[{"value":"/ Return the serialized size of the common unit header for the given","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":921861,"byte_end":921931,"line_start":364,"line_end":364,"column_start":5,"column_end":75}},{"value":"/ DWARF format.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":921936,"byte_end":921953,"line_start":365,"line_end":365,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2730},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":923113,"byte_end":923124,"line_start":392,"line_end":392,"column_start":12,"column_end":23},"name":"unit_length","qualname":"<UnitHeader<R, Offset>>::unit_length","value":"pub fn unit_length(&Self) -> Offset","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the debugging info for this compilation unit, not\n including the byte length of the encoded length itself.\n","sig":null,"attributes":[{"value":"/ Get the length of the debugging info for this compilation unit, not","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":922966,"byte_end":923037,"line_start":390,"line_end":390,"column_start":5,"column_end":76}},{"value":"/ including the byte length of the encoded length itself.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":923042,"byte_end":923101,"line_start":391,"line_end":391,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2731},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":923323,"byte_end":923344,"line_start":398,"line_end":398,"column_start":12,"column_end":33},"name":"length_including_self","qualname":"<UnitHeader<R, Offset>>::length_including_self","value":"pub fn length_including_self(&Self) -> Offset","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the debugging info for this compilation unit,\n including the byte length of the encoded length itself.\n","sig":null,"attributes":[{"value":"/ Get the length of the debugging info for this compilation unit,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":923180,"byte_end":923247,"line_start":396,"line_end":396,"column_start":5,"column_end":72}},{"value":"/ including the byte length of the encoded length itself.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":923252,"byte_end":923311,"line_start":397,"line_end":397,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2732},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":923516,"byte_end":923524,"line_start":403,"line_end":403,"column_start":12,"column_end":20},"name":"encoding","qualname":"<UnitHeader<R, Offset>>::encoding","value":"pub fn encoding(&Self) -> Encoding","parent":null,"children":[],"decl_id":null,"docs":" Return the encoding parameters for this unit.\n","sig":null,"attributes":[{"value":"/ Return the encoding parameters for this unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":923455,"byte_end":923504,"line_start":402,"line_end":402,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2733},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":923665,"byte_end":923672,"line_start":408,"line_end":408,"column_start":12,"column_end":19},"name":"version","qualname":"<UnitHeader<R, Offset>>::version","value":"pub fn version(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Get the DWARF version of the debugging info for this compilation unit.\n","sig":null,"attributes":[{"value":"/ Get the DWARF version of the debugging info for this compilation unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":923579,"byte_end":923653,"line_start":407,"line_end":407,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":2734},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":923776,"byte_end":923781,"line_start":413,"line_end":413,"column_start":12,"column_end":17},"name":"type_","qualname":"<UnitHeader<R, Offset>>::type_","value":"pub fn type_(&Self) -> UnitType<Offset>","parent":null,"children":[],"decl_id":null,"docs":" Get the UnitType of this unit.\n","sig":null,"attributes":[{"value":"/ Get the UnitType of this unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":923730,"byte_end":923764,"line_start":412,"line_end":412,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2735},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":923986,"byte_end":924005,"line_start":419,"line_end":419,"column_start":12,"column_end":31},"name":"debug_abbrev_offset","qualname":"<UnitHeader<R, Offset>>::debug_abbrev_offset","value":"pub fn debug_abbrev_offset(&Self) -> DebugAbbrevOffset<Offset>","parent":null,"children":[],"decl_id":null,"docs":" The offset into the `.debug_abbrev` section for this compilation unit's\n debugging information entries' abbreviations.\n","sig":null,"attributes":[{"value":"/ The offset into the `.debug_abbrev` section for this compilation unit's","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":923845,"byte_end":923920,"line_start":417,"line_end":417,"column_start":5,"column_end":80}},{"value":"/ debugging information entries' abbreviations.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":923925,"byte_end":923974,"line_start":418,"line_end":418,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2736},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":924162,"byte_end":924174,"line_start":424,"line_end":424,"column_start":12,"column_end":24},"name":"address_size","qualname":"<UnitHeader<R, Offset>>::address_size","value":"pub fn address_size(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" The size of addresses (in bytes) in this compilation unit.\n","sig":null,"attributes":[{"value":"/ The size of addresses (in bytes) in this compilation unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":924088,"byte_end":924150,"line_start":423,"line_end":423,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2737},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":924316,"byte_end":924322,"line_start":429,"line_end":429,"column_start":12,"column_end":18},"name":"format","qualname":"<UnitHeader<R, Offset>>::format","value":"pub fn format(&Self) -> Format","parent":null,"children":[],"decl_id":null,"docs":" Whether this compilation unit is encoded in 64- or 32-bit DWARF.\n","sig":null,"attributes":[{"value":"/ Whether this compilation unit is encoded in 64- or 32-bit DWARF.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":924236,"byte_end":924304,"line_start":428,"line_end":428,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2738},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":924458,"byte_end":924469,"line_start":434,"line_end":434,"column_start":12,"column_end":23},"name":"header_size","qualname":"<UnitHeader<R, Offset>>::header_size","value":"pub fn header_size(&Self) -> Offset","parent":null,"children":[],"decl_id":null,"docs":" The serialized size of the header for this compilation unit.\n","sig":null,"attributes":[{"value":"/ The serialized size of the header for this compilation unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":924382,"byte_end":924446,"line_start":433,"line_end":433,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2740},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":924959,"byte_end":924964,"line_start":449,"line_end":449,"column_start":12,"column_end":17},"name":"range","qualname":"<UnitHeader<R, Offset>>::range","value":"pub fn range(&Self, Range<UnitOffset<Offset>>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Get the underlying bytes for the supplied range.\n","sig":null,"attributes":[{"value":"/ Get the underlying bytes for the supplied range.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":924895,"byte_end":924947,"line_start":448,"line_end":448,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2741},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":925622,"byte_end":925632,"line_start":467,"line_end":467,"column_start":12,"column_end":22},"name":"range_from","qualname":"<UnitHeader<R, Offset>>::range_from","value":"pub fn range_from(&Self, RangeFrom<UnitOffset<Offset>>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Get the underlying bytes for the supplied range.\n","sig":null,"attributes":[{"value":"/ Get the underlying bytes for the supplied range.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":925558,"byte_end":925610,"line_start":466,"line_end":466,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2742},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":926022,"byte_end":926030,"line_start":478,"line_end":478,"column_start":12,"column_end":20},"name":"range_to","qualname":"<UnitHeader<R, Offset>>::range_to","value":"pub fn range_to(&Self, RangeTo<UnitOffset<Offset>>) -> Result<R>","parent":null,"children":[],"decl_id":null,"docs":" Get the underlying bytes for the supplied range.\n","sig":null,"attributes":[{"value":"/ Get the underlying bytes for the supplied range.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":925958,"byte_end":926010,"line_start":477,"line_end":477,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2743},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":926423,"byte_end":926428,"line_start":489,"line_end":489,"column_start":12,"column_end":17},"name":"entry","qualname":"<UnitHeader<R, Offset>>::entry","value":"pub fn entry<'me,\n             'abbrev>(&'me Self, &'abbrev Abbreviations, UnitOffset<Offset>)\n-> Result<DebuggingInformationEntry>","parent":null,"children":[],"decl_id":null,"docs":" Read the `DebuggingInformationEntry` at the given offset.\n","sig":null,"attributes":[{"value":"/ Read the `DebuggingInformationEntry` at the given offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":926350,"byte_end":926411,"line_start":488,"line_end":488,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2746},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":926874,"byte_end":926881,"line_start":500,"line_end":500,"column_start":12,"column_end":19},"name":"entries","qualname":"<UnitHeader<R, Offset>>::entries","value":"pub fn entries<'me, 'abbrev>(&'me Self, &'abbrev Abbreviations)\n-> EntriesCursor","parent":null,"children":[],"decl_id":null,"docs":" Navigate this unit's `DebuggingInformationEntry`s.\n","sig":null,"attributes":[{"value":"/ Navigate this unit's `DebuggingInformationEntry`s.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":926808,"byte_end":926862,"line_start":499,"line_end":499,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2749},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":927323,"byte_end":927340,"line_start":515,"line_end":515,"column_start":12,"column_end":29},"name":"entries_at_offset","qualname":"<UnitHeader<R, Offset>>::entries_at_offset","value":"pub fn entries_at_offset<'me,\n                         'abbrev>(&'me Self, &'abbrev Abbreviations,\n                                  UnitOffset<Offset>) -> Result<EntriesCursor>","parent":null,"children":[],"decl_id":null,"docs":" Navigate this compilation unit's `DebuggingInformationEntry`s\n starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Navigate this compilation unit's `DebuggingInformationEntry`s","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":927208,"byte_end":927273,"line_start":513,"line_end":513,"column_start":5,"column_end":70}},{"value":"/ starting at the given offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":927278,"byte_end":927311,"line_start":514,"line_end":514,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2752},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":927850,"byte_end":927862,"line_start":532,"line_end":532,"column_start":12,"column_end":24},"name":"entries_tree","qualname":"<UnitHeader<R, Offset>>::entries_tree","value":"pub fn entries_tree<'me,\n                    'abbrev>(&'me Self, &'abbrev Abbreviations,\n                             Option<UnitOffset<Offset>>)\n-> Result<EntriesTree>","parent":null,"children":[],"decl_id":null,"docs":" Navigate this unit's `DebuggingInformationEntry`s as a tree\n starting at the given offset.\n","sig":null,"attributes":[{"value":"/ Navigate this unit's `DebuggingInformationEntry`s as a tree","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":927737,"byte_end":927800,"line_start":530,"line_end":530,"column_start":5,"column_end":68}},{"value":"/ starting at the given offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":927805,"byte_end":927838,"line_start":531,"line_end":531,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2755},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":928333,"byte_end":928344,"line_start":545,"line_end":545,"column_start":12,"column_end":23},"name":"entries_raw","qualname":"<UnitHeader<R, Offset>>::entries_raw","value":"pub fn entries_raw<'me,\n                   'abbrev>(&'me Self, &'abbrev Abbreviations,\n                            Option<UnitOffset<Offset>>) -> Result<EntriesRaw>","parent":null,"children":[],"decl_id":null,"docs":" Read the raw data that defines the Debugging Information Entries.\n","sig":null,"attributes":[{"value":"/ Read the raw data that defines the Debugging Information Entries.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":928252,"byte_end":928321,"line_start":544,"line_end":544,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2758},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":928851,"byte_end":928864,"line_start":563,"line_end":563,"column_start":12,"column_end":25},"name":"abbreviations","qualname":"<UnitHeader<R, Offset>>::abbreviations","value":"pub fn abbreviations(&Self, &DebugAbbrev<R>) -> Result<Abbreviations>","parent":null,"children":[],"decl_id":null,"docs":" Parse this unit's abbreviations.\n","sig":null,"attributes":[{"value":"/ Parse this unit's abbreviations.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":928803,"byte_end":928839,"line_start":562,"line_end":562,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":8473},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":931969,"byte_end":931994,"line_start":658,"line_end":658,"column_start":12,"column_end":37},"name":"DebuggingInformationEntry","qualname":"::read::unit::DebuggingInformationEntry","value":"DebuggingInformationEntry {  }","parent":null,"children":[{"krate":0,"index":8478},{"krate":0,"index":8479},{"krate":0,"index":8480},{"krate":0,"index":8481},{"krate":0,"index":8482}],"decl_id":null,"docs":" A Debugging Information Entry (DIE).","sig":null,"attributes":[{"value":"/ A Debugging Information Entry (DIE).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":931812,"byte_end":931852,"line_start":654,"line_end":654,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":931853,"byte_end":931856,"line_start":655,"line_end":655,"column_start":1,"column_end":4}},{"value":"/ DIEs have a set of attributes and optionally have children DIEs as well.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":931857,"byte_end":931933,"line_start":656,"line_end":656,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2769},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":932494,"byte_end":932497,"line_start":676,"line_end":676,"column_start":12,"column_end":15},"name":"new","qualname":"<DebuggingInformationEntry>::new","value":"pub fn new(UnitOffset<Offset>, R, &'abbrev Abbreviation,\n           &'unit UnitHeader<R, Offset>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebuggingInformationEntry`.\n","sig":null,"attributes":[{"value":"/ Construct a new `DebuggingInformationEntry`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":932434,"byte_end":932482,"line_start":675,"line_end":675,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2770},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":932876,"byte_end":932880,"line_start":692,"line_end":692,"column_start":12,"column_end":16},"name":"code","qualname":"<DebuggingInformationEntry>::code","value":"pub fn code(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Get this entry's code.\n","sig":null,"attributes":[{"value":"/ Get this entry's code.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":932838,"byte_end":932864,"line_start":691,"line_end":691,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2771},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":932975,"byte_end":932981,"line_start":697,"line_end":697,"column_start":12,"column_end":18},"name":"offset","qualname":"<DebuggingInformationEntry>::offset","value":"pub fn offset(&Self) -> UnitOffset<Offset>","parent":null,"children":[],"decl_id":null,"docs":" Get this entry's offset.\n","sig":null,"attributes":[{"value":"/ Get this entry's offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":932935,"byte_end":932963,"line_start":696,"line_end":696,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2772},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935374,"byte_end":935377,"line_start":764,"line_end":764,"column_start":12,"column_end":15},"name":"tag","qualname":"<DebuggingInformationEntry>::tag","value":"pub fn tag(&Self) -> constants::DwTag","parent":null,"children":[],"decl_id":null,"docs":" Get this entry's `DW_TAG_whatever` tag.","sig":null,"attributes":[{"value":"/ Get this entry's `DW_TAG_whatever` tag.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933044,"byte_end":933087,"line_start":701,"line_end":701,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933092,"byte_end":933095,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933100,"byte_end":933107,"line_start":703,"line_end":703,"column_start":5,"column_end":12}},{"value":"/ # use gimli::{DebugAbbrev, DebugInfo, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933112,"byte_end":933168,"line_start":704,"line_end":704,"column_start":5,"column_end":61}},{"value":"/ # let info_buf = [","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933173,"byte_end":933195,"line_start":705,"line_end":705,"column_start":5,"column_end":27}},{"value":"/ #     // Comilation unit header","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933200,"byte_end":933235,"line_start":706,"line_end":706,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933240,"byte_end":933245,"line_start":707,"line_end":707,"column_start":5,"column_end":10}},{"value":"/ #     // 32-bit unit length = 12","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933250,"byte_end":933286,"line_start":708,"line_end":708,"column_start":5,"column_end":41}},{"value":"/ #     0x0c, 0x00, 0x00, 0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933291,"byte_end":933324,"line_start":709,"line_end":709,"column_start":5,"column_end":38}},{"value":"/ #     // Version 4","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933329,"byte_end":933351,"line_start":710,"line_end":710,"column_start":5,"column_end":27}},{"value":"/ #     0x04, 0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933356,"byte_end":933377,"line_start":711,"line_end":711,"column_start":5,"column_end":26}},{"value":"/ #     // debug_abbrev_offset","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933382,"byte_end":933414,"line_start":712,"line_end":712,"column_start":5,"column_end":37}},{"value":"/ #     0x00, 0x00, 0x00, 0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933419,"byte_end":933452,"line_start":713,"line_end":713,"column_start":5,"column_end":38}},{"value":"/ #     // Address size","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933457,"byte_end":933482,"line_start":714,"line_end":714,"column_start":5,"column_end":30}},{"value":"/ #     0x04,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933487,"byte_end":933502,"line_start":715,"line_end":715,"column_start":5,"column_end":20}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933507,"byte_end":933512,"line_start":716,"line_end":716,"column_start":5,"column_end":10}},{"value":"/ #     // DIEs","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933517,"byte_end":933534,"line_start":717,"line_end":717,"column_start":5,"column_end":22}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933539,"byte_end":933544,"line_start":718,"line_end":718,"column_start":5,"column_end":10}},{"value":"/ #     // Abbreviation code","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933549,"byte_end":933579,"line_start":719,"line_end":719,"column_start":5,"column_end":35}},{"value":"/ #     0x01,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933584,"byte_end":933599,"line_start":720,"line_end":720,"column_start":5,"column_end":20}},{"value":"/ #     // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933604,"byte_end":933659,"line_start":721,"line_end":721,"column_start":5,"column_end":60}},{"value":"/ #     0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933664,"byte_end":933697,"line_start":722,"line_end":722,"column_start":5,"column_end":38}},{"value":"/ # ];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933702,"byte_end":933710,"line_start":723,"line_end":723,"column_start":5,"column_end":13}},{"value":"/ # let debug_info = DebugInfo::new(&info_buf, LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933715,"byte_end":933778,"line_start":724,"line_end":724,"column_start":5,"column_end":68}},{"value":"/ # let abbrev_buf = [","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933783,"byte_end":933807,"line_start":725,"line_end":725,"column_start":5,"column_end":29}},{"value":"/ #     // Code","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933812,"byte_end":933829,"line_start":726,"line_end":726,"column_start":5,"column_end":22}},{"value":"/ #     0x01,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933834,"byte_end":933849,"line_start":727,"line_end":727,"column_start":5,"column_end":20}},{"value":"/ #     // DW_TAG_subprogram","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933854,"byte_end":933884,"line_start":728,"line_end":728,"column_start":5,"column_end":35}},{"value":"/ #     0x2e,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933889,"byte_end":933904,"line_start":729,"line_end":729,"column_start":5,"column_end":20}},{"value":"/ #     // DW_CHILDREN_no","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933909,"byte_end":933936,"line_start":730,"line_end":730,"column_start":5,"column_end":32}},{"value":"/ #     0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933941,"byte_end":933956,"line_start":731,"line_end":731,"column_start":5,"column_end":20}},{"value":"/ #     // Begin attributes","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933961,"byte_end":933990,"line_start":732,"line_end":732,"column_start":5,"column_end":34}},{"value":"/ #       // Attribute name = DW_AT_name","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":933995,"byte_end":934037,"line_start":733,"line_end":733,"column_start":5,"column_end":47}},{"value":"/ #       0x03,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":934042,"byte_end":934059,"line_start":734,"line_end":734,"column_start":5,"column_end":22}},{"value":"/ #       // Attribute form = DW_FORM_string","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":934064,"byte_end":934110,"line_start":735,"line_end":735,"column_start":5,"column_end":51}},{"value":"/ #       0x08,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":934115,"byte_end":934132,"line_start":736,"line_end":736,"column_start":5,"column_end":22}},{"value":"/ #     // End attributes","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":934137,"byte_end":934164,"line_start":737,"line_end":737,"column_start":5,"column_end":32}},{"value":"/ #     0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":934169,"byte_end":934184,"line_start":738,"line_end":738,"column_start":5,"column_end":20}},{"value":"/ #     0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":934189,"byte_end":934204,"line_start":739,"line_end":739,"column_start":5,"column_end":20}},{"value":"/ #     // Null terminator","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":934209,"byte_end":934237,"line_start":740,"line_end":740,"column_start":5,"column_end":33}},{"value":"/ #     0x00","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":934242,"byte_end":934256,"line_start":741,"line_end":741,"column_start":5,"column_end":19}},{"value":"/ # ];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":934261,"byte_end":934269,"line_start":742,"line_end":742,"column_start":5,"column_end":13}},{"value":"/ # let debug_abbrev = DebugAbbrev::new(&abbrev_buf, LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":934274,"byte_end":934343,"line_start":743,"line_end":743,"column_start":5,"column_end":74}},{"value":"/ # let unit = debug_info.units().next().unwrap().unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":934348,"byte_end":934409,"line_start":744,"line_end":744,"column_start":5,"column_end":66}},{"value":"/ # let abbrevs = unit.abbreviations(&debug_abbrev).unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":934414,"byte_end":934477,"line_start":745,"line_end":745,"column_start":5,"column_end":68}},{"value":"/ # let mut cursor = unit.entries(&abbrevs);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":934482,"byte_end":934528,"line_start":746,"line_end":746,"column_start":5,"column_end":51}},{"value":"/ # let (_, entry) = cursor.next_dfs().unwrap().unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":934533,"byte_end":934592,"line_start":747,"line_end":747,"column_start":5,"column_end":64}},{"value":"/ # let mut get_some_entry = || entry;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":934597,"byte_end":934637,"line_start":748,"line_end":748,"column_start":5,"column_end":45}},{"value":"/ let entry = get_some_entry();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":934642,"byte_end":934675,"line_start":749,"line_end":749,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":934680,"byte_end":934683,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ match entry.tag() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":934688,"byte_end":934711,"line_start":751,"line_end":751,"column_start":5,"column_end":28}},{"value":"/     gimli::DW_TAG_subprogram =>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":934716,"byte_end":934751,"line_start":752,"line_end":752,"column_start":5,"column_end":40}},{"value":"/         println!(\"this entry contains debug info about a function\"),","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":934756,"byte_end":934828,"line_start":753,"line_end":753,"column_start":5,"column_end":77}},{"value":"/     gimli::DW_TAG_inlined_subroutine =>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":934833,"byte_end":934876,"line_start":754,"line_end":754,"column_start":5,"column_end":48}},{"value":"/         println!(\"this entry contains debug info about a particular instance of inlining\"),","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":934881,"byte_end":934976,"line_start":755,"line_end":755,"column_start":5,"column_end":100}},{"value":"/     gimli::DW_TAG_variable =>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":934981,"byte_end":935014,"line_start":756,"line_end":756,"column_start":5,"column_end":38}},{"value":"/         println!(\"this entry contains debug info about a local variable\"),","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935019,"byte_end":935097,"line_start":757,"line_end":757,"column_start":5,"column_end":83}},{"value":"/     gimli::DW_TAG_formal_parameter =>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935102,"byte_end":935143,"line_start":758,"line_end":758,"column_start":5,"column_end":46}},{"value":"/         println!(\"this entry contains debug info about a function parameter\"),","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935148,"byte_end":935230,"line_start":759,"line_end":759,"column_start":5,"column_end":87}},{"value":"/     otherwise =>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935235,"byte_end":935255,"line_start":760,"line_end":760,"column_start":5,"column_end":25}},{"value":"/         println!(\"this entry is some other kind of data: {:?}\", otherwise),","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935260,"byte_end":935339,"line_start":761,"line_end":761,"column_start":5,"column_end":84}},{"value":"/ };","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935344,"byte_end":935350,"line_start":762,"line_end":762,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935355,"byte_end":935362,"line_start":763,"line_end":763,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2773},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935528,"byte_end":935540,"line_start":769,"line_end":769,"column_start":12,"column_end":24},"name":"has_children","qualname":"<DebuggingInformationEntry>::has_children","value":"pub fn has_children(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if this entry's type can have children, false otherwise.\n","sig":null,"attributes":[{"value":"/ Return true if this entry's type can have children, false otherwise.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935444,"byte_end":935516,"line_start":768,"line_end":768,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2774},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":938280,"byte_end":938285,"line_start":851,"line_end":851,"column_start":12,"column_end":17},"name":"attrs","qualname":"<DebuggingInformationEntry>::attrs","value":"pub fn attrs<'me>(&'me Self) -> AttrsIter","parent":null,"children":[],"decl_id":null,"docs":" Iterate over this entry's set of attributes.","sig":null,"attributes":[{"value":"/ Iterate over this entry's set of attributes.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935604,"byte_end":935652,"line_start":773,"line_end":773,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935657,"byte_end":935660,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935665,"byte_end":935672,"line_start":775,"line_end":775,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugAbbrev, DebugInfo, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935677,"byte_end":935731,"line_start":776,"line_end":776,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935736,"byte_end":935739,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ // Read the `.debug_info` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935744,"byte_end":935782,"line_start":778,"line_end":778,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935787,"byte_end":935790,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ # let info_buf = [","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935795,"byte_end":935817,"line_start":780,"line_end":780,"column_start":5,"column_end":27}},{"value":"/ #     // Comilation unit header","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935822,"byte_end":935857,"line_start":781,"line_end":781,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935862,"byte_end":935867,"line_start":782,"line_end":782,"column_start":5,"column_end":10}},{"value":"/ #     // 32-bit unit length = 12","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935872,"byte_end":935908,"line_start":783,"line_end":783,"column_start":5,"column_end":41}},{"value":"/ #     0x0c, 0x00, 0x00, 0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935913,"byte_end":935946,"line_start":784,"line_end":784,"column_start":5,"column_end":38}},{"value":"/ #     // Version 4","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935951,"byte_end":935973,"line_start":785,"line_end":785,"column_start":5,"column_end":27}},{"value":"/ #     0x04, 0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":935978,"byte_end":935999,"line_start":786,"line_end":786,"column_start":5,"column_end":26}},{"value":"/ #     // debug_abbrev_offset","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936004,"byte_end":936036,"line_start":787,"line_end":787,"column_start":5,"column_end":37}},{"value":"/ #     0x00, 0x00, 0x00, 0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936041,"byte_end":936074,"line_start":788,"line_end":788,"column_start":5,"column_end":38}},{"value":"/ #     // Address size","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936079,"byte_end":936104,"line_start":789,"line_end":789,"column_start":5,"column_end":30}},{"value":"/ #     0x04,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936109,"byte_end":936124,"line_start":790,"line_end":790,"column_start":5,"column_end":20}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936129,"byte_end":936134,"line_start":791,"line_end":791,"column_start":5,"column_end":10}},{"value":"/ #     // DIEs","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936139,"byte_end":936156,"line_start":792,"line_end":792,"column_start":5,"column_end":22}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936161,"byte_end":936166,"line_start":793,"line_end":793,"column_start":5,"column_end":10}},{"value":"/ #     // Abbreviation code","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936171,"byte_end":936201,"line_start":794,"line_end":794,"column_start":5,"column_end":35}},{"value":"/ #     0x01,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936206,"byte_end":936221,"line_start":795,"line_end":795,"column_start":5,"column_end":20}},{"value":"/ #     // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936226,"byte_end":936281,"line_start":796,"line_end":796,"column_start":5,"column_end":60}},{"value":"/ #     0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936286,"byte_end":936319,"line_start":797,"line_end":797,"column_start":5,"column_end":38}},{"value":"/ # ];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936324,"byte_end":936332,"line_start":798,"line_end":798,"column_start":5,"column_end":13}},{"value":"/ # let read_debug_info_section_somehow = || &info_buf;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936337,"byte_end":936394,"line_start":799,"line_end":799,"column_start":5,"column_end":62}},{"value":"/ let debug_info = DebugInfo::new(read_debug_info_section_somehow(), LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936399,"byte_end":936484,"line_start":800,"line_end":800,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936489,"byte_end":936492,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ // Get the data about the first compilation unit out of the `.debug_info`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936497,"byte_end":936575,"line_start":802,"line_end":802,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936580,"byte_end":936583,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ let unit = debug_info.units().next()","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936588,"byte_end":936628,"line_start":804,"line_end":804,"column_start":5,"column_end":45}},{"value":"/     .expect(\"Should have at least one compilation unit\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936633,"byte_end":936693,"line_start":805,"line_end":805,"column_start":5,"column_end":65}},{"value":"/     .expect(\"and it should parse ok\");","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936698,"byte_end":936740,"line_start":806,"line_end":806,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936745,"byte_end":936748,"line_start":807,"line_end":807,"column_start":5,"column_end":8}},{"value":"/ // Read the `.debug_abbrev` section and parse the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936753,"byte_end":936806,"line_start":808,"line_end":808,"column_start":5,"column_end":58}},{"value":"/ // abbreviations for our compilation unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936811,"byte_end":936857,"line_start":809,"line_end":809,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936862,"byte_end":936865,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ # let abbrev_buf = [","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936870,"byte_end":936894,"line_start":811,"line_end":811,"column_start":5,"column_end":29}},{"value":"/ #     // Code","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936899,"byte_end":936916,"line_start":812,"line_end":812,"column_start":5,"column_end":22}},{"value":"/ #     0x01,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936921,"byte_end":936936,"line_start":813,"line_end":813,"column_start":5,"column_end":20}},{"value":"/ #     // DW_TAG_subprogram","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936941,"byte_end":936971,"line_start":814,"line_end":814,"column_start":5,"column_end":35}},{"value":"/ #     0x2e,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936976,"byte_end":936991,"line_start":815,"line_end":815,"column_start":5,"column_end":20}},{"value":"/ #     // DW_CHILDREN_no","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":936996,"byte_end":937023,"line_start":816,"line_end":816,"column_start":5,"column_end":32}},{"value":"/ #     0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937028,"byte_end":937043,"line_start":817,"line_end":817,"column_start":5,"column_end":20}},{"value":"/ #     // Begin attributes","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937048,"byte_end":937077,"line_start":818,"line_end":818,"column_start":5,"column_end":34}},{"value":"/ #       // Attribute name = DW_AT_name","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937082,"byte_end":937124,"line_start":819,"line_end":819,"column_start":5,"column_end":47}},{"value":"/ #       0x03,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937129,"byte_end":937146,"line_start":820,"line_end":820,"column_start":5,"column_end":22}},{"value":"/ #       // Attribute form = DW_FORM_string","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937151,"byte_end":937197,"line_start":821,"line_end":821,"column_start":5,"column_end":51}},{"value":"/ #       0x08,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937202,"byte_end":937219,"line_start":822,"line_end":822,"column_start":5,"column_end":22}},{"value":"/ #     // End attributes","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937224,"byte_end":937251,"line_start":823,"line_end":823,"column_start":5,"column_end":32}},{"value":"/ #     0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937256,"byte_end":937271,"line_start":824,"line_end":824,"column_start":5,"column_end":20}},{"value":"/ #     0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937276,"byte_end":937291,"line_start":825,"line_end":825,"column_start":5,"column_end":20}},{"value":"/ #     // Null terminator","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937296,"byte_end":937324,"line_start":826,"line_end":826,"column_start":5,"column_end":33}},{"value":"/ #     0x00","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937329,"byte_end":937343,"line_start":827,"line_end":827,"column_start":5,"column_end":19}},{"value":"/ # ];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937348,"byte_end":937356,"line_start":828,"line_end":828,"column_start":5,"column_end":13}},{"value":"/ # let read_debug_abbrev_section_somehow = || &abbrev_buf;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937361,"byte_end":937422,"line_start":829,"line_end":829,"column_start":5,"column_end":66}},{"value":"/ let debug_abbrev = DebugAbbrev::new(read_debug_abbrev_section_somehow(), LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937427,"byte_end":937518,"line_start":830,"line_end":830,"column_start":5,"column_end":96}},{"value":"/ let abbrevs = unit.abbreviations(&debug_abbrev).unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937523,"byte_end":937584,"line_start":831,"line_end":831,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937589,"byte_end":937592,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ // Get the first entry from that compilation unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937597,"byte_end":937651,"line_start":833,"line_end":833,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937656,"byte_end":937659,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ let mut cursor = unit.entries(&abbrevs);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937664,"byte_end":937708,"line_start":835,"line_end":835,"column_start":5,"column_end":49}},{"value":"/ let (_, entry) = cursor.next_dfs()","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937713,"byte_end":937751,"line_start":836,"line_end":836,"column_start":5,"column_end":43}},{"value":"/     .expect(\"Should parse next entry\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937756,"byte_end":937798,"line_start":837,"line_end":837,"column_start":5,"column_end":47}},{"value":"/     .expect(\"Should have at least one entry\");","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937803,"byte_end":937853,"line_start":838,"line_end":838,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937858,"byte_end":937861,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ // Finally, print the first entry's attributes.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937866,"byte_end":937917,"line_start":840,"line_end":840,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937922,"byte_end":937925,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ let mut attrs = entry.attrs();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937930,"byte_end":937964,"line_start":842,"line_end":842,"column_start":5,"column_end":39}},{"value":"/ while let Some(attr) = attrs.next().unwrap() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":937969,"byte_end":938019,"line_start":843,"line_end":843,"column_start":5,"column_end":55}},{"value":"/     println!(\"Attribute name = {:?}\", attr.name());","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":938024,"byte_end":938079,"line_start":844,"line_end":844,"column_start":5,"column_end":60}},{"value":"/     println!(\"Attribute value = {:?}\", attr.value());","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":938084,"byte_end":938141,"line_start":845,"line_end":845,"column_start":5,"column_end":62}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":938146,"byte_end":938151,"line_start":846,"line_end":846,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":938156,"byte_end":938163,"line_start":847,"line_end":847,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":938168,"byte_end":938171,"line_start":848,"line_end":848,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":938176,"byte_end":938197,"line_start":849,"line_end":849,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":938202,"byte_end":938268,"line_start":850,"line_end":850,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2776},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":938650,"byte_end":938654,"line_start":861,"line_end":861,"column_start":12,"column_end":16},"name":"attr","qualname":"<DebuggingInformationEntry>::attr","value":"pub fn attr(&Self, constants::DwAt) -> Result<Option<Attribute<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Find the first attribute in this entry which has the given name,\n and return it. Returns `Ok(None)` if no attribute is found.\n","sig":null,"attributes":[{"value":"/ Find the first attribute in this entry which has the given name,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":938502,"byte_end":938570,"line_start":859,"line_end":859,"column_start":5,"column_end":73}},{"value":"/ and return it. Returns `Ok(None)` if no attribute is found.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":938575,"byte_end":938638,"line_start":860,"line_end":860,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2777},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":939091,"byte_end":939105,"line_start":873,"line_end":873,"column_start":12,"column_end":26},"name":"attr_value_raw","qualname":"<DebuggingInformationEntry>::attr_value_raw","value":"pub fn attr_value_raw(&Self, constants::DwAt)\n-> Result<Option<AttributeValue<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Find the first attribute in this entry which has the given name,\n and return its raw value. Returns `Ok(None)` if no attribute is found.\n","sig":null,"attributes":[{"value":"/ Find the first attribute in this entry which has the given name,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":938932,"byte_end":939000,"line_start":871,"line_end":871,"column_start":5,"column_end":73}},{"value":"/ and return its raw value. Returns `Ok(None)` if no attribute is found.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":939005,"byte_end":939079,"line_start":872,"line_end":872,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":2780},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":939444,"byte_end":939454,"line_start":881,"line_end":881,"column_start":12,"column_end":22},"name":"attr_value","qualname":"<DebuggingInformationEntry>::attr_value","value":"pub fn attr_value(&Self, constants::DwAt) -> Result<Option<AttributeValue<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Find the first attribute in this entry which has the given name,\n and return its normalized value.  Returns `Ok(None)` if no\n attribute is found.\n","sig":null,"attributes":[{"value":"/ Find the first attribute in this entry which has the given name,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":939269,"byte_end":939337,"line_start":878,"line_end":878,"column_start":5,"column_end":73}},{"value":"/ and return its normalized value.  Returns `Ok(None)` if no","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":939342,"byte_end":939404,"line_start":879,"line_end":879,"column_start":5,"column_end":67}},{"value":"/ attribute is found.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":939409,"byte_end":939432,"line_start":880,"line_end":880,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8498},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":941848,"byte_end":941852,"line_start":950,"line_end":950,"column_start":5,"column_end":9},"name":"Addr","qualname":"::read::unit::AttributeValue::Addr","value":"AttributeValue::Addr(u64)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" \"Refers to some location in the address space of the described program.\"\n","sig":null,"attributes":[{"value":"/ \"Refers to some location in the address space of the described program.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":941767,"byte_end":941843,"line_start":949,"line_end":949,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8501},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":941913,"byte_end":941918,"line_start":953,"line_end":953,"column_start":5,"column_end":10},"name":"Block","qualname":"::read::unit::AttributeValue::Block","value":"AttributeValue::Block(R)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" A slice of an arbitrary number of bytes.\n","sig":null,"attributes":[{"value":"/ A slice of an arbitrary number of bytes.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":941864,"byte_end":941908,"line_start":952,"line_end":952,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8504},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":942196,"byte_end":942201,"line_start":960,"line_end":960,"column_start":5,"column_end":10},"name":"Data1","qualname":"::read::unit::AttributeValue::Data1","value":"AttributeValue::Data1(u8)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" A one byte constant data value. How to interpret the byte depends on context.","sig":null,"attributes":[{"value":"/ A one byte constant data value. How to interpret the byte depends on context.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":941928,"byte_end":942009,"line_start":955,"line_end":955,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":942014,"byte_end":942017,"line_start":956,"line_end":956,"column_start":5,"column_end":8}},{"value":"/ From section 7 of the standard: \"Depending on context, it may be a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":942022,"byte_end":942092,"line_start":957,"line_end":957,"column_start":5,"column_end":75}},{"value":"/ signed integer, an unsigned integer, a floating-point constant, or","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":942097,"byte_end":942167,"line_start":958,"line_end":958,"column_start":5,"column_end":75}},{"value":"/ anything else.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":942172,"byte_end":942191,"line_start":959,"line_end":959,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8507},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":942610,"byte_end":942615,"line_start":970,"line_end":970,"column_start":5,"column_end":10},"name":"Data2","qualname":"::read::unit::AttributeValue::Data2","value":"AttributeValue::Data2(u16)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" A two byte constant data value. How to interpret the bytes depends on context.","sig":null,"attributes":[{"value":"/ A two byte constant data value. How to interpret the bytes depends on context.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":942212,"byte_end":942294,"line_start":962,"line_end":962,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":942299,"byte_end":942302,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ These bytes have been converted from `R::Endian`. This may need to be reversed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":942307,"byte_end":942389,"line_start":964,"line_end":964,"column_start":5,"column_end":87}},{"value":"/ if this was not required.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":942394,"byte_end":942423,"line_start":965,"line_end":965,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":942428,"byte_end":942431,"line_start":966,"line_end":966,"column_start":5,"column_end":8}},{"value":"/ From section 7 of the standard: \"Depending on context, it may be a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":942436,"byte_end":942506,"line_start":967,"line_end":967,"column_start":5,"column_end":75}},{"value":"/ signed integer, an unsigned integer, a floating-point constant, or","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":942511,"byte_end":942581,"line_start":968,"line_end":968,"column_start":5,"column_end":75}},{"value":"/ anything else.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":942586,"byte_end":942605,"line_start":969,"line_end":969,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8510},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943026,"byte_end":943031,"line_start":980,"line_end":980,"column_start":5,"column_end":10},"name":"Data4","qualname":"::read::unit::AttributeValue::Data4","value":"AttributeValue::Data4(u32)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" A four byte constant data value. How to interpret the bytes depends on context.","sig":null,"attributes":[{"value":"/ A four byte constant data value. How to interpret the bytes depends on context.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":942627,"byte_end":942710,"line_start":972,"line_end":972,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":942715,"byte_end":942718,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ These bytes have been converted from `R::Endian`. This may need to be reversed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":942723,"byte_end":942805,"line_start":974,"line_end":974,"column_start":5,"column_end":87}},{"value":"/ if this was not required.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":942810,"byte_end":942839,"line_start":975,"line_end":975,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":942844,"byte_end":942847,"line_start":976,"line_end":976,"column_start":5,"column_end":8}},{"value":"/ From section 7 of the standard: \"Depending on context, it may be a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":942852,"byte_end":942922,"line_start":977,"line_end":977,"column_start":5,"column_end":75}},{"value":"/ signed integer, an unsigned integer, a floating-point constant, or","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":942927,"byte_end":942997,"line_start":978,"line_end":978,"column_start":5,"column_end":75}},{"value":"/ anything else.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943002,"byte_end":943021,"line_start":979,"line_end":979,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8513},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943444,"byte_end":943449,"line_start":990,"line_end":990,"column_start":5,"column_end":10},"name":"Data8","qualname":"::read::unit::AttributeValue::Data8","value":"AttributeValue::Data8(u64)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An eight byte constant data value. How to interpret the bytes depends on context.","sig":null,"attributes":[{"value":"/ An eight byte constant data value. How to interpret the bytes depends on context.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943043,"byte_end":943128,"line_start":982,"line_end":982,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943133,"byte_end":943136,"line_start":983,"line_end":983,"column_start":5,"column_end":8}},{"value":"/ These bytes have been converted from `R::Endian`. This may need to be reversed","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943141,"byte_end":943223,"line_start":984,"line_end":984,"column_start":5,"column_end":87}},{"value":"/ if this was not required.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943228,"byte_end":943257,"line_start":985,"line_end":985,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943262,"byte_end":943265,"line_start":986,"line_end":986,"column_start":5,"column_end":8}},{"value":"/ From section 7 of the standard: \"Depending on context, it may be a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943270,"byte_end":943340,"line_start":987,"line_end":987,"column_start":5,"column_end":75}},{"value":"/ signed integer, an unsigned integer, a floating-point constant, or","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943345,"byte_end":943415,"line_start":988,"line_end":988,"column_start":5,"column_end":75}},{"value":"/ anything else.\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943420,"byte_end":943439,"line_start":989,"line_end":989,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8516},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943496,"byte_end":943501,"line_start":993,"line_end":993,"column_start":5,"column_end":10},"name":"Sdata","qualname":"::read::unit::AttributeValue::Sdata","value":"AttributeValue::Sdata(i64)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" A signed integer constant.\n","sig":null,"attributes":[{"value":"/ A signed integer constant.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943461,"byte_end":943491,"line_start":992,"line_end":992,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8519},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943551,"byte_end":943556,"line_start":996,"line_end":996,"column_start":5,"column_end":10},"name":"Udata","qualname":"::read::unit::AttributeValue::Udata","value":"AttributeValue::Udata(u64)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An unsigned integer constant.\n","sig":null,"attributes":[{"value":"/ An unsigned integer constant.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943513,"byte_end":943546,"line_start":995,"line_end":995,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8522},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943696,"byte_end":943703,"line_start":1000,"line_end":1000,"column_start":5,"column_end":12},"name":"Exprloc","qualname":"::read::unit::AttributeValue::Exprloc","value":"AttributeValue::Exprloc(Expression<R>)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" \"The information bytes contain a DWARF expression (see Section 2.5) or\n location description (see Section 2.6).\"\n","sig":null,"attributes":[{"value":"/ \"The information bytes contain a DWARF expression (see Section 2.5) or","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943568,"byte_end":943642,"line_start":998,"line_end":998,"column_start":5,"column_end":79}},{"value":"/ location description (see Section 2.6).\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943647,"byte_end":943691,"line_start":999,"line_end":999,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8525},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943796,"byte_end":943800,"line_start":1003,"line_end":1003,"column_start":5,"column_end":9},"name":"Flag","qualname":"::read::unit::AttributeValue::Flag","value":"AttributeValue::Flag(bool)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" A boolean that indicates presence or absence of the attribute.\n","sig":null,"attributes":[{"value":"/ A boolean that indicates presence or absence of the attribute.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943725,"byte_end":943791,"line_start":1002,"line_end":1002,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8528},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943918,"byte_end":943927,"line_start":1007,"line_end":1007,"column_start":5,"column_end":14},"name":"SecOffset","qualname":"::read::unit::AttributeValue::SecOffset","value":"AttributeValue::SecOffset(Offset)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An offset into another section. Which section this is an offset into\n depends on context.\n","sig":null,"attributes":[{"value":"/ An offset into another section. Which section this is an offset into","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943813,"byte_end":943885,"line_start":1005,"line_end":1005,"column_start":5,"column_end":77}},{"value":"/ depends on context.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943890,"byte_end":943913,"line_start":1006,"line_end":1006,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8531},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":944012,"byte_end":944025,"line_start":1010,"line_end":1010,"column_start":5,"column_end":18},"name":"DebugAddrBase","qualname":"::read::unit::AttributeValue::DebugAddrBase","value":"AttributeValue::DebugAddrBase(DebugAddrBase<Offset>)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An offset to a set of addresses in the `.debug_addr` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of addresses in the `.debug_addr` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":943942,"byte_end":944007,"line_start":1009,"line_end":1009,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8534},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":944126,"byte_end":944140,"line_start":1013,"line_end":1013,"column_start":5,"column_end":19},"name":"DebugAddrIndex","qualname":"::read::unit::AttributeValue::DebugAddrIndex","value":"AttributeValue::DebugAddrIndex(DebugAddrIndex<Offset>)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An index into a set of addresses in the `.debug_addr` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of addresses in the `.debug_addr` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":944055,"byte_end":944121,"line_start":1012,"line_end":1012,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8537},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":944224,"byte_end":944231,"line_start":1016,"line_end":1016,"column_start":5,"column_end":12},"name":"UnitRef","qualname":"::read::unit::AttributeValue::UnitRef","value":"AttributeValue::UnitRef(UnitOffset<Offset>)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An offset into the current compilation unit.\n","sig":null,"attributes":[{"value":"/ An offset into the current compilation unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":944171,"byte_end":944219,"line_start":1015,"line_end":1015,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8540},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":944388,"byte_end":944400,"line_start":1020,"line_end":1020,"column_start":5,"column_end":17},"name":"DebugInfoRef","qualname":"::read::unit::AttributeValue::DebugInfoRef","value":"AttributeValue::DebugInfoRef(DebugInfoOffset<Offset>)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An offset into the current `.debug_info` section, but possibly a\n different compilation unit from the current one.\n","sig":null,"attributes":[{"value":"/ An offset into the current `.debug_info` section, but possibly a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":944258,"byte_end":944326,"line_start":1018,"line_end":1018,"column_start":5,"column_end":73}},{"value":"/ different compilation unit from the current one.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":944331,"byte_end":944383,"line_start":1019,"line_end":1019,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8543},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":944515,"byte_end":944530,"line_start":1023,"line_end":1023,"column_start":5,"column_end":20},"name":"DebugInfoRefSup","qualname":"::read::unit::AttributeValue::DebugInfoRefSup","value":"AttributeValue::DebugInfoRefSup(DebugInfoOffset<Offset>)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An offset into the `.debug_info` section of the supplementary object file.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_info` section of the supplementary object file.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":944432,"byte_end":944510,"line_start":1022,"line_end":1022,"column_start":5,"column_end":83}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8546},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":944612,"byte_end":944624,"line_start":1026,"line_end":1026,"column_start":5,"column_end":17},"name":"DebugLineRef","qualname":"::read::unit::AttributeValue::DebugLineRef","value":"AttributeValue::DebugLineRef(DebugLineOffset<Offset>)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An offset into the `.debug_line` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_line` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":944562,"byte_end":944607,"line_start":1025,"line_end":1025,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8549},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":944745,"byte_end":944761,"line_start":1029,"line_end":1029,"column_start":5,"column_end":21},"name":"LocationListsRef","qualname":"::read::unit::AttributeValue::LocationListsRef","value":"AttributeValue::LocationListsRef(LocationListsOffset<Offset>)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An offset into either the `.debug_loc` section or the `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ An offset into either the `.debug_loc` section or the `.debug_loclists` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":944656,"byte_end":944740,"line_start":1028,"line_end":1028,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8552},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":944869,"byte_end":944886,"line_start":1032,"line_end":1032,"column_start":5,"column_end":22},"name":"DebugLocListsBase","qualname":"::read::unit::AttributeValue::DebugLocListsBase","value":"AttributeValue::DebugLocListsBase(DebugLocListsBase<Offset>)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An offset to a set of offsets in the `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of offsets in the `.debug_loclists` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":944797,"byte_end":944864,"line_start":1031,"line_end":1031,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8555},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":944993,"byte_end":945011,"line_start":1035,"line_end":1035,"column_start":5,"column_end":23},"name":"DebugLocListsIndex","qualname":"::read::unit::AttributeValue::DebugLocListsIndex","value":"AttributeValue::DebugLocListsIndex(DebugLocListsIndex<Offset>)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An index into a set of offsets in the `.debug_loclists` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of offsets in the `.debug_loclists` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":944920,"byte_end":944988,"line_start":1034,"line_end":1034,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8558},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":945099,"byte_end":945114,"line_start":1038,"line_end":1038,"column_start":5,"column_end":20},"name":"DebugMacinfoRef","qualname":"::read::unit::AttributeValue::DebugMacinfoRef","value":"AttributeValue::DebugMacinfoRef(DebugMacinfoOffset<Offset>)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An offset into the `.debug_macinfo` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_macinfo` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":945046,"byte_end":945094,"line_start":1037,"line_end":1037,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8561},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":945200,"byte_end":945213,"line_start":1041,"line_end":1041,"column_start":5,"column_end":18},"name":"DebugMacroRef","qualname":"::read::unit::AttributeValue::DebugMacroRef","value":"AttributeValue::DebugMacroRef(DebugMacroOffset<Offset>)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An offset into the `.debug_macro` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_macro` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":945149,"byte_end":945195,"line_start":1040,"line_end":1040,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8564},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":945298,"byte_end":945311,"line_start":1044,"line_end":1044,"column_start":5,"column_end":18},"name":"RangeListsRef","qualname":"::read::unit::AttributeValue::RangeListsRef","value":"AttributeValue::RangeListsRef(RawRangeListsOffset<Offset>)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An offset into the `.debug_ranges` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_ranges` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":945246,"byte_end":945293,"line_start":1043,"line_end":1043,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8567},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":945419,"byte_end":945436,"line_start":1047,"line_end":1047,"column_start":5,"column_end":22},"name":"DebugRngListsBase","qualname":"::read::unit::AttributeValue::DebugRngListsBase","value":"AttributeValue::DebugRngListsBase(DebugRngListsBase<Offset>)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An offset to a set of offsets in the `.debug_rnglists` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of offsets in the `.debug_rnglists` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":945347,"byte_end":945414,"line_start":1046,"line_end":1046,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8570},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":945543,"byte_end":945561,"line_start":1050,"line_end":1050,"column_start":5,"column_end":23},"name":"DebugRngListsIndex","qualname":"::read::unit::AttributeValue::DebugRngListsIndex","value":"AttributeValue::DebugRngListsIndex(DebugRngListsIndex<Offset>)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An index into a set of offsets in the `.debug_rnglists` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of offsets in the `.debug_rnglists` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":945470,"byte_end":945538,"line_start":1049,"line_end":1049,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8573},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":945622,"byte_end":945635,"line_start":1053,"line_end":1053,"column_start":5,"column_end":18},"name":"DebugTypesRef","qualname":"::read::unit::AttributeValue::DebugTypesRef","value":"AttributeValue::DebugTypesRef(DebugTypeSignature)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" A type signature.\n","sig":null,"attributes":[{"value":"/ A type signature.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":945596,"byte_end":945617,"line_start":1052,"line_end":1052,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8576},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":945711,"byte_end":945722,"line_start":1056,"line_end":1056,"column_start":5,"column_end":16},"name":"DebugStrRef","qualname":"::read::unit::AttributeValue::DebugStrRef","value":"AttributeValue::DebugStrRef(DebugStrOffset<Offset>)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An offset into the `.debug_str` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_str` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":945662,"byte_end":945706,"line_start":1055,"line_end":1055,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8579},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":945835,"byte_end":945849,"line_start":1059,"line_end":1059,"column_start":5,"column_end":19},"name":"DebugStrRefSup","qualname":"::read::unit::AttributeValue::DebugStrRefSup","value":"AttributeValue::DebugStrRefSup(DebugStrOffset<Offset>)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An offset into the `.debug_str` section of the supplementary object file.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_str` section of the supplementary object file.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":945753,"byte_end":945830,"line_start":1058,"line_end":1058,"column_start":5,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8582},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":945955,"byte_end":945974,"line_start":1062,"line_end":1062,"column_start":5,"column_end":24},"name":"DebugStrOffsetsBase","qualname":"::read::unit::AttributeValue::DebugStrOffsetsBase","value":"AttributeValue::DebugStrOffsetsBase(DebugStrOffsetsBase<Offset>)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An offset to a set of entries in the `.debug_str_offsets` section.\n","sig":null,"attributes":[{"value":"/ An offset to a set of entries in the `.debug_str_offsets` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":945880,"byte_end":945950,"line_start":1061,"line_end":1061,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8585},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":946086,"byte_end":946106,"line_start":1065,"line_end":1065,"column_start":5,"column_end":25},"name":"DebugStrOffsetsIndex","qualname":"::read::unit::AttributeValue::DebugStrOffsetsIndex","value":"AttributeValue::DebugStrOffsetsIndex(DebugStrOffsetsIndex<Offset>)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An index into a set of entries in the `.debug_str_offsets` section.\n","sig":null,"attributes":[{"value":"/ An index into a set of entries in the `.debug_str_offsets` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":946010,"byte_end":946081,"line_start":1064,"line_end":1064,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8588},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":946197,"byte_end":946212,"line_start":1068,"line_end":1068,"column_start":5,"column_end":20},"name":"DebugLineStrRef","qualname":"::read::unit::AttributeValue::DebugLineStrRef","value":"AttributeValue::DebugLineStrRef(DebugLineStrOffset<Offset>)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An offset into the `.debug_line_str` section.\n","sig":null,"attributes":[{"value":"/ An offset into the `.debug_line_str` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":946143,"byte_end":946192,"line_start":1067,"line_end":1067,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8591},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":946389,"byte_end":946395,"line_start":1072,"line_end":1072,"column_start":5,"column_end":11},"name":"String","qualname":"::read::unit::AttributeValue::String","value":"AttributeValue::String(R)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" A slice of bytes representing a string. Does not include a final null byte.\n Not guaranteed to be UTF-8 or anything like that.\n","sig":null,"attributes":[{"value":"/ A slice of bytes representing a string. Does not include a final null byte.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":946247,"byte_end":946326,"line_start":1070,"line_end":1070,"column_start":5,"column_end":84}},{"value":"/ Not guaranteed to be UTF-8 or anything like that.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":946331,"byte_end":946384,"line_start":1071,"line_end":1071,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8594},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":946456,"byte_end":946464,"line_start":1075,"line_end":1075,"column_start":5,"column_end":13},"name":"Encoding","qualname":"::read::unit::AttributeValue::Encoding","value":"AttributeValue::Encoding(constants::DwAte)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_encoding` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_encoding` attribute.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":946405,"byte_end":946451,"line_start":1074,"line_end":1074,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8597},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":946544,"byte_end":946555,"line_start":1078,"line_end":1078,"column_start":5,"column_end":16},"name":"DecimalSign","qualname":"::read::unit::AttributeValue::DecimalSign","value":"AttributeValue::DecimalSign(constants::DwDs)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_decimal_sign` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_decimal_sign` attribute.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":946489,"byte_end":946539,"line_start":1077,"line_end":1077,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8600},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":946631,"byte_end":946640,"line_start":1081,"line_end":1081,"column_start":5,"column_end":14},"name":"Endianity","qualname":"::read::unit::AttributeValue::Endianity","value":"AttributeValue::Endianity(constants::DwEnd)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_endianity` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_endianity` attribute.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":946579,"byte_end":946626,"line_start":1080,"line_end":1080,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8603},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":946721,"byte_end":946734,"line_start":1084,"line_end":1084,"column_start":5,"column_end":18},"name":"Accessibility","qualname":"::read::unit::AttributeValue::Accessibility","value":"AttributeValue::Accessibility(constants::DwAccess)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_accessibility` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_accessibility` attribute.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":946665,"byte_end":946716,"line_start":1083,"line_end":1083,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8606},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":946815,"byte_end":946825,"line_start":1087,"line_end":1087,"column_start":5,"column_end":15},"name":"Visibility","qualname":"::read::unit::AttributeValue::Visibility","value":"AttributeValue::Visibility(constants::DwVis)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_visibility` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_visibility` attribute.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":946762,"byte_end":946810,"line_start":1086,"line_end":1086,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8609},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":946903,"byte_end":946913,"line_start":1090,"line_end":1090,"column_start":5,"column_end":15},"name":"Virtuality","qualname":"::read::unit::AttributeValue::Virtuality","value":"AttributeValue::Virtuality(constants::DwVirtuality)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_virtuality` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_virtuality` attribute.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":946850,"byte_end":946898,"line_start":1089,"line_end":1089,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8612},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":946996,"byte_end":947004,"line_start":1093,"line_end":1093,"column_start":5,"column_end":13},"name":"Language","qualname":"::read::unit::AttributeValue::Language","value":"AttributeValue::Language(constants::DwLang)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_language` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_language` attribute.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":946945,"byte_end":946991,"line_start":1092,"line_end":1092,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8615},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":947086,"byte_end":947098,"line_start":1096,"line_end":1096,"column_start":5,"column_end":17},"name":"AddressClass","qualname":"::read::unit::AttributeValue::AddressClass","value":"AttributeValue::AddressClass(constants::DwAddr)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_address_class` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_address_class` attribute.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":947030,"byte_end":947081,"line_start":1095,"line_end":1095,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8618},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":947182,"byte_end":947196,"line_start":1099,"line_end":1099,"column_start":5,"column_end":19},"name":"IdentifierCase","qualname":"::read::unit::AttributeValue::IdentifierCase","value":"AttributeValue::IdentifierCase(constants::DwId)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_identifier_case` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_identifier_case` attribute.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":947124,"byte_end":947177,"line_start":1098,"line_end":1098,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8621},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":947281,"byte_end":947298,"line_start":1102,"line_end":1102,"column_start":5,"column_end":22},"name":"CallingConvention","qualname":"::read::unit::AttributeValue::CallingConvention","value":"AttributeValue::CallingConvention(constants::DwCc)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_calling_convention` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_calling_convention` attribute.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":947220,"byte_end":947276,"line_start":1101,"line_end":1101,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8624},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":947371,"byte_end":947377,"line_start":1105,"line_end":1105,"column_start":5,"column_end":11},"name":"Inline","qualname":"::read::unit::AttributeValue::Inline","value":"AttributeValue::Inline(constants::DwInl)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_inline` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_inline` attribute.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":947322,"byte_end":947366,"line_start":1104,"line_end":1104,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8627},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":947453,"byte_end":947461,"line_start":1108,"line_end":1108,"column_start":5,"column_end":13},"name":"Ordering","qualname":"::read::unit::AttributeValue::Ordering","value":"AttributeValue::Ordering(constants::DwOrd)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" The value of a `DW_AT_ordering` attribute.\n","sig":null,"attributes":[{"value":"/ The value of a `DW_AT_ordering` attribute.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":947402,"byte_end":947448,"line_start":1107,"line_end":1107,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8630},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":947624,"byte_end":947633,"line_start":1112,"line_end":1112,"column_start":5,"column_end":14},"name":"FileIndex","qualname":"::read::unit::AttributeValue::FileIndex","value":"AttributeValue::FileIndex(u64)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An index into the filename entries from the line number information\n table for the compilation unit containing this value.\n","sig":null,"attributes":[{"value":"/ An index into the filename entries from the line number information","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":947486,"byte_end":947557,"line_start":1110,"line_end":1110,"column_start":5,"column_end":76}},{"value":"/ table for the compilation unit containing this value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":947562,"byte_end":947619,"line_start":1111,"line_end":1111,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8633},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":947739,"byte_end":947744,"line_start":1116,"line_end":1116,"column_start":5,"column_end":10},"name":"DwoId","qualname":"::read::unit::AttributeValue::DwoId","value":"AttributeValue::DwoId(DwoId)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" An implementation-defined identifier uniquely identifying a compilation\n unit.\n","sig":null,"attributes":[{"value":"/ An implementation-defined identifier uniquely identifying a compilation","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":947645,"byte_end":947720,"line_start":1114,"line_end":1114,"column_start":5,"column_end":80}},{"value":"/ unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":947725,"byte_end":947734,"line_start":1115,"line_end":1115,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":8495},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":941647,"byte_end":941661,"line_start":944,"line_end":944,"column_start":10,"column_end":24},"name":"AttributeValue","qualname":"::read::unit::AttributeValue","value":"pub enum AttributeValue<R, Offset = <R as Reader>::Offset> where\n         R: Reader<Offset = Offset>, Offset: ReaderOffset {\n    Addr(u64),\n    Block(R),\n    Data1(u8),\n    Data2(u16),\n    Data4(u32),\n    Data8(u64),\n    Sdata(i64),\n    Udata(u64),\n    Exprloc(Expression<R>),\n    Flag(bool),\n    SecOffset(Offset),\n    DebugAddrBase(DebugAddrBase<Offset>),\n    DebugAddrIndex(DebugAddrIndex<Offset>),\n    UnitRef(UnitOffset<Offset>),\n    DebugInfoRef(DebugInfoOffset<Offset>),\n    DebugInfoRefSup(DebugInfoOffset<Offset>),\n    DebugLineRef(DebugLineOffset<Offset>),\n    LocationListsRef(LocationListsOffset<Offset>),\n    DebugLocListsBase(DebugLocListsBase<Offset>),\n    DebugLocListsIndex(DebugLocListsIndex<Offset>),\n    DebugMacinfoRef(DebugMacinfoOffset<Offset>),\n    DebugMacroRef(DebugMacroOffset<Offset>),\n    RangeListsRef(RawRangeListsOffset<Offset>),\n    DebugRngListsBase(DebugRngListsBase<Offset>),\n    DebugRngListsIndex(DebugRngListsIndex<Offset>),\n    DebugTypesRef(DebugTypeSignature),\n    DebugStrRef(DebugStrOffset<Offset>),\n    DebugStrRefSup(DebugStrOffset<Offset>),\n    DebugStrOffsetsBase(DebugStrOffsetsBase<Offset>),\n    DebugStrOffsetsIndex(DebugStrOffsetsIndex<Offset>),\n    DebugLineStrRef(DebugLineStrOffset<Offset>),\n    String(R),\n    Encoding(constants::DwAte),\n    DecimalSign(constants::DwDs),\n    Endianity(constants::DwEnd),\n    Accessibility(constants::DwAccess),\n    Visibility(constants::DwVis),\n    Virtuality(constants::DwVirtuality),\n    Language(constants::DwLang),\n    AddressClass(constants::DwAddr),\n    IdentifierCase(constants::DwId),\n    CallingConvention(constants::DwCc),\n    Inline(constants::DwInl),\n    Ordering(constants::DwOrd),\n    FileIndex(u64),\n    DwoId(DwoId),\n}","parent":null,"children":[{"krate":0,"index":8498},{"krate":0,"index":8501},{"krate":0,"index":8504},{"krate":0,"index":8507},{"krate":0,"index":8510},{"krate":0,"index":8513},{"krate":0,"index":8516},{"krate":0,"index":8519},{"krate":0,"index":8522},{"krate":0,"index":8525},{"krate":0,"index":8528},{"krate":0,"index":8531},{"krate":0,"index":8534},{"krate":0,"index":8537},{"krate":0,"index":8540},{"krate":0,"index":8543},{"krate":0,"index":8546},{"krate":0,"index":8549},{"krate":0,"index":8552},{"krate":0,"index":8555},{"krate":0,"index":8558},{"krate":0,"index":8561},{"krate":0,"index":8564},{"krate":0,"index":8567},{"krate":0,"index":8570},{"krate":0,"index":8573},{"krate":0,"index":8576},{"krate":0,"index":8579},{"krate":0,"index":8582},{"krate":0,"index":8585},{"krate":0,"index":8588},{"krate":0,"index":8591},{"krate":0,"index":8594},{"krate":0,"index":8597},{"krate":0,"index":8600},{"krate":0,"index":8603},{"krate":0,"index":8606},{"krate":0,"index":8609},{"krate":0,"index":8612},{"krate":0,"index":8615},{"krate":0,"index":8618},{"krate":0,"index":8621},{"krate":0,"index":8624},{"krate":0,"index":8627},{"krate":0,"index":8630},{"krate":0,"index":8633}],"decl_id":null,"docs":" The value of an attribute in a `DebuggingInformationEntry`.\n","sig":null,"attributes":[{"value":"/ The value of an attribute in a `DebuggingInformationEntry`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":941364,"byte_end":941427,"line_start":938,"line_end":938,"column_start":1,"column_end":64}},{"value":"repr(u64)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":941580,"byte_end":941592,"line_start":942,"line_end":942,"column_start":1,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":8662},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":947910,"byte_end":947919,"line_start":1122,"line_end":1122,"column_start":12,"column_end":21},"name":"Attribute","qualname":"::read::unit::Attribute","value":"Attribute {  }","parent":null,"children":[{"krate":0,"index":8664},{"krate":0,"index":8665}],"decl_id":null,"docs":" An attribute in a `DebuggingInformationEntry`, consisting of a name and\n associated value.\n","sig":null,"attributes":[{"value":"/ An attribute in a `DebuggingInformationEntry`, consisting of a name and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":947756,"byte_end":947831,"line_start":1119,"line_end":1119,"column_start":1,"column_end":76}},{"value":"/ associated value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":947832,"byte_end":947853,"line_start":1120,"line_end":1120,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2788},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":948070,"byte_end":948074,"line_start":1129,"line_end":1129,"column_start":12,"column_end":16},"name":"name","qualname":"<Attribute<R>>::name","value":"pub fn name(&Self) -> constants::DwAt","parent":null,"children":[],"decl_id":null,"docs":" Get this attribute's name.\n","sig":null,"attributes":[{"value":"/ Get this attribute's name.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":948028,"byte_end":948058,"line_start":1128,"line_end":1128,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2789},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":948179,"byte_end":948188,"line_start":1134,"line_end":1134,"column_start":12,"column_end":21},"name":"raw_value","qualname":"<Attribute<R>>::raw_value","value":"pub fn raw_value(&Self) -> AttributeValue<R>","parent":null,"children":[],"decl_id":null,"docs":" Get this attribute's raw value.\n","sig":null,"attributes":[{"value":"/ Get this attribute's raw value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":948132,"byte_end":948167,"line_start":1133,"line_end":1133,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2790},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":948757,"byte_end":948762,"line_start":1148,"line_end":1148,"column_start":12,"column_end":17},"name":"value","qualname":"<Attribute<R>>::value","value":"pub fn value(&Self) -> AttributeValue<R>","parent":null,"children":[],"decl_id":null,"docs":" Get this attribute's normalized value.","sig":null,"attributes":[{"value":"/ Get this attribute's normalized value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":948257,"byte_end":948299,"line_start":1138,"line_end":1138,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":948304,"byte_end":948307,"line_start":1139,"line_end":1139,"column_start":5,"column_end":8}},{"value":"/ Attribute values can potentially be encoded in multiple equivalent forms,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":948312,"byte_end":948389,"line_start":1140,"line_end":1140,"column_start":5,"column_end":82}},{"value":"/ and may have special meaning depending on the attribute name.  This method","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":948394,"byte_end":948472,"line_start":1141,"line_end":1141,"column_start":5,"column_end":83}},{"value":"/ converts the attribute value to a normalized form based on the attribute","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":948477,"byte_end":948553,"line_start":1142,"line_end":1142,"column_start":5,"column_end":81}},{"value":"/ name.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":948558,"byte_end":948567,"line_start":1143,"line_end":1143,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":948572,"byte_end":948575,"line_start":1144,"line_end":1144,"column_start":5,"column_end":8}},{"value":"/ See \"Table 7.5: Attribute encodings\" and \"Table 7.6: Attribute form encodings\".","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":948580,"byte_end":948663,"line_start":1145,"line_end":1145,"column_start":5,"column_end":88}},{"value":"allow(clippy :: cyclomatic_complexity)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":948668,"byte_end":948707,"line_start":1146,"line_end":1146,"column_start":5,"column_end":44}},{"value":"allow(clippy :: match_same_arms)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":948712,"byte_end":948745,"line_start":1147,"line_end":1147,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2808},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":967883,"byte_end":967891,"line_start":1739,"line_end":1739,"column_start":12,"column_end":20},"name":"u8_value","qualname":"<Attribute<R>>::u8_value","value":"pub fn u8_value(&Self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to a u8.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to a u8.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":967807,"byte_end":967857,"line_start":1737,"line_end":1737,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":967862,"byte_end":967871,"line_start":1738,"line_end":1738,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2809},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":968033,"byte_end":968042,"line_start":1745,"line_end":1745,"column_start":12,"column_end":21},"name":"u16_value","qualname":"<Attribute<R>>::u16_value","value":"pub fn u16_value(&Self) -> Option<u16>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to a u16.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to a u16.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":967956,"byte_end":968007,"line_start":1743,"line_end":1743,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":968012,"byte_end":968021,"line_start":1744,"line_end":1744,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2810},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":968200,"byte_end":968211,"line_start":1751,"line_end":1751,"column_start":12,"column_end":23},"name":"udata_value","qualname":"<Attribute<R>>::udata_value","value":"pub fn udata_value(&Self) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to an unsigned integer.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to an unsigned integer.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":968109,"byte_end":968174,"line_start":1749,"line_end":1749,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":968179,"byte_end":968188,"line_start":1750,"line_end":1750,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2811},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":968368,"byte_end":968379,"line_start":1757,"line_end":1757,"column_start":12,"column_end":23},"name":"sdata_value","qualname":"<Attribute<R>>::sdata_value","value":"pub fn sdata_value(&Self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to a signed integer.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to a signed integer.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":968280,"byte_end":968342,"line_start":1755,"line_end":1755,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":968347,"byte_end":968356,"line_start":1756,"line_end":1756,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2812},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":968529,"byte_end":968541,"line_start":1763,"line_end":1763,"column_start":12,"column_end":24},"name":"offset_value","qualname":"<Attribute<R>>::offset_value","value":"pub fn offset_value(&Self) -> Option<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to an offset.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to an offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":968448,"byte_end":968503,"line_start":1761,"line_end":1761,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":968508,"byte_end":968517,"line_start":1762,"line_end":1762,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2813},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":968926,"byte_end":968939,"line_start":1773,"line_end":1773,"column_start":12,"column_end":25},"name":"exprloc_value","qualname":"<Attribute<R>>::exprloc_value","value":"pub fn exprloc_value(&Self) -> Option<Expression<R>>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to an expression or location buffer.","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to an expression or location buffer.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":968617,"byte_end":968695,"line_start":1767,"line_end":1767,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":968700,"byte_end":968703,"line_start":1768,"line_end":1768,"column_start":5,"column_end":8}},{"value":"/ Expressions and locations may be `DW_FORM_block*` or `DW_FORM_exprloc`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":968708,"byte_end":968783,"line_start":1769,"line_end":1769,"column_start":5,"column_end":80}},{"value":"/ The standard doesn't mention `DW_FORM_block*` as a possible form, but","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":968788,"byte_end":968861,"line_start":1770,"line_end":1770,"column_start":5,"column_end":78}},{"value":"/ it is encountered in practice.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":968866,"byte_end":968900,"line_start":1771,"line_end":1771,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":968905,"byte_end":968914,"line_start":1772,"line_end":1772,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2814},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":969513,"byte_end":969525,"line_start":1787,"line_end":1787,"column_start":12,"column_end":24},"name":"string_value","qualname":"<Attribute<R>>::string_value","value":"pub fn string_value(&Self, &DebugStr<R>) -> Option<R>","parent":null,"children":[],"decl_id":null,"docs":" Try to return this attribute's value as a string slice.","sig":null,"attributes":[{"value":"/ Try to return this attribute's value as a string slice.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":969020,"byte_end":969079,"line_start":1777,"line_end":1777,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":969084,"byte_end":969087,"line_start":1778,"line_end":1778,"column_start":5,"column_end":8}},{"value":"/ If this attribute's value is either an inline `DW_FORM_string` string,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":969092,"byte_end":969166,"line_start":1779,"line_end":1779,"column_start":5,"column_end":79}},{"value":"/ or a `DW_FORM_strp` reference to an offset into the `.debug_str`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":969171,"byte_end":969239,"line_start":1780,"line_end":1780,"column_start":5,"column_end":73}},{"value":"/ section, return the attribute's string value as `Some`. Other attribute","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":969244,"byte_end":969319,"line_start":1781,"line_end":1781,"column_start":5,"column_end":80}},{"value":"/ value forms are returned as `None`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":969324,"byte_end":969363,"line_start":1782,"line_end":1782,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":969368,"byte_end":969371,"line_start":1783,"line_end":1783,"column_start":5,"column_end":8}},{"value":"/ Warning: this function does not handle all possible string forms.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":969376,"byte_end":969445,"line_start":1784,"line_end":1784,"column_start":5,"column_end":74}},{"value":"/ Use `Dwarf::attr_string` instead.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":969450,"byte_end":969487,"line_start":1785,"line_end":1785,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":969492,"byte_end":969501,"line_start":1786,"line_end":1786,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2815},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":970209,"byte_end":970225,"line_start":1802,"line_end":1802,"column_start":12,"column_end":28},"name":"string_value_sup","qualname":"<Attribute<R>>::string_value_sup","value":"pub fn string_value_sup(&Self, &DebugStr<R>, Option<&DebugStr<R>>)\n-> Option<R>","parent":null,"children":[],"decl_id":null,"docs":" Try to return this attribute's value as a string slice.","sig":null,"attributes":[{"value":"/ Try to return this attribute's value as a string slice.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":969627,"byte_end":969686,"line_start":1791,"line_end":1791,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":969691,"byte_end":969694,"line_start":1792,"line_end":1792,"column_start":5,"column_end":8}},{"value":"/ If this attribute's value is either an inline `DW_FORM_string` string,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":969699,"byte_end":969773,"line_start":1793,"line_end":1793,"column_start":5,"column_end":79}},{"value":"/ or a `DW_FORM_strp` reference to an offset into the `.debug_str`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":969778,"byte_end":969846,"line_start":1794,"line_end":1794,"column_start":5,"column_end":73}},{"value":"/ section, or a `DW_FORM_strp_sup` reference to an offset into a supplementary","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":969851,"byte_end":969931,"line_start":1795,"line_end":1795,"column_start":5,"column_end":85}},{"value":"/ object file, return the attribute's string value as `Some`. Other attribute","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":969936,"byte_end":970015,"line_start":1796,"line_end":1796,"column_start":5,"column_end":84}},{"value":"/ value forms are returned as `None`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":970020,"byte_end":970059,"line_start":1797,"line_end":1797,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":970064,"byte_end":970067,"line_start":1798,"line_end":1798,"column_start":5,"column_end":8}},{"value":"/ Warning: this function does not handle all possible string forms.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":970072,"byte_end":970141,"line_start":1799,"line_end":1799,"column_start":5,"column_end":74}},{"value":"/ Use `Dwarf::attr_string` instead.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":970146,"byte_end":970183,"line_start":1800,"line_end":1800,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":970188,"byte_end":970197,"line_start":1801,"line_end":1801,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2819},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":970586,"byte_end":970594,"line_start":1817,"line_end":1817,"column_start":12,"column_end":20},"name":"u8_value","qualname":"<AttributeValue<R, Offset>>::u8_value","value":"pub fn u8_value(&Self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to a u8.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to a u8.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":970524,"byte_end":970574,"line_start":1816,"line_end":1816,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2820},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":970866,"byte_end":970875,"line_start":1827,"line_end":1827,"column_start":12,"column_end":21},"name":"u16_value","qualname":"<AttributeValue<R, Offset>>::u16_value","value":"pub fn u16_value(&Self) -> Option<u16>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to a u16.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to a u16.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":970803,"byte_end":970854,"line_start":1826,"line_end":1826,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2821},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":971164,"byte_end":971175,"line_start":1837,"line_end":1837,"column_start":12,"column_end":23},"name":"udata_value","qualname":"<AttributeValue<R, Offset>>::udata_value","value":"pub fn udata_value(&Self) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to an unsigned integer.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to an unsigned integer.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":971087,"byte_end":971152,"line_start":1836,"line_end":1836,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2822},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":971858,"byte_end":971869,"line_start":1856,"line_end":1856,"column_start":12,"column_end":23},"name":"sdata_value","qualname":"<AttributeValue<R, Offset>>::sdata_value","value":"pub fn sdata_value(&Self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to a signed integer.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to a signed integer.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":971784,"byte_end":971846,"line_start":1855,"line_end":1855,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2823},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":972594,"byte_end":972606,"line_start":1875,"line_end":1875,"column_start":12,"column_end":24},"name":"offset_value","qualname":"<AttributeValue<R, Offset>>::offset_value","value":"pub fn offset_value(&Self) -> Option<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to an offset.\n","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to an offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":972527,"byte_end":972582,"line_start":1874,"line_end":1874,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2824},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":973202,"byte_end":973215,"line_start":1890,"line_end":1890,"column_start":12,"column_end":25},"name":"exprloc_value","qualname":"<AttributeValue<R, Offset>>::exprloc_value","value":"pub fn exprloc_value(&Self) -> Option<Expression<R>>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this attribute's value to an expression or location buffer.","sig":null,"attributes":[{"value":"/ Try to convert this attribute's value to an expression or location buffer.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":972907,"byte_end":972985,"line_start":1885,"line_end":1885,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":972990,"byte_end":972993,"line_start":1886,"line_end":1886,"column_start":5,"column_end":8}},{"value":"/ Expressions and locations may be `DW_FORM_block*` or `DW_FORM_exprloc`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":972998,"byte_end":973073,"line_start":1887,"line_end":1887,"column_start":5,"column_end":80}},{"value":"/ The standard doesn't mention `DW_FORM_block*` as a possible form, but","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":973078,"byte_end":973151,"line_start":1888,"line_end":1888,"column_start":5,"column_end":78}},{"value":"/ it is encountered in practice.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":973156,"byte_end":973190,"line_start":1889,"line_end":1889,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2825},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":973944,"byte_end":973956,"line_start":1907,"line_end":1907,"column_start":12,"column_end":24},"name":"string_value","qualname":"<AttributeValue<R, Offset>>::string_value","value":"pub fn string_value(&Self, &DebugStr<R>) -> Option<R>","parent":null,"children":[],"decl_id":null,"docs":" Try to return this attribute's value as a string slice.","sig":null,"attributes":[{"value":"/ Try to return this attribute's value as a string slice.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":973465,"byte_end":973524,"line_start":1898,"line_end":1898,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":973529,"byte_end":973532,"line_start":1899,"line_end":1899,"column_start":5,"column_end":8}},{"value":"/ If this attribute's value is either an inline `DW_FORM_string` string,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":973537,"byte_end":973611,"line_start":1900,"line_end":1900,"column_start":5,"column_end":79}},{"value":"/ or a `DW_FORM_strp` reference to an offset into the `.debug_str`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":973616,"byte_end":973684,"line_start":1901,"line_end":1901,"column_start":5,"column_end":73}},{"value":"/ section, return the attribute's string value as `Some`. Other attribute","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":973689,"byte_end":973764,"line_start":1902,"line_end":1902,"column_start":5,"column_end":80}},{"value":"/ value forms are returned as `None`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":973769,"byte_end":973808,"line_start":1903,"line_end":1903,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":973813,"byte_end":973816,"line_start":1904,"line_end":1904,"column_start":5,"column_end":8}},{"value":"/ Warning: this function does not handle all possible string forms.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":973821,"byte_end":973890,"line_start":1905,"line_end":1905,"column_start":5,"column_end":74}},{"value":"/ Use `Dwarf::attr_string` instead.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":973895,"byte_end":973932,"line_start":1906,"line_end":1906,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2826},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":974793,"byte_end":974809,"line_start":1925,"line_end":1925,"column_start":12,"column_end":28},"name":"string_value_sup","qualname":"<AttributeValue<R, Offset>>::string_value_sup","value":"pub fn string_value_sup(&Self, &DebugStr<R>, Option<&DebugStr<R>>)\n-> Option<R>","parent":null,"children":[],"decl_id":null,"docs":" Try to return this attribute's value as a string slice.","sig":null,"attributes":[{"value":"/ Try to return this attribute's value as a string slice.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":974225,"byte_end":974284,"line_start":1915,"line_end":1915,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":974289,"byte_end":974292,"line_start":1916,"line_end":1916,"column_start":5,"column_end":8}},{"value":"/ If this attribute's value is either an inline `DW_FORM_string` string,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":974297,"byte_end":974371,"line_start":1917,"line_end":1917,"column_start":5,"column_end":79}},{"value":"/ or a `DW_FORM_strp` reference to an offset into the `.debug_str`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":974376,"byte_end":974444,"line_start":1918,"line_end":1918,"column_start":5,"column_end":73}},{"value":"/ section, or a `DW_FORM_strp_sup` reference to an offset into a supplementary","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":974449,"byte_end":974529,"line_start":1919,"line_end":1919,"column_start":5,"column_end":85}},{"value":"/ object file, return the attribute's string value as `Some`. Other attribute","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":974534,"byte_end":974613,"line_start":1920,"line_end":1920,"column_start":5,"column_end":84}},{"value":"/ value forms are returned as `None`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":974618,"byte_end":974657,"line_start":1921,"line_end":1921,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":974662,"byte_end":974665,"line_start":1922,"line_end":1922,"column_start":5,"column_end":8}},{"value":"/ Warning: this function does not handle all possible string forms.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":974670,"byte_end":974739,"line_start":1923,"line_end":1923,"column_start":5,"column_end":74}},{"value":"/ Use `Dwarf::attr_string` instead.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":974744,"byte_end":974781,"line_start":1924,"line_end":1924,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":8685},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":989786,"byte_end":989795,"line_start":2285,"line_end":2285,"column_start":12,"column_end":21},"name":"AttrsIter","qualname":"::read::unit::AttrsIter","value":"AttrsIter {  }","parent":null,"children":[{"krate":0,"index":8690},{"krate":0,"index":8691},{"krate":0,"index":8692}],"decl_id":null,"docs":" An iterator over a particular entry's attributes.","sig":null,"attributes":[{"value":"/ An iterator over a particular entry's attributes.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":989450,"byte_end":989503,"line_start":2276,"line_end":2276,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":989504,"byte_end":989507,"line_start":2277,"line_end":2277,"column_start":1,"column_end":4}},{"value":"/ See [the documentation for","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":989508,"byte_end":989538,"line_start":2278,"line_end":2278,"column_start":1,"column_end":31}},{"value":"/ `DebuggingInformationEntry::attrs()`](./struct.DebuggingInformationEntry.html#method.attrs)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":989539,"byte_end":989634,"line_start":2279,"line_end":2279,"column_start":1,"column_end":96}},{"value":"/ for details.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":989635,"byte_end":989651,"line_start":2280,"line_end":2280,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":989652,"byte_end":989655,"line_start":2281,"line_end":2281,"column_start":1,"column_end":4}},{"value":"/ Can be [used with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":989656,"byte_end":989677,"line_start":2282,"line_end":2282,"column_start":1,"column_end":22}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":989678,"byte_end":989744,"line_start":2283,"line_end":2283,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2848},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":990371,"byte_end":990375,"line_start":2299,"line_end":2299,"column_start":12,"column_end":16},"name":"next","qualname":"<AttrsIter>::next","value":"pub fn next(&mut Self) -> Result<Option<Attribute<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator and return the next attribute.","sig":null,"attributes":[{"value":"/ Advance the iterator and return the next attribute.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":990049,"byte_end":990104,"line_start":2292,"line_end":2292,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":990109,"byte_end":990112,"line_start":2293,"line_end":2293,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when iteration is finished. If an error","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":990117,"byte_end":990175,"line_start":2294,"line_end":2294,"column_start":5,"column_end":63}},{"value":"/ occurs while parsing the next attribute, then this error","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":990180,"byte_end":990240,"line_start":2295,"line_end":2295,"column_start":5,"column_end":65}},{"value":"/ is returned, and all subsequent calls return `None`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":990245,"byte_end":990301,"line_start":2296,"line_end":2296,"column_start":5,"column_end":61}},{"value":"allow(clippy :: inline_always)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":990306,"byte_end":990337,"line_start":2297,"line_end":2297,"column_start":5,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":990342,"byte_end":990359,"line_start":2298,"line_end":2298,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":8710},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":994068,"byte_end":994078,"line_start":2396,"line_end":2396,"column_start":12,"column_end":22},"name":"EntriesRaw","qualname":"::read::unit::EntriesRaw","value":"EntriesRaw {  }","parent":null,"children":[{"krate":0,"index":8714},{"krate":0,"index":8715},{"krate":0,"index":8716},{"krate":0,"index":8717}],"decl_id":null,"docs":" A raw reader of the data that defines the Debugging Information Entries.","sig":null,"attributes":[{"value":"/ A raw reader of the data that defines the Debugging Information Entries.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":991817,"byte_end":991893,"line_start":2343,"line_end":2343,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":991894,"byte_end":991897,"line_start":2344,"line_end":2344,"column_start":1,"column_end":4}},{"value":"/ `EntriesRaw` provides primitives to read the components of Debugging Information","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":991898,"byte_end":991982,"line_start":2345,"line_end":2345,"column_start":1,"column_end":85}},{"value":"/ Entries (DIEs). A DIE consists of an abbreviation code (read with `read_abbreviation`)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":991983,"byte_end":992073,"line_start":2346,"line_end":2346,"column_start":1,"column_end":91}},{"value":"/ followed by a number of attributes (read with `read_attribute`).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":992074,"byte_end":992142,"line_start":2347,"line_end":2347,"column_start":1,"column_end":69}},{"value":"/ The user must provide the control flow to read these correctly.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":992143,"byte_end":992210,"line_start":2348,"line_end":2348,"column_start":1,"column_end":68}},{"value":"/ In particular, all attributes must always be read before reading another","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":992211,"byte_end":992287,"line_start":2349,"line_end":2349,"column_start":1,"column_end":77}},{"value":"/ abbreviation code.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":992288,"byte_end":992310,"line_start":2350,"line_end":2350,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":992311,"byte_end":992314,"line_start":2351,"line_end":2351,"column_start":1,"column_end":4}},{"value":"/ `EntriesRaw` lacks some features of `EntriesCursor`, such as the ability to skip","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":992315,"byte_end":992399,"line_start":2352,"line_end":2352,"column_start":1,"column_end":85}},{"value":"/ to the next sibling DIE. However, this also allows it to optimize better, since it","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":992400,"byte_end":992486,"line_start":2353,"line_end":2353,"column_start":1,"column_end":87}},{"value":"/ does not need to perform the extra bookkeeping required to support these features,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":992487,"byte_end":992573,"line_start":2354,"line_end":2354,"column_start":1,"column_end":87}},{"value":"/ and thus it is suitable for cases where performance is important.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":992574,"byte_end":992643,"line_start":2355,"line_end":2355,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":992644,"byte_end":992647,"line_start":2356,"line_end":2356,"column_start":1,"column_end":4}},{"value":"/ ## Example Usage","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":992648,"byte_end":992668,"line_start":2357,"line_end":2357,"column_start":1,"column_end":21}},{"value":"/ ```rust,no_run","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":992669,"byte_end":992687,"line_start":2358,"line_end":2358,"column_start":1,"column_end":19}},{"value":"/ # fn example() -> Result<(), gimli::Error> {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":992688,"byte_end":992736,"line_start":2359,"line_end":2359,"column_start":1,"column_end":49}},{"value":"/ # let debug_info = gimli::DebugInfo::new(&[], gimli::LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":992737,"byte_end":992808,"line_start":2360,"line_end":2360,"column_start":1,"column_end":72}},{"value":"/ # let get_some_unit = || debug_info.units().next().unwrap().unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":992809,"byte_end":992882,"line_start":2361,"line_end":2361,"column_start":1,"column_end":74}},{"value":"/ let unit = get_some_unit();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":992883,"byte_end":992914,"line_start":2362,"line_end":2362,"column_start":1,"column_end":32}},{"value":"/ # let debug_abbrev = gimli::DebugAbbrev::new(&[], gimli::LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":992915,"byte_end":992990,"line_start":2363,"line_end":2363,"column_start":1,"column_end":76}},{"value":"/ # let get_abbrevs_for_unit = |_| unit.abbreviations(&debug_abbrev).unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":992991,"byte_end":993071,"line_start":2364,"line_end":2364,"column_start":1,"column_end":81}},{"value":"/ let abbrevs = get_abbrevs_for_unit(&unit);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993072,"byte_end":993118,"line_start":2365,"line_end":2365,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993119,"byte_end":993122,"line_start":2366,"line_end":2366,"column_start":1,"column_end":4}},{"value":"/ let mut entries = unit.entries_raw(&abbrevs, None)?;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993123,"byte_end":993179,"line_start":2367,"line_end":2367,"column_start":1,"column_end":57}},{"value":"/ while !entries.is_empty() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993180,"byte_end":993211,"line_start":2368,"line_end":2368,"column_start":1,"column_end":32}},{"value":"/     let abbrev = if let Some(abbrev) = entries.read_abbreviation()? {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993212,"byte_end":993285,"line_start":2369,"line_end":2369,"column_start":1,"column_end":74}},{"value":"/         abbrev","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993286,"byte_end":993304,"line_start":2370,"line_end":2370,"column_start":1,"column_end":19}},{"value":"/     } else {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993305,"byte_end":993321,"line_start":2371,"line_end":2371,"column_start":1,"column_end":17}},{"value":"/         // Null entry with no attributes.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993322,"byte_end":993367,"line_start":2372,"line_end":2372,"column_start":1,"column_end":46}},{"value":"/         continue","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993368,"byte_end":993388,"line_start":2373,"line_end":2373,"column_start":1,"column_end":21}},{"value":"/     };","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993389,"byte_end":993399,"line_start":2374,"line_end":2374,"column_start":1,"column_end":11}},{"value":"/     match abbrev.tag() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993400,"byte_end":993428,"line_start":2375,"line_end":2375,"column_start":1,"column_end":29}},{"value":"/         gimli::DW_TAG_subprogram => {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993429,"byte_end":993470,"line_start":2376,"line_end":2376,"column_start":1,"column_end":42}},{"value":"/             // Loop over attributes for DIEs we care about.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993471,"byte_end":993534,"line_start":2377,"line_end":2377,"column_start":1,"column_end":64}},{"value":"/             for spec in abbrev.attributes() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993535,"byte_end":993584,"line_start":2378,"line_end":2378,"column_start":1,"column_end":50}},{"value":"/                 let attr = entries.read_attribute(*spec)?;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993585,"byte_end":993647,"line_start":2379,"line_end":2379,"column_start":1,"column_end":63}},{"value":"/                 match attr.name() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993648,"byte_end":993687,"line_start":2380,"line_end":2380,"column_start":1,"column_end":40}},{"value":"/                     // Handle attributes.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993688,"byte_end":993733,"line_start":2381,"line_end":2381,"column_start":1,"column_end":46}},{"value":"/                     _ => {}","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993734,"byte_end":993765,"line_start":2382,"line_end":2382,"column_start":1,"column_end":32}},{"value":"/                 }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993766,"byte_end":993787,"line_start":2383,"line_end":2383,"column_start":1,"column_end":22}},{"value":"/             }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993788,"byte_end":993805,"line_start":2384,"line_end":2384,"column_start":1,"column_end":18}},{"value":"/         }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993806,"byte_end":993819,"line_start":2385,"line_end":2385,"column_start":1,"column_end":14}},{"value":"/         _ => {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993820,"byte_end":993838,"line_start":2386,"line_end":2386,"column_start":1,"column_end":19}},{"value":"/             // Skip attributes for DIEs we don't care about.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993839,"byte_end":993903,"line_start":2387,"line_end":2387,"column_start":1,"column_end":65}},{"value":"/             entries.skip_attributes(abbrev.attributes());","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993904,"byte_end":993965,"line_start":2388,"line_end":2388,"column_start":1,"column_end":62}},{"value":"/         }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993966,"byte_end":993979,"line_start":2389,"line_end":2389,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993980,"byte_end":993989,"line_start":2390,"line_end":2390,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993990,"byte_end":993995,"line_start":2391,"line_end":2391,"column_start":1,"column_end":6}},{"value":"/ # unreachable!()","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":993996,"byte_end":994016,"line_start":2392,"line_end":2392,"column_start":1,"column_end":21}},{"value":"/ # }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":994017,"byte_end":994024,"line_start":2393,"line_end":2393,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":994025,"byte_end":994032,"line_start":2394,"line_end":2394,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2853},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":994367,"byte_end":994375,"line_start":2409,"line_end":2409,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<EntriesRaw>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if there is no more input.\n","sig":null,"attributes":[{"value":"/ Return true if there is no more input.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":994299,"byte_end":994341,"line_start":2407,"line_end":2407,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":994346,"byte_end":994355,"line_start":2408,"line_end":2408,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2854},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":994632,"byte_end":994643,"line_start":2417,"line_end":2417,"column_start":12,"column_end":23},"name":"next_offset","qualname":"<EntriesRaw>::next_offset","value":"pub fn next_offset(&Self) -> UnitOffset<R::Offset>","parent":null,"children":[],"decl_id":null,"docs":" Return the unit offset at which the reader will read next.","sig":null,"attributes":[{"value":"/ Return the unit offset at which the reader will read next.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":994434,"byte_end":994496,"line_start":2413,"line_end":2413,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":994501,"byte_end":994504,"line_start":2414,"line_end":2414,"column_start":5,"column_end":8}},{"value":"/ If you want the offset of the next entry, then this must be called prior to reading","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":994509,"byte_end":994596,"line_start":2415,"line_end":2415,"column_start":5,"column_end":92}},{"value":"/ the next entry.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":994601,"byte_end":994620,"line_start":2416,"line_end":2416,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2855},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":995016,"byte_end":995026,"line_start":2426,"line_end":2426,"column_start":12,"column_end":22},"name":"next_depth","qualname":"<EntriesRaw>::next_depth","value":"pub fn next_depth(&Self) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Return the depth of the next entry.","sig":null,"attributes":[{"value":"/ Return the depth of the next entry.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":994782,"byte_end":994821,"line_start":2421,"line_end":2421,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":994826,"byte_end":994829,"line_start":2422,"line_end":2422,"column_start":5,"column_end":8}},{"value":"/ This depth is updated when `read_abbreviation` is called, and is updated","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":994834,"byte_end":994910,"line_start":2423,"line_end":2423,"column_start":5,"column_end":81}},{"value":"/ based on null entries and the `has_children` field in the abbreviation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":994915,"byte_end":994990,"line_start":2424,"line_end":2424,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":994995,"byte_end":995004,"line_start":2425,"line_end":2425,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2856},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":995228,"byte_end":995245,"line_start":2434,"line_end":2434,"column_start":12,"column_end":29},"name":"read_abbreviation","qualname":"<EntriesRaw>::read_abbreviation","value":"pub fn read_abbreviation(&mut Self) -> Result<Option<&'abbrev Abbreviation>>","parent":null,"children":[],"decl_id":null,"docs":" Read an abbreviation code and lookup the corresponding `Abbreviation`.","sig":null,"attributes":[{"value":"/ Read an abbreviation code and lookup the corresponding `Abbreviation`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":995075,"byte_end":995149,"line_start":2430,"line_end":2430,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":995154,"byte_end":995157,"line_start":2431,"line_end":2431,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(None)` for null entries.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":995162,"byte_end":995202,"line_start":2432,"line_end":2432,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":995207,"byte_end":995216,"line_start":2433,"line_end":2433,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2857},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":995722,"byte_end":995736,"line_start":2452,"line_end":2452,"column_start":12,"column_end":26},"name":"read_attribute","qualname":"<EntriesRaw>::read_attribute","value":"pub fn read_attribute(&mut Self, AttributeSpecification)\n-> Result<Attribute<R>>","parent":null,"children":[],"decl_id":null,"docs":" Read an attribute.\n","sig":null,"attributes":[{"value":"/ Read an attribute.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":995674,"byte_end":995696,"line_start":2450,"line_end":2450,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":995701,"byte_end":995710,"line_start":2451,"line_end":2451,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2858},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":995957,"byte_end":995972,"line_start":2458,"line_end":2458,"column_start":12,"column_end":27},"name":"skip_attributes","qualname":"<EntriesRaw>::skip_attributes","value":"pub fn skip_attributes(&mut Self, &[AttributeSpecification]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Skip all the attributes of an abbreviation.\n","sig":null,"attributes":[{"value":"/ Skip all the attributes of an abbreviation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":995884,"byte_end":995931,"line_start":2456,"line_end":2456,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":995936,"byte_end":995945,"line_start":2457,"line_end":2457,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":8728},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":996952,"byte_end":996965,"line_start":2477,"line_end":2477,"column_start":12,"column_end":25},"name":"EntriesCursor","qualname":"::read::unit::EntriesCursor","value":"EntriesCursor {  }","parent":null,"children":[{"krate":0,"index":8732},{"krate":0,"index":8733},{"krate":0,"index":8734},{"krate":0,"index":8735},{"krate":0,"index":8736}],"decl_id":null,"docs":" A cursor into the Debugging Information Entries tree for a compilation unit.","sig":null,"attributes":[{"value":"/ A cursor into the Debugging Information Entries tree for a compilation unit.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":996113,"byte_end":996193,"line_start":2463,"line_end":2463,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":996194,"byte_end":996197,"line_start":2464,"line_end":2464,"column_start":1,"column_end":4}},{"value":"/ The `EntriesCursor` can traverse the DIE tree in DFS order using `next_dfs()`,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":996198,"byte_end":996280,"line_start":2465,"line_end":2465,"column_start":1,"column_end":83}},{"value":"/ or skip to the next sibling of the entry the cursor is currently pointing to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":996281,"byte_end":996361,"line_start":2466,"line_end":2466,"column_start":1,"column_end":81}},{"value":"/ using `next_sibling()`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":996362,"byte_end":996389,"line_start":2467,"line_end":2467,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":996390,"byte_end":996393,"line_start":2468,"line_end":2468,"column_start":1,"column_end":4}},{"value":"/ It is also possible to traverse the DIE tree at a lower abstraction level","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":996394,"byte_end":996471,"line_start":2469,"line_end":2469,"column_start":1,"column_end":78}},{"value":"/ using `next_entry()`. This method does not skip over null entries, or provide","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":996472,"byte_end":996553,"line_start":2470,"line_end":2470,"column_start":1,"column_end":82}},{"value":"/ any indication of the current tree depth. In this case, you must use `current()`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":996554,"byte_end":996638,"line_start":2471,"line_end":2471,"column_start":1,"column_end":85}},{"value":"/ to obtain the current entry, and `current().has_children()` to determine if","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":996639,"byte_end":996718,"line_start":2472,"line_end":2472,"column_start":1,"column_end":80}},{"value":"/ the entry following the current entry will be a sibling or child. `current()`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":996719,"byte_end":996800,"line_start":2473,"line_end":2473,"column_start":1,"column_end":82}},{"value":"/ will return `None` if the current entry is a null entry, which signifies the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":996801,"byte_end":996881,"line_start":2474,"line_end":2474,"column_start":1,"column_end":81}},{"value":"/ end of the current tree depth.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":996882,"byte_end":996916,"line_start":2475,"line_end":2475,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2863},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":997502,"byte_end":997509,"line_start":2494,"line_end":2494,"column_start":12,"column_end":19},"name":"current","qualname":"<EntriesCursor>::current","value":"pub fn current(&Self) -> Option<&DebuggingInformationEntry>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the entry that the cursor is currently pointing to.","sig":null,"attributes":[{"value":"/ Get a reference to the entry that the cursor is currently pointing to.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":997269,"byte_end":997343,"line_start":2489,"line_end":2489,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":997348,"byte_end":997351,"line_start":2490,"line_end":2490,"column_start":5,"column_end":8}},{"value":"/ If the cursor is not pointing at an entry, or if the current entry is a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":997356,"byte_end":997431,"line_start":2491,"line_end":2491,"column_start":5,"column_end":80}},{"value":"/ null entry, then `None` is returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":997436,"byte_end":997476,"line_start":2492,"line_end":2492,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":997481,"byte_end":997490,"line_start":2493,"line_end":2493,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2864},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":997829,"byte_end":997839,"line_start":2502,"line_end":2502,"column_start":12,"column_end":22},"name":"next_entry","qualname":"<EntriesCursor>::next_entry","value":"pub fn next_entry(&mut Self) -> Result<Option<()>>","parent":null,"children":[],"decl_id":null,"docs":" Move the cursor to the next DIE in the tree.","sig":null,"attributes":[{"value":"/ Move the cursor to the next DIE in the tree.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":997624,"byte_end":997672,"line_start":2498,"line_end":2498,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":997677,"byte_end":997680,"line_start":2499,"line_end":2499,"column_start":5,"column_end":8}},{"value":"/ Returns `Some` if there is a next entry, even if this entry is null.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":997685,"byte_end":997757,"line_start":2500,"line_end":2500,"column_start":5,"column_end":77}},{"value":"/ If there is no next entry, then `None` is returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":997762,"byte_end":997817,"line_start":2501,"line_end":2501,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2865},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1002838,"byte_end":1002846,"line_start":2651,"line_end":2651,"column_start":12,"column_end":20},"name":"next_dfs","qualname":"<EntriesCursor>::next_dfs","value":"pub fn next_dfs(&mut Self)\n-> Result<Option<(isize, &DebuggingInformationEntry)>>","parent":null,"children":[],"decl_id":null,"docs":" Move the cursor to the next DIE in the tree in DFS order.","sig":null,"attributes":[{"value":"/ Move the cursor to the next DIE in the tree in DFS order.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":998783,"byte_end":998844,"line_start":2533,"line_end":2533,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":998849,"byte_end":998852,"line_start":2534,"line_end":2534,"column_start":5,"column_end":8}},{"value":"/ Upon successful movement of the cursor, return the delta traversal","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":998857,"byte_end":998927,"line_start":2535,"line_end":2535,"column_start":5,"column_end":75}},{"value":"/ depth and the entry:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":998932,"byte_end":998956,"line_start":2536,"line_end":2536,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":998961,"byte_end":998964,"line_start":2537,"line_end":2537,"column_start":5,"column_end":8}},{"value":"/   * If we moved down into the previous current entry's children, we get","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":998969,"byte_end":999044,"line_start":2538,"line_end":2538,"column_start":5,"column_end":80}},{"value":"/     `Some((1, entry))`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999049,"byte_end":999076,"line_start":2539,"line_end":2539,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999081,"byte_end":999084,"line_start":2540,"line_end":2540,"column_start":5,"column_end":8}},{"value":"/   * If we moved to the previous current entry's sibling, we get","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999089,"byte_end":999156,"line_start":2541,"line_end":2541,"column_start":5,"column_end":72}},{"value":"/     `Some((0, entry))`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999161,"byte_end":999188,"line_start":2542,"line_end":2542,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999193,"byte_end":999196,"line_start":2543,"line_end":2543,"column_start":5,"column_end":8}},{"value":"/   * If the previous entry does not have any siblings and we move up to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999201,"byte_end":999275,"line_start":2544,"line_end":2544,"column_start":5,"column_end":79}},{"value":"/     its parent's next sibling, then we get `Some((-1, entry))`. Note that","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999280,"byte_end":999357,"line_start":2545,"line_end":2545,"column_start":5,"column_end":82}},{"value":"/     if the parent doesn't have a next sibling, then it could go up to the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999362,"byte_end":999439,"line_start":2546,"line_end":2546,"column_start":5,"column_end":82}},{"value":"/     parent's parent's next sibling and return `Some((-2, entry))`, etc.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999444,"byte_end":999519,"line_start":2547,"line_end":2547,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999524,"byte_end":999527,"line_start":2548,"line_end":2548,"column_start":5,"column_end":8}},{"value":"/ If there is no next entry, then `None` is returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999532,"byte_end":999587,"line_start":2549,"line_end":2549,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999592,"byte_end":999595,"line_start":2550,"line_end":2550,"column_start":5,"column_end":8}},{"value":"/ Here is an example that finds the first entry in a compilation unit that","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999600,"byte_end":999676,"line_start":2551,"line_end":2551,"column_start":5,"column_end":81}},{"value":"/ does not have any children.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999681,"byte_end":999712,"line_start":2552,"line_end":2552,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999717,"byte_end":999720,"line_start":2553,"line_end":2553,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999725,"byte_end":999732,"line_start":2554,"line_end":2554,"column_start":5,"column_end":12}},{"value":"/ # use gimli::{DebugAbbrev, DebugInfo, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999737,"byte_end":999793,"line_start":2555,"line_end":2555,"column_start":5,"column_end":61}},{"value":"/ # let info_buf = [","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999798,"byte_end":999820,"line_start":2556,"line_end":2556,"column_start":5,"column_end":27}},{"value":"/ #     // Comilation unit header","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999825,"byte_end":999860,"line_start":2557,"line_end":2557,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999865,"byte_end":999870,"line_start":2558,"line_end":2558,"column_start":5,"column_end":10}},{"value":"/ #     // 32-bit unit length = 25","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999875,"byte_end":999911,"line_start":2559,"line_end":2559,"column_start":5,"column_end":41}},{"value":"/ #     0x19, 0x00, 0x00, 0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999916,"byte_end":999949,"line_start":2560,"line_end":2560,"column_start":5,"column_end":38}},{"value":"/ #     // Version 4","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999954,"byte_end":999976,"line_start":2561,"line_end":2561,"column_start":5,"column_end":27}},{"value":"/ #     0x04, 0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":999981,"byte_end":1000002,"line_start":2562,"line_end":2562,"column_start":5,"column_end":26}},{"value":"/ #     // debug_abbrev_offset","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000007,"byte_end":1000039,"line_start":2563,"line_end":2563,"column_start":5,"column_end":37}},{"value":"/ #     0x00, 0x00, 0x00, 0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000044,"byte_end":1000077,"line_start":2564,"line_end":2564,"column_start":5,"column_end":38}},{"value":"/ #     // Address size","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000082,"byte_end":1000107,"line_start":2565,"line_end":2565,"column_start":5,"column_end":30}},{"value":"/ #     0x04,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000112,"byte_end":1000127,"line_start":2566,"line_end":2566,"column_start":5,"column_end":20}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000132,"byte_end":1000137,"line_start":2567,"line_end":2567,"column_start":5,"column_end":10}},{"value":"/ #     // DIEs","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000142,"byte_end":1000159,"line_start":2568,"line_end":2568,"column_start":5,"column_end":22}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000164,"byte_end":1000169,"line_start":2569,"line_end":2569,"column_start":5,"column_end":10}},{"value":"/ #     // Abbreviation code","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000174,"byte_end":1000204,"line_start":2570,"line_end":2570,"column_start":5,"column_end":35}},{"value":"/ #     0x01,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000209,"byte_end":1000224,"line_start":2571,"line_end":2571,"column_start":5,"column_end":20}},{"value":"/ #     // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000229,"byte_end":1000284,"line_start":2572,"line_end":2572,"column_start":5,"column_end":60}},{"value":"/ #     0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000289,"byte_end":1000322,"line_start":2573,"line_end":2573,"column_start":5,"column_end":38}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000327,"byte_end":1000332,"line_start":2574,"line_end":2574,"column_start":5,"column_end":10}},{"value":"/ #       // Children","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000337,"byte_end":1000360,"line_start":2575,"line_end":2575,"column_start":5,"column_end":28}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000365,"byte_end":1000370,"line_start":2576,"line_end":2576,"column_start":5,"column_end":10}},{"value":"/ #       // Abbreviation code","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000375,"byte_end":1000407,"line_start":2577,"line_end":2577,"column_start":5,"column_end":37}},{"value":"/ #       0x01,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000412,"byte_end":1000429,"line_start":2578,"line_end":2578,"column_start":5,"column_end":22}},{"value":"/ #       // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000434,"byte_end":1000491,"line_start":2579,"line_end":2579,"column_start":5,"column_end":62}},{"value":"/ #       0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000496,"byte_end":1000531,"line_start":2580,"line_end":2580,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000536,"byte_end":1000541,"line_start":2581,"line_end":2581,"column_start":5,"column_end":10}},{"value":"/ #         // Children","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000546,"byte_end":1000571,"line_start":2582,"line_end":2582,"column_start":5,"column_end":30}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000576,"byte_end":1000581,"line_start":2583,"line_end":2583,"column_start":5,"column_end":10}},{"value":"/ #         // Abbreviation code","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000586,"byte_end":1000620,"line_start":2584,"line_end":2584,"column_start":5,"column_end":39}},{"value":"/ #         0x01,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000625,"byte_end":1000644,"line_start":2585,"line_end":2585,"column_start":5,"column_end":24}},{"value":"/ #         // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000649,"byte_end":1000708,"line_start":2586,"line_end":2586,"column_start":5,"column_end":64}},{"value":"/ #         0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000713,"byte_end":1000750,"line_start":2587,"line_end":2587,"column_start":5,"column_end":42}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000755,"byte_end":1000760,"line_start":2588,"line_end":2588,"column_start":5,"column_end":10}},{"value":"/ #           // Children","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000765,"byte_end":1000792,"line_start":2589,"line_end":2589,"column_start":5,"column_end":32}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000797,"byte_end":1000802,"line_start":2590,"line_end":2590,"column_start":5,"column_end":10}},{"value":"/ #           // End of children","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000807,"byte_end":1000841,"line_start":2591,"line_end":2591,"column_start":5,"column_end":39}},{"value":"/ #           0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000846,"byte_end":1000867,"line_start":2592,"line_end":2592,"column_start":5,"column_end":26}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000872,"byte_end":1000877,"line_start":2593,"line_end":2593,"column_start":5,"column_end":10}},{"value":"/ #         // End of children","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000882,"byte_end":1000914,"line_start":2594,"line_end":2594,"column_start":5,"column_end":37}},{"value":"/ #         0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000919,"byte_end":1000938,"line_start":2595,"line_end":2595,"column_start":5,"column_end":24}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000943,"byte_end":1000948,"line_start":2596,"line_end":2596,"column_start":5,"column_end":10}},{"value":"/ #       // End of children","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000953,"byte_end":1000983,"line_start":2597,"line_end":2597,"column_start":5,"column_end":35}},{"value":"/ #       0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1000988,"byte_end":1001005,"line_start":2598,"line_end":2598,"column_start":5,"column_end":22}},{"value":"/ # ];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001010,"byte_end":1001018,"line_start":2599,"line_end":2599,"column_start":5,"column_end":13}},{"value":"/ # let debug_info = DebugInfo::new(&info_buf, LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001023,"byte_end":1001086,"line_start":2600,"line_end":2600,"column_start":5,"column_end":68}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001091,"byte_end":1001096,"line_start":2601,"line_end":2601,"column_start":5,"column_end":10}},{"value":"/ # let abbrev_buf = [","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001101,"byte_end":1001125,"line_start":2602,"line_end":2602,"column_start":5,"column_end":29}},{"value":"/ #     // Code","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001130,"byte_end":1001147,"line_start":2603,"line_end":2603,"column_start":5,"column_end":22}},{"value":"/ #     0x01,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001152,"byte_end":1001167,"line_start":2604,"line_end":2604,"column_start":5,"column_end":20}},{"value":"/ #     // DW_TAG_subprogram","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001172,"byte_end":1001202,"line_start":2605,"line_end":2605,"column_start":5,"column_end":35}},{"value":"/ #     0x2e,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001207,"byte_end":1001222,"line_start":2606,"line_end":2606,"column_start":5,"column_end":20}},{"value":"/ #     // DW_CHILDREN_yes","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001227,"byte_end":1001255,"line_start":2607,"line_end":2607,"column_start":5,"column_end":33}},{"value":"/ #     0x01,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001260,"byte_end":1001275,"line_start":2608,"line_end":2608,"column_start":5,"column_end":20}},{"value":"/ #     // Begin attributes","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001280,"byte_end":1001309,"line_start":2609,"line_end":2609,"column_start":5,"column_end":34}},{"value":"/ #       // Attribute name = DW_AT_name","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001314,"byte_end":1001356,"line_start":2610,"line_end":2610,"column_start":5,"column_end":47}},{"value":"/ #       0x03,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001361,"byte_end":1001378,"line_start":2611,"line_end":2611,"column_start":5,"column_end":22}},{"value":"/ #       // Attribute form = DW_FORM_string","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001383,"byte_end":1001429,"line_start":2612,"line_end":2612,"column_start":5,"column_end":51}},{"value":"/ #       0x08,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001434,"byte_end":1001451,"line_start":2613,"line_end":2613,"column_start":5,"column_end":22}},{"value":"/ #     // End attributes","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001456,"byte_end":1001483,"line_start":2614,"line_end":2614,"column_start":5,"column_end":32}},{"value":"/ #     0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001488,"byte_end":1001503,"line_start":2615,"line_end":2615,"column_start":5,"column_end":20}},{"value":"/ #     0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001508,"byte_end":1001523,"line_start":2616,"line_end":2616,"column_start":5,"column_end":20}},{"value":"/ #     // Null terminator","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001528,"byte_end":1001556,"line_start":2617,"line_end":2617,"column_start":5,"column_end":33}},{"value":"/ #     0x00","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001561,"byte_end":1001575,"line_start":2618,"line_end":2618,"column_start":5,"column_end":19}},{"value":"/ # ];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001580,"byte_end":1001588,"line_start":2619,"line_end":2619,"column_start":5,"column_end":13}},{"value":"/ # let debug_abbrev = DebugAbbrev::new(&abbrev_buf, LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001593,"byte_end":1001662,"line_start":2620,"line_end":2620,"column_start":5,"column_end":74}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001667,"byte_end":1001672,"line_start":2621,"line_end":2621,"column_start":5,"column_end":10}},{"value":"/ # let get_some_unit = || debug_info.units().next().unwrap().unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001677,"byte_end":1001750,"line_start":2622,"line_end":2622,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001755,"byte_end":1001758,"line_start":2623,"line_end":2623,"column_start":5,"column_end":8}},{"value":"/ let unit = get_some_unit();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001763,"byte_end":1001794,"line_start":2624,"line_end":2624,"column_start":5,"column_end":36}},{"value":"/ # let get_abbrevs_for_unit = |_| unit.abbreviations(&debug_abbrev).unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001799,"byte_end":1001879,"line_start":2625,"line_end":2625,"column_start":5,"column_end":85}},{"value":"/ let abbrevs = get_abbrevs_for_unit(&unit);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001884,"byte_end":1001930,"line_start":2626,"line_end":2626,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001935,"byte_end":1001938,"line_start":2627,"line_end":2627,"column_start":5,"column_end":8}},{"value":"/ let mut first_entry_with_no_children = None;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001943,"byte_end":1001991,"line_start":2628,"line_end":2628,"column_start":5,"column_end":53}},{"value":"/ let mut cursor = unit.entries(&abbrevs);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1001996,"byte_end":1002040,"line_start":2629,"line_end":2629,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1002045,"byte_end":1002048,"line_start":2630,"line_end":2630,"column_start":5,"column_end":8}},{"value":"/ // Move the cursor to the root.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1002053,"byte_end":1002088,"line_start":2631,"line_end":2631,"column_start":5,"column_end":40}},{"value":"/ assert!(cursor.next_dfs().unwrap().is_some());","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1002093,"byte_end":1002143,"line_start":2632,"line_end":2632,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1002148,"byte_end":1002151,"line_start":2633,"line_end":2633,"column_start":5,"column_end":8}},{"value":"/ // Traverse the DIE tree in depth-first search order.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1002156,"byte_end":1002213,"line_start":2634,"line_end":2634,"column_start":5,"column_end":62}},{"value":"/ let mut depth = 0;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1002218,"byte_end":1002240,"line_start":2635,"line_end":2635,"column_start":5,"column_end":27}},{"value":"/ while let Some((delta_depth, current)) = cursor.next_dfs().expect(\"Should parse next dfs\") {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1002245,"byte_end":1002341,"line_start":2636,"line_end":2636,"column_start":5,"column_end":101}},{"value":"/     // Update depth value, and break out of the loop when we","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1002346,"byte_end":1002410,"line_start":2637,"line_end":2637,"column_start":5,"column_end":69}},{"value":"/     // return to the original starting position.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1002415,"byte_end":1002467,"line_start":2638,"line_end":2638,"column_start":5,"column_end":57}},{"value":"/     depth += delta_depth;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1002472,"byte_end":1002501,"line_start":2639,"line_end":2639,"column_start":5,"column_end":34}},{"value":"/     if depth <= 0 {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1002506,"byte_end":1002529,"line_start":2640,"line_end":2640,"column_start":5,"column_end":28}},{"value":"/         break;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1002534,"byte_end":1002552,"line_start":2641,"line_end":2641,"column_start":5,"column_end":23}},{"value":"/     }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1002557,"byte_end":1002566,"line_start":2642,"line_end":2642,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1002571,"byte_end":1002574,"line_start":2643,"line_end":2643,"column_start":5,"column_end":8}},{"value":"/     first_entry_with_no_children = Some(current.clone());","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1002579,"byte_end":1002640,"line_start":2644,"line_end":2644,"column_start":5,"column_end":66}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1002645,"byte_end":1002650,"line_start":2645,"line_end":2645,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1002655,"byte_end":1002658,"line_start":2646,"line_end":2646,"column_start":5,"column_end":8}},{"value":"/ println!(\"The first entry with no children is {:?}\",","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1002663,"byte_end":1002719,"line_start":2647,"line_end":2647,"column_start":5,"column_end":61}},{"value":"/          first_entry_with_no_children.unwrap());","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1002724,"byte_end":1002776,"line_start":2648,"line_end":2648,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1002781,"byte_end":1002788,"line_start":2649,"line_end":2649,"column_start":5,"column_end":12}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1002793,"byte_end":1002826,"line_start":2650,"line_end":2650,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2866},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006885,"byte_end":1006897,"line_start":2776,"line_end":2776,"column_start":12,"column_end":24},"name":"next_sibling","qualname":"<EntriesCursor>::next_sibling","value":"pub fn next_sibling(&mut Self) -> Result<Option<&DebuggingInformationEntry>>","parent":null,"children":[],"decl_id":null,"docs":" Move the cursor to the next sibling DIE of the current one.","sig":null,"attributes":[{"value":"/ Move the cursor to the next sibling DIE of the current one.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1003445,"byte_end":1003508,"line_start":2670,"line_end":2670,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1003513,"byte_end":1003516,"line_start":2671,"line_end":2671,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(Some(entry))` when the cursor has been moved to","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1003521,"byte_end":1003584,"line_start":2672,"line_end":2672,"column_start":5,"column_end":68}},{"value":"/ the next sibling, `Ok(None)` when there is no next sibling.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1003589,"byte_end":1003652,"line_start":2673,"line_end":2673,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1003657,"byte_end":1003660,"line_start":2674,"line_end":2674,"column_start":5,"column_end":8}},{"value":"/ The depth of the cursor is never changed if this method returns `Ok`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1003665,"byte_end":1003738,"line_start":2675,"line_end":2675,"column_start":5,"column_end":78}},{"value":"/ Once `Ok(None)` is returned, this method will continue to return","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1003743,"byte_end":1003811,"line_start":2676,"line_end":2676,"column_start":5,"column_end":73}},{"value":"/ `Ok(None)` until either `next_entry` or `next_dfs` is called.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1003816,"byte_end":1003881,"line_start":2677,"line_end":2677,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1003886,"byte_end":1003889,"line_start":2678,"line_end":2678,"column_start":5,"column_end":8}},{"value":"/ Here is an example that iterates over all of the direct children of the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1003894,"byte_end":1003969,"line_start":2679,"line_end":2679,"column_start":5,"column_end":80}},{"value":"/ root entry:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1003974,"byte_end":1003989,"line_start":2680,"line_end":2680,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1003994,"byte_end":1003997,"line_start":2681,"line_end":2681,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004002,"byte_end":1004009,"line_start":2682,"line_end":2682,"column_start":5,"column_end":12}},{"value":"/ # use gimli::{DebugAbbrev, DebugInfo, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004014,"byte_end":1004070,"line_start":2683,"line_end":2683,"column_start":5,"column_end":61}},{"value":"/ # let info_buf = [","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004075,"byte_end":1004097,"line_start":2684,"line_end":2684,"column_start":5,"column_end":27}},{"value":"/ #     // Comilation unit header","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004102,"byte_end":1004137,"line_start":2685,"line_end":2685,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004142,"byte_end":1004147,"line_start":2686,"line_end":2686,"column_start":5,"column_end":10}},{"value":"/ #     // 32-bit unit length = 25","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004152,"byte_end":1004188,"line_start":2687,"line_end":2687,"column_start":5,"column_end":41}},{"value":"/ #     0x19, 0x00, 0x00, 0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004193,"byte_end":1004226,"line_start":2688,"line_end":2688,"column_start":5,"column_end":38}},{"value":"/ #     // Version 4","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004231,"byte_end":1004253,"line_start":2689,"line_end":2689,"column_start":5,"column_end":27}},{"value":"/ #     0x04, 0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004258,"byte_end":1004279,"line_start":2690,"line_end":2690,"column_start":5,"column_end":26}},{"value":"/ #     // debug_abbrev_offset","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004284,"byte_end":1004316,"line_start":2691,"line_end":2691,"column_start":5,"column_end":37}},{"value":"/ #     0x00, 0x00, 0x00, 0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004321,"byte_end":1004354,"line_start":2692,"line_end":2692,"column_start":5,"column_end":38}},{"value":"/ #     // Address size","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004359,"byte_end":1004384,"line_start":2693,"line_end":2693,"column_start":5,"column_end":30}},{"value":"/ #     0x04,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004389,"byte_end":1004404,"line_start":2694,"line_end":2694,"column_start":5,"column_end":20}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004409,"byte_end":1004414,"line_start":2695,"line_end":2695,"column_start":5,"column_end":10}},{"value":"/ #     // DIEs","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004419,"byte_end":1004436,"line_start":2696,"line_end":2696,"column_start":5,"column_end":22}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004441,"byte_end":1004446,"line_start":2697,"line_end":2697,"column_start":5,"column_end":10}},{"value":"/ #     // Abbreviation code","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004451,"byte_end":1004481,"line_start":2698,"line_end":2698,"column_start":5,"column_end":35}},{"value":"/ #     0x01,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004486,"byte_end":1004501,"line_start":2699,"line_end":2699,"column_start":5,"column_end":20}},{"value":"/ #     // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004506,"byte_end":1004561,"line_start":2700,"line_end":2700,"column_start":5,"column_end":60}},{"value":"/ #     0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004566,"byte_end":1004599,"line_start":2701,"line_end":2701,"column_start":5,"column_end":38}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004604,"byte_end":1004609,"line_start":2702,"line_end":2702,"column_start":5,"column_end":10}},{"value":"/ #       // Children","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004614,"byte_end":1004637,"line_start":2703,"line_end":2703,"column_start":5,"column_end":28}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004642,"byte_end":1004647,"line_start":2704,"line_end":2704,"column_start":5,"column_end":10}},{"value":"/ #       // Abbreviation code","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004652,"byte_end":1004684,"line_start":2705,"line_end":2705,"column_start":5,"column_end":37}},{"value":"/ #       0x01,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004689,"byte_end":1004706,"line_start":2706,"line_end":2706,"column_start":5,"column_end":22}},{"value":"/ #       // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004711,"byte_end":1004768,"line_start":2707,"line_end":2707,"column_start":5,"column_end":62}},{"value":"/ #       0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004773,"byte_end":1004808,"line_start":2708,"line_end":2708,"column_start":5,"column_end":40}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004813,"byte_end":1004818,"line_start":2709,"line_end":2709,"column_start":5,"column_end":10}},{"value":"/ #         // Children","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004823,"byte_end":1004848,"line_start":2710,"line_end":2710,"column_start":5,"column_end":30}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004853,"byte_end":1004858,"line_start":2711,"line_end":2711,"column_start":5,"column_end":10}},{"value":"/ #         // Abbreviation code","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004863,"byte_end":1004897,"line_start":2712,"line_end":2712,"column_start":5,"column_end":39}},{"value":"/ #         0x01,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004902,"byte_end":1004921,"line_start":2713,"line_end":2713,"column_start":5,"column_end":24}},{"value":"/ #         // Attribute of form DW_FORM_string = \"foo\\0\"","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004926,"byte_end":1004985,"line_start":2714,"line_end":2714,"column_start":5,"column_end":64}},{"value":"/ #         0x66, 0x6f, 0x6f, 0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1004990,"byte_end":1005027,"line_start":2715,"line_end":2715,"column_start":5,"column_end":42}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005032,"byte_end":1005037,"line_start":2716,"line_end":2716,"column_start":5,"column_end":10}},{"value":"/ #           // Children","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005042,"byte_end":1005069,"line_start":2717,"line_end":2717,"column_start":5,"column_end":32}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005074,"byte_end":1005079,"line_start":2718,"line_end":2718,"column_start":5,"column_end":10}},{"value":"/ #           // End of children","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005084,"byte_end":1005118,"line_start":2719,"line_end":2719,"column_start":5,"column_end":39}},{"value":"/ #           0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005123,"byte_end":1005144,"line_start":2720,"line_end":2720,"column_start":5,"column_end":26}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005149,"byte_end":1005154,"line_start":2721,"line_end":2721,"column_start":5,"column_end":10}},{"value":"/ #         // End of children","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005159,"byte_end":1005191,"line_start":2722,"line_end":2722,"column_start":5,"column_end":37}},{"value":"/ #         0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005196,"byte_end":1005215,"line_start":2723,"line_end":2723,"column_start":5,"column_end":24}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005220,"byte_end":1005225,"line_start":2724,"line_end":2724,"column_start":5,"column_end":10}},{"value":"/ #       // End of children","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005230,"byte_end":1005260,"line_start":2725,"line_end":2725,"column_start":5,"column_end":35}},{"value":"/ #       0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005265,"byte_end":1005282,"line_start":2726,"line_end":2726,"column_start":5,"column_end":22}},{"value":"/ # ];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005287,"byte_end":1005295,"line_start":2727,"line_end":2727,"column_start":5,"column_end":13}},{"value":"/ # let debug_info = DebugInfo::new(&info_buf, LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005300,"byte_end":1005363,"line_start":2728,"line_end":2728,"column_start":5,"column_end":68}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005368,"byte_end":1005373,"line_start":2729,"line_end":2729,"column_start":5,"column_end":10}},{"value":"/ # let get_some_unit = || debug_info.units().next().unwrap().unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005378,"byte_end":1005451,"line_start":2730,"line_end":2730,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005456,"byte_end":1005459,"line_start":2731,"line_end":2731,"column_start":5,"column_end":8}},{"value":"/ # let abbrev_buf = [","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005464,"byte_end":1005488,"line_start":2732,"line_end":2732,"column_start":5,"column_end":29}},{"value":"/ #     // Code","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005493,"byte_end":1005510,"line_start":2733,"line_end":2733,"column_start":5,"column_end":22}},{"value":"/ #     0x01,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005515,"byte_end":1005530,"line_start":2734,"line_end":2734,"column_start":5,"column_end":20}},{"value":"/ #     // DW_TAG_subprogram","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005535,"byte_end":1005565,"line_start":2735,"line_end":2735,"column_start":5,"column_end":35}},{"value":"/ #     0x2e,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005570,"byte_end":1005585,"line_start":2736,"line_end":2736,"column_start":5,"column_end":20}},{"value":"/ #     // DW_CHILDREN_yes","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005590,"byte_end":1005618,"line_start":2737,"line_end":2737,"column_start":5,"column_end":33}},{"value":"/ #     0x01,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005623,"byte_end":1005638,"line_start":2738,"line_end":2738,"column_start":5,"column_end":20}},{"value":"/ #     // Begin attributes","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005643,"byte_end":1005672,"line_start":2739,"line_end":2739,"column_start":5,"column_end":34}},{"value":"/ #       // Attribute name = DW_AT_name","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005677,"byte_end":1005719,"line_start":2740,"line_end":2740,"column_start":5,"column_end":47}},{"value":"/ #       0x03,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005724,"byte_end":1005741,"line_start":2741,"line_end":2741,"column_start":5,"column_end":22}},{"value":"/ #       // Attribute form = DW_FORM_string","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005746,"byte_end":1005792,"line_start":2742,"line_end":2742,"column_start":5,"column_end":51}},{"value":"/ #       0x08,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005797,"byte_end":1005814,"line_start":2743,"line_end":2743,"column_start":5,"column_end":22}},{"value":"/ #     // End attributes","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005819,"byte_end":1005846,"line_start":2744,"line_end":2744,"column_start":5,"column_end":32}},{"value":"/ #     0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005851,"byte_end":1005866,"line_start":2745,"line_end":2745,"column_start":5,"column_end":20}},{"value":"/ #     0x00,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005871,"byte_end":1005886,"line_start":2746,"line_end":2746,"column_start":5,"column_end":20}},{"value":"/ #     // Null terminator","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005891,"byte_end":1005919,"line_start":2747,"line_end":2747,"column_start":5,"column_end":33}},{"value":"/ #     0x00","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005924,"byte_end":1005938,"line_start":2748,"line_end":2748,"column_start":5,"column_end":19}},{"value":"/ # ];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005943,"byte_end":1005951,"line_start":2749,"line_end":2749,"column_start":5,"column_end":13}},{"value":"/ # let debug_abbrev = DebugAbbrev::new(&abbrev_buf, LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1005956,"byte_end":1006025,"line_start":2750,"line_end":2750,"column_start":5,"column_end":74}},{"value":"/ #","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006030,"byte_end":1006035,"line_start":2751,"line_end":2751,"column_start":5,"column_end":10}},{"value":"/ let unit = get_some_unit();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006040,"byte_end":1006071,"line_start":2752,"line_end":2752,"column_start":5,"column_end":36}},{"value":"/ # let get_abbrevs_for_unit = |_| unit.abbreviations(&debug_abbrev).unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006076,"byte_end":1006156,"line_start":2753,"line_end":2753,"column_start":5,"column_end":85}},{"value":"/ let abbrevs = get_abbrevs_for_unit(&unit);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006161,"byte_end":1006207,"line_start":2754,"line_end":2754,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006212,"byte_end":1006215,"line_start":2755,"line_end":2755,"column_start":5,"column_end":8}},{"value":"/ let mut cursor = unit.entries(&abbrevs);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006220,"byte_end":1006264,"line_start":2756,"line_end":2756,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006269,"byte_end":1006272,"line_start":2757,"line_end":2757,"column_start":5,"column_end":8}},{"value":"/ // Move the cursor to the root.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006277,"byte_end":1006312,"line_start":2758,"line_end":2758,"column_start":5,"column_end":40}},{"value":"/ assert!(cursor.next_dfs().unwrap().is_some());","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006317,"byte_end":1006367,"line_start":2759,"line_end":2759,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006372,"byte_end":1006375,"line_start":2760,"line_end":2760,"column_start":5,"column_end":8}},{"value":"/ // Move the cursor to the root's first child.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006380,"byte_end":1006429,"line_start":2761,"line_end":2761,"column_start":5,"column_end":54}},{"value":"/ assert!(cursor.next_dfs().unwrap().is_some());","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006434,"byte_end":1006484,"line_start":2762,"line_end":2762,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006489,"byte_end":1006492,"line_start":2763,"line_end":2763,"column_start":5,"column_end":8}},{"value":"/ // Iterate the root's children.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006497,"byte_end":1006532,"line_start":2764,"line_end":2764,"column_start":5,"column_end":40}},{"value":"/ loop {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006537,"byte_end":1006547,"line_start":2765,"line_end":2765,"column_start":5,"column_end":15}},{"value":"/     {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006552,"byte_end":1006561,"line_start":2766,"line_end":2766,"column_start":5,"column_end":14}},{"value":"/         let current = cursor.current().expect(\"Should be at an entry\");","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006566,"byte_end":1006641,"line_start":2767,"line_end":2767,"column_start":5,"column_end":80}},{"value":"/         println!(\"{:?} is a child of the root\", current);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006646,"byte_end":1006707,"line_start":2768,"line_end":2768,"column_start":5,"column_end":66}},{"value":"/     }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006712,"byte_end":1006721,"line_start":2769,"line_end":2769,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006726,"byte_end":1006729,"line_start":2770,"line_end":2770,"column_start":5,"column_end":8}},{"value":"/     if cursor.next_sibling().expect(\"Should parse next sibling\").is_none() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006734,"byte_end":1006814,"line_start":2771,"line_end":2771,"column_start":5,"column_end":85}},{"value":"/         break;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006819,"byte_end":1006837,"line_start":2772,"line_end":2772,"column_start":5,"column_end":23}},{"value":"/     }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006842,"byte_end":1006851,"line_start":2773,"line_end":2773,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006856,"byte_end":1006861,"line_start":2774,"line_end":2774,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1006866,"byte_end":1006873,"line_start":2775,"line_end":2775,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":8747},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009966,"byte_end":1009977,"line_start":2862,"line_end":2862,"column_start":12,"column_end":23},"name":"EntriesTree","qualname":"::read::unit::EntriesTree","value":"EntriesTree {  }","parent":null,"children":[{"krate":0,"index":8751},{"krate":0,"index":8752},{"krate":0,"index":8753},{"krate":0,"index":8754},{"krate":0,"index":8755},{"krate":0,"index":8756}],"decl_id":null,"docs":" The state information for a tree view of the Debugging Information Entries.","sig":null,"attributes":[{"value":"/ The state information for a tree view of the Debugging Information Entries.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1008453,"byte_end":1008532,"line_start":2821,"line_end":2821,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1008533,"byte_end":1008536,"line_start":2822,"line_end":2822,"column_start":1,"column_end":4}},{"value":"/ The `EntriesTree` can be used to recursively iterate through the DIE","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1008537,"byte_end":1008609,"line_start":2823,"line_end":2823,"column_start":1,"column_end":73}},{"value":"/ tree, following the parent/child relationships. The `EntriesTree` contains","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1008610,"byte_end":1008688,"line_start":2824,"line_end":2824,"column_start":1,"column_end":79}},{"value":"/ shared state for all nodes in the tree, avoiding any duplicate parsing of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1008689,"byte_end":1008766,"line_start":2825,"line_end":2825,"column_start":1,"column_end":78}},{"value":"/ entries during the traversal.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1008767,"byte_end":1008800,"line_start":2826,"line_end":2826,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1008801,"byte_end":1008804,"line_start":2827,"line_end":2827,"column_start":1,"column_end":4}},{"value":"/ ## Example Usage","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1008805,"byte_end":1008825,"line_start":2828,"line_end":2828,"column_start":1,"column_end":21}},{"value":"/ ```rust,no_run","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1008826,"byte_end":1008844,"line_start":2829,"line_end":2829,"column_start":1,"column_end":19}},{"value":"/ # fn example() -> Result<(), gimli::Error> {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1008845,"byte_end":1008893,"line_start":2830,"line_end":2830,"column_start":1,"column_end":49}},{"value":"/ # let debug_info = gimli::DebugInfo::new(&[], gimli::LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1008894,"byte_end":1008965,"line_start":2831,"line_end":2831,"column_start":1,"column_end":72}},{"value":"/ # let get_some_unit = || debug_info.units().next().unwrap().unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1008966,"byte_end":1009039,"line_start":2832,"line_end":2832,"column_start":1,"column_end":74}},{"value":"/ let unit = get_some_unit();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009040,"byte_end":1009071,"line_start":2833,"line_end":2833,"column_start":1,"column_end":32}},{"value":"/ # let debug_abbrev = gimli::DebugAbbrev::new(&[], gimli::LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009072,"byte_end":1009147,"line_start":2834,"line_end":2834,"column_start":1,"column_end":76}},{"value":"/ # let get_abbrevs_for_unit = |_| unit.abbreviations(&debug_abbrev).unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009148,"byte_end":1009228,"line_start":2835,"line_end":2835,"column_start":1,"column_end":81}},{"value":"/ let abbrevs = get_abbrevs_for_unit(&unit);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009229,"byte_end":1009275,"line_start":2836,"line_end":2836,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009276,"byte_end":1009279,"line_start":2837,"line_end":2837,"column_start":1,"column_end":4}},{"value":"/ let mut tree = unit.entries_tree(&abbrevs, None)?;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009280,"byte_end":1009334,"line_start":2838,"line_end":2838,"column_start":1,"column_end":55}},{"value":"/ let root = tree.root()?;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009335,"byte_end":1009363,"line_start":2839,"line_end":2839,"column_start":1,"column_end":29}},{"value":"/ process_tree(root)?;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009364,"byte_end":1009388,"line_start":2840,"line_end":2840,"column_start":1,"column_end":25}},{"value":"/ # unreachable!()","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009389,"byte_end":1009409,"line_start":2841,"line_end":2841,"column_start":1,"column_end":21}},{"value":"/ # }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009410,"byte_end":1009417,"line_start":2842,"line_end":2842,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009418,"byte_end":1009421,"line_start":2843,"line_end":2843,"column_start":1,"column_end":4}},{"value":"/ fn process_tree<R>(mut node: gimli::EntriesTreeNode<R>) -> gimli::Result<()>","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009422,"byte_end":1009502,"line_start":2844,"line_end":2844,"column_start":1,"column_end":81}},{"value":"/     where R: gimli::Reader","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009503,"byte_end":1009533,"line_start":2845,"line_end":2845,"column_start":1,"column_end":31}},{"value":"/ {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009534,"byte_end":1009539,"line_start":2846,"line_end":2846,"column_start":1,"column_end":6}},{"value":"/     {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009540,"byte_end":1009549,"line_start":2847,"line_end":2847,"column_start":1,"column_end":10}},{"value":"/         // Examine the entry attributes.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009550,"byte_end":1009594,"line_start":2848,"line_end":2848,"column_start":1,"column_end":45}},{"value":"/         let mut attrs = node.entry().attrs();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009595,"byte_end":1009644,"line_start":2849,"line_end":2849,"column_start":1,"column_end":50}},{"value":"/         while let Some(attr) = attrs.next()? {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009645,"byte_end":1009695,"line_start":2850,"line_end":2850,"column_start":1,"column_end":51}},{"value":"/         }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009696,"byte_end":1009709,"line_start":2851,"line_end":2851,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009710,"byte_end":1009719,"line_start":2852,"line_end":2852,"column_start":1,"column_end":10}},{"value":"/     let mut children = node.children();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009720,"byte_end":1009763,"line_start":2853,"line_end":2853,"column_start":1,"column_end":44}},{"value":"/     while let Some(child) = children.next()? {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009764,"byte_end":1009814,"line_start":2854,"line_end":2854,"column_start":1,"column_end":51}},{"value":"/         // Recursively process a child.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009815,"byte_end":1009858,"line_start":2855,"line_end":2855,"column_start":1,"column_end":44}},{"value":"/         process_tree(child);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009859,"byte_end":1009891,"line_start":2856,"line_end":2856,"column_start":1,"column_end":33}},{"value":"/     }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009892,"byte_end":1009901,"line_start":2857,"line_end":2857,"column_start":1,"column_end":10}},{"value":"/     Ok(())","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009902,"byte_end":1009916,"line_start":2858,"line_end":2858,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009917,"byte_end":1009922,"line_start":2859,"line_end":2859,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1009923,"byte_end":1009930,"line_start":2860,"line_end":2860,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2872},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1010626,"byte_end":1010630,"line_start":2888,"line_end":2888,"column_start":12,"column_end":16},"name":"root","qualname":"<EntriesTree>::root","value":"pub fn root<'me>(&'me mut Self) -> Result<EntriesTreeNode>","parent":null,"children":[],"decl_id":null,"docs":" Returns the root node of the tree.\n","sig":null,"attributes":[{"value":"/ Returns the root node of the tree.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1010576,"byte_end":1010614,"line_start":2887,"line_end":2887,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":8767},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1014263,"byte_end":1014278,"line_start":2994,"line_end":2994,"column_start":12,"column_end":27},"name":"EntriesTreeNode","qualname":"::read::unit::EntriesTreeNode","value":"EntriesTreeNode {  }","parent":null,"children":[{"krate":0,"index":8772},{"krate":0,"index":8773}],"decl_id":null,"docs":" A node in the Debugging Information Entry tree.","sig":null,"attributes":[{"value":"/ A node in the Debugging Information Entry tree.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1014065,"byte_end":1014116,"line_start":2989,"line_end":2989,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1014117,"byte_end":1014120,"line_start":2990,"line_end":2990,"column_start":1,"column_end":4}},{"value":"/ The root node of a tree can be obtained","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1014121,"byte_end":1014164,"line_start":2991,"line_end":2991,"column_start":1,"column_end":44}},{"value":"/ via [`EntriesTree::root`](./struct.EntriesTree.html#method.root).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1014165,"byte_end":1014234,"line_start":2992,"line_end":2992,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2881},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1014766,"byte_end":1014771,"line_start":3009,"line_end":3009,"column_start":12,"column_end":17},"name":"entry","qualname":"<EntriesTreeNode>::entry","value":"pub fn entry(&Self) -> &DebuggingInformationEntry","parent":null,"children":[],"decl_id":null,"docs":" Returns the current entry in the tree.\n","sig":null,"attributes":[{"value":"/ Returns the current entry in the tree.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1014712,"byte_end":1014754,"line_start":3008,"line_end":3008,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2882},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1015105,"byte_end":1015113,"line_start":3018,"line_end":3018,"column_start":12,"column_end":20},"name":"children","qualname":"<EntriesTreeNode>::children","value":"pub fn children(Self) -> EntriesTreeIter","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator for the children of the current entry.","sig":null,"attributes":[{"value":"/ Create an iterator for the children of the current entry.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1014935,"byte_end":1014996,"line_start":3014,"line_end":3014,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1015001,"byte_end":1015004,"line_start":3015,"line_end":3015,"column_start":5,"column_end":8}},{"value":"/ The current entry can no longer be accessed after creating the","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1015009,"byte_end":1015075,"line_start":3016,"line_end":3016,"column_start":5,"column_end":71}},{"value":"/ iterator.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1015080,"byte_end":1015093,"line_start":3017,"line_end":3017,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":8780},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1015471,"byte_end":1015486,"line_start":3029,"line_end":3029,"column_start":12,"column_end":27},"name":"EntriesTreeIter","qualname":"::read::unit::EntriesTreeIter","value":"EntriesTreeIter {  }","parent":null,"children":[{"krate":0,"index":8785},{"krate":0,"index":8786},{"krate":0,"index":8787}],"decl_id":null,"docs":" An iterator that allows traversal of the children of an\n `EntriesTreeNode`.","sig":null,"attributes":[{"value":"/ An iterator that allows traversal of the children of an","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1015228,"byte_end":1015287,"line_start":3023,"line_end":3023,"column_start":1,"column_end":60}},{"value":"/ `EntriesTreeNode`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1015288,"byte_end":1015310,"line_start":3024,"line_end":3024,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1015311,"byte_end":1015314,"line_start":3025,"line_end":3025,"column_start":1,"column_end":4}},{"value":"/ The items returned by this iterator are also `EntriesTreeNode`s,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1015315,"byte_end":1015383,"line_start":3026,"line_end":3026,"column_start":1,"column_end":69}},{"value":"/ which allow recursive traversal of grandchildren, etc.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1015384,"byte_end":1015442,"line_start":3027,"line_end":3027,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2889},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1016083,"byte_end":1016087,"line_start":3050,"line_end":3050,"column_start":12,"column_end":16},"name":"next","qualname":"<EntriesTreeIter>::next","value":"pub fn next<'me>(&'me mut Self) -> Result<Option<EntriesTreeNode>>","parent":null,"children":[],"decl_id":null,"docs":" Returns an `EntriesTreeNode` for the next child entry.","sig":null,"attributes":[{"value":"/ Returns an `EntriesTreeNode` for the next child entry.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1015951,"byte_end":1016009,"line_start":3047,"line_end":3047,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1016014,"byte_end":1016017,"line_start":3048,"line_end":3048,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if there are no more children.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1016022,"byte_end":1016071,"line_start":3049,"line_end":3049,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":8794},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1017000,"byte_end":1017010,"line_start":3076,"line_end":3076,"column_start":12,"column_end":22},"name":"DebugTypes","qualname":"::read::unit::DebugTypes","value":"DebugTypes {  }","parent":null,"children":[{"krate":0,"index":8796}],"decl_id":null,"docs":" The `DebugTypes` struct represents the DWARF type information\n found in the `.debug_types` section.\n","sig":null,"attributes":[{"value":"/ The `DebugTypes` struct represents the DWARF type information","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1016843,"byte_end":1016908,"line_start":3073,"line_end":3073,"column_start":1,"column_end":66}},{"value":"/ found in the `.debug_types` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1016909,"byte_end":1016949,"line_start":3074,"line_end":3074,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2898},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1017741,"byte_end":1017744,"line_start":3098,"line_end":3098,"column_start":12,"column_end":15},"name":"new","qualname":"<DebugTypes<EndianSlice>>::new","value":"pub fn new(&'input [u8], Endian) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `DebugTypes` instance from the data in the `.debug_types`\n section.","sig":null,"attributes":[{"value":"/ Construct a new `DebugTypes` instance from the data in the `.debug_types`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1017143,"byte_end":1017220,"line_start":3084,"line_end":3084,"column_start":5,"column_end":82}},{"value":"/ section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1017225,"byte_end":1017237,"line_start":3085,"line_end":3085,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1017242,"byte_end":1017245,"line_start":3086,"line_end":3086,"column_start":5,"column_end":8}},{"value":"/ It is the caller's responsibility to read the `.debug_types` section and","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1017250,"byte_end":1017326,"line_start":3087,"line_end":3087,"column_start":5,"column_end":81}},{"value":"/ present it as a `&[u8]` slice. That means using some ELF loader on","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1017331,"byte_end":1017401,"line_start":3088,"line_end":3088,"column_start":5,"column_end":75}},{"value":"/ Linux, a Mach-O loader on OSX, etc.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1017406,"byte_end":1017445,"line_start":3089,"line_end":3089,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1017450,"byte_end":1017453,"line_start":3090,"line_end":3090,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1017458,"byte_end":1017465,"line_start":3091,"line_end":3091,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugTypes, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1017470,"byte_end":1017512,"line_start":3092,"line_end":3092,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1017517,"byte_end":1017520,"line_start":3093,"line_end":3093,"column_start":5,"column_end":8}},{"value":"/ # let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1017525,"byte_end":1017566,"line_start":3094,"line_end":3094,"column_start":5,"column_end":46}},{"value":"/ # let read_debug_types_section_somehow = || &buf;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1017571,"byte_end":1017624,"line_start":3095,"line_end":3095,"column_start":5,"column_end":58}},{"value":"/ let debug_types = DebugTypes::new(read_debug_types_section_somehow(), LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1017629,"byte_end":1017717,"line_start":3096,"line_end":3096,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1017722,"byte_end":1017729,"line_start":3097,"line_end":3097,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2901},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1018541,"byte_end":1018547,"line_start":3119,"line_end":3119,"column_start":12,"column_end":18},"name":"borrow","qualname":"<DebugTypes<T>>::borrow","value":"pub fn borrow<'a, F, R>(&'a Self, F) -> DebugTypes<R> where F: FnMut(&'a T) ->\nR","parent":null,"children":[],"decl_id":null,"docs":" Create a `DebugTypes` section that references the data in `self`.","sig":null,"attributes":[{"value":"/ Create a `DebugTypes` section that references the data in `self`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1017909,"byte_end":1017978,"line_start":3104,"line_end":3104,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1017983,"byte_end":1017986,"line_start":3105,"line_end":3105,"column_start":5,"column_end":8}},{"value":"/ This is useful when `R` implements `Reader` but `T` does not.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1017991,"byte_end":1018056,"line_start":3106,"line_end":3106,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1018061,"byte_end":1018064,"line_start":3107,"line_end":3107,"column_start":5,"column_end":8}},{"value":"/ ## Example Usage","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1018069,"byte_end":1018089,"line_start":3108,"line_end":3108,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1018094,"byte_end":1018097,"line_start":3109,"line_end":3109,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1018102,"byte_end":1018120,"line_start":3110,"line_end":3110,"column_start":5,"column_end":23}},{"value":"/ # let load_section = || unimplemented!();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1018125,"byte_end":1018170,"line_start":3111,"line_end":3111,"column_start":5,"column_end":50}},{"value":"/ // Read the DWARF section into a `Vec` with whatever object loader you're using.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1018175,"byte_end":1018259,"line_start":3112,"line_end":3112,"column_start":5,"column_end":89}},{"value":"/ let owned_section: gimli::DebugTypes<Vec<u8>> = load_section();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1018264,"byte_end":1018331,"line_start":3113,"line_end":3113,"column_start":5,"column_end":72}},{"value":"/ // Create a reference to the DWARF section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1018336,"byte_end":1018383,"line_start":3114,"line_end":3114,"column_start":5,"column_end":52}},{"value":"/ let section = owned_section.borrow(|section| {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1018388,"byte_end":1018438,"line_start":3115,"line_end":3115,"column_start":5,"column_end":55}},{"value":"/     gimli::EndianSlice::new(&section, gimli::LittleEndian)","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1018443,"byte_end":1018505,"line_start":3116,"line_end":3116,"column_start":5,"column_end":67}},{"value":"/ });","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1018510,"byte_end":1018517,"line_start":3117,"line_end":3117,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1018522,"byte_end":1018529,"line_start":3118,"line_end":3118,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2914},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1019688,"byte_end":1019693,"line_start":3163,"line_end":3163,"column_start":12,"column_end":17},"name":"units","qualname":"<DebugTypes<R>>::units","value":"pub fn units(&Self) -> DebugTypesUnitHeadersIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Iterate the type-units in this `.debug_types` section.","sig":null,"attributes":[{"value":"/ Iterate the type-units in this `.debug_types` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1019070,"byte_end":1019128,"line_start":3146,"line_end":3146,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1019133,"byte_end":1019136,"line_start":3147,"line_end":3147,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1019141,"byte_end":1019148,"line_start":3148,"line_end":3148,"column_start":5,"column_end":12}},{"value":"/ use gimli::{DebugTypes, LittleEndian};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1019153,"byte_end":1019195,"line_start":3149,"line_end":3149,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1019200,"byte_end":1019203,"line_start":3150,"line_end":3150,"column_start":5,"column_end":8}},{"value":"/ # let buf = [];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1019208,"byte_end":1019227,"line_start":3151,"line_end":3151,"column_start":5,"column_end":24}},{"value":"/ # let read_debug_types_section_somehow = || &buf;","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1019232,"byte_end":1019285,"line_start":3152,"line_end":3152,"column_start":5,"column_end":58}},{"value":"/ let debug_types = DebugTypes::new(read_debug_types_section_somehow(), LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1019290,"byte_end":1019378,"line_start":3153,"line_end":3153,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1019383,"byte_end":1019386,"line_start":3154,"line_end":3154,"column_start":5,"column_end":8}},{"value":"/ let mut iter = debug_types.units();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1019391,"byte_end":1019430,"line_start":3155,"line_end":3155,"column_start":5,"column_end":44}},{"value":"/ while let Some(unit) = iter.next().unwrap() {","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1019435,"byte_end":1019484,"line_start":3156,"line_end":3156,"column_start":5,"column_end":54}},{"value":"/     println!(\"unit's length is {}\", unit.unit_length());","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1019489,"byte_end":1019549,"line_start":3157,"line_end":3157,"column_start":5,"column_end":65}},{"value":"/ }","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1019554,"byte_end":1019559,"line_start":3158,"line_end":3158,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1019564,"byte_end":1019571,"line_start":3159,"line_end":3159,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1019576,"byte_end":1019579,"line_start":3160,"line_end":3160,"column_start":5,"column_end":8}},{"value":"/ Can be [used with","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1019584,"byte_end":1019605,"line_start":3161,"line_end":3161,"column_start":5,"column_end":26}},{"value":"/ `FallibleIterator`](./index.html#using-with-fallibleiterator).","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1019610,"byte_end":1019676,"line_start":3162,"line_end":3162,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":8808},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1020126,"byte_end":1020151,"line_start":3177,"line_end":3177,"column_start":12,"column_end":37},"name":"DebugTypesUnitHeadersIter","qualname":"::read::unit::DebugTypesUnitHeadersIter","value":"DebugTypesUnitHeadersIter {  }","parent":null,"children":[{"krate":0,"index":8810},{"krate":0,"index":8811}],"decl_id":null,"docs":" An iterator over the type-units of this `.debug_types` section.","sig":null,"attributes":[{"value":"/ An iterator over the type-units of this `.debug_types` section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1019904,"byte_end":1019971,"line_start":3171,"line_end":3171,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1019972,"byte_end":1019975,"line_start":3172,"line_end":3172,"column_start":1,"column_end":4}},{"value":"/ See the [documentation on","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1019976,"byte_end":1020005,"line_start":3173,"line_end":3173,"column_start":1,"column_end":30}},{"value":"/ `DebugTypes::units`](./struct.DebugTypes.html#method.units) for","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1020006,"byte_end":1020073,"line_start":3174,"line_end":3174,"column_start":1,"column_end":68}},{"value":"/ more detail.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1020074,"byte_end":1020090,"line_start":3175,"line_end":3175,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":2917},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1020340,"byte_end":1020344,"line_start":3184,"line_end":3184,"column_start":12,"column_end":16},"name":"next","qualname":"<DebugTypesUnitHeadersIter<R>>::next","value":"pub fn next(&mut Self) -> Result<Option<UnitHeader<R>>>","parent":null,"children":[],"decl_id":null,"docs":" Advance the iterator to the next type unit header.\n","sig":null,"attributes":[{"value":"/ Advance the iterator to the next type unit header.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1020274,"byte_end":1020328,"line_start":3183,"line_end":3183,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8819},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129314,"byte_end":1129321,"line_start":32,"line_end":32,"column_start":5,"column_end":12},"name":"Generic","qualname":"::read::value::ValueType::Generic","value":"ValueType::Generic","parent":{"krate":0,"index":8818},"children":[],"decl_id":null,"docs":" The generic type, which is address-sized and of unspecified sign,\n as specified in the DWARF 5 standard, section 2.5.1.\n This type is also used to represent address base types.\n","sig":null,"attributes":[{"value":"/ The generic type, which is address-sized and of unspecified sign,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129115,"byte_end":1129184,"line_start":29,"line_end":29,"column_start":5,"column_end":74}},{"value":"/ as specified in the DWARF 5 standard, section 2.5.1.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129189,"byte_end":1129245,"line_start":30,"line_end":30,"column_start":5,"column_end":61}},{"value":"/ This type is also used to represent address base types.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129250,"byte_end":1129309,"line_start":31,"line_end":31,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8821},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129362,"byte_end":1129364,"line_start":34,"line_end":34,"column_start":5,"column_end":7},"name":"I8","qualname":"::read::value::ValueType::I8","value":"ValueType::I8","parent":{"krate":0,"index":8818},"children":[],"decl_id":null,"docs":" Signed 8-bit integer type.\n","sig":null,"attributes":[{"value":"/ Signed 8-bit integer type.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129327,"byte_end":1129357,"line_start":33,"line_end":33,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8823},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129407,"byte_end":1129409,"line_start":36,"line_end":36,"column_start":5,"column_end":7},"name":"U8","qualname":"::read::value::ValueType::U8","value":"ValueType::U8","parent":{"krate":0,"index":8818},"children":[],"decl_id":null,"docs":" Unsigned 8-bit integer type.\n","sig":null,"attributes":[{"value":"/ Unsigned 8-bit integer type.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129370,"byte_end":1129402,"line_start":35,"line_end":35,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8825},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129451,"byte_end":1129454,"line_start":38,"line_end":38,"column_start":5,"column_end":8},"name":"I16","qualname":"::read::value::ValueType::I16","value":"ValueType::I16","parent":{"krate":0,"index":8818},"children":[],"decl_id":null,"docs":" Signed 16-bit integer type.\n","sig":null,"attributes":[{"value":"/ Signed 16-bit integer type.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129415,"byte_end":1129446,"line_start":37,"line_end":37,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8827},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129498,"byte_end":1129501,"line_start":40,"line_end":40,"column_start":5,"column_end":8},"name":"U16","qualname":"::read::value::ValueType::U16","value":"ValueType::U16","parent":{"krate":0,"index":8818},"children":[],"decl_id":null,"docs":" Unsigned 16-bit integer type.\n","sig":null,"attributes":[{"value":"/ Unsigned 16-bit integer type.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129460,"byte_end":1129493,"line_start":39,"line_end":39,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8829},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129543,"byte_end":1129546,"line_start":42,"line_end":42,"column_start":5,"column_end":8},"name":"I32","qualname":"::read::value::ValueType::I32","value":"ValueType::I32","parent":{"krate":0,"index":8818},"children":[],"decl_id":null,"docs":" Signed 32-bit integer type.\n","sig":null,"attributes":[{"value":"/ Signed 32-bit integer type.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129507,"byte_end":1129538,"line_start":41,"line_end":41,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8831},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129590,"byte_end":1129593,"line_start":44,"line_end":44,"column_start":5,"column_end":8},"name":"U32","qualname":"::read::value::ValueType::U32","value":"ValueType::U32","parent":{"krate":0,"index":8818},"children":[],"decl_id":null,"docs":" Unsigned 32-bit integer type.\n","sig":null,"attributes":[{"value":"/ Unsigned 32-bit integer type.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129552,"byte_end":1129585,"line_start":43,"line_end":43,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8833},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129635,"byte_end":1129638,"line_start":46,"line_end":46,"column_start":5,"column_end":8},"name":"I64","qualname":"::read::value::ValueType::I64","value":"ValueType::I64","parent":{"krate":0,"index":8818},"children":[],"decl_id":null,"docs":" Signed 64-bit integer type.\n","sig":null,"attributes":[{"value":"/ Signed 64-bit integer type.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129599,"byte_end":1129630,"line_start":45,"line_end":45,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8835},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129682,"byte_end":1129685,"line_start":48,"line_end":48,"column_start":5,"column_end":8},"name":"U64","qualname":"::read::value::ValueType::U64","value":"ValueType::U64","parent":{"krate":0,"index":8818},"children":[],"decl_id":null,"docs":" Unsigned 64-bit integer type.\n","sig":null,"attributes":[{"value":"/ Unsigned 64-bit integer type.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129644,"byte_end":1129677,"line_start":47,"line_end":47,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8837},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129727,"byte_end":1129730,"line_start":50,"line_end":50,"column_start":5,"column_end":8},"name":"F32","qualname":"::read::value::ValueType::F32","value":"ValueType::F32","parent":{"krate":0,"index":8818},"children":[],"decl_id":null,"docs":" 32-bit floating point type.\n","sig":null,"attributes":[{"value":"/ 32-bit floating point type.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129691,"byte_end":1129722,"line_start":49,"line_end":49,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8839},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129772,"byte_end":1129775,"line_start":52,"line_end":52,"column_start":5,"column_end":8},"name":"F64","qualname":"::read::value::ValueType::F64","value":"ValueType::F64","parent":{"krate":0,"index":8818},"children":[],"decl_id":null,"docs":" 64-bit floating point type.\n","sig":null,"attributes":[{"value":"/ 64-bit floating point type.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129736,"byte_end":1129767,"line_start":51,"line_end":51,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":8818},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129099,"byte_end":1129108,"line_start":28,"line_end":28,"column_start":10,"column_end":19},"name":"ValueType","qualname":"::read::value::ValueType","value":"pub enum ValueType {\n    Generic,\n    I8,\n    U8,\n    I16,\n    U16,\n    I32,\n    U32,\n    I64,\n    U64,\n    F32,\n    F64,\n}","parent":null,"children":[{"krate":0,"index":8819},{"krate":0,"index":8821},{"krate":0,"index":8823},{"krate":0,"index":8825},{"krate":0,"index":8827},{"krate":0,"index":8829},{"krate":0,"index":8831},{"krate":0,"index":8833},{"krate":0,"index":8835},{"krate":0,"index":8837},{"krate":0,"index":8839}],"decl_id":null,"docs":" The type of an entry on the DWARF stack.\n","sig":null,"attributes":[{"value":"/ The type of an entry on the DWARF stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129000,"byte_end":1129044,"line_start":26,"line_end":26,"column_start":1,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8853},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129961,"byte_end":1129968,"line_start":59,"line_end":59,"column_start":5,"column_end":12},"name":"Generic","qualname":"::read::value::Value::Generic","value":"Value::Generic(u64)","parent":{"krate":0,"index":8852},"children":[],"decl_id":null,"docs":" A generic value, which is address-sized and of unspecified sign.\n","sig":null,"attributes":[{"value":"/ A generic value, which is address-sized and of unspecified sign.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129888,"byte_end":1129956,"line_start":58,"line_end":58,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8856},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130017,"byte_end":1130019,"line_start":61,"line_end":61,"column_start":5,"column_end":7},"name":"I8","qualname":"::read::value::Value::I8","value":"Value::I8(i8)","parent":{"krate":0,"index":8852},"children":[],"decl_id":null,"docs":" A signed 8-bit integer value.\n","sig":null,"attributes":[{"value":"/ A signed 8-bit integer value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129979,"byte_end":1130012,"line_start":60,"line_end":60,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8859},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130070,"byte_end":1130072,"line_start":63,"line_end":63,"column_start":5,"column_end":7},"name":"U8","qualname":"::read::value::Value::U8","value":"Value::U8(u8)","parent":{"krate":0,"index":8852},"children":[],"decl_id":null,"docs":" An unsigned 8-bit integer value.\n","sig":null,"attributes":[{"value":"/ An unsigned 8-bit integer value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130029,"byte_end":1130065,"line_start":62,"line_end":62,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8862},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130121,"byte_end":1130124,"line_start":65,"line_end":65,"column_start":5,"column_end":8},"name":"I16","qualname":"::read::value::Value::I16","value":"Value::I16(i16)","parent":{"krate":0,"index":8852},"children":[],"decl_id":null,"docs":" A signed 16-bit integer value.\n","sig":null,"attributes":[{"value":"/ A signed 16-bit integer value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130082,"byte_end":1130116,"line_start":64,"line_end":64,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8865},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130177,"byte_end":1130180,"line_start":67,"line_end":67,"column_start":5,"column_end":8},"name":"U16","qualname":"::read::value::Value::U16","value":"Value::U16(u16)","parent":{"krate":0,"index":8852},"children":[],"decl_id":null,"docs":" An unsigned 16-bit integer value.\n","sig":null,"attributes":[{"value":"/ An unsigned 16-bit integer value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130135,"byte_end":1130172,"line_start":66,"line_end":66,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8868},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130230,"byte_end":1130233,"line_start":69,"line_end":69,"column_start":5,"column_end":8},"name":"I32","qualname":"::read::value::Value::I32","value":"Value::I32(i32)","parent":{"krate":0,"index":8852},"children":[],"decl_id":null,"docs":" A signed 32-bit integer value.\n","sig":null,"attributes":[{"value":"/ A signed 32-bit integer value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130191,"byte_end":1130225,"line_start":68,"line_end":68,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8871},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130286,"byte_end":1130289,"line_start":71,"line_end":71,"column_start":5,"column_end":8},"name":"U32","qualname":"::read::value::Value::U32","value":"Value::U32(u32)","parent":{"krate":0,"index":8852},"children":[],"decl_id":null,"docs":" An unsigned 32-bit integer value.\n","sig":null,"attributes":[{"value":"/ An unsigned 32-bit integer value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130244,"byte_end":1130281,"line_start":70,"line_end":70,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8874},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130339,"byte_end":1130342,"line_start":73,"line_end":73,"column_start":5,"column_end":8},"name":"I64","qualname":"::read::value::Value::I64","value":"Value::I64(i64)","parent":{"krate":0,"index":8852},"children":[],"decl_id":null,"docs":" A signed 64-bit integer value.\n","sig":null,"attributes":[{"value":"/ A signed 64-bit integer value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130300,"byte_end":1130334,"line_start":72,"line_end":72,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8877},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130395,"byte_end":1130398,"line_start":75,"line_end":75,"column_start":5,"column_end":8},"name":"U64","qualname":"::read::value::Value::U64","value":"Value::U64(u64)","parent":{"krate":0,"index":8852},"children":[],"decl_id":null,"docs":" An unsigned 64-bit integer value.\n","sig":null,"attributes":[{"value":"/ An unsigned 64-bit integer value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130353,"byte_end":1130390,"line_start":74,"line_end":74,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8880},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130448,"byte_end":1130451,"line_start":77,"line_end":77,"column_start":5,"column_end":8},"name":"F32","qualname":"::read::value::Value::F32","value":"Value::F32(f32)","parent":{"krate":0,"index":8852},"children":[],"decl_id":null,"docs":" A 32-bit floating point value.\n","sig":null,"attributes":[{"value":"/ A 32-bit floating point value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130409,"byte_end":1130443,"line_start":76,"line_end":76,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8883},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130501,"byte_end":1130504,"line_start":79,"line_end":79,"column_start":5,"column_end":8},"name":"F64","qualname":"::read::value::Value::F64","value":"Value::F64(f64)","parent":{"krate":0,"index":8852},"children":[],"decl_id":null,"docs":" A 64-bit floating point value.\n","sig":null,"attributes":[{"value":"/ A 64-bit floating point value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130462,"byte_end":1130496,"line_start":78,"line_end":78,"column_start":5,"column_end":39}}]},{"kind":"Enum","id":{"krate":0,"index":8852},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129876,"byte_end":1129881,"line_start":57,"line_end":57,"column_start":10,"column_end":15},"name":"Value","qualname":"::read::value::Value","value":"pub enum Value {\n    Generic(u64),\n    I8(i8),\n    U8(u8),\n    I16(i16),\n    U16(u16),\n    I32(i32),\n    U32(u32),\n    I64(i64),\n    U64(u64),\n    F32(f32),\n    F64(f64),\n}","parent":null,"children":[{"krate":0,"index":8853},{"krate":0,"index":8856},{"krate":0,"index":8859},{"krate":0,"index":8862},{"krate":0,"index":8865},{"krate":0,"index":8868},{"krate":0,"index":8871},{"krate":0,"index":8874},{"krate":0,"index":8877},{"krate":0,"index":8880},{"krate":0,"index":8883}],"decl_id":null,"docs":" The value of an entry on the DWARF stack.\n","sig":null,"attributes":[{"value":"/ The value of an entry on the DWARF stack.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1129780,"byte_end":1129825,"line_start":55,"line_end":55,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2946},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130593,"byte_end":1130601,"line_start":84,"line_end":84,"column_start":12,"column_end":20},"name":"bit_size","qualname":"<ValueType>::bit_size","value":"pub fn bit_size(Self, u64) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The size in bits of a value for this type.\n","sig":null,"attributes":[{"value":"/ The size in bits of a value for this type.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130535,"byte_end":1130581,"line_start":83,"line_end":83,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2947},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1131049,"byte_end":1131062,"line_start":95,"line_end":95,"column_start":12,"column_end":25},"name":"from_encoding","qualname":"<ValueType>::from_encoding","value":"pub fn from_encoding(constants::DwAte, u64) -> Option<ValueType>","parent":null,"children":[],"decl_id":null,"docs":" Construct a `ValueType` from the attributes of a base type DIE.\n","sig":null,"attributes":[{"value":"/ Construct a `ValueType` from the attributes of a base type DIE.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130970,"byte_end":1131037,"line_start":94,"line_end":94,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2948},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1131929,"byte_end":1131939,"line_start":113,"line_end":113,"column_start":12,"column_end":22},"name":"from_entry","qualname":"<ValueType>::from_entry","value":"pub fn from_entry<R: Reader>(&DebuggingInformationEntry<, , R>)\n-> Result<Option<ValueType>>","parent":null,"children":[],"decl_id":null,"docs":" Construct a `ValueType` from a base type DIE.\n","sig":null,"attributes":[{"value":"/ Construct a `ValueType` from a base type DIE.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1131839,"byte_end":1131888,"line_start":111,"line_end":111,"column_start":5,"column_end":54}},{"value":"cfg(feature = \"read\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1131893,"byte_end":1131917,"line_start":112,"line_end":112,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2951},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1133414,"byte_end":1133424,"line_start":156,"line_end":156,"column_start":12,"column_end":22},"name":"value_type","qualname":"<Value>::value_type","value":"pub fn value_type(&Self) -> ValueType","parent":null,"children":[],"decl_id":null,"docs":" Return the `ValueType` corresponding to this `Value`.\n","sig":null,"attributes":[{"value":"/ Return the `ValueType` corresponding to this `Value`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1133345,"byte_end":1133402,"line_start":155,"line_end":155,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2952},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1134064,"byte_end":1134069,"line_start":173,"line_end":173,"column_start":12,"column_end":17},"name":"parse","qualname":"<Value>::parse","value":"pub fn parse<R: Reader>(ValueType, R) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Read a `Value` with the given `value_type` from a `Reader`.\n","sig":null,"attributes":[{"value":"/ Read a `Value` with the given `value_type` from a `Reader`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1133989,"byte_end":1134052,"line_start":172,"line_end":172,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2954},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1135051,"byte_end":1135057,"line_start":194,"line_end":194,"column_start":12,"column_end":18},"name":"to_u64","qualname":"<Value>::to_u64","value":"pub fn to_u64(Self, u64) -> Result<u64>","parent":null,"children":[],"decl_id":null,"docs":" Convert a `Value` to a `u64`.","sig":null,"attributes":[{"value":"/ Convert a `Value` to a `u64`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1134882,"byte_end":1134915,"line_start":190,"line_end":190,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1134920,"byte_end":1134923,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ The `ValueType` of `self` must be integral.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1134928,"byte_end":1134975,"line_start":192,"line_end":192,"column_start":5,"column_end":52}},{"value":"/ Values are sign extended if the source value is signed.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1134980,"byte_end":1135039,"line_start":193,"line_end":193,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2955},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1135922,"byte_end":1135930,"line_start":215,"line_end":215,"column_start":12,"column_end":20},"name":"from_u64","qualname":"<Value>::from_u64","value":"pub fn from_u64(ValueType, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Create a `Value` with the given `value_type` from a `u64` value.","sig":null,"attributes":[{"value":"/ Create a `Value` with the given `value_type` from a `u64` value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1135670,"byte_end":1135738,"line_start":210,"line_end":210,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1135743,"byte_end":1135746,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ The `value_type` may be integral or floating point.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1135751,"byte_end":1135806,"line_start":212,"line_end":212,"column_start":5,"column_end":60}},{"value":"/ The result is truncated if the `u64` value does","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1135811,"byte_end":1135862,"line_start":213,"line_end":213,"column_start":5,"column_end":56}},{"value":"/ not fit the bounds of the `value_type`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1135867,"byte_end":1135910,"line_start":214,"line_end":214,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2958},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1139114,"byte_end":1139121,"line_start":284,"line_end":284,"column_start":12,"column_end":19},"name":"convert","qualname":"<Value>::convert","value":"pub fn convert(Self, ValueType, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Convert a `Value` to the given `value_type`.","sig":null,"attributes":[{"value":"/ Convert a `Value` to the given `value_type`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1138678,"byte_end":1138726,"line_start":276,"line_end":276,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1138731,"byte_end":1138734,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ When converting between integral types, the result is truncated","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1138739,"byte_end":1138806,"line_start":278,"line_end":278,"column_start":5,"column_end":72}},{"value":"/ if the source value does not fit the bounds of the `value_type`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1138811,"byte_end":1138879,"line_start":279,"line_end":279,"column_start":5,"column_end":73}},{"value":"/ When converting from floating point types, the result is not defined","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1138884,"byte_end":1138956,"line_start":280,"line_end":280,"column_start":5,"column_end":77}},{"value":"/ if the source value does not fit the bounds of the `value_type`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1138961,"byte_end":1139029,"line_start":281,"line_end":281,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1139034,"byte_end":1139037,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_convert` operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1139042,"byte_end":1139102,"line_start":283,"line_end":283,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2959},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1139663,"byte_end":1139674,"line_start":297,"line_end":297,"column_start":12,"column_end":23},"name":"reinterpret","qualname":"<Value>::reinterpret","value":"pub fn reinterpret(Self, ValueType, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Reinterpret the bits in a `Value` as the given `value_type`.","sig":null,"attributes":[{"value":"/ Reinterpret the bits in a `Value` as the given `value_type`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1139437,"byte_end":1139501,"line_start":292,"line_end":292,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1139506,"byte_end":1139509,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ The source and result value types must have equal sizes.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1139514,"byte_end":1139574,"line_start":294,"line_end":294,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1139579,"byte_end":1139582,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_reinterpret` operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1139587,"byte_end":1139651,"line_start":296,"line_end":296,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2960},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1141372,"byte_end":1141375,"line_start":335,"line_end":335,"column_start":12,"column_end":15},"name":"abs","qualname":"<Value>::abs","value":"pub fn abs(Self, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform an absolute value operation.","sig":null,"attributes":[{"value":"/ Perform an absolute value operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1141161,"byte_end":1141201,"line_start":330,"line_end":330,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1141206,"byte_end":1141209,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1141214,"byte_end":1141291,"line_start":332,"line_end":332,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1141296,"byte_end":1141299,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_abs` operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1141304,"byte_end":1141360,"line_start":334,"line_end":334,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2961},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1142540,"byte_end":1142543,"line_start":359,"line_end":359,"column_start":12,"column_end":15},"name":"neg","qualname":"<Value>::neg","value":"pub fn neg(Self, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a negation operation.","sig":null,"attributes":[{"value":"/ Perform a negation operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1142336,"byte_end":1142369,"line_start":354,"line_end":354,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1142374,"byte_end":1142377,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1142382,"byte_end":1142459,"line_start":356,"line_end":356,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1142464,"byte_end":1142467,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_neg` operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1142472,"byte_end":1142528,"line_start":358,"line_end":358,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2962},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1143751,"byte_end":1143754,"line_start":386,"line_end":386,"column_start":12,"column_end":15},"name":"add","qualname":"<Value>::add","value":"pub fn add(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform an addition operation.","sig":null,"attributes":[{"value":"/ Perform an addition operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1143579,"byte_end":1143613,"line_start":381,"line_end":381,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1143618,"byte_end":1143621,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching types.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1143626,"byte_end":1143669,"line_start":383,"line_end":383,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1143674,"byte_end":1143677,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_plus` operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1143682,"byte_end":1143739,"line_start":385,"line_end":385,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2963},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1145029,"byte_end":1145032,"line_start":411,"line_end":411,"column_start":12,"column_end":15},"name":"sub","qualname":"<Value>::sub","value":"pub fn sub(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a subtraction operation.","sig":null,"attributes":[{"value":"/ Perform a subtraction operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1144854,"byte_end":1144890,"line_start":406,"line_end":406,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1144895,"byte_end":1144898,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching types.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1144903,"byte_end":1144946,"line_start":408,"line_end":408,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1144951,"byte_end":1144954,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_minus` operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1144959,"byte_end":1145017,"line_start":410,"line_end":410,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2964},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1146308,"byte_end":1146311,"line_start":436,"line_end":436,"column_start":12,"column_end":15},"name":"mul","qualname":"<Value>::mul","value":"pub fn mul(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a multiplication operation.","sig":null,"attributes":[{"value":"/ Perform a multiplication operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1146132,"byte_end":1146171,"line_start":431,"line_end":431,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1146176,"byte_end":1146179,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching types.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1146184,"byte_end":1146227,"line_start":433,"line_end":433,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1146232,"byte_end":1146235,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_mul` operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1146240,"byte_end":1146296,"line_start":435,"line_end":435,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2965},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1147663,"byte_end":1147666,"line_start":462,"line_end":462,"column_start":12,"column_end":15},"name":"div","qualname":"<Value>::div","value":"pub fn div(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a division operation.","sig":null,"attributes":[{"value":"/ Perform a division operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1147411,"byte_end":1147444,"line_start":456,"line_end":456,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1147449,"byte_end":1147452,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching types.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1147457,"byte_end":1147500,"line_start":458,"line_end":458,"column_start":5,"column_end":48}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1147505,"byte_end":1147582,"line_start":459,"line_end":459,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1147587,"byte_end":1147590,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_div` operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1147595,"byte_end":1147651,"line_start":461,"line_end":461,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2966},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1149624,"byte_end":1149627,"line_start":507,"line_end":507,"column_start":12,"column_end":15},"name":"rem","qualname":"<Value>::rem","value":"pub fn rem(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a remainder operation.","sig":null,"attributes":[{"value":"/ Perform a remainder operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1149359,"byte_end":1149393,"line_start":501,"line_end":501,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1149398,"byte_end":1149401,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1149406,"byte_end":1149458,"line_start":503,"line_end":503,"column_start":5,"column_end":57}},{"value":"/ If the value type is `Generic`, then it is interpreted as an unsigned value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1149463,"byte_end":1149543,"line_start":504,"line_end":504,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1149548,"byte_end":1149551,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_mod` operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1149556,"byte_end":1149612,"line_start":506,"line_end":506,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2967},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1151463,"byte_end":1151466,"line_start":549,"line_end":549,"column_start":12,"column_end":15},"name":"not","qualname":"<Value>::not","value":"pub fn not(Self, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a bitwise not operation.","sig":null,"attributes":[{"value":"/ Perform a bitwise not operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1151281,"byte_end":1151317,"line_start":544,"line_end":544,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1151322,"byte_end":1151325,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1151330,"byte_end":1151382,"line_start":546,"line_end":546,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1151387,"byte_end":1151390,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_not` operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1151395,"byte_end":1151451,"line_start":548,"line_end":548,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2968},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1151826,"byte_end":1151829,"line_start":560,"line_end":560,"column_start":12,"column_end":15},"name":"and","qualname":"<Value>::and","value":"pub fn and(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a bitwise and operation.","sig":null,"attributes":[{"value":"/ Perform a bitwise and operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1151644,"byte_end":1151680,"line_start":555,"line_end":555,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1151685,"byte_end":1151688,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1151693,"byte_end":1151745,"line_start":557,"line_end":557,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1151750,"byte_end":1151753,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_and` operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1151758,"byte_end":1151814,"line_start":559,"line_end":559,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2969},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1152345,"byte_end":1152347,"line_start":575,"line_end":575,"column_start":12,"column_end":14},"name":"or","qualname":"<Value>::or","value":"pub fn or(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a bitwise or operation.","sig":null,"attributes":[{"value":"/ Perform a bitwise or operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1152165,"byte_end":1152200,"line_start":570,"line_end":570,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1152205,"byte_end":1152208,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1152213,"byte_end":1152265,"line_start":572,"line_end":572,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1152270,"byte_end":1152273,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_or` operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1152278,"byte_end":1152333,"line_start":574,"line_end":574,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2970},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1152874,"byte_end":1152877,"line_start":590,"line_end":590,"column_start":12,"column_end":15},"name":"xor","qualname":"<Value>::xor","value":"pub fn xor(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a bitwise exclusive-or operation.","sig":null,"attributes":[{"value":"/ Perform a bitwise exclusive-or operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1152683,"byte_end":1152728,"line_start":585,"line_end":585,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1152733,"byte_end":1152736,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1152741,"byte_end":1152793,"line_start":587,"line_end":587,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1152798,"byte_end":1152801,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_xor` operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1152806,"byte_end":1152862,"line_start":589,"line_end":589,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2972},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1154310,"byte_end":1154313,"line_start":626,"line_end":626,"column_start":12,"column_end":15},"name":"shl","qualname":"<Value>::shl","value":"pub fn shl(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a shift left operation.","sig":null,"attributes":[{"value":"/ Perform a shift left operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1154000,"byte_end":1154035,"line_start":619,"line_end":619,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1154040,"byte_end":1154043,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ This operation requires integral types.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1154048,"byte_end":1154091,"line_start":621,"line_end":621,"column_start":5,"column_end":48}},{"value":"/ If the shift length exceeds the type size, then 0 is returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1154096,"byte_end":1154162,"line_start":622,"line_end":622,"column_start":5,"column_end":71}},{"value":"/ If the shift length is negative then an error is returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1154167,"byte_end":1154229,"line_start":623,"line_end":623,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1154234,"byte_end":1154237,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_shl` operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1154242,"byte_end":1154298,"line_start":625,"line_end":625,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2973},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1155860,"byte_end":1155863,"line_start":657,"line_end":657,"column_start":12,"column_end":15},"name":"shr","qualname":"<Value>::shr","value":"pub fn shr(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform a logical shift right operation.","sig":null,"attributes":[{"value":"/ Perform a logical shift right operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1155352,"byte_end":1155396,"line_start":647,"line_end":647,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1155401,"byte_end":1155404,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ This operation requires an unsigned integral type for the value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1155409,"byte_end":1155477,"line_start":649,"line_end":649,"column_start":5,"column_end":73}},{"value":"/ If the value type is `Generic`, then it is interpreted as an unsigned value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1155482,"byte_end":1155562,"line_start":650,"line_end":650,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1155567,"byte_end":1155570,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ This operation requires an integral type for the shift length.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1155575,"byte_end":1155641,"line_start":652,"line_end":652,"column_start":5,"column_end":71}},{"value":"/ If the shift length exceeds the type size, then 0 is returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1155646,"byte_end":1155712,"line_start":653,"line_end":653,"column_start":5,"column_end":71}},{"value":"/ If the shift length is negative then an error is returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1155717,"byte_end":1155779,"line_start":654,"line_end":654,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1155784,"byte_end":1155787,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_shr` operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1155792,"byte_end":1155848,"line_start":656,"line_end":656,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2974},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1157456,"byte_end":1157460,"line_start":690,"line_end":690,"column_start":12,"column_end":16},"name":"shra","qualname":"<Value>::shra","value":"pub fn shra(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform an arithmetic shift right operation.","sig":null,"attributes":[{"value":"/ Perform an arithmetic shift right operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1156881,"byte_end":1156929,"line_start":679,"line_end":679,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1156934,"byte_end":1156937,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ This operation requires a signed integral type for the value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1156942,"byte_end":1157007,"line_start":681,"line_end":681,"column_start":5,"column_end":70}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1157012,"byte_end":1157089,"line_start":682,"line_end":682,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1157094,"byte_end":1157097,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ This operation requires an integral type for the shift length.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1157102,"byte_end":1157168,"line_start":684,"line_end":684,"column_start":5,"column_end":71}},{"value":"/ If the shift length exceeds the type size, then 0 is returned for positive values,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1157173,"byte_end":1157259,"line_start":685,"line_end":685,"column_start":5,"column_end":91}},{"value":"/ and -1 is returned for negative values.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1157264,"byte_end":1157307,"line_start":686,"line_end":686,"column_start":5,"column_end":48}},{"value":"/ If the shift length is negative then an error is returned.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1157312,"byte_end":1157374,"line_start":687,"line_end":687,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1157379,"byte_end":1157382,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_shra` operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1157387,"byte_end":1157444,"line_start":689,"line_end":689,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2975},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1159606,"byte_end":1159608,"line_start":758,"line_end":758,"column_start":12,"column_end":14},"name":"eq","qualname":"<Value>::eq","value":"pub fn eq(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform the `==` relational operation.","sig":null,"attributes":[{"value":"/ Perform the `==` relational operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1159337,"byte_end":1159379,"line_start":752,"line_end":752,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1159384,"byte_end":1159387,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1159392,"byte_end":1159444,"line_start":754,"line_end":754,"column_start":5,"column_end":57}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1159449,"byte_end":1159526,"line_start":755,"line_end":755,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1159531,"byte_end":1159534,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_eq` operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1159539,"byte_end":1159594,"line_start":757,"line_end":757,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2976},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1160805,"byte_end":1160807,"line_start":784,"line_end":784,"column_start":12,"column_end":14},"name":"ge","qualname":"<Value>::ge","value":"pub fn ge(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform the `>=` relational operation.","sig":null,"attributes":[{"value":"/ Perform the `>=` relational operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1160536,"byte_end":1160578,"line_start":778,"line_end":778,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1160583,"byte_end":1160586,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1160591,"byte_end":1160643,"line_start":780,"line_end":780,"column_start":5,"column_end":57}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1160648,"byte_end":1160725,"line_start":781,"line_end":781,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1160730,"byte_end":1160733,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_ge` operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1160738,"byte_end":1160793,"line_start":783,"line_end":783,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2977},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1162003,"byte_end":1162005,"line_start":810,"line_end":810,"column_start":12,"column_end":14},"name":"gt","qualname":"<Value>::gt","value":"pub fn gt(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform the `>` relational operation.","sig":null,"attributes":[{"value":"/ Perform the `>` relational operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1161735,"byte_end":1161776,"line_start":804,"line_end":804,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1161781,"byte_end":1161784,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1161789,"byte_end":1161841,"line_start":806,"line_end":806,"column_start":5,"column_end":57}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1161846,"byte_end":1161923,"line_start":807,"line_end":807,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1161928,"byte_end":1161931,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_gt` operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1161936,"byte_end":1161991,"line_start":809,"line_end":809,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2978},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1163190,"byte_end":1163192,"line_start":836,"line_end":836,"column_start":12,"column_end":14},"name":"le","qualname":"<Value>::le","value":"pub fn le(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform the `<= relational operation.","sig":null,"attributes":[{"value":"/ Perform the `<= relational operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1162922,"byte_end":1162963,"line_start":830,"line_end":830,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1162968,"byte_end":1162971,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1162976,"byte_end":1163028,"line_start":832,"line_end":832,"column_start":5,"column_end":57}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1163033,"byte_end":1163110,"line_start":833,"line_end":833,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1163115,"byte_end":1163118,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_le` operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1163123,"byte_end":1163178,"line_start":835,"line_end":835,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2979},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1164387,"byte_end":1164389,"line_start":862,"line_end":862,"column_start":12,"column_end":14},"name":"lt","qualname":"<Value>::lt","value":"pub fn lt(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform the `< relational operation.","sig":null,"attributes":[{"value":"/ Perform the `< relational operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1164120,"byte_end":1164160,"line_start":856,"line_end":856,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1164165,"byte_end":1164168,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1164173,"byte_end":1164225,"line_start":858,"line_end":858,"column_start":5,"column_end":57}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1164230,"byte_end":1164307,"line_start":859,"line_end":859,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1164312,"byte_end":1164315,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_lt` operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1164320,"byte_end":1164375,"line_start":861,"line_end":861,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2980},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1165574,"byte_end":1165576,"line_start":888,"line_end":888,"column_start":12,"column_end":14},"name":"ne","qualname":"<Value>::ne","value":"pub fn ne(Self, Value, u64) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Perform the `!= relational operation.","sig":null,"attributes":[{"value":"/ Perform the `!= relational operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1165306,"byte_end":1165347,"line_start":882,"line_end":882,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1165352,"byte_end":1165355,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ This operation requires matching integral types.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1165360,"byte_end":1165412,"line_start":884,"line_end":884,"column_start":5,"column_end":57}},{"value":"/ If the value type is `Generic`, then it is interpreted as a signed value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1165417,"byte_end":1165494,"line_start":885,"line_end":885,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1165499,"byte_end":1165502,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the DWARF `DW_OP_ne` operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1165507,"byte_end":1165562,"line_start":887,"line_end":887,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":8895},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":102057,"byte_end":102068,"line_start":262,"line_end":262,"column_start":12,"column_end":23},"name":"StoreOnHeap","qualname":"::read::StoreOnHeap","value":"","parent":null,"children":[],"decl_id":null,"docs":" Indicates that storage should be allocated on heap.\n","sig":null,"attributes":[{"value":"/ Indicates that storage should be allocated on heap.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":101945,"byte_end":102000,"line_start":260,"line_end":260,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":2982},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":102294,"byte_end":102303,"line_start":267,"line_end":267,"column_start":10,"column_end":19},"name":"EndianBuf","qualname":"::read::EndianBuf","value":"EndianSlice","parent":null,"children":[],"decl_id":null,"docs":" `EndianBuf` has been renamed to `EndianSlice`. For ease of upgrading across\n `gimli` versions, we export this type alias.\n","sig":null,"attributes":[{"value":"/ `EndianBuf` has been renamed to `EndianSlice`. For ease of upgrading across","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":102071,"byte_end":102150,"line_start":264,"line_end":264,"column_start":1,"column_end":80}},{"value":"/ `gimli` versions, we export this type alias.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":102151,"byte_end":102199,"line_start":265,"line_end":265,"column_start":1,"column_end":49}},{"value":"deprecated(note =\n             \"EndianBuf has been renamed to EndianSlice, use that instead.\")","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":102200,"byte_end":102284,"line_start":266,"line_end":266,"column_start":1,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8909},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":102504,"byte_end":102506,"line_start":273,"line_end":273,"column_start":5,"column_end":7},"name":"Io","qualname":"::read::Error::Io","value":"Error::Io","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" An I/O error occurred while reading.\n","sig":null,"attributes":[{"value":"/ An I/O error occurred while reading.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":102459,"byte_end":102499,"line_start":272,"line_end":272,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8911},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":102584,"byte_end":102626,"line_start":275,"line_end":275,"column_start":5,"column_end":47},"name":"PcRelativePointerButSectionBaseIsUndefined","qualname":"::read::Error::PcRelativePointerButSectionBaseIsUndefined","value":"Error::PcRelativePointerButSectionBaseIsUndefined","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Found a PC relative pointer, but the section base is undefined.\n","sig":null,"attributes":[{"value":"/ Found a PC relative pointer, but the section base is undefined.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":102512,"byte_end":102579,"line_start":274,"line_end":274,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8913},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":102709,"byte_end":102750,"line_start":277,"line_end":277,"column_start":5,"column_end":46},"name":"TextRelativePointerButTextBaseIsUndefined","qualname":"::read::Error::TextRelativePointerButTextBaseIsUndefined","value":"Error::TextRelativePointerButTextBaseIsUndefined","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Found a `.text` relative pointer, but the `.text` base is undefined.\n","sig":null,"attributes":[{"value":"/ Found a `.text` relative pointer, but the `.text` base is undefined.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":102632,"byte_end":102704,"line_start":276,"line_end":276,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8915},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":102827,"byte_end":102868,"line_start":279,"line_end":279,"column_start":5,"column_end":46},"name":"DataRelativePointerButDataBaseIsUndefined","qualname":"::read::Error::DataRelativePointerButDataBaseIsUndefined","value":"Error::DataRelativePointerButDataBaseIsUndefined","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Found a data relative pointer, but the data base is undefined.\n","sig":null,"attributes":[{"value":"/ Found a data relative pointer, but the data base is undefined.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":102756,"byte_end":102822,"line_start":278,"line_end":278,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8917},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":102973,"byte_end":103004,"line_start":282,"line_end":282,"column_start":5,"column_end":36},"name":"FuncRelativePointerInBadContext","qualname":"::read::Error::FuncRelativePointerInBadContext","value":"Error::FuncRelativePointerInBadContext","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Found a function relative pointer in a context that does not have a\n function base.\n","sig":null,"attributes":[{"value":"/ Found a function relative pointer in a context that does not have a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":102874,"byte_end":102945,"line_start":280,"line_end":280,"column_start":5,"column_end":76}},{"value":"/ function base.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":102950,"byte_end":102968,"line_start":281,"line_end":281,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8919},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103074,"byte_end":103104,"line_start":284,"line_end":284,"column_start":5,"column_end":35},"name":"CannotParseOmitPointerEncoding","qualname":"::read::Error::CannotParseOmitPointerEncoding","value":"Error::CannotParseOmitPointerEncoding","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Cannot parse a pointer with a `DW_EH_PE_omit` encoding.\n","sig":null,"attributes":[{"value":"/ Cannot parse a pointer with a `DW_EH_PE_omit` encoding.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103010,"byte_end":103069,"line_start":283,"line_end":283,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8921},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103161,"byte_end":103178,"line_start":286,"line_end":286,"column_start":5,"column_end":22},"name":"BadUnsignedLeb128","qualname":"::read::Error::BadUnsignedLeb128","value":"Error::BadUnsignedLeb128","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" An error parsing an unsigned LEB128 value.\n","sig":null,"attributes":[{"value":"/ An error parsing an unsigned LEB128 value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103110,"byte_end":103156,"line_start":285,"line_end":285,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8923},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103232,"byte_end":103247,"line_start":288,"line_end":288,"column_start":5,"column_end":20},"name":"BadSignedLeb128","qualname":"::read::Error::BadSignedLeb128","value":"Error::BadSignedLeb128","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" An error parsing a signed LEB128 value.\n","sig":null,"attributes":[{"value":"/ An error parsing a signed LEB128 value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103184,"byte_end":103227,"line_start":287,"line_end":287,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8925},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103355,"byte_end":103374,"line_start":291,"line_end":291,"column_start":5,"column_end":24},"name":"AbbreviationTagZero","qualname":"::read::Error::AbbreviationTagZero","value":"Error::AbbreviationTagZero","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" An abbreviation declared that its tag is zero, but zero is reserved for\n null records.\n","sig":null,"attributes":[{"value":"/ An abbreviation declared that its tag is zero, but zero is reserved for","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103253,"byte_end":103328,"line_start":289,"line_end":289,"column_start":5,"column_end":80}},{"value":"/ null records.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103333,"byte_end":103350,"line_start":290,"line_end":290,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8927},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103494,"byte_end":103511,"line_start":294,"line_end":294,"column_start":5,"column_end":22},"name":"AttributeFormZero","qualname":"::read::Error::AttributeFormZero","value":"Error::AttributeFormZero","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" An attribute specification declared that its form is zero, but zero is\n reserved for null records.\n","sig":null,"attributes":[{"value":"/ An attribute specification declared that its form is zero, but zero is","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103380,"byte_end":103454,"line_start":292,"line_end":292,"column_start":5,"column_end":79}},{"value":"/ reserved for null records.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103459,"byte_end":103489,"line_start":293,"line_end":293,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8929},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103609,"byte_end":103623,"line_start":297,"line_end":297,"column_start":5,"column_end":19},"name":"BadHasChildren","qualname":"::read::Error::BadHasChildren","value":"Error::BadHasChildren","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" The abbreviation's has-children byte was not one of\n `DW_CHILDREN_{yes,no}`.\n","sig":null,"attributes":[{"value":"/ The abbreviation's has-children byte was not one of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103517,"byte_end":103572,"line_start":295,"line_end":295,"column_start":5,"column_end":60}},{"value":"/ `DW_CHILDREN_{yes,no}`.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103577,"byte_end":103604,"line_start":296,"line_end":296,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8931},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103673,"byte_end":103682,"line_start":299,"line_end":299,"column_start":5,"column_end":14},"name":"BadLength","qualname":"::read::Error::BadLength","value":"Error::BadLength","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" The specified length is impossible.\n","sig":null,"attributes":[{"value":"/ The specified length is impossible.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103629,"byte_end":103668,"line_start":298,"line_end":298,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8933},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103731,"byte_end":103742,"line_start":301,"line_end":301,"column_start":5,"column_end":16},"name":"UnknownForm","qualname":"::read::Error::UnknownForm","value":"Error::UnknownForm","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Found an unknown `DW_FORM_*` type.\n","sig":null,"attributes":[{"value":"/ Found an unknown `DW_FORM_*` type.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103688,"byte_end":103726,"line_start":300,"line_end":300,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8935},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103795,"byte_end":103807,"line_start":303,"line_end":303,"column_start":5,"column_end":17},"name":"ExpectedZero","qualname":"::read::Error::ExpectedZero","value":"Error::ExpectedZero","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Expected a zero, found something else.\n","sig":null,"attributes":[{"value":"/ Expected a zero, found something else.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103748,"byte_end":103790,"line_start":302,"line_end":302,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8937},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103876,"byte_end":103901,"line_start":305,"line_end":305,"column_start":5,"column_end":30},"name":"DuplicateAbbreviationCode","qualname":"::read::Error::DuplicateAbbreviationCode","value":"Error::DuplicateAbbreviationCode","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Found an abbreviation code that has already been used.\n","sig":null,"attributes":[{"value":"/ Found an abbreviation code that has already been used.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103813,"byte_end":103871,"line_start":304,"line_end":304,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8939},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103941,"byte_end":103956,"line_start":307,"line_end":307,"column_start":5,"column_end":20},"name":"DuplicateArange","qualname":"::read::Error::DuplicateArange","value":"Error::DuplicateArange","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Found a duplicate arange.\n","sig":null,"attributes":[{"value":"/ Found a duplicate arange.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103907,"byte_end":103936,"line_start":306,"line_end":306,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8941},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104010,"byte_end":104031,"line_start":309,"line_end":309,"column_start":5,"column_end":26},"name":"UnknownReservedLength","qualname":"::read::Error::UnknownReservedLength","value":"Error::UnknownReservedLength","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Found an unknown reserved length value.\n","sig":null,"attributes":[{"value":"/ Found an unknown reserved length value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":103962,"byte_end":104005,"line_start":308,"line_end":308,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8943},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104077,"byte_end":104091,"line_start":311,"line_end":311,"column_start":5,"column_end":19},"name":"UnknownVersion","qualname":"::read::Error::UnknownVersion","value":"Error::UnknownVersion(u64)","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Found an unknown DWARF version.\n","sig":null,"attributes":[{"value":"/ Found an unknown DWARF version.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104037,"byte_end":104072,"line_start":310,"line_end":310,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8946},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104160,"byte_end":104179,"line_start":313,"line_end":313,"column_start":5,"column_end":24},"name":"UnknownAbbreviation","qualname":"::read::Error::UnknownAbbreviation","value":"Error::UnknownAbbreviation","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Found a record with an unknown abbreviation code.\n","sig":null,"attributes":[{"value":"/ Found a record with an unknown abbreviation code.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104102,"byte_end":104155,"line_start":312,"line_end":312,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8948},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104238,"byte_end":104251,"line_start":315,"line_end":315,"column_start":5,"column_end":18},"name":"UnexpectedEof","qualname":"::read::Error::UnexpectedEof","value":"Error::UnexpectedEof(ReaderOffsetId)","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Hit the end of input before it was expected.\n","sig":null,"attributes":[{"value":"/ Hit the end of input before it was expected.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104185,"byte_end":104233,"line_start":314,"line_end":314,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8951},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104323,"byte_end":104337,"line_start":317,"line_end":317,"column_start":5,"column_end":19},"name":"UnexpectedNull","qualname":"::read::Error::UnexpectedNull","value":"Error::UnexpectedNull","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Read a null entry before it was expected.\n","sig":null,"attributes":[{"value":"/ Read a null entry before it was expected.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104273,"byte_end":104318,"line_start":316,"line_end":316,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8953},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104385,"byte_end":104406,"line_start":319,"line_end":319,"column_start":5,"column_end":26},"name":"UnknownStandardOpcode","qualname":"::read::Error::UnknownStandardOpcode","value":"Error::UnknownStandardOpcode(constants::DwLns)","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Found an unknown standard opcode.\n","sig":null,"attributes":[{"value":"/ Found an unknown standard opcode.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104343,"byte_end":104380,"line_start":318,"line_end":318,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8956},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104472,"byte_end":104493,"line_start":321,"line_end":321,"column_start":5,"column_end":26},"name":"UnknownExtendedOpcode","qualname":"::read::Error::UnknownExtendedOpcode","value":"Error::UnknownExtendedOpcode(constants::DwLne)","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Found an unknown extended opcode.\n","sig":null,"attributes":[{"value":"/ Found an unknown extended opcode.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104430,"byte_end":104467,"line_start":320,"line_end":320,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8959},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104570,"byte_end":104592,"line_start":323,"line_end":323,"column_start":5,"column_end":27},"name":"UnsupportedAddressSize","qualname":"::read::Error::UnsupportedAddressSize","value":"Error::UnsupportedAddressSize(u8)","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" The specified address size is not supported.\n","sig":null,"attributes":[{"value":"/ The specified address size is not supported.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104517,"byte_end":104565,"line_start":322,"line_end":322,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8962},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104654,"byte_end":104675,"line_start":325,"line_end":325,"column_start":5,"column_end":26},"name":"UnsupportedOffsetSize","qualname":"::read::Error::UnsupportedOffsetSize","value":"Error::UnsupportedOffsetSize(u8)","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" The specified offset size is not supported.\n","sig":null,"attributes":[{"value":"/ The specified offset size is not supported.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104602,"byte_end":104649,"line_start":324,"line_end":324,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8965},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104736,"byte_end":104756,"line_start":327,"line_end":327,"column_start":5,"column_end":25},"name":"UnsupportedFieldSize","qualname":"::read::Error::UnsupportedFieldSize","value":"Error::UnsupportedFieldSize(u8)","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" The specified field size is not supported.\n","sig":null,"attributes":[{"value":"/ The specified field size is not supported.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104685,"byte_end":104731,"line_start":326,"line_end":326,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8968},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104823,"byte_end":104851,"line_start":329,"line_end":329,"column_start":5,"column_end":33},"name":"MinimumInstructionLengthZero","qualname":"::read::Error::MinimumInstructionLengthZero","value":"Error::MinimumInstructionLengthZero","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" The minimum instruction length must not be zero.\n","sig":null,"attributes":[{"value":"/ The minimum instruction length must not be zero.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104766,"byte_end":104818,"line_start":328,"line_end":328,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8970},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104922,"byte_end":104957,"line_start":331,"line_end":331,"column_start":5,"column_end":40},"name":"MaximumOperationsPerInstructionZero","qualname":"::read::Error::MaximumOperationsPerInstructionZero","value":"Error::MaximumOperationsPerInstructionZero","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" The maximum operations per instruction must not be zero.\n","sig":null,"attributes":[{"value":"/ The maximum operations per instruction must not be zero.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104857,"byte_end":104917,"line_start":330,"line_end":330,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8972},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105004,"byte_end":105017,"line_start":333,"line_end":333,"column_start":5,"column_end":18},"name":"LineRangeZero","qualname":"::read::Error::LineRangeZero","value":"Error::LineRangeZero","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" The line range must not be zero.\n","sig":null,"attributes":[{"value":"/ The line range must not be zero.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":104963,"byte_end":104999,"line_start":332,"line_end":332,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8974},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105065,"byte_end":105079,"line_start":335,"line_end":335,"column_start":5,"column_end":19},"name":"OpcodeBaseZero","qualname":"::read::Error::OpcodeBaseZero","value":"Error::OpcodeBaseZero","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" The opcode base must not be zero.\n","sig":null,"attributes":[{"value":"/ The opcode base must not be zero.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105023,"byte_end":105060,"line_start":334,"line_end":334,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8976},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105124,"byte_end":105131,"line_start":337,"line_end":337,"column_start":5,"column_end":12},"name":"BadUtf8","qualname":"::read::Error::BadUtf8","value":"Error::BadUtf8","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Found an invalid UTF-8 string.\n","sig":null,"attributes":[{"value":"/ Found an invalid UTF-8 string.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105085,"byte_end":105119,"line_start":336,"line_end":336,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8978},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105200,"byte_end":105208,"line_start":339,"line_end":339,"column_start":5,"column_end":13},"name":"NotCieId","qualname":"::read::Error::NotCieId","value":"Error::NotCieId","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Expected to find the CIE ID, but found something else.\n","sig":null,"attributes":[{"value":"/ Expected to find the CIE ID, but found something else.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105137,"byte_end":105195,"line_start":338,"line_end":338,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8980},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105289,"byte_end":105302,"line_start":341,"line_end":341,"column_start":5,"column_end":18},"name":"NotCiePointer","qualname":"::read::Error::NotCiePointer","value":"Error::NotCiePointer","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Expected to find a pointer to a CIE, but found the CIE ID instead.\n","sig":null,"attributes":[{"value":"/ Expected to find a pointer to a CIE, but found the CIE ID instead.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105214,"byte_end":105284,"line_start":340,"line_end":340,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8982},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105379,"byte_end":105392,"line_start":343,"line_end":343,"column_start":5,"column_end":18},"name":"NotFdePointer","qualname":"::read::Error::NotFdePointer","value":"Error::NotFdePointer","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Expected to find a pointer to an FDE, but found a CIE instead.\n","sig":null,"attributes":[{"value":"/ Expected to find a pointer to an FDE, but found a CIE instead.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105308,"byte_end":105374,"line_start":342,"line_end":342,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8984},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105459,"byte_end":105474,"line_start":345,"line_end":345,"column_start":5,"column_end":20},"name":"BadBranchTarget","qualname":"::read::Error::BadBranchTarget","value":"Error::BadBranchTarget(u64)","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Invalid branch target for a DW_OP_bra or DW_OP_skip.\n","sig":null,"attributes":[{"value":"/ Invalid branch target for a DW_OP_bra or DW_OP_skip.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105398,"byte_end":105454,"line_start":344,"line_end":344,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8987},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105550,"byte_end":105574,"line_start":347,"line_end":347,"column_start":5,"column_end":29},"name":"InvalidPushObjectAddress","qualname":"::read::Error::InvalidPushObjectAddress","value":"Error::InvalidPushObjectAddress","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" DW_OP_push_object_address used but no address passed in.\n","sig":null,"attributes":[{"value":"/ DW_OP_push_object_address used but no address passed in.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105485,"byte_end":105545,"line_start":346,"line_end":346,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8989},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105649,"byte_end":105668,"line_start":349,"line_end":349,"column_start":5,"column_end":24},"name":"NotEnoughStackItems","qualname":"::read::Error::NotEnoughStackItems","value":"Error::NotEnoughStackItems","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Not enough items on the stack when evaluating an expression.\n","sig":null,"attributes":[{"value":"/ Not enough items on the stack when evaluating an expression.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105580,"byte_end":105644,"line_start":348,"line_end":348,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8991},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105729,"byte_end":105746,"line_start":351,"line_end":351,"column_start":5,"column_end":22},"name":"TooManyIterations","qualname":"::read::Error::TooManyIterations","value":"Error::TooManyIterations","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Too many iterations to compute the expression.\n","sig":null,"attributes":[{"value":"/ Too many iterations to compute the expression.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105674,"byte_end":105724,"line_start":350,"line_end":350,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8993},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105838,"byte_end":105855,"line_start":354,"line_end":354,"column_start":5,"column_end":22},"name":"InvalidExpression","qualname":"::read::Error::InvalidExpression","value":"Error::InvalidExpression(constants::DwOp)","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" An unrecognized operation was found while parsing a DWARF\n expression.\n","sig":null,"attributes":[{"value":"/ An unrecognized operation was found while parsing a DWARF","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105752,"byte_end":105813,"line_start":352,"line_end":352,"column_start":5,"column_end":66}},{"value":"/ expression.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105818,"byte_end":105833,"line_start":353,"line_end":353,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8996},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105958,"byte_end":105979,"line_start":356,"line_end":356,"column_start":5,"column_end":26},"name":"UnsupportedEvaluation","qualname":"::read::Error::UnsupportedEvaluation","value":"Error::UnsupportedEvaluation","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" An unsupported operation was found while evaluating a DWARF expression.\n","sig":null,"attributes":[{"value":"/ An unsupported operation was found while evaluating a DWARF expression.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105878,"byte_end":105953,"line_start":355,"line_end":355,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8998},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":106082,"byte_end":106094,"line_start":359,"line_end":359,"column_start":5,"column_end":17},"name":"InvalidPiece","qualname":"::read::Error::InvalidPiece","value":"Error::InvalidPiece","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" The expression had a piece followed by an expression\n terminator without a piece.\n","sig":null,"attributes":[{"value":"/ The expression had a piece followed by an expression","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":105985,"byte_end":106041,"line_start":357,"line_end":357,"column_start":5,"column_end":61}},{"value":"/ terminator without a piece.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":106046,"byte_end":106077,"line_start":358,"line_end":358,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9000},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":106237,"byte_end":106264,"line_start":362,"line_end":362,"column_start":5,"column_end":32},"name":"InvalidExpressionTerminator","qualname":"::read::Error::InvalidExpressionTerminator","value":"Error::InvalidExpressionTerminator(u64)","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" An expression-terminating operation was followed by something\n other than the end of the expression or a piece operation.\n","sig":null,"attributes":[{"value":"/ An expression-terminating operation was followed by something","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":106100,"byte_end":106165,"line_start":360,"line_end":360,"column_start":5,"column_end":70}},{"value":"/ other than the end of the expression or a piece operation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":106170,"byte_end":106232,"line_start":361,"line_end":361,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9003},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":106342,"byte_end":106356,"line_start":364,"line_end":364,"column_start":5,"column_end":19},"name":"DivisionByZero","qualname":"::read::Error::DivisionByZero","value":"Error::DivisionByZero","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Division or modulus by zero when evaluating an expression.\n","sig":null,"attributes":[{"value":"/ Division or modulus by zero when evaluating an expression.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":106275,"byte_end":106337,"line_start":363,"line_end":363,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9005},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":106418,"byte_end":106430,"line_start":366,"line_end":366,"column_start":5,"column_end":17},"name":"TypeMismatch","qualname":"::read::Error::TypeMismatch","value":"Error::TypeMismatch","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" An expression operation used mismatching types.\n","sig":null,"attributes":[{"value":"/ An expression operation used mismatching types.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":106362,"byte_end":106413,"line_start":365,"line_end":365,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9007},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":106533,"byte_end":106553,"line_start":369,"line_end":369,"column_start":5,"column_end":25},"name":"IntegralTypeRequired","qualname":"::read::Error::IntegralTypeRequired","value":"Error::IntegralTypeRequired","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" An expression operation required an integral type but saw a\n floating point type.\n","sig":null,"attributes":[{"value":"/ An expression operation required an integral type but saw a","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":106436,"byte_end":106499,"line_start":367,"line_end":367,"column_start":5,"column_end":68}},{"value":"/ floating point type.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":106504,"byte_end":106528,"line_start":368,"line_end":368,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9009},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":106626,"byte_end":106650,"line_start":371,"line_end":371,"column_start":5,"column_end":29},"name":"UnsupportedTypeOperation","qualname":"::read::Error::UnsupportedTypeOperation","value":"Error::UnsupportedTypeOperation","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" An expression operation used types that are not supported.\n","sig":null,"attributes":[{"value":"/ An expression operation used types that are not supported.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":106559,"byte_end":106621,"line_start":370,"line_end":370,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9011},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":106729,"byte_end":106751,"line_start":373,"line_end":373,"column_start":5,"column_end":27},"name":"InvalidShiftExpression","qualname":"::read::Error::InvalidShiftExpression","value":"Error::InvalidShiftExpression","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" The shift value in an expression must be a non-negative integer.\n","sig":null,"attributes":[{"value":"/ The shift value in an expression must be a non-negative integer.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":106656,"byte_end":106724,"line_start":372,"line_end":372,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9013},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":106798,"byte_end":106825,"line_start":375,"line_end":375,"column_start":5,"column_end":32},"name":"UnknownCallFrameInstruction","qualname":"::read::Error::UnknownCallFrameInstruction","value":"Error::UnknownCallFrameInstruction(constants::DwCfa)","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" An unknown DW_CFA_* instruction.\n","sig":null,"attributes":[{"value":"/ An unknown DW_CFA_* instruction.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":106757,"byte_end":106793,"line_start":374,"line_end":374,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9016},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":106911,"byte_end":106930,"line_start":377,"line_end":377,"column_start":5,"column_end":24},"name":"InvalidAddressRange","qualname":"::read::Error::InvalidAddressRange","value":"Error::InvalidAddressRange","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" The end of an address range was before the beginning.\n","sig":null,"attributes":[{"value":"/ The end of an address range was before the beginning.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":106849,"byte_end":106906,"line_start":376,"line_end":376,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9018},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":107005,"byte_end":107032,"line_start":379,"line_end":379,"column_start":5,"column_end":32},"name":"InvalidLocationAddressRange","qualname":"::read::Error::InvalidLocationAddressRange","value":"Error::InvalidLocationAddressRange","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" The end offset of a loc list entry was before the beginning.\n","sig":null,"attributes":[{"value":"/ The end offset of a loc list entry was before the beginning.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":106936,"byte_end":107000,"line_start":378,"line_end":378,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9020},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":107130,"byte_end":107160,"line_start":382,"line_end":382,"column_start":5,"column_end":35},"name":"CfiInstructionInInvalidContext","qualname":"::read::Error::CfiInstructionInInvalidContext","value":"Error::CfiInstructionInInvalidContext","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Encountered a call frame instruction in a context in which it is not\n valid.\n","sig":null,"attributes":[{"value":"/ Encountered a call frame instruction in a context in which it is not","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":107038,"byte_end":107110,"line_start":380,"line_end":380,"column_start":5,"column_end":77}},{"value":"/ valid.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":107115,"byte_end":107125,"line_start":381,"line_end":381,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9022},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":107326,"byte_end":107343,"line_start":385,"line_end":385,"column_start":5,"column_end":22},"name":"PopWithEmptyStack","qualname":"::read::Error::PopWithEmptyStack","value":"Error::PopWithEmptyStack","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" When evaluating call frame instructions, found a `DW_CFA_restore_state`\n stack pop instruction, but the stack was empty, and had nothing to pop.\n","sig":null,"attributes":[{"value":"/ When evaluating call frame instructions, found a `DW_CFA_restore_state`","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":107166,"byte_end":107241,"line_start":383,"line_end":383,"column_start":5,"column_end":80}},{"value":"/ stack pop instruction, but the stack was empty, and had nothing to pop.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":107246,"byte_end":107321,"line_start":384,"line_end":384,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9024},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":107404,"byte_end":107426,"line_start":387,"line_end":387,"column_start":5,"column_end":27},"name":"NoUnwindInfoForAddress","qualname":"::read::Error::NoUnwindInfoForAddress","value":"Error::NoUnwindInfoForAddress","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Do not have unwind info for the given address.\n","sig":null,"attributes":[{"value":"/ Do not have unwind info for the given address.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":107349,"byte_end":107399,"line_start":386,"line_end":386,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9026},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":107501,"byte_end":107518,"line_start":389,"line_end":389,"column_start":5,"column_end":22},"name":"UnsupportedOffset","qualname":"::read::Error::UnsupportedOffset","value":"Error::UnsupportedOffset","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" An offset value was larger than the maximum supported value.\n","sig":null,"attributes":[{"value":"/ An offset value was larger than the maximum supported value.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":107432,"byte_end":107496,"line_start":388,"line_end":388,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9028},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":107589,"byte_end":107611,"line_start":391,"line_end":391,"column_start":5,"column_end":27},"name":"UnknownPointerEncoding","qualname":"::read::Error::UnknownPointerEncoding","value":"Error::UnknownPointerEncoding","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" The given pointer encoding is either unknown or invalid.\n","sig":null,"attributes":[{"value":"/ The given pointer encoding is either unknown or invalid.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":107524,"byte_end":107584,"line_start":390,"line_end":390,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9030},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":107668,"byte_end":107688,"line_start":393,"line_end":393,"column_start":5,"column_end":25},"name":"NoEntryAtGivenOffset","qualname":"::read::Error::NoEntryAtGivenOffset","value":"Error::NoEntryAtGivenOffset","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Did not find an entry at the given offset.\n","sig":null,"attributes":[{"value":"/ Did not find an entry at the given offset.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":107617,"byte_end":107663,"line_start":392,"line_end":392,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9032},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":107737,"byte_end":107754,"line_start":395,"line_end":395,"column_start":5,"column_end":22},"name":"OffsetOutOfBounds","qualname":"::read::Error::OffsetOutOfBounds","value":"Error::OffsetOutOfBounds","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" The given offset is out of bounds.\n","sig":null,"attributes":[{"value":"/ The given offset is out of bounds.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":107694,"byte_end":107732,"line_start":394,"line_end":394,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9034},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":107803,"byte_end":107822,"line_start":397,"line_end":397,"column_start":5,"column_end":24},"name":"UnknownAugmentation","qualname":"::read::Error::UnknownAugmentation","value":"Error::UnknownAugmentation","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Found an unknown CFI augmentation.\n","sig":null,"attributes":[{"value":"/ Found an unknown CFI augmentation.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":107760,"byte_end":107798,"line_start":396,"line_end":396,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9036},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":107886,"byte_end":107912,"line_start":399,"line_end":399,"column_start":5,"column_end":31},"name":"UnsupportedPointerEncoding","qualname":"::read::Error::UnsupportedPointerEncoding","value":"Error::UnsupportedPointerEncoding","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" We do not support the given pointer encoding yet.\n","sig":null,"attributes":[{"value":"/ We do not support the given pointer encoding yet.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":107828,"byte_end":107881,"line_start":398,"line_end":398,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9038},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":107973,"byte_end":107992,"line_start":401,"line_end":401,"column_start":5,"column_end":24},"name":"UnsupportedRegister","qualname":"::read::Error::UnsupportedRegister","value":"Error::UnsupportedRegister(u64)","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Registers larger than `u16` are not supported.\n","sig":null,"attributes":[{"value":"/ Registers larger than `u16` are not supported.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":107918,"byte_end":107968,"line_start":400,"line_end":400,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9041},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":108081,"byte_end":108101,"line_start":403,"line_end":403,"column_start":5,"column_end":25},"name":"TooManyRegisterRules","qualname":"::read::Error::TooManyRegisterRules","value":"Error::TooManyRegisterRules","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" The CFI program defined more register rules than we have storage for.\n","sig":null,"attributes":[{"value":"/ The CFI program defined more register rules than we have storage for.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":108003,"byte_end":108076,"line_start":402,"line_end":402,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9043},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":108212,"byte_end":108221,"line_start":406,"line_end":406,"column_start":5,"column_end":14},"name":"StackFull","qualname":"::read::Error::StackFull","value":"Error::StackFull","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Attempted to push onto the CFI or evaluation stack, but it was already\n at full capacity.\n","sig":null,"attributes":[{"value":"/ Attempted to push onto the CFI or evaluation stack, but it was already","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":108107,"byte_end":108181,"line_start":404,"line_end":404,"column_start":5,"column_end":79}},{"value":"/ at full capacity.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":108186,"byte_end":108207,"line_start":405,"line_end":405,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9045},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":108359,"byte_end":108384,"line_start":409,"line_end":409,"column_start":5,"column_end":30},"name":"VariableLengthSearchTable","qualname":"::read::Error::VariableLengthSearchTable","value":"Error::VariableLengthSearchTable","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" The `.eh_frame_hdr` binary search table claims to be variable-length encoded,\n which makes binary search impossible.\n","sig":null,"attributes":[{"value":"/ The `.eh_frame_hdr` binary search table claims to be variable-length encoded,","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":108227,"byte_end":108308,"line_start":407,"line_end":407,"column_start":5,"column_end":86}},{"value":"/ which makes binary search impossible.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":108313,"byte_end":108354,"line_start":408,"line_end":408,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9047},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":108454,"byte_end":108473,"line_start":411,"line_end":411,"column_start":5,"column_end":24},"name":"UnsupportedUnitType","qualname":"::read::Error::UnsupportedUnitType","value":"Error::UnsupportedUnitType","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" The `DW_UT_*` value for this unit is not supported yet.\n","sig":null,"attributes":[{"value":"/ The `DW_UT_*` value for this unit is not supported yet.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":108390,"byte_end":108449,"line_start":410,"line_end":410,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9049},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":108536,"byte_end":108559,"line_start":413,"line_end":413,"column_start":5,"column_end":28},"name":"UnsupportedAddressIndex","qualname":"::read::Error::UnsupportedAddressIndex","value":"Error::UnsupportedAddressIndex","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Ranges using AddressIndex are not supported yet.\n","sig":null,"attributes":[{"value":"/ Ranges using AddressIndex are not supported yet.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":108479,"byte_end":108531,"line_start":412,"line_end":412,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9051},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":108626,"byte_end":108648,"line_start":415,"line_end":415,"column_start":5,"column_end":27},"name":"UnsupportedSegmentSize","qualname":"::read::Error::UnsupportedSegmentSize","value":"Error::UnsupportedSegmentSize","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Nonzero segment selector sizes aren't supported yet.\n","sig":null,"attributes":[{"value":"/ Nonzero segment selector sizes aren't supported yet.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":108565,"byte_end":108621,"line_start":414,"line_end":414,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9053},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":108724,"byte_end":108738,"line_start":417,"line_end":417,"column_start":5,"column_end":19},"name":"MissingUnitDie","qualname":"::read::Error::MissingUnitDie","value":"Error::MissingUnitDie","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" A compilation unit or type unit is missing its top level DIE.\n","sig":null,"attributes":[{"value":"/ A compilation unit or type unit is missing its top level DIE.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":108654,"byte_end":108719,"line_start":416,"line_end":416,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9055},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":108794,"byte_end":108818,"line_start":419,"line_end":419,"column_start":5,"column_end":29},"name":"UnsupportedAttributeForm","qualname":"::read::Error::UnsupportedAttributeForm","value":"Error::UnsupportedAttributeForm","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" A DIE attribute used an unsupported form.\n","sig":null,"attributes":[{"value":"/ A DIE attribute used an unsupported form.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":108744,"byte_end":108789,"line_start":418,"line_end":418,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9057},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":108875,"byte_end":108901,"line_start":421,"line_end":421,"column_start":5,"column_end":31},"name":"MissingFileEntryFormatPath","qualname":"::read::Error::MissingFileEntryFormatPath","value":"Error::MissingFileEntryFormatPath","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Missing DW_LNCT_path in file entry format.\n","sig":null,"attributes":[{"value":"/ Missing DW_LNCT_path in file entry format.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":108824,"byte_end":108870,"line_start":420,"line_end":420,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9059},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":108964,"byte_end":108992,"line_start":423,"line_end":423,"column_start":5,"column_end":33},"name":"ExpectedStringAttributeValue","qualname":"::read::Error::ExpectedStringAttributeValue","value":"Error::ExpectedStringAttributeValue","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Expected an attribute value to be a string form.\n","sig":null,"attributes":[{"value":"/ Expected an attribute value to be a string form.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":108907,"byte_end":108959,"line_start":422,"line_end":422,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9061},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":109059,"byte_end":109079,"line_start":425,"line_end":425,"column_start":5,"column_end":25},"name":"InvalidImplicitConst","qualname":"::read::Error::InvalidImplicitConst","value":"Error::InvalidImplicitConst","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" `DW_FORM_implicit_const` used in an invalid context.\n","sig":null,"attributes":[{"value":"/ `DW_FORM_implicit_const` used in an invalid context.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":108998,"byte_end":109054,"line_start":424,"line_end":424,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9063},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":109132,"byte_end":109156,"line_start":427,"line_end":427,"column_start":5,"column_end":29},"name":"InvalidIndexSectionCount","qualname":"::read::Error::InvalidIndexSectionCount","value":"Error::InvalidIndexSectionCount","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Invalid section count in `.dwp` index.\n","sig":null,"attributes":[{"value":"/ Invalid section count in `.dwp` index.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":109085,"byte_end":109127,"line_start":426,"line_end":426,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9065},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":109206,"byte_end":109227,"line_start":429,"line_end":429,"column_start":5,"column_end":26},"name":"InvalidIndexSlotCount","qualname":"::read::Error::InvalidIndexSlotCount","value":"Error::InvalidIndexSlotCount","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Invalid slot count in `.dwp` index.\n","sig":null,"attributes":[{"value":"/ Invalid slot count in `.dwp` index.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":109162,"byte_end":109201,"line_start":428,"line_end":428,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9067},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":109275,"byte_end":109290,"line_start":431,"line_end":431,"column_start":5,"column_end":20},"name":"InvalidIndexRow","qualname":"::read::Error::InvalidIndexRow","value":"Error::InvalidIndexRow","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Invalid hash row in `.dwp` index.\n","sig":null,"attributes":[{"value":"/ Invalid hash row in `.dwp` index.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":109233,"byte_end":109270,"line_start":430,"line_end":430,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9069},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":109342,"byte_end":109361,"line_start":433,"line_end":433,"column_start":5,"column_end":24},"name":"UnknownIndexSection","qualname":"::read::Error::UnknownIndexSection","value":"Error::UnknownIndexSection","parent":{"krate":0,"index":8908},"children":[],"decl_id":null,"docs":" Unknown section type in `.dwp` index.\n","sig":null,"attributes":[{"value":"/ Unknown section type in `.dwp` index.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":109296,"byte_end":109337,"line_start":432,"line_end":432,"column_start":5,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":8908},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":102447,"byte_end":102452,"line_start":271,"line_end":271,"column_start":10,"column_end":15},"name":"Error","qualname":"::read::Error","value":"pub enum Error {\n    Io,\n    PcRelativePointerButSectionBaseIsUndefined,\n    TextRelativePointerButTextBaseIsUndefined,\n    DataRelativePointerButDataBaseIsUndefined,\n    FuncRelativePointerInBadContext,\n    CannotParseOmitPointerEncoding,\n    BadUnsignedLeb128,\n    BadSignedLeb128,\n    AbbreviationTagZero,\n    AttributeFormZero,\n    BadHasChildren,\n    BadLength,\n    UnknownForm,\n    ExpectedZero,\n    DuplicateAbbreviationCode,\n    DuplicateArange,\n    UnknownReservedLength,\n    UnknownVersion(u64),\n    UnknownAbbreviation,\n    UnexpectedEof(ReaderOffsetId),\n    UnexpectedNull,\n    UnknownStandardOpcode(constants::DwLns),\n    UnknownExtendedOpcode(constants::DwLne),\n    UnsupportedAddressSize(u8),\n    UnsupportedOffsetSize(u8),\n    UnsupportedFieldSize(u8),\n    MinimumInstructionLengthZero,\n    MaximumOperationsPerInstructionZero,\n    LineRangeZero,\n    OpcodeBaseZero,\n    BadUtf8,\n    NotCieId,\n    NotCiePointer,\n    NotFdePointer,\n    BadBranchTarget(u64),\n    InvalidPushObjectAddress,\n    NotEnoughStackItems,\n    TooManyIterations,\n    InvalidExpression(constants::DwOp),\n    UnsupportedEvaluation,\n    InvalidPiece,\n    InvalidExpressionTerminator(u64),\n    DivisionByZero,\n    TypeMismatch,\n    IntegralTypeRequired,\n    UnsupportedTypeOperation,\n    InvalidShiftExpression,\n    UnknownCallFrameInstruction(constants::DwCfa),\n    InvalidAddressRange,\n    InvalidLocationAddressRange,\n    CfiInstructionInInvalidContext,\n    PopWithEmptyStack,\n    NoUnwindInfoForAddress,\n    UnsupportedOffset,\n    UnknownPointerEncoding,\n    NoEntryAtGivenOffset,\n    OffsetOutOfBounds,\n    UnknownAugmentation,\n    UnsupportedPointerEncoding,\n    UnsupportedRegister(u64),\n    TooManyRegisterRules,\n    StackFull,\n    VariableLengthSearchTable,\n    UnsupportedUnitType,\n    UnsupportedAddressIndex,\n    UnsupportedSegmentSize,\n    MissingUnitDie,\n    UnsupportedAttributeForm,\n    MissingFileEntryFormatPath,\n    ExpectedStringAttributeValue,\n    InvalidImplicitConst,\n    InvalidIndexSectionCount,\n    InvalidIndexSlotCount,\n    InvalidIndexRow,\n    UnknownIndexSection,\n}","parent":null,"children":[{"krate":0,"index":8909},{"krate":0,"index":8911},{"krate":0,"index":8913},{"krate":0,"index":8915},{"krate":0,"index":8917},{"krate":0,"index":8919},{"krate":0,"index":8921},{"krate":0,"index":8923},{"krate":0,"index":8925},{"krate":0,"index":8927},{"krate":0,"index":8929},{"krate":0,"index":8931},{"krate":0,"index":8933},{"krate":0,"index":8935},{"krate":0,"index":8937},{"krate":0,"index":8939},{"krate":0,"index":8941},{"krate":0,"index":8943},{"krate":0,"index":8946},{"krate":0,"index":8948},{"krate":0,"index":8951},{"krate":0,"index":8953},{"krate":0,"index":8956},{"krate":0,"index":8959},{"krate":0,"index":8962},{"krate":0,"index":8965},{"krate":0,"index":8968},{"krate":0,"index":8970},{"krate":0,"index":8972},{"krate":0,"index":8974},{"krate":0,"index":8976},{"krate":0,"index":8978},{"krate":0,"index":8980},{"krate":0,"index":8982},{"krate":0,"index":8984},{"krate":0,"index":8987},{"krate":0,"index":8989},{"krate":0,"index":8991},{"krate":0,"index":8993},{"krate":0,"index":8996},{"krate":0,"index":8998},{"krate":0,"index":9000},{"krate":0,"index":9003},{"krate":0,"index":9005},{"krate":0,"index":9007},{"krate":0,"index":9009},{"krate":0,"index":9011},{"krate":0,"index":9013},{"krate":0,"index":9016},{"krate":0,"index":9018},{"krate":0,"index":9020},{"krate":0,"index":9022},{"krate":0,"index":9024},{"krate":0,"index":9026},{"krate":0,"index":9028},{"krate":0,"index":9030},{"krate":0,"index":9032},{"krate":0,"index":9034},{"krate":0,"index":9036},{"krate":0,"index":9038},{"krate":0,"index":9041},{"krate":0,"index":9043},{"krate":0,"index":9045},{"krate":0,"index":9047},{"krate":0,"index":9049},{"krate":0,"index":9051},{"krate":0,"index":9053},{"krate":0,"index":9055},{"krate":0,"index":9057},{"krate":0,"index":9059},{"krate":0,"index":9061},{"krate":0,"index":9063},{"krate":0,"index":9065},{"krate":0,"index":9067},{"krate":0,"index":9069}],"decl_id":null,"docs":" An error that occurred when parsing.\n","sig":null,"attributes":[{"value":"/ An error that occurred when parsing.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":102352,"byte_end":102392,"line_start":269,"line_end":269,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2988},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":109615,"byte_end":109626,"line_start":445,"line_end":445,"column_start":12,"column_end":23},"name":"description","qualname":"<Error>::description","value":"pub fn description(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" A short description of the error.\n","sig":null,"attributes":[{"value":"/ A short description of the error.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":109566,"byte_end":109603,"line_start":444,"line_end":444,"column_start":5,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":2989},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":118244,"byte_end":118250,"line_start":598,"line_end":598,"column_start":10,"column_end":16},"name":"Result","qualname":"::read::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" The result of a parse.\n","sig":null,"attributes":[{"value":"/ The result of a parse.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":118208,"byte_end":118234,"line_start":597,"line_end":597,"column_start":1,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":2991},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":118704,"byte_end":118711,"line_start":612,"line_end":612,"column_start":11,"column_end":18},"name":"Section","qualname":"::read::Section","value":"Section<R>: From<R>","parent":null,"children":[{"krate":0,"index":2993},{"krate":0,"index":2994},{"krate":0,"index":2995},{"krate":0,"index":2996},{"krate":0,"index":2999},{"krate":0,"index":3000},{"krate":0,"index":3001}],"decl_id":null,"docs":" A convenience trait for loading DWARF sections from object files.  To be\n used like:","sig":null,"attributes":[{"value":"/ A convenience trait for loading DWARF sections from object files.  To be","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":118283,"byte_end":118359,"line_start":600,"line_end":600,"column_start":1,"column_end":77}},{"value":"/ used like:","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":118360,"byte_end":118374,"line_start":601,"line_end":601,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":118375,"byte_end":118378,"line_start":602,"line_end":602,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":118379,"byte_end":118386,"line_start":603,"line_end":603,"column_start":1,"column_end":8}},{"value":"/ use gimli::{DebugInfo, EndianSlice, LittleEndian, Reader, Section};","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":118387,"byte_end":118458,"line_start":604,"line_end":604,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":118459,"byte_end":118462,"line_start":605,"line_end":605,"column_start":1,"column_end":4}},{"value":"/ let buf = [0x00, 0x01, 0x02, 0x03];","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":118463,"byte_end":118502,"line_start":606,"line_end":606,"column_start":1,"column_end":40}},{"value":"/ let reader = EndianSlice::new(&buf, LittleEndian);","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":118503,"byte_end":118557,"line_start":607,"line_end":607,"column_start":1,"column_end":55}},{"value":"/ let loader = |name| -> Result<_, ()> { Ok(reader) };","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":118558,"byte_end":118614,"line_start":608,"line_end":608,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":118615,"byte_end":118618,"line_start":609,"line_end":609,"column_start":1,"column_end":4}},{"value":"/ let debug_info: DebugInfo<_> = Section::load(loader).unwrap();","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":118619,"byte_end":118685,"line_start":610,"line_end":610,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":118686,"byte_end":118693,"line_start":611,"line_end":611,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2993},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":118779,"byte_end":118781,"line_start":614,"line_end":614,"column_start":8,"column_end":10},"name":"id","qualname":"::read::Section::id","value":"pub fn id() -> SectionId","parent":{"krate":0,"index":2991},"children":[],"decl_id":null,"docs":" Returns the section id for this type.\n","sig":null,"attributes":[{"value":"/ Returns the section id for this type.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":118730,"byte_end":118771,"line_start":613,"line_end":613,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2994},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":118858,"byte_end":118870,"line_start":617,"line_end":617,"column_start":8,"column_end":20},"name":"section_name","qualname":"::read::Section::section_name","value":"pub fn section_name() -> &'static str","parent":{"krate":0,"index":2991},"children":[],"decl_id":null,"docs":" Returns the ELF section name for this type.\n","sig":null,"attributes":[{"value":"/ Returns the ELF section name for this type.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":118803,"byte_end":118850,"line_start":616,"line_end":616,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2995},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":119024,"byte_end":119040,"line_start":623,"line_end":623,"column_start":8,"column_end":24},"name":"dwo_section_name","qualname":"::read::Section::dwo_section_name","value":"pub fn dwo_section_name() -> Option<&'static str>","parent":{"krate":0,"index":2991},"children":[],"decl_id":null,"docs":" Returns the ELF section name (if any) for this type when used in a dwo\n file.\n","sig":null,"attributes":[{"value":"/ Returns the ELF section name (if any) for this type when used in a dwo","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":118928,"byte_end":119002,"line_start":621,"line_end":621,"column_start":5,"column_end":79}},{"value":"/ file.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":119007,"byte_end":119016,"line_start":622,"line_end":622,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2996},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":119178,"byte_end":119182,"line_start":628,"line_end":628,"column_start":8,"column_end":12},"name":"load","qualname":"::read::Section::load","value":"pub fn load<F, E>(F) -> core::result::Result<Self, E> where\nF: FnOnce(SectionId) -> core::result::Result<R, E>","parent":{"krate":0,"index":2991},"children":[],"decl_id":null,"docs":" Try to load the section using the given loader function.\n","sig":null,"attributes":[{"value":"/ Try to load the section using the given loader function.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":119110,"byte_end":119170,"line_start":627,"line_end":627,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2999},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":119403,"byte_end":119409,"line_start":636,"line_end":636,"column_start":8,"column_end":14},"name":"reader","qualname":"::read::Section::reader","value":"pub fn reader(&Self) -> &R where R: Reader","parent":{"krate":0,"index":2991},"children":[],"decl_id":null,"docs":" Returns the `Reader` for this section.\n","sig":null,"attributes":[{"value":"/ Returns the `Reader` for this section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":119353,"byte_end":119395,"line_start":635,"line_end":635,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":3000},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":119565,"byte_end":119574,"line_start":642,"line_end":642,"column_start":8,"column_end":17},"name":"dwp_range","qualname":"::read::Section::dwp_range","value":"pub fn dwp_range(&Self, u32, u32) -> Result<Self> where R: Reader","parent":{"krate":0,"index":2991},"children":[],"decl_id":null,"docs":" Returns the subrange of the section that is the contribution of\n a unit in a `.dwp` file.\n","sig":null,"attributes":[{"value":"/ Returns the subrange of the section that is the contribution of","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":119457,"byte_end":119524,"line_start":640,"line_end":640,"column_start":5,"column_end":72}},{"value":"/ a unit in a `.dwp` file.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":119529,"byte_end":119557,"line_start":641,"line_end":641,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3001},"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":119888,"byte_end":119904,"line_start":653,"line_end":653,"column_start":8,"column_end":24},"name":"lookup_offset_id","qualname":"::read::Section::lookup_offset_id","value":"pub fn lookup_offset_id(&Self, ReaderOffsetId)\n-> Option<(SectionId, R::Offset)> where R: Reader","parent":{"krate":0,"index":2991},"children":[],"decl_id":null,"docs":" Returns the `Reader` for this section.\n","sig":null,"attributes":[{"value":"/ Returns the `Reader` for this section.","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":119838,"byte_end":119880,"line_start":652,"line_end":652,"column_start":5,"column_end":47}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":2411,"byte_end":2417,"line_start":10,"line_end":10,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":7},{"krate":0,"index":8}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":4160,"byte_end":4172,"line_start":70,"line_end":70,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":10}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":8685,"byte_end":8701,"line_start":184,"line_end":184,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":13}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":8946,"byte_end":8959,"line_start":195,"line_end":195,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":9439,"byte_end":9456,"line_start":211,"line_end":211,"column_start":38,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":9610,"byte_end":9627,"line_start":217,"line_end":217,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":9753,"byte_end":9770,"line_start":223,"line_end":223,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11755,"byte_end":11764,"line_start":292,"line_end":292,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":14752,"byte_end":14765,"line_start":359,"line_end":359,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":54221,"byte_end":54227,"line_start":879,"line_end":879,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":66128,"byte_end":66134,"line_start":1335,"line_end":1335,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":73276,"byte_end":73289,"line_start":183,"line_end":183,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":73555,"byte_end":73568,"line_start":197,"line_end":197,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":73793,"byte_end":73805,"line_start":208,"line_end":208,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":73906,"byte_end":73918,"line_start":215,"line_end":215,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":74113,"byte_end":74122,"line_start":226,"line_end":226,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":74217,"byte_end":74226,"line_start":233,"line_end":233,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":127580,"byte_end":127583,"line_start":76,"line_end":76,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":128118,"byte_end":128121,"line_start":94,"line_end":94,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":128441,"byte_end":128449,"line_start":111,"line_end":111,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":130506,"byte_end":130514,"line_start":176,"line_end":176,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":130931,"byte_end":130939,"line_start":187,"line_end":187,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":131032,"byte_end":131040,"line_start":193,"line_end":193,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":131136,"byte_end":131144,"line_start":199,"line_end":199,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":131466,"byte_end":131474,"line_start":210,"line_end":210,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":131790,"byte_end":131798,"line_start":219,"line_end":219,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":132044,"byte_end":132052,"line_start":232,"line_end":232,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":132190,"byte_end":132198,"line_start":241,"line_end":241,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":132258,"byte_end":132266,"line_start":243,"line_end":243,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":132684,"byte_end":132693,"line_start":10,"line_end":10,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":133991,"byte_end":134000,"line_start":43,"line_end":43,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":134813,"byte_end":134822,"line_start":67,"line_end":67,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":285}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":134971,"byte_end":134980,"line_start":77,"line_end":77,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":138138,"byte_end":138148,"line_start":39,"line_end":39,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":138708,"byte_end":138718,"line_start":57,"line_end":57,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":139548,"byte_end":139558,"line_start":81,"line_end":81,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":388},{"krate":0,"index":389}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":139716,"byte_end":139726,"line_start":91,"line_end":91,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":140599,"byte_end":140609,"line_start":121,"line_end":121,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":140906,"byte_end":140916,"line_start":131,"line_end":131,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":142655,"byte_end":142665,"line_start":180,"line_end":180,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":402},{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":142817,"byte_end":142827,"line_start":190,"line_end":190,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":142920,"byte_end":142936,"line_start":196,"line_end":196,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":409},{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":144249,"byte_end":144259,"line_start":227,"line_end":227,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":418},{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":150654,"byte_end":150661,"line_start":412,"line_end":412,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":150903,"byte_end":150910,"line_start":421,"line_end":421,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":151744,"byte_end":151751,"line_start":445,"line_end":445,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":151906,"byte_end":151913,"line_start":455,"line_end":455,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":152690,"byte_end":152706,"line_start":486,"line_end":486,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":152830,"byte_end":152843,"line_start":496,"line_end":496,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":160468,"byte_end":160478,"line_start":698,"line_end":698,"column_start":46,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":161421,"byte_end":161431,"line_start":738,"line_end":738,"column_start":38,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":485}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":161532,"byte_end":161539,"line_start":742,"line_end":742,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":162348,"byte_end":162355,"line_start":778,"line_end":778,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":498}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":164503,"byte_end":164516,"line_start":836,"line_end":836,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":167211,"byte_end":167225,"line_start":918,"line_end":918,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":172905,"byte_end":172917,"line_start":1067,"line_end":1067,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":175450,"byte_end":175466,"line_start":1140,"line_end":1140,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":178981,"byte_end":179003,"line_start":1225,"line_end":1225,"column_start":17,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":181577,"byte_end":181599,"line_start":1309,"line_end":1309,"column_start":17,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":539},{"krate":0,"index":541},{"krate":0,"index":543},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":186186,"byte_end":186214,"line_start":1448,"line_end":1448,"column_start":26,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":557},{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":189022,"byte_end":189043,"line_start":1530,"line_end":1530,"column_start":17,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":562},{"krate":0,"index":565},{"krate":0,"index":567},{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":193153,"byte_end":193174,"line_start":1651,"line_end":1651,"column_start":17,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":591}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197985,"byte_end":197996,"line_start":1793,"line_end":1793,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":599},{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":200171,"byte_end":200184,"line_start":1844,"line_end":1844,"column_start":55,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":200534,"byte_end":200547,"line_start":1854,"line_end":1854,"column_start":57,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":200656,"byte_end":200669,"line_start":1861,"line_end":1861,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":201016,"byte_end":201029,"line_start":1872,"line_end":1872,"column_start":45,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":207804,"byte_end":207815,"line_start":2063,"line_end":2063,"column_start":55,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":638},{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":219362,"byte_end":219377,"line_start":2363,"line_end":2363,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":655}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":219613,"byte_end":219628,"line_start":2371,"line_end":2371,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":219796,"byte_end":219811,"line_start":2379,"line_end":2379,"column_start":57,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":663}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":220121,"byte_end":220136,"line_start":2391,"line_end":2391,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":671},{"krate":0,"index":675}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":221510,"byte_end":221525,"line_start":2440,"line_end":2440,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":680}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":222115,"byte_end":222130,"line_start":2460,"line_end":2460,"column_start":51,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":222662,"byte_end":222677,"line_start":2483,"line_end":2483,"column_start":44,"column_end":59},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":222932,"byte_end":222948,"line_start":2491,"line_end":2491,"column_start":37,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":693},{"krate":0,"index":694}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":223536,"byte_end":223550,"line_start":2510,"line_end":2510,"column_start":55,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":224001,"byte_end":224015,"line_start":2522,"line_end":2522,"column_start":55,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":702}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":224367,"byte_end":224381,"line_start":2534,"line_end":2534,"column_start":57,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":224675,"byte_end":224689,"line_start":2546,"line_end":2546,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":231146,"byte_end":231153,"line_start":2672,"line_end":2672,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":720}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":231316,"byte_end":231323,"line_start":2681,"line_end":2681,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":723}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":233125,"byte_end":233137,"line_start":2733,"line_end":2733,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":726}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":245001,"byte_end":245021,"line_start":3032,"line_end":3032,"column_start":17,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":731}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":253138,"byte_end":253162,"line_start":3244,"line_end":3244,"column_start":21,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":735}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":254818,"byte_end":254825,"line_start":3301,"line_end":3301,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":739}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":254924,"byte_end":254931,"line_start":3308,"line_end":3308,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":741}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":255080,"byte_end":255087,"line_start":3317,"line_end":3317,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":743}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400998,"byte_end":401003,"line_start":64,"line_end":64,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":951},{"krate":0,"index":954},{"krate":0,"index":957},{"krate":0,"index":962}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":405572,"byte_end":405577,"line_start":169,"line_end":169,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":985},{"krate":0,"index":986},{"krate":0,"index":987},{"krate":0,"index":988},{"krate":0,"index":989},{"krate":0,"index":990},{"krate":0,"index":991},{"krate":0,"index":1007}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":421621,"byte_end":421633,"line_start":615,"line_end":615,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1010},{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1015},{"krate":0,"index":1016},{"krate":0,"index":1017}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":429643,"byte_end":429647,"line_start":832,"line_end":832,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1020},{"krate":0,"index":1021},{"krate":0,"index":1022},{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1027}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":436097,"byte_end":436114,"line_start":995,"line_end":995,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1030}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":437215,"byte_end":437225,"line_start":1025,"line_end":1025,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1034}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":438258,"byte_end":438267,"line_start":1057,"line_end":1057,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1038}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":438373,"byte_end":438382,"line_start":1063,"line_end":1063,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1041}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":441588,"byte_end":441599,"line_start":25,"line_end":25,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1097},{"krate":0,"index":1098}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":444452,"byte_end":444463,"line_start":111,"line_end":111,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1104}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":446370,"byte_end":446381,"line_start":170,"line_end":170,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1108},{"krate":0,"index":1109}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":446585,"byte_end":446596,"line_start":180,"line_end":180,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1113},{"krate":0,"index":1114}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":446795,"byte_end":446806,"line_start":190,"line_end":190,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1118},{"krate":0,"index":1119}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":446989,"byte_end":447000,"line_start":200,"line_end":200,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1123}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":447144,"byte_end":447155,"line_start":209,"line_end":209,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1127},{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1130},{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1133},{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1136},{"krate":0,"index":1137},{"krate":0,"index":1139},{"krate":0,"index":1140},{"krate":0,"index":1141},{"krate":0,"index":1142},{"krate":0,"index":1143},{"krate":0,"index":1144}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":466358,"byte_end":466369,"line_start":23,"line_end":23,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1340}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":467198,"byte_end":467209,"line_start":46,"line_end":46,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1343}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":467683,"byte_end":467694,"line_start":61,"line_end":61,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1346}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":468526,"byte_end":468537,"line_start":85,"line_end":85,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1352},{"krate":0,"index":1353}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":468701,"byte_end":468712,"line_start":95,"line_end":95,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1356}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":469154,"byte_end":469167,"line_start":114,"line_end":114,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1358},{"krate":0,"index":1359},{"krate":0,"index":1360},{"krate":0,"index":1361}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":471882,"byte_end":471894,"line_start":192,"line_end":192,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1364},{"krate":0,"index":1365},{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1368},{"krate":0,"index":1369},{"krate":0,"index":1371},{"krate":0,"index":1373},{"krate":0,"index":1375}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":474901,"byte_end":474911,"line_start":299,"line_end":299,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1379},{"krate":0,"index":1381}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":475814,"byte_end":475824,"line_start":330,"line_end":330,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1383}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":475943,"byte_end":475953,"line_start":336,"line_end":336,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1385}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":476052,"byte_end":476062,"line_start":342,"line_end":342,"column_start":13,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":476082,"byte_end":476092,"line_start":344,"line_end":344,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1388},{"krate":0,"index":1389}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":476381,"byte_end":476391,"line_start":354,"line_end":354,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1391}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":476690,"byte_end":476700,"line_start":367,"line_end":367,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1394}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":477077,"byte_end":477099,"line_start":382,"line_end":382,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1396},{"krate":0,"index":1397},{"krate":0,"index":1398},{"krate":0,"index":1399},{"krate":0,"index":1400},{"krate":0,"index":1402},{"krate":0,"index":1404}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":499084,"byte_end":499096,"line_start":12,"line_end":12,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1450}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":499916,"byte_end":499928,"line_start":38,"line_end":38,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1453},{"krate":0,"index":1454}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":500543,"byte_end":500555,"line_start":57,"line_end":57,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1457}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":501377,"byte_end":501389,"line_start":81,"line_end":81,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1463},{"krate":0,"index":1464}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":501541,"byte_end":501553,"line_start":91,"line_end":91,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1467}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":501840,"byte_end":501856,"line_start":104,"line_end":104,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1470}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":503174,"byte_end":503186,"line_start":152,"line_end":152,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1474},{"krate":0,"index":1476},{"krate":0,"index":1477},{"krate":0,"index":1478},{"krate":0,"index":1479},{"krate":0,"index":1480},{"krate":0,"index":1481}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":506692,"byte_end":506707,"line_start":262,"line_end":262,"column_start":17,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1484}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":508062,"byte_end":508073,"line_start":306,"line_end":306,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1486},{"krate":0,"index":1488},{"krate":0,"index":1489},{"krate":0,"index":1490},{"krate":0,"index":1491}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":519285,"byte_end":519297,"line_start":16,"line_end":16,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1528}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":519612,"byte_end":519624,"line_start":27,"line_end":27,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1531},{"krate":0,"index":1532}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":519776,"byte_end":519788,"line_start":37,"line_end":37,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1535}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":519886,"byte_end":519898,"line_start":43,"line_end":43,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1538}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":520256,"byte_end":520268,"line_start":58,"line_end":58,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1542}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":520583,"byte_end":520595,"line_start":69,"line_end":69,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1545},{"krate":0,"index":1546}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":520747,"byte_end":520759,"line_start":79,"line_end":79,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1549}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":520857,"byte_end":520869,"line_start":85,"line_end":85,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1552}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":521437,"byte_end":521446,"line_start":109,"line_end":109,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1556},{"krate":0,"index":1559},{"krate":0,"index":1560},{"krate":0,"index":1561},{"krate":0,"index":1562},{"krate":0,"index":1563},{"krate":0,"index":1564}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":527914,"byte_end":527938,"line_start":283,"line_end":283,"column_start":38,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1568},{"krate":0,"index":1569}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":537886,"byte_end":537895,"line_start":21,"line_end":21,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1644}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":538704,"byte_end":538713,"line_start":44,"line_end":44,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1647}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":540352,"byte_end":540361,"line_start":84,"line_end":84,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1650}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":541185,"byte_end":541194,"line_start":108,"line_end":108,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1656},{"krate":0,"index":1657}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":541354,"byte_end":541363,"line_start":118,"line_end":118,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1660}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":542270,"byte_end":542291,"line_start":142,"line_end":142,"column_start":44,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1672},{"krate":0,"index":1673}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":543986,"byte_end":543994,"line_start":195,"line_end":195,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1695},{"krate":0,"index":1696},{"krate":0,"index":1698},{"krate":0,"index":1699}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":552705,"byte_end":552720,"line_start":405,"line_end":405,"column_start":17,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1705}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":557370,"byte_end":557385,"line_start":523,"line_end":523,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1710}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":560544,"byte_end":560560,"line_start":589,"line_end":589,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1715}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":560858,"byte_end":560874,"line_start":598,"line_end":598,"column_start":17,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1718}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":562585,"byte_end":562592,"line_start":652,"line_end":652,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1721},{"krate":0,"index":1723},{"krate":0,"index":1724},{"krate":0,"index":1725},{"krate":0,"index":1726},{"krate":0,"index":1729},{"krate":0,"index":1730},{"krate":0,"index":1731},{"krate":0,"index":1732},{"krate":0,"index":1733},{"krate":0,"index":1734},{"krate":0,"index":1735},{"krate":0,"index":1736},{"krate":0,"index":1737},{"krate":0,"index":1738},{"krate":0,"index":1741},{"krate":0,"index":1743},{"krate":0,"index":1744},{"krate":0,"index":1746},{"krate":0,"index":1748}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":577794,"byte_end":577811,"line_start":1077,"line_end":1077,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1758},{"krate":0,"index":1759},{"krate":0,"index":1760},{"krate":0,"index":1761},{"krate":0,"index":1762},{"krate":0,"index":1763},{"krate":0,"index":1764},{"krate":0,"index":1765},{"krate":0,"index":1766},{"krate":0,"index":1767},{"krate":0,"index":1768},{"krate":0,"index":1769},{"krate":0,"index":1770},{"krate":0,"index":1771},{"krate":0,"index":1772},{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1777},{"krate":0,"index":1779},{"krate":0,"index":1781},{"krate":0,"index":1783},{"krate":0,"index":1784},{"krate":0,"index":1785},{"krate":0,"index":1786},{"krate":0,"index":1787}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":589804,"byte_end":589825,"line_start":1439,"line_end":1439,"column_start":17,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1796},{"krate":0,"index":1797},{"krate":0,"index":1798}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":593116,"byte_end":593135,"line_start":1532,"line_end":1532,"column_start":17,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1805},{"krate":0,"index":1806}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":594710,"byte_end":594719,"line_start":1585,"line_end":1585,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1811},{"krate":0,"index":1813},{"krate":0,"index":1814},{"krate":0,"index":1815},{"krate":0,"index":1816},{"krate":0,"index":1817},{"krate":0,"index":1818},{"krate":0,"index":1819},{"krate":0,"index":1820}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":598004,"byte_end":598019,"line_start":1683,"line_end":1683,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1823}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/lists.rs","byte_start":645195,"byte_end":645206,"line_start":10,"line_end":10,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1852}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/lists.rs","byte_start":645467,"byte_end":645478,"line_start":23,"line_end":23,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1854},{"krate":0,"index":1855}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":647383,"byte_end":647391,"line_start":18,"line_end":18,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1930}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":648177,"byte_end":648185,"line_start":41,"line_end":41,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1933},{"krate":0,"index":1934}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":648333,"byte_end":648341,"line_start":51,"line_end":51,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1937}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":648629,"byte_end":648642,"line_start":64,"line_end":64,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1941}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":649468,"byte_end":649481,"line_start":87,"line_end":87,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1944},{"krate":0,"index":1945}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":649634,"byte_end":649647,"line_start":97,"line_end":97,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1948}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":649790,"byte_end":649807,"line_start":105,"line_end":105,"column_start":14,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1952}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":650839,"byte_end":650852,"line_start":133,"line_end":133,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1955}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":651178,"byte_end":651191,"line_start":144,"line_end":144,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1958}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":652134,"byte_end":652147,"line_start":171,"line_end":171,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1964},{"krate":0,"index":1965},{"krate":0,"index":1966},{"krate":0,"index":1967},{"krate":0,"index":1968},{"krate":0,"index":1970}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":659490,"byte_end":659505,"line_start":402,"line_end":402,"column_start":17,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1976}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":662993,"byte_end":663007,"line_start":471,"line_end":471,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1979},{"krate":0,"index":1980}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":664552,"byte_end":664563,"line_start":525,"line_end":525,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1983},{"krate":0,"index":1984},{"krate":0,"index":1985}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/lookup.rs","byte_start":699643,"byte_end":699654,"line_start":41,"line_end":41,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2026}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/lookup.rs","byte_start":699874,"byte_end":699885,"line_start":54,"line_end":54,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2030},{"krate":0,"index":2031}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/lookup.rs","byte_start":700451,"byte_end":700466,"line_start":81,"line_end":81,"column_start":17,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2035}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/lookup.rs","byte_start":702760,"byte_end":702774,"line_start":155,"line_end":155,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2042},{"krate":0,"index":2043},{"krate":0,"index":2044},{"krate":0,"index":2045}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":715499,"byte_end":715507,"line_start":342,"line_end":342,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2104}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":717471,"byte_end":717480,"line_start":400,"line_end":400,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2112}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":739505,"byte_end":739515,"line_start":923,"line_end":923,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2115},{"krate":0,"index":2116}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":740878,"byte_end":740891,"line_start":964,"line_end":964,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2119},{"krate":0,"index":2120}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":743479,"byte_end":743490,"line_start":1041,"line_end":1041,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2128},{"krate":0,"index":2129},{"krate":0,"index":2130}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":746394,"byte_end":746404,"line_start":1120,"line_end":1120,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2133},{"krate":0,"index":2134}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":747185,"byte_end":747195,"line_start":1143,"line_end":1143,"column_start":42,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2138},{"krate":0,"index":2139},{"krate":0,"index":2140},{"krate":0,"index":2141},{"krate":0,"index":2142},{"krate":0,"index":2143},{"krate":0,"index":2145},{"krate":0,"index":2147},{"krate":0,"index":2148},{"krate":0,"index":2149},{"krate":0,"index":2150},{"krate":0,"index":2151},{"krate":0,"index":2152},{"krate":0,"index":2153},{"krate":0,"index":2154},{"krate":0,"index":2156},{"krate":0,"index":2157},{"krate":0,"index":2158},{"krate":0,"index":2159},{"krate":0,"index":2160},{"krate":0,"index":2161},{"krate":0,"index":2162}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":847556,"byte_end":847569,"line_start":14,"line_end":14,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2209},{"krate":0,"index":2210},{"krate":0,"index":2211}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":848160,"byte_end":848173,"line_start":33,"line_end":33,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2214}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":848697,"byte_end":848710,"line_start":52,"line_end":52,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2218}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849549,"byte_end":849562,"line_start":76,"line_end":76,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2221}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":850262,"byte_end":850275,"line_start":97,"line_end":97,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2224},{"krate":0,"index":2225}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":850438,"byte_end":850451,"line_start":107,"line_end":107,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2228}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":850880,"byte_end":850897,"line_start":120,"line_end":120,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2231}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":852157,"byte_end":852170,"line_start":14,"line_end":14,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2275},{"krate":0,"index":2276},{"krate":0,"index":2277}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":852797,"byte_end":852810,"line_start":33,"line_end":33,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2280}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":853330,"byte_end":853343,"line_start":52,"line_end":52,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2284}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":854166,"byte_end":854179,"line_start":76,"line_end":76,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2287}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":854879,"byte_end":854892,"line_start":97,"line_end":97,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2290},{"krate":0,"index":2291}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":855055,"byte_end":855068,"line_start":107,"line_end":107,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2294}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":855497,"byte_end":855514,"line_start":120,"line_end":120,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2297}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":856839,"byte_end":856850,"line_start":18,"line_end":18,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2362}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":857660,"byte_end":857671,"line_start":41,"line_end":41,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2365},{"krate":0,"index":2366}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":857822,"byte_end":857833,"line_start":51,"line_end":51,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2369}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":858116,"byte_end":858129,"line_start":64,"line_end":64,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2373}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":858967,"byte_end":858980,"line_start":88,"line_end":88,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2376},{"krate":0,"index":2377}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":859133,"byte_end":859146,"line_start":98,"line_end":98,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2380}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":859306,"byte_end":859323,"line_start":107,"line_end":107,"column_start":14,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2384}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":860361,"byte_end":860371,"line_start":135,"line_end":135,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2387},{"krate":0,"index":2388},{"krate":0,"index":2389},{"krate":0,"index":2390}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":861234,"byte_end":861244,"line_start":163,"line_end":163,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2393}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":862181,"byte_end":862191,"line_start":190,"line_end":190,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2399},{"krate":0,"index":2400},{"krate":0,"index":2401},{"krate":0,"index":2403}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":867175,"byte_end":867190,"line_start":351,"line_end":351,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2407}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":869877,"byte_end":869891,"line_start":408,"line_end":408,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2411},{"krate":0,"index":2412}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":871443,"byte_end":871454,"line_start":462,"line_end":462,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2415},{"krate":0,"index":2416},{"krate":0,"index":2417}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":874483,"byte_end":874491,"line_start":554,"line_end":554,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2419},{"krate":0,"index":2420},{"krate":0,"index":2421}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":875726,"byte_end":875731,"line_start":593,"line_end":593,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2424}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":899091,"byte_end":899099,"line_start":16,"line_end":16,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2474}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":899898,"byte_end":899906,"line_start":39,"line_end":39,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2477}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":900673,"byte_end":900681,"line_start":59,"line_end":59,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2480}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":901501,"byte_end":901509,"line_start":83,"line_end":83,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2486},{"krate":0,"index":2487}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":901667,"byte_end":901675,"line_start":93,"line_end":93,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2490}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":901937,"byte_end":901952,"line_start":105,"line_end":105,"column_start":17,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2493}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":903308,"byte_end":903323,"line_start":137,"line_end":137,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2496}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":904154,"byte_end":904169,"line_start":161,"line_end":161,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2502},{"krate":0,"index":2503}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":904324,"byte_end":904339,"line_start":171,"line_end":171,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2506}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":904437,"byte_end":904456,"line_start":177,"line_end":177,"column_start":14,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2509}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":905594,"byte_end":905606,"line_start":208,"line_end":208,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2513}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":906447,"byte_end":906459,"line_start":231,"line_end":231,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2516}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":906765,"byte_end":906777,"line_start":240,"line_end":240,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2519}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":907599,"byte_end":907611,"line_start":264,"line_end":264,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2525},{"krate":0,"index":2526}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":907763,"byte_end":907775,"line_start":274,"line_end":274,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2529}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":910299,"byte_end":910315,"line_start":22,"line_end":22,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2676}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":910928,"byte_end":910943,"line_start":39,"line_end":39,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2680}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":911555,"byte_end":911565,"line_start":56,"line_end":56,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2684},{"krate":0,"index":2686}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":912775,"byte_end":912784,"line_start":87,"line_end":87,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2691}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913593,"byte_end":913602,"line_start":110,"line_end":110,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2694},{"krate":0,"index":2695}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":914774,"byte_end":914783,"line_start":145,"line_end":145,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2698}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":915607,"byte_end":915616,"line_start":169,"line_end":169,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2704},{"krate":0,"index":2705}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":915776,"byte_end":915785,"line_start":179,"line_end":179,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2708}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":916202,"byte_end":916226,"line_start":195,"line_end":195,"column_start":17,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2711}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":919843,"byte_end":919851,"line_start":292,"line_end":292,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2720}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":921014,"byte_end":921024,"line_start":328,"line_end":328,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2724}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":921625,"byte_end":921635,"line_start":354,"line_end":354,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2728},{"krate":0,"index":2729},{"krate":0,"index":2730},{"krate":0,"index":2731},{"krate":0,"index":2732},{"krate":0,"index":2733},{"krate":0,"index":2734},{"krate":0,"index":2735},{"krate":0,"index":2736},{"krate":0,"index":2737},{"krate":0,"index":2738},{"krate":0,"index":2739},{"krate":0,"index":2740},{"krate":0,"index":2741},{"krate":0,"index":2742},{"krate":0,"index":2743},{"krate":0,"index":2746},{"krate":0,"index":2749},{"krate":0,"index":2752},{"krate":0,"index":2755},{"krate":0,"index":2758}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":932311,"byte_end":932336,"line_start":670,"line_end":670,"column_start":33,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2769},{"krate":0,"index":2770},{"krate":0,"index":2771},{"krate":0,"index":2772},{"krate":0,"index":2773},{"krate":0,"index":2774},{"krate":0,"index":2776},{"krate":0,"index":2777},{"krate":0,"index":2780},{"krate":0,"index":2783},{"krate":0,"index":2784},{"krate":0,"index":2785}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":948009,"byte_end":948018,"line_start":1127,"line_end":1127,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2788},{"krate":0,"index":2789},{"krate":0,"index":2790},{"krate":0,"index":2808},{"krate":0,"index":2809},{"krate":0,"index":2810},{"krate":0,"index":2811},{"krate":0,"index":2812},{"krate":0,"index":2813},{"krate":0,"index":2814},{"krate":0,"index":2815}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":970428,"byte_end":970442,"line_start":1811,"line_end":1811,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2819},{"krate":0,"index":2820},{"krate":0,"index":2821},{"krate":0,"index":2822},{"krate":0,"index":2823},{"krate":0,"index":2824},{"krate":0,"index":2825},{"krate":0,"index":2826}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":990006,"byte_end":990015,"line_start":2291,"line_end":2291,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2848}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":994263,"byte_end":994273,"line_start":2406,"line_end":2406,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2853},{"krate":0,"index":2854},{"krate":0,"index":2855},{"krate":0,"index":2856},{"krate":0,"index":2857},{"krate":0,"index":2858}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":997230,"byte_end":997243,"line_start":2488,"line_end":2488,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2863},{"krate":0,"index":2864},{"krate":0,"index":2865},{"krate":0,"index":2866}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1010240,"byte_end":1010251,"line_start":2874,"line_end":2874,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2871},{"krate":0,"index":2872},{"krate":0,"index":2874}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1014428,"byte_end":1014443,"line_start":2999,"line_end":2999,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2880},{"krate":0,"index":2881},{"krate":0,"index":2882}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1015653,"byte_end":1015668,"line_start":3035,"line_end":3035,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2888},{"krate":0,"index":2889}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1017068,"byte_end":1017078,"line_start":3080,"line_end":3080,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2898}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1017889,"byte_end":1017899,"line_start":3103,"line_end":3103,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2901}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1018727,"byte_end":1018737,"line_start":3127,"line_end":3127,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2907},{"krate":0,"index":2908}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1018899,"byte_end":1018909,"line_start":3137,"line_end":3137,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2911}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1019050,"byte_end":1019060,"line_start":3145,"line_end":3145,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2914}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1020239,"byte_end":1020264,"line_start":3182,"line_end":3182,"column_start":17,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2917}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130519,"byte_end":1130528,"line_start":82,"line_end":82,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2946},{"krate":0,"index":2947},{"krate":0,"index":2948}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1133333,"byte_end":1133338,"line_start":154,"line_end":154,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2951},{"krate":0,"index":2952},{"krate":0,"index":2954},{"krate":0,"index":2955},{"krate":0,"index":2956},{"krate":0,"index":2957},{"krate":0,"index":2958},{"krate":0,"index":2959},{"krate":0,"index":2960},{"krate":0,"index":2961},{"krate":0,"index":2962},{"krate":0,"index":2963},{"krate":0,"index":2964},{"krate":0,"index":2965},{"krate":0,"index":2966},{"krate":0,"index":2967},{"krate":0,"index":2968},{"krate":0,"index":2969},{"krate":0,"index":2970},{"krate":0,"index":2971},{"krate":0,"index":2972},{"krate":0,"index":2973},{"krate":0,"index":2974},{"krate":0,"index":2975},{"krate":0,"index":2976},{"krate":0,"index":2977},{"krate":0,"index":2978},{"krate":0,"index":2979},{"krate":0,"index":2980}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":109388,"byte_end":109393,"line_start":436,"line_end":436,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2986}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":109554,"byte_end":109559,"line_start":443,"line_end":443,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2988}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Inherent","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":120119,"byte_end":120127,"line_start":663,"line_end":663,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3004}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":1808,"byte_end":1817,"line_start":57,"line_end":57,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":39}},{"kind":"Mod","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":1991,"byte_end":1997,"line_start":64,"line_end":64,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":111}},{"kind":"Mod","span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/lib.rs","byte_start":2038,"byte_end":2042,"line_start":67,"line_end":67,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":145}}],"macro_refs":[],"relations":[{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":2411,"byte_end":2417,"line_start":10,"line_end":10,"column_start":6,"column_end":12},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":3006},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":4160,"byte_end":4172,"line_start":70,"line_end":70,"column_start":18,"column_end":30},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":3046},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":8685,"byte_end":8701,"line_start":184,"line_end":184,"column_start":21,"column_end":37},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":3611},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":8946,"byte_end":8959,"line_start":195,"line_end":195,"column_start":21,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":3638},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":9439,"byte_end":9456,"line_start":211,"line_end":211,"column_start":38,"column_end":55},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":3665},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":9610,"byte_end":9627,"line_start":217,"line_end":217,"column_start":39,"column_end":56},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":3665},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":9753,"byte_end":9770,"line_start":223,"line_end":223,"column_start":9,"column_end":26},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":3665},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":11755,"byte_end":11764,"line_start":292,"line_end":292,"column_start":6,"column_end":15},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":3702},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/common.rs","byte_start":14752,"byte_end":14765,"line_start":359,"line_end":359,"column_start":18,"column_end":31},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":3783},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":54221,"byte_end":54227,"line_start":879,"line_end":879,"column_start":6,"column_end":12},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":5307},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/constants.rs","byte_start":66128,"byte_end":66134,"line_start":1335,"line_end":1335,"column_start":6,"column_end":12},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":5966},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":68957,"byte_end":68962,"line_start":7,"line_end":7,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":9394},"to":{"krate":0,"index":62}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":68965,"byte_end":68972,"line_start":7,"line_end":7,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":2994},"to":{"krate":0,"index":62}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":68975,"byte_end":68980,"line_start":7,"line_end":7,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":1,"index":2637},"to":{"krate":0,"index":62}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":68983,"byte_end":68987,"line_start":7,"line_end":7,"column_start":48,"column_end":52},"kind":"SuperTrait","from":{"krate":1,"index":3026},"to":{"krate":0,"index":62}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":68990,"byte_end":68999,"line_start":7,"line_end":7,"column_start":55,"column_end":64},"kind":"SuperTrait","from":{"krate":1,"index":2667},"to":{"krate":0,"index":62}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":69002,"byte_end":69004,"line_start":7,"line_end":7,"column_start":67,"column_end":69},"kind":"SuperTrait","from":{"krate":1,"index":2672},"to":{"krate":0,"index":62}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":73276,"byte_end":73289,"line_start":183,"line_end":183,"column_start":18,"column_end":31},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":5988},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":73555,"byte_end":73568,"line_start":197,"line_end":197,"column_start":20,"column_end":33},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":5988},"to":{"krate":0,"index":62}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":73793,"byte_end":73805,"line_start":208,"line_end":208,"column_start":18,"column_end":30},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":6007},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":73906,"byte_end":73918,"line_start":215,"line_end":215,"column_start":20,"column_end":32},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":6007},"to":{"krate":0,"index":62}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":74113,"byte_end":74122,"line_start":226,"line_end":226,"column_start":18,"column_end":27},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":6023},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/endianity.rs","byte_start":74217,"byte_end":74226,"line_start":233,"line_end":233,"column_start":20,"column_end":29},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":6023},"to":{"krate":0,"index":62}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":126365,"byte_end":126371,"line_start":32,"line_end":32,"column_start":22,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":189},"to":{"krate":0,"index":194}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":127580,"byte_end":127583,"line_start":76,"line_end":76,"column_start":27,"column_end":30},"kind":{"Impl":{"id":17}},"from":{"krate":4,"index":7063},"to":{"krate":0,"index":189}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":128118,"byte_end":128121,"line_start":94,"line_end":94,"column_start":23,"column_end":26},"kind":{"Impl":{"id":18}},"from":{"krate":4,"index":7063},"to":{"krate":0,"index":194}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":128441,"byte_end":128449,"line_start":111,"line_end":111,"column_start":20,"column_end":28},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":209},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":130506,"byte_end":130514,"line_start":176,"line_end":176,"column_start":9,"column_end":17},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":209},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":130931,"byte_end":130939,"line_start":187,"line_end":187,"column_start":29,"column_end":37},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":209},"to":{"krate":1,"index":3251}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":131032,"byte_end":131040,"line_start":193,"line_end":193,"column_start":32,"column_end":40},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":209},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":131136,"byte_end":131144,"line_start":199,"line_end":199,"column_start":35,"column_end":43},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":209},"to":{"krate":1,"index":3227}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":131466,"byte_end":131474,"line_start":210,"line_end":210,"column_start":38,"column_end":46},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":209},"to":{"krate":1,"index":3240}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":131790,"byte_end":131798,"line_start":219,"line_end":219,"column_start":30,"column_end":38},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":209},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":132044,"byte_end":132052,"line_start":232,"line_end":232,"column_start":34,"column_end":42},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":209},"to":{"krate":1,"index":2667}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":132190,"byte_end":132198,"line_start":241,"line_end":241,"column_start":27,"column_end":35},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":209},"to":{"krate":1,"index":2672}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/util.rs","byte_start":132258,"byte_end":132266,"line_start":243,"line_end":243,"column_start":35,"column_end":43},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":209},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":132684,"byte_end":132693,"line_start":10,"line_end":10,"column_start":17,"column_end":26},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":6178},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":133991,"byte_end":134000,"line_start":43,"line_end":43,"column_start":9,"column_end":18},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":6178},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":134813,"byte_end":134822,"line_start":67,"line_end":67,"column_start":24,"column_end":33},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":6178},"to":{"krate":0,"index":2991}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/addr.rs","byte_start":134971,"byte_end":134980,"line_start":77,"line_end":77,"column_start":21,"column_end":30},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":6178},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":138138,"byte_end":138148,"line_start":39,"line_end":39,"column_start":17,"column_end":27},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":6192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":138708,"byte_end":138718,"line_start":57,"line_end":57,"column_start":22,"column_end":32},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":6192},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":139548,"byte_end":139558,"line_start":81,"line_end":81,"column_start":32,"column_end":42},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":6192},"to":{"krate":0,"index":2991}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":139716,"byte_end":139726,"line_start":91,"line_end":91,"column_start":29,"column_end":39},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":6192},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":140599,"byte_end":140609,"line_start":121,"line_end":121,"column_start":22,"column_end":32},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":6216},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":140906,"byte_end":140916,"line_start":131,"line_end":131,"column_start":17,"column_end":27},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":6216},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":142655,"byte_end":142665,"line_start":180,"line_end":180,"column_start":32,"column_end":42},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":6216},"to":{"krate":0,"index":2991}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":142817,"byte_end":142827,"line_start":190,"line_end":190,"column_start":29,"column_end":39},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":6216},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":142920,"byte_end":142936,"line_start":196,"line_end":196,"column_start":17,"column_end":33},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":6239},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":144249,"byte_end":144259,"line_start":227,"line_end":227,"column_start":26,"column_end":36},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":6253},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":150654,"byte_end":150661,"line_start":412,"line_end":412,"column_start":17,"column_end":24},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":6265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":150903,"byte_end":150910,"line_start":421,"line_end":421,"column_start":22,"column_end":29},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":6265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":151744,"byte_end":151751,"line_start":445,"line_end":445,"column_start":32,"column_end":39},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":6265},"to":{"krate":0,"index":2991}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":151906,"byte_end":151913,"line_start":455,"line_end":455,"column_start":29,"column_end":36},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":6265},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":152529,"byte_end":152533,"line_start":478,"line_end":478,"column_start":36,"column_end":40},"kind":"SuperTrait","from":{"krate":1,"index":3026},"to":{"krate":0,"index":438}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":152536,"byte_end":152541,"line_start":478,"line_end":478,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":9394},"to":{"krate":0,"index":438}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":152544,"byte_end":152546,"line_start":478,"line_end":478,"column_start":51,"column_end":53},"kind":"SuperTrait","from":{"krate":1,"index":2672},"to":{"krate":0,"index":438}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":152549,"byte_end":152553,"line_start":478,"line_end":478,"column_start":56,"column_end":60},"kind":"SuperTrait","from":{"krate":1,"index":2922},"to":{"krate":0,"index":438}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":152690,"byte_end":152706,"line_start":486,"line_end":486,"column_start":29,"column_end":45},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":3611},"to":{"krate":0,"index":438}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":152830,"byte_end":152843,"line_start":496,"line_end":496,"column_start":29,"column_end":42},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":3638},"to":{"krate":0,"index":438}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":154790,"byte_end":154795,"line_start":546,"line_end":546,"column_start":37,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":2637},"to":{"krate":0,"index":457}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":154798,"byte_end":154803,"line_start":546,"line_end":546,"column_start":45,"column_end":50},"kind":"SuperTrait","from":{"krate":1,"index":9394},"to":{"krate":0,"index":457}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":154806,"byte_end":154827,"line_start":546,"line_end":546,"column_start":53,"column_end":74},"kind":"SuperTrait","from":{"krate":0,"index":447},"to":{"krate":0,"index":457}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":160468,"byte_end":160478,"line_start":698,"line_end":698,"column_start":46,"column_end":56},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":6192},"to":{"krate":0,"index":447}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":161421,"byte_end":161431,"line_start":738,"line_end":738,"column_start":38,"column_end":48},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":6192},"to":{"krate":0,"index":457}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":161532,"byte_end":161539,"line_start":742,"line_end":742,"column_start":46,"column_end":53},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":6265},"to":{"krate":0,"index":447}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":162348,"byte_end":162355,"line_start":778,"line_end":778,"column_start":38,"column_end":45},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":6265},"to":{"krate":0,"index":457}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":164503,"byte_end":164516,"line_start":836,"line_end":836,"column_start":6,"column_end":19},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":6304},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":167211,"byte_end":167225,"line_start":918,"line_end":918,"column_start":26,"column_end":40},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":6337},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":172905,"byte_end":172917,"line_start":1067,"line_end":1067,"column_start":6,"column_end":18},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":6393},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":175450,"byte_end":175466,"line_start":1140,"line_end":1140,"column_start":6,"column_end":22},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":6412},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":178981,"byte_end":179003,"line_start":1225,"line_end":1225,"column_start":17,"column_end":39},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":6427},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":181577,"byte_end":181599,"line_start":1309,"line_end":1309,"column_start":17,"column_end":39},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":6427},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":186186,"byte_end":186214,"line_start":1448,"line_end":1448,"column_start":26,"column_end":54},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":6464},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":189022,"byte_end":189043,"line_start":1530,"line_end":1530,"column_start":17,"column_end":38},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":6504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":193153,"byte_end":193174,"line_start":1651,"line_end":1651,"column_start":17,"column_end":38},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":6504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197547,"byte_end":197552,"line_start":1779,"line_end":1779,"column_start":44,"column_end":49},"kind":"SuperTrait","from":{"krate":1,"index":3021},"to":{"krate":0,"index":592}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":197985,"byte_end":197996,"line_start":1793,"line_end":1793,"column_start":45,"column_end":56},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":8895},"to":{"krate":0,"index":592}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":200171,"byte_end":200184,"line_start":1844,"line_end":1844,"column_start":55,"column_end":68},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":6539},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":200534,"byte_end":200547,"line_start":1854,"line_end":1854,"column_start":57,"column_end":70},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":6539},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":200656,"byte_end":200669,"line_start":1861,"line_end":1861,"column_start":17,"column_end":30},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":6539},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":201016,"byte_end":201029,"line_start":1872,"line_end":1872,"column_start":45,"column_end":58},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":6539},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":207804,"byte_end":207815,"line_start":2063,"line_end":2063,"column_start":55,"column_end":66},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":6564},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":219362,"byte_end":219377,"line_start":2363,"line_end":2363,"column_start":55,"column_end":70},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":648},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":219613,"byte_end":219628,"line_start":2371,"line_end":2371,"column_start":55,"column_end":70},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":648},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":219796,"byte_end":219811,"line_start":2379,"line_end":2379,"column_start":57,"column_end":72},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":648},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":220121,"byte_end":220136,"line_start":2391,"line_end":2391,"column_start":45,"column_end":60},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":648},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":221510,"byte_end":221525,"line_start":2440,"line_end":2440,"column_start":9,"column_end":24},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":648},"to":{"krate":1,"index":7462}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":222115,"byte_end":222130,"line_start":2460,"line_end":2460,"column_start":51,"column_end":66},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":648},"to":{"krate":1,"index":2667}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":222662,"byte_end":222677,"line_start":2483,"line_end":2483,"column_start":44,"column_end":59},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":648},"to":{"krate":1,"index":2672}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":222932,"byte_end":222948,"line_start":2491,"line_end":2491,"column_start":37,"column_end":53},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":6583},"to":{"krate":1,"index":7646}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":223536,"byte_end":223550,"line_start":2510,"line_end":2510,"column_start":55,"column_end":69},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":6596},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":224001,"byte_end":224015,"line_start":2522,"line_end":2522,"column_start":55,"column_end":69},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":6596},"to":{"krate":1,"index":2637}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":224367,"byte_end":224381,"line_start":2534,"line_end":2534,"column_start":57,"column_end":71},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":6596},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":224675,"byte_end":224689,"line_start":2546,"line_end":2546,"column_start":45,"column_end":59},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":6596},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":231146,"byte_end":231153,"line_start":2672,"line_end":2672,"column_start":29,"column_end":36},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":6619},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":231316,"byte_end":231323,"line_start":2681,"line_end":2681,"column_start":17,"column_end":24},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":6619},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":233125,"byte_end":233137,"line_start":2733,"line_end":2733,"column_start":17,"column_end":29},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":6644},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":245001,"byte_end":245021,"line_start":3032,"line_end":3032,"column_start":17,"column_end":37},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":6684},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":253138,"byte_end":253162,"line_start":3244,"line_end":3244,"column_start":21,"column_end":45},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":6756},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":254818,"byte_end":254825,"line_start":3301,"line_end":3301,"column_start":18,"column_end":25},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":6770},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":254924,"byte_end":254931,"line_start":3308,"line_end":3308,"column_start":20,"column_end":27},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":6770},"to":{"krate":1,"index":2919}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/cfi.rs","byte_start":255080,"byte_end":255087,"line_start":3317,"line_end":3317,"column_start":6,"column_end":13},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":6770},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":400998,"byte_end":401003,"line_start":64,"line_end":64,"column_start":9,"column_end":14},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":6804},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":405572,"byte_end":405577,"line_start":169,"line_end":169,"column_start":17,"column_end":22},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":6804},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":421621,"byte_end":421633,"line_start":615,"line_end":615,"column_start":17,"column_end":29},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":6825},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":429643,"byte_end":429647,"line_start":832,"line_end":832,"column_start":17,"column_end":21},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":6842},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":436097,"byte_end":436114,"line_start":995,"line_end":995,"column_start":23,"column_end":40},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":3665},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":437215,"byte_end":437225,"line_start":1025,"line_end":1025,"column_start":23,"column_end":33},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":8344},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":438258,"byte_end":438267,"line_start":1057,"line_end":1057,"column_start":29,"column_end":38},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":6860},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/dwarf.rs","byte_start":438373,"byte_end":438382,"line_start":1063,"line_end":1063,"column_start":17,"column_end":26},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":6860},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":441588,"byte_end":441599,"line_start":25,"line_end":25,"column_start":22,"column_end":33},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":6878},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":444452,"byte_end":444463,"line_start":111,"line_end":111,"column_start":22,"column_end":33},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":6878},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":446370,"byte_end":446381,"line_start":170,"line_end":170,"column_start":39,"column_end":50},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":6878},"to":{"krate":1,"index":3312}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":446585,"byte_end":446596,"line_start":180,"line_end":180,"column_start":50,"column_end":61},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":6878},"to":{"krate":1,"index":3312}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":446795,"byte_end":446806,"line_start":190,"line_end":190,"column_start":32,"column_end":43},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":6878},"to":{"krate":1,"index":3227}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":446989,"byte_end":447000,"line_start":200,"line_end":200,"column_start":45,"column_end":56},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":6878},"to":{"krate":1,"index":2919}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/endian_slice.rs","byte_start":447144,"byte_end":447155,"line_start":209,"line_end":209,"column_start":33,"column_end":44},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":6878},"to":{"krate":0,"index":1221}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451353,"byte_end":451358,"line_start":25,"line_end":25,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":9394},"to":{"krate":0,"index":1185}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451361,"byte_end":451365,"line_start":25,"line_end":25,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":3026},"to":{"krate":0,"index":1185}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451368,"byte_end":451370,"line_start":25,"line_end":25,"column_start":20,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":2672},"to":{"krate":0,"index":1185}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451373,"byte_end":451376,"line_start":25,"line_end":25,"column_start":25,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2703},"to":{"krate":0,"index":1185}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451379,"byte_end":451383,"line_start":25,"line_end":25,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":9600},"to":{"krate":0,"index":1185}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451386,"byte_end":451389,"line_start":25,"line_end":25,"column_start":38,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":3083},"to":{"krate":0,"index":1185}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451407,"byte_end":451416,"line_start":25,"line_end":25,"column_start":59,"column_end":68},"kind":"SuperTrait","from":{"krate":1,"index":3114},"to":{"krate":0,"index":1185}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":451419,"byte_end":451422,"line_start":25,"line_end":25,"column_start":71,"column_end":74},"kind":"SuperTrait","from":{"krate":1,"index":3088},"to":{"krate":0,"index":1185}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":456413,"byte_end":456418,"line_start":215,"line_end":215,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":9394},"to":{"krate":0,"index":1221}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/reader.rs","byte_start":456421,"byte_end":456426,"line_start":215,"line_end":215,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":2637},"to":{"krate":0,"index":1221}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":466358,"byte_end":466369,"line_start":23,"line_end":23,"column_start":22,"column_end":33},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":6933},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":467198,"byte_end":467209,"line_start":46,"line_end":46,"column_start":17,"column_end":28},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":6933},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":467683,"byte_end":467694,"line_start":61,"line_end":61,"column_start":9,"column_end":20},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":6933},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":468526,"byte_end":468537,"line_start":85,"line_end":85,"column_start":24,"column_end":35},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":6933},"to":{"krate":0,"index":2991}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":468701,"byte_end":468712,"line_start":95,"line_end":95,"column_start":21,"column_end":32},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":6933},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":469154,"byte_end":469167,"line_start":114,"line_end":114,"column_start":6,"column_end":19},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":6947},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":471882,"byte_end":471894,"line_start":192,"line_end":192,"column_start":6,"column_end":18},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":6956},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":474901,"byte_end":474911,"line_start":299,"line_end":299,"column_start":6,"column_end":16},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":6972},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":475814,"byte_end":475824,"line_start":330,"line_end":330,"column_start":16,"column_end":26},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":6972},"to":{"krate":1,"index":9394}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":475943,"byte_end":475953,"line_start":336,"line_end":336,"column_start":20,"column_end":30},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":6972},"to":{"krate":1,"index":2667}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":476052,"byte_end":476062,"line_start":342,"line_end":342,"column_start":13,"column_end":23},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":6972},"to":{"krate":1,"index":2672}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":476082,"byte_end":476092,"line_start":344,"line_end":344,"column_start":16,"column_end":26},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":6972},"to":{"krate":1,"index":3227}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":476381,"byte_end":476391,"line_start":354,"line_end":354,"column_start":47,"column_end":57},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":6972},"to":{"krate":1,"index":7462}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":476690,"byte_end":476700,"line_start":367,"line_end":367,"column_start":44,"column_end":54},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":6972},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/abbrev.rs","byte_start":477077,"byte_end":477099,"line_start":382,"line_end":382,"column_start":6,"column_end":28},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":6982},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":499084,"byte_end":499096,"line_start":12,"line_end":12,"column_start":22,"column_end":34},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":6998},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":499916,"byte_end":499928,"line_start":38,"line_end":38,"column_start":17,"column_end":29},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":6998},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":500543,"byte_end":500555,"line_start":57,"line_end":57,"column_start":9,"column_end":21},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":6998},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":501377,"byte_end":501389,"line_start":81,"line_end":81,"column_start":24,"column_end":36},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":6998},"to":{"krate":0,"index":2991}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":501541,"byte_end":501553,"line_start":91,"line_end":91,"column_start":21,"column_end":33},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":6998},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":501840,"byte_end":501856,"line_start":104,"line_end":104,"column_start":17,"column_end":33},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":7012},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":503174,"byte_end":503186,"line_start":152,"line_end":152,"column_start":17,"column_end":29},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":7022},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":506692,"byte_end":506707,"line_start":262,"line_end":262,"column_start":17,"column_end":32},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":7054},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/aranges.rs","byte_start":508062,"byte_end":508073,"line_start":306,"line_end":306,"column_start":6,"column_end":17},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":7065},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":519285,"byte_end":519297,"line_start":16,"line_end":16,"column_start":22,"column_end":34},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":7084},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":519612,"byte_end":519624,"line_start":27,"line_end":27,"column_start":24,"column_end":36},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":7084},"to":{"krate":0,"index":2991}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":519776,"byte_end":519788,"line_start":37,"line_end":37,"column_start":21,"column_end":33},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":7084},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":519886,"byte_end":519898,"line_start":43,"line_end":43,"column_start":17,"column_end":29},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":7084},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":520256,"byte_end":520268,"line_start":58,"line_end":58,"column_start":22,"column_end":34},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":7098},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":520583,"byte_end":520595,"line_start":69,"line_end":69,"column_start":24,"column_end":36},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":7098},"to":{"krate":0,"index":2991}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":520747,"byte_end":520759,"line_start":79,"line_end":79,"column_start":21,"column_end":33},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":7098},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":520857,"byte_end":520869,"line_start":85,"line_end":85,"column_start":17,"column_end":29},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":7098},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":521437,"byte_end":521446,"line_start":109,"line_end":109,"column_start":17,"column_end":26},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":7112},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/index.rs","byte_start":527914,"byte_end":527938,"line_start":283,"line_end":283,"column_start":38,"column_end":62},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":7130},"to":{"krate":1,"index":7646}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":537886,"byte_end":537895,"line_start":21,"line_end":21,"column_start":22,"column_end":31},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":7160},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":538704,"byte_end":538713,"line_start":44,"line_end":44,"column_start":17,"column_end":26},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":7160},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":540352,"byte_end":540361,"line_start":84,"line_end":84,"column_start":9,"column_end":18},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":7160},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":541185,"byte_end":541194,"line_start":108,"line_end":108,"column_start":24,"column_end":33},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":7160},"to":{"krate":0,"index":2991}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":541354,"byte_end":541363,"line_start":118,"line_end":118,"column_start":21,"column_end":30},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":7160},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":542270,"byte_end":542291,"line_start":142,"line_end":142,"column_start":44,"column_end":65},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":7386},"to":{"krate":0,"index":1664}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":543986,"byte_end":543994,"line_start":195,"line_end":195,"column_start":26,"column_end":34},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":7174},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":552705,"byte_end":552720,"line_start":405,"line_end":405,"column_start":17,"column_end":32},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":7191},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":557370,"byte_end":557385,"line_start":523,"line_end":523,"column_start":34,"column_end":49},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":7191},"to":{"krate":1,"index":9401}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":560544,"byte_end":560560,"line_start":589,"line_end":589,"column_start":17,"column_end":33},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":7279},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":560858,"byte_end":560874,"line_start":598,"line_end":598,"column_start":17,"column_end":33},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":7279},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":562585,"byte_end":562592,"line_start":652,"line_end":652,"column_start":6,"column_end":13},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":7288},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":577794,"byte_end":577811,"line_start":1077,"line_end":1077,"column_start":17,"column_end":34},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":7346},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":589804,"byte_end":589825,"line_start":1439,"line_end":1439,"column_start":17,"column_end":38},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":7386},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":593116,"byte_end":593135,"line_start":1532,"line_end":1532,"column_start":17,"column_end":36},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":7413},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":594710,"byte_end":594719,"line_start":1585,"line_end":1585,"column_start":17,"column_end":26},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":7440},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/line.rs","byte_start":598004,"byte_end":598019,"line_start":1683,"line_end":1683,"column_start":6,"column_end":21},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":7476},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/lists.rs","byte_start":645195,"byte_end":645206,"line_start":10,"line_end":10,"column_start":18,"column_end":29},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":7491},"to":{"krate":1,"index":2994}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/lists.rs","byte_start":645467,"byte_end":645478,"line_start":23,"line_end":23,"column_start":6,"column_end":17},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":7491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":647383,"byte_end":647391,"line_start":18,"line_end":18,"column_start":22,"column_end":30},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":7499},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":648177,"byte_end":648185,"line_start":41,"line_end":41,"column_start":24,"column_end":32},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":7499},"to":{"krate":0,"index":2991}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":648333,"byte_end":648341,"line_start":51,"line_end":51,"column_start":21,"column_end":29},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":7499},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":648629,"byte_end":648642,"line_start":64,"line_end":64,"column_start":22,"column_end":35},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":7513},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":649468,"byte_end":649481,"line_start":87,"line_end":87,"column_start":24,"column_end":37},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":7513},"to":{"krate":0,"index":2991}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":649634,"byte_end":649647,"line_start":97,"line_end":97,"column_start":21,"column_end":34},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":7513},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":649790,"byte_end":649807,"line_start":105,"line_end":105,"column_start":14,"column_end":31},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":3291},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":650839,"byte_end":650852,"line_start":133,"line_end":133,"column_start":9,"column_end":22},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":7527},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":651178,"byte_end":651191,"line_start":144,"line_end":144,"column_start":9,"column_end":22},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":7527},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":652134,"byte_end":652147,"line_start":171,"line_end":171,"column_start":17,"column_end":30},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":7527},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":659490,"byte_end":659505,"line_start":402,"line_end":402,"column_start":17,"column_end":32},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":7566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":662993,"byte_end":663007,"line_start":471,"line_end":471,"column_start":17,"column_end":31},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":7558},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/loclists.rs","byte_start":664552,"byte_end":664563,"line_start":525,"line_end":525,"column_start":17,"column_end":28},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":7604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/lookup.rs","byte_start":699643,"byte_end":699654,"line_start":41,"line_end":41,"column_start":29,"column_end":40},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":7640},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/lookup.rs","byte_start":699874,"byte_end":699885,"line_start":54,"line_end":54,"column_start":17,"column_end":28},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":7640},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/lookup.rs","byte_start":700451,"byte_end":700466,"line_start":81,"line_end":81,"column_start":17,"column_end":32},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":7653},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/lookup.rs","byte_start":702760,"byte_end":702774,"line_start":155,"line_end":155,"column_start":36,"column_end":50},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":7690},"to":{"krate":0,"index":2017}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":715499,"byte_end":715507,"line_start":342,"line_end":342,"column_start":17,"column_end":25},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":7886},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":717471,"byte_end":717480,"line_start":400,"line_end":400,"column_start":17,"column_end":26},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":7729},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":739505,"byte_end":739515,"line_start":923,"line_end":923,"column_start":17,"column_end":27},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":8041},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":740878,"byte_end":740891,"line_start":964,"line_end":964,"column_start":17,"column_end":30},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":8068},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":743479,"byte_end":743490,"line_start":1041,"line_end":1041,"column_start":42,"column_end":53},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":8895},"to":{"krate":0,"index":2121}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":746394,"byte_end":746404,"line_start":1120,"line_end":1120,"column_start":17,"column_end":27},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":8080},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/op.rs","byte_start":747185,"byte_end":747195,"line_start":1143,"line_end":1143,"column_start":42,"column_end":52},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":8080},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":847556,"byte_end":847569,"line_start":14,"line_end":14,"column_start":17,"column_end":30},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":8098},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":848160,"byte_end":848173,"line_start":33,"line_end":33,"column_start":38,"column_end":51},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":8098},"to":{"krate":0,"index":2036}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":848697,"byte_end":848710,"line_start":52,"line_end":52,"column_start":22,"column_end":35},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":8109},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":849549,"byte_end":849562,"line_start":76,"line_end":76,"column_start":17,"column_end":30},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":8109},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":850262,"byte_end":850275,"line_start":97,"line_end":97,"column_start":32,"column_end":45},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":8109},"to":{"krate":0,"index":2991}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":850438,"byte_end":850451,"line_start":107,"line_end":107,"column_start":29,"column_end":42},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":8109},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubnames.rs","byte_start":850880,"byte_end":850897,"line_start":120,"line_end":120,"column_start":17,"column_end":34},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":8119},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":852157,"byte_end":852170,"line_start":14,"line_end":14,"column_start":17,"column_end":30},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":8129},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":852797,"byte_end":852810,"line_start":33,"line_end":33,"column_start":38,"column_end":51},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":8129},"to":{"krate":0,"index":2036}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":853330,"byte_end":853343,"line_start":52,"line_end":52,"column_start":22,"column_end":35},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":8140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":854166,"byte_end":854179,"line_start":76,"line_end":76,"column_start":17,"column_end":30},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":8140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":854879,"byte_end":854892,"line_start":97,"line_end":97,"column_start":32,"column_end":45},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":8140},"to":{"krate":0,"index":2991}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":855055,"byte_end":855068,"line_start":107,"line_end":107,"column_start":29,"column_end":42},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":8140},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/pubtypes.rs","byte_start":855497,"byte_end":855514,"line_start":120,"line_end":120,"column_start":17,"column_end":34},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":8150},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":856839,"byte_end":856850,"line_start":18,"line_end":18,"column_start":22,"column_end":33},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":8160},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":857660,"byte_end":857671,"line_start":41,"line_end":41,"column_start":24,"column_end":35},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":8160},"to":{"krate":0,"index":2991}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":857822,"byte_end":857833,"line_start":51,"line_end":51,"column_start":21,"column_end":32},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":8160},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":858116,"byte_end":858129,"line_start":64,"line_end":64,"column_start":22,"column_end":35},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":8174},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":858967,"byte_end":858980,"line_start":88,"line_end":88,"column_start":24,"column_end":37},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":8174},"to":{"krate":0,"index":2991}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":859133,"byte_end":859146,"line_start":98,"line_end":98,"column_start":21,"column_end":34},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":8174},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":859306,"byte_end":859323,"line_start":107,"line_end":107,"column_start":14,"column_end":31},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":3445},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":860361,"byte_end":860371,"line_start":135,"line_end":135,"column_start":9,"column_end":19},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":8188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":861234,"byte_end":861244,"line_start":163,"line_end":163,"column_start":9,"column_end":19},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":8188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":862181,"byte_end":862191,"line_start":190,"line_end":190,"column_start":17,"column_end":27},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":8188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":867175,"byte_end":867190,"line_start":351,"line_end":351,"column_start":23,"column_end":38},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":8227},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":869877,"byte_end":869891,"line_start":408,"line_end":408,"column_start":17,"column_end":31},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":8219},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":871443,"byte_end":871454,"line_start":462,"line_end":462,"column_start":17,"column_end":28},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":8257},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":874483,"byte_end":874491,"line_start":554,"line_end":554,"column_start":6,"column_end":14},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":8266},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/rnglists.rs","byte_start":875726,"byte_end":875731,"line_start":593,"line_end":593,"column_start":6,"column_end":11},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":8284},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":899091,"byte_end":899099,"line_start":16,"line_end":16,"column_start":22,"column_end":30},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":8302},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":899898,"byte_end":899906,"line_start":39,"line_end":39,"column_start":17,"column_end":25},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":8302},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":900673,"byte_end":900681,"line_start":59,"line_end":59,"column_start":9,"column_end":17},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":8302},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":901501,"byte_end":901509,"line_start":83,"line_end":83,"column_start":24,"column_end":32},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":8302},"to":{"krate":0,"index":2991}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":901667,"byte_end":901675,"line_start":93,"line_end":93,"column_start":21,"column_end":29},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":8302},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":901937,"byte_end":901952,"line_start":105,"line_end":105,"column_start":17,"column_end":32},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":8316},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":903308,"byte_end":903323,"line_start":137,"line_end":137,"column_start":9,"column_end":24},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":8316},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":904154,"byte_end":904169,"line_start":161,"line_end":161,"column_start":24,"column_end":39},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":8316},"to":{"krate":0,"index":2991}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":904324,"byte_end":904339,"line_start":171,"line_end":171,"column_start":21,"column_end":36},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":8316},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":904437,"byte_end":904456,"line_start":177,"line_end":177,"column_start":14,"column_end":33},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":3514},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":905594,"byte_end":905606,"line_start":208,"line_end":208,"column_start":22,"column_end":34},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":8330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":906447,"byte_end":906459,"line_start":231,"line_end":231,"column_start":17,"column_end":29},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":8330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":906765,"byte_end":906777,"line_start":240,"line_end":240,"column_start":9,"column_end":21},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":8330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":907599,"byte_end":907611,"line_start":264,"line_end":264,"column_start":24,"column_end":36},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":8330},"to":{"krate":0,"index":2991}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/str.rs","byte_start":907763,"byte_end":907775,"line_start":274,"line_end":274,"column_start":21,"column_end":33},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":8330},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":910299,"byte_end":910315,"line_start":22,"line_end":22,"column_start":23,"column_end":39},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":3560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":910928,"byte_end":910943,"line_start":39,"line_end":39,"column_start":23,"column_end":38},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":3185},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":911555,"byte_end":911565,"line_start":56,"line_end":56,"column_start":23,"column_end":33},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":8344},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":912775,"byte_end":912784,"line_start":87,"line_end":87,"column_start":22,"column_end":31},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":8377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":913593,"byte_end":913602,"line_start":110,"line_end":110,"column_start":17,"column_end":26},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":8377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":914774,"byte_end":914783,"line_start":145,"line_end":145,"column_start":9,"column_end":18},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":8377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":915607,"byte_end":915616,"line_start":169,"line_end":169,"column_start":24,"column_end":33},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":8377},"to":{"krate":0,"index":2991}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":915776,"byte_end":915785,"line_start":179,"line_end":179,"column_start":21,"column_end":30},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":8377},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":916202,"byte_end":916226,"line_start":195,"line_end":195,"column_start":17,"column_end":41},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":8391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":919843,"byte_end":919851,"line_start":292,"line_end":292,"column_start":14,"column_end":22},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":8401},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":921014,"byte_end":921024,"line_start":328,"line_end":328,"column_start":17,"column_end":27},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":8438},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":921625,"byte_end":921635,"line_start":354,"line_end":354,"column_start":17,"column_end":27},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":8438},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":932311,"byte_end":932336,"line_start":670,"line_end":670,"column_start":33,"column_end":58},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":8473},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":948009,"byte_end":948018,"line_start":1127,"line_end":1127,"column_start":17,"column_end":26},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":8662},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":970428,"byte_end":970442,"line_start":1811,"line_end":1811,"column_start":17,"column_end":31},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":8495},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":990006,"byte_end":990015,"line_start":2291,"line_end":2291,"column_start":41,"column_end":50},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":8685},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":994263,"byte_end":994273,"line_start":2406,"line_end":2406,"column_start":33,"column_end":43},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":8710},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":997230,"byte_end":997243,"line_start":2488,"line_end":2488,"column_start":33,"column_end":46},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":8728},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1010240,"byte_end":1010251,"line_start":2874,"line_end":2874,"column_start":33,"column_end":44},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":8747},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1014428,"byte_end":1014443,"line_start":2999,"line_end":2999,"column_start":40,"column_end":55},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":8767},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1015653,"byte_end":1015668,"line_start":3035,"line_end":3035,"column_start":40,"column_end":55},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":8780},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1017068,"byte_end":1017078,"line_start":3080,"line_end":3080,"column_start":22,"column_end":32},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":8794},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1017889,"byte_end":1017899,"line_start":3103,"line_end":3103,"column_start":9,"column_end":19},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":8794},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1018727,"byte_end":1018737,"line_start":3127,"line_end":3127,"column_start":24,"column_end":34},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":8794},"to":{"krate":0,"index":2991}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1018899,"byte_end":1018909,"line_start":3137,"line_end":3137,"column_start":21,"column_end":31},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":8794},"to":{"krate":1,"index":2922}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1019050,"byte_end":1019060,"line_start":3145,"line_end":3145,"column_start":17,"column_end":27},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":8794},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/unit.rs","byte_start":1020239,"byte_end":1020264,"line_start":3182,"line_end":3182,"column_start":17,"column_end":42},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":8808},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1130519,"byte_end":1130528,"line_start":82,"line_end":82,"column_start":6,"column_end":15},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":8818},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/value.rs","byte_start":1133333,"byte_end":1133338,"line_start":154,"line_end":154,"column_start":6,"column_end":11},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":8852},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":109388,"byte_end":109393,"line_start":436,"line_end":436,"column_start":23,"column_end":28},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":8908},"to":{"krate":1,"index":9401}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":109554,"byte_end":109559,"line_start":443,"line_end":443,"column_start":6,"column_end":11},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":8908},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":118716,"byte_end":118720,"line_start":612,"line_end":612,"column_start":23,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":2922},"to":{"krate":0,"index":2991}},{"span":{"file_name":"/usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/gimli-0.26.1/src/read/mod.rs","byte_start":120119,"byte_end":120127,"line_start":663,"line_end":663,"column_start":6,"column_end":14},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":3067},"to":{"krate":4294967295,"index":4294967295}}]}